{
  "id": "stt",
  "title": "SpeechRecognition 클래스로 웹 음성 인식 기능 구현하기",
  "content": "\n안녕하세요! 오늘은 웹에서 음성 인식 기능을 쉽게 구현할 수 있도록 도와주는 **SpeechRecognition 클래스**에 대해 알아보려고 해요. 이 클래스는 브라우저에 내장된 Web Speech API를 활용해 여러분의 음성을 텍스트로 변환해 주는데요, 복잡한 설정 없이도 간편하게 음성 인식 기능을 사용할 수 있게 만들어졌답니다.\n\n---\n\n## 1. SpeechRecognition 클래스란?\n\nSpeechRecognition 클래스는 마치 친구처럼 음성 인식 기능을 도와주는 역할을 해요. 브라우저에 기본 탑재된 Web Speech API(일부 브라우저에서는 `webkitSpeechRecognition`)를 감싸서, 음성을 텍스트로 변환하는 과정을 더 쉽게 만들어 주죠. 덕분에 복잡한 API를 직접 다루지 않아도 되어서, 개발자 여러분이 좀 더 편하게 음성 인식 기능을 사용할 수 있어요.\n\n---\n\n## 2. 주요 기능과 사용법\n\n### 2.1 초기화 및 설정\n\n클래스를 생성하면, 내부적으로 브라우저에 내장된 SpeechRecognition 객체가 만들어져요. 이때, 필요한 기본 설정도 같이 해두는데요. 예를 들어, 인식할 언어를 한국어로 지정하거나, 연속 인식을 꺼서 한 번에 한 문장씩 인식하도록 설정할 수 있어요.\n\n```tsx\nclass SpeechRecognition {\n  private recognition: any;\n\n  constructor() {\n    // 브라우저에 따라 SpeechRecognition 혹은 webkitSpeechRecognition 사용\n    this.recognition = new (window.SpeechRecognition ||\n      window.webkitSpeechRecognition)();\n    this.setupConfig();\n  }\n\n  private setupConfig(): void {\n    this.recognition.lang = \"ko-KR\"; // 한국어 인식\n    this.recognition.continuous = false; // 연속 인식 여부 설정\n    this.recognition.interimResults = false; // 중간 결과 제공 여부\n  }\n  // ...\n}\n```\n\n이렇게 초기화만 해두면, 이제 음성 인식을 시작할 준비가 완료되는 거죠.\n\n---\n\n### 2.2 음성 인식 시작과 중지\n\n#### **startListening**\n\n`startListening` 메서드는 음성 인식을 시작하는 기능을 담당해요. 사용자가 마이크에 대고 말하기 시작하면, 이 메서드가 음성 데이터를 캡처해 텍스트로 변환해 준답니다. 필요한 옵션을 전달하면, 인식 과정에서 더 다양한 설정을 적용할 수도 있어요.\n\n```tsx\npublic startListening(options: ListeningOptions): void {\n  // 옵션에 따른 추가 설정 처리 가능\n  this.recognition.start();\n}\n```\n\n#### **stopListening**\n\n반대로 `stopListening` 메서드는 음성 인식을 중지시켜요. 사용자가 말하는 것을 멈추거나, 오류가 발생했을 때 불필요하게 계속 인식하지 않도록 종료할 수 있죠.\n\n```tsx\npublic stopListening(): void {\n  this.recognition.stop();\n}\n```\n\n---\n\n### 2.3 이벤트 핸들러 등록: onResult와 onError\n\n#### **onResult**\n\n음성 인식 중에 결과가 나오면, `onResult` 콜백을 통해 그 결과를 받아볼 수 있어요. 이 콜백은 여러 번 호출될 수도 있고, 최종 인식된 텍스트를 한데 모아서 전달해 준답니다.\n\n```tsx\nprivate onResult(callback: (text: string) => void): void {\n  this.recognition.onresult = (event: SpeechRecognitionEvent) => {\n    const transcript = Array.from(event.results)\n      .map(result => result[0].transcript)\n      .join('');\n    callback(transcript);\n  };\n}\n```\n\n#### **onError**\n\n또한, 음성 인식 과정에서 오류가 발생하면 `onError` 이벤트가 발생해요. 이때 등록해둔 콜백을 통해 오류 정보를 받아볼 수 있고, 필요한 경우 사용자에게 친절하게 안내할 수 있답니다.\n\n```tsx\nprivate onError(callback: (error: Error) => void): void {\n  this.recognition.onerror = (event: any) => {\n    callback(new Error(event.error));\n  };\n}\n```\n\n---\n\n## 3. SpeechRecognition 클래스의 장점\n\n- **실시간 음성 → 텍스트 변환:**  \n  사용자가 말하는 순간, 음성을 텍스트로 바꿔서 바로 사용할 수 있어요. 덕분에 음성 명령어 기반 애플리케이션을 쉽게 만들 수 있답니다.\n\n- **간단한 인터페이스:**  \n  복잡한 Web Speech API를 직접 다루지 않아도, 간단한 메서드 호출로 음성 인식을 시작하고 중지할 수 있어요. 개발자라면 정말 편리하겠죠?\n\n- **오류 처리 기능:**  \n  음성 인식 도중 문제가 생기면 onError 핸들러가 바로 작동해서, 문제를 빠르게 파악하고 대응할 수 있어요. 사용자에게 친절한 에러 메시지를 제공할 수 있으니, 서비스 품질도 높아져요.\n\n---\n\n## 4. 실제 활용 예시\n\nSpeechRecognition 클래스를 활용하면, 예를 들어 음성 명령어를 통해 스마트홈 기기를 제어하거나, 디지털 사이니지 시스템에서 음성으로 콘텐츠를 전환하는 등의 다양한 애플리케이션을 만들 수 있어요.\n\n1. **사용자 음성 입력:**  \n   사용자가 마이크에 대고 말하면, SpeechRecognition 클래스가 이를 텍스트로 변환해 줍니다.\n\n2. **명령어 처리 시스템 연계:**  \n   변환된 텍스트는 이후 명령어 분석기를 통해 필요한 명령어와 매칭되어 실행되죠.\n\n3. **실시간 피드백:**  \n   명령어 실행 결과가 화면에 표시되거나, 토스트 메시지로 사용자에게 알려져서 빠른 피드백을 받을 수 있어요.\n\n---\n\n## 5. 마무리하며\n\n오늘은 SpeechRecognition 클래스에 대해 알아보았는데요, 이 클래스 덕분에 웹 애플리케이션에서도 손쉽게 음성 인식 기능을 구현할 수 있게 되었어요. 음성 명령어 기능을 통해 보다 직관적이고 혁신적인 사용자 경험을 제공할 수 있답니다.\n\n음성 인식 기능에 대해 더 궁금한 점이 있거나, 실제 구현에 도전해보고 싶다면 언제든지 시작해 보세요. 여러분의 애플리케이션에 새로운 가능성을 열어줄 거예요!\n\n감사합니다.\n",
  "date": "2025-02-12",
  "category": "frontend",
  "tags": [
    "SpeechRecognition",
    "Web Speech API",
    "JavaScript",
    "Frontend"
  ],
  "thumbnail": "/images/speech-recognition.png",
  "translations": {
    "ko": {
      "title": "SpeechRecognition 클래스로 웹 음성 인식 기능 구현하기",
      "description": "브라우저의 Web Speech API를 활용해 음성을 텍스트로 변환하는 SpeechRecognition 클래스에 대해 알아보고, 그 주요 기능과 사용법을 소개하는 가이드입니다.",
      "content": "<p>안녕하세요! 오늘은 웹에서 음성 인식 기능을 쉽게 구현할 수 있도록 도와주는 <strong>SpeechRecognition 클래스</strong>에 대해 알아보려고 해요. 이 클래스는 브라우저에 내장된 Web Speech API를 활용해 여러분의 음성을 텍스트로 변환해 주는데요, 복잡한 설정 없이도 간편하게 음성 인식 기능을 사용할 수 있게 만들어졌답니다.</p>\n<hr>\n<h2 id=\"heading-0\">1. SpeechRecognition 클래스란?</h2>\n<p>SpeechRecognition 클래스는 마치 친구처럼 음성 인식 기능을 도와주는 역할을 해요. 브라우저에 기본 탑재된 Web Speech API(일부 브라우저에서는 <code>webkitSpeechRecognition</code>)를 감싸서, 음성을 텍스트로 변환하는 과정을 더 쉽게 만들어 주죠. 덕분에 복잡한 API를 직접 다루지 않아도 되어서, 개발자 여러분이 좀 더 편하게 음성 인식 기능을 사용할 수 있어요.</p>\n<hr>\n<h2 id=\"heading-1\">2. 주요 기능과 사용법</h2>\n<h3 id=\"heading-2\">2.1 초기화 및 설정</h3>\n<p>클래스를 생성하면, 내부적으로 브라우저에 내장된 SpeechRecognition 객체가 만들어져요. 이때, 필요한 기본 설정도 같이 해두는데요. 예를 들어, 인식할 언어를 한국어로 지정하거나, 연속 인식을 꺼서 한 번에 한 문장씩 인식하도록 설정할 수 있어요.</p>\n<pre><code class=\"language-tsx\">class SpeechRecognition {\n  private recognition: any;\n\n  constructor() {\n    // 브라우저에 따라 SpeechRecognition 혹은 webkitSpeechRecognition 사용\n    this.recognition = new (window.SpeechRecognition ||\n      window.webkitSpeechRecognition)();\n    this.setupConfig();\n  }\n\n  private setupConfig(): void {\n    this.recognition.lang = \"ko-KR\"; // 한국어 인식\n    this.recognition.continuous = false; // 연속 인식 여부 설정\n    this.recognition.interimResults = false; // 중간 결과 제공 여부\n  }\n  // ...\n}\n</code></pre>\n<p>이렇게 초기화만 해두면, 이제 음성 인식을 시작할 준비가 완료되는 거죠.</p>\n<hr>\n<h3 id=\"heading-3\">2.2 음성 인식 시작과 중지</h3>\n<h4 id=\"heading-4\"><strong>startListening</strong></h4>\n<p><code>startListening</code> 메서드는 음성 인식을 시작하는 기능을 담당해요. 사용자가 마이크에 대고 말하기 시작하면, 이 메서드가 음성 데이터를 캡처해 텍스트로 변환해 준답니다. 필요한 옵션을 전달하면, 인식 과정에서 더 다양한 설정을 적용할 수도 있어요.</p>\n<pre><code class=\"language-tsx\">public startListening(options: ListeningOptions): void {\n  // 옵션에 따른 추가 설정 처리 가능\n  this.recognition.start();\n}\n</code></pre>\n<h4 id=\"heading-5\"><strong>stopListening</strong></h4>\n<p>반대로 <code>stopListening</code> 메서드는 음성 인식을 중지시켜요. 사용자가 말하는 것을 멈추거나, 오류가 발생했을 때 불필요하게 계속 인식하지 않도록 종료할 수 있죠.</p>\n<pre><code class=\"language-tsx\">public stopListening(): void {\n  this.recognition.stop();\n}\n</code></pre>\n<hr>\n<h3 id=\"heading-6\">2.3 이벤트 핸들러 등록: onResult와 onError</h3>\n<h4 id=\"heading-7\"><strong>onResult</strong></h4>\n<p>음성 인식 중에 결과가 나오면, <code>onResult</code> 콜백을 통해 그 결과를 받아볼 수 있어요. 이 콜백은 여러 번 호출될 수도 있고, 최종 인식된 텍스트를 한데 모아서 전달해 준답니다.</p>\n<pre><code class=\"language-tsx\">private onResult(callback: (text: string) =&gt; void): void {\n  this.recognition.onresult = (event: SpeechRecognitionEvent) =&gt; {\n    const transcript = Array.from(event.results)\n      .map(result =&gt; result[0].transcript)\n      .join('');\n    callback(transcript);\n  };\n}\n</code></pre>\n<h4 id=\"heading-8\"><strong>onError</strong></h4>\n<p>또한, 음성 인식 과정에서 오류가 발생하면 <code>onError</code> 이벤트가 발생해요. 이때 등록해둔 콜백을 통해 오류 정보를 받아볼 수 있고, 필요한 경우 사용자에게 친절하게 안내할 수 있답니다.</p>\n<pre><code class=\"language-tsx\">private onError(callback: (error: Error) =&gt; void): void {\n  this.recognition.onerror = (event: any) =&gt; {\n    callback(new Error(event.error));\n  };\n}\n</code></pre>\n<hr>\n<h2 id=\"heading-9\">3. SpeechRecognition 클래스의 장점</h2>\n<ul>\n<li>\n<p><strong>실시간 음성 → 텍스트 변환:</strong><br>\n사용자가 말하는 순간, 음성을 텍스트로 바꿔서 바로 사용할 수 있어요. 덕분에 음성 명령어 기반 애플리케이션을 쉽게 만들 수 있답니다.</p>\n</li>\n<li>\n<p><strong>간단한 인터페이스:</strong><br>\n복잡한 Web Speech API를 직접 다루지 않아도, 간단한 메서드 호출로 음성 인식을 시작하고 중지할 수 있어요. 개발자라면 정말 편리하겠죠?</p>\n</li>\n<li>\n<p><strong>오류 처리 기능:</strong><br>\n음성 인식 도중 문제가 생기면 onError 핸들러가 바로 작동해서, 문제를 빠르게 파악하고 대응할 수 있어요. 사용자에게 친절한 에러 메시지를 제공할 수 있으니, 서비스 품질도 높아져요.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"heading-10\">4. 실제 활용 예시</h2>\n<p>SpeechRecognition 클래스를 활용하면, 예를 들어 음성 명령어를 통해 스마트홈 기기를 제어하거나, 디지털 사이니지 시스템에서 음성으로 콘텐츠를 전환하는 등의 다양한 애플리케이션을 만들 수 있어요.</p>\n<ol>\n<li>\n<p><strong>사용자 음성 입력:</strong><br>\n사용자가 마이크에 대고 말하면, SpeechRecognition 클래스가 이를 텍스트로 변환해 줍니다.</p>\n</li>\n<li>\n<p><strong>명령어 처리 시스템 연계:</strong><br>\n변환된 텍스트는 이후 명령어 분석기를 통해 필요한 명령어와 매칭되어 실행되죠.</p>\n</li>\n<li>\n<p><strong>실시간 피드백:</strong><br>\n명령어 실행 결과가 화면에 표시되거나, 토스트 메시지로 사용자에게 알려져서 빠른 피드백을 받을 수 있어요.</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"heading-11\">5. 마무리하며</h2>\n<p>오늘은 SpeechRecognition 클래스에 대해 알아보았는데요, 이 클래스 덕분에 웹 애플리케이션에서도 손쉽게 음성 인식 기능을 구현할 수 있게 되었어요. 음성 명령어 기능을 통해 보다 직관적이고 혁신적인 사용자 경험을 제공할 수 있답니다.</p>\n<p>음성 인식 기능에 대해 더 궁금한 점이 있거나, 실제 구현에 도전해보고 싶다면 언제든지 시작해 보세요. 여러분의 애플리케이션에 새로운 가능성을 열어줄 거예요!</p>\n<p>감사합니다.</p>\n",
      "tocItems": [
        {
          "id": "heading-0",
          "text": "1. SpeechRecognition 클래스란?",
          "level": 2,
          "isMainTopic": true,
          "position": 0
        },
        {
          "id": "heading-1",
          "text": "2. 주요 기능과 사용법",
          "level": 2,
          "isMainTopic": true,
          "position": 50
        },
        {
          "id": "heading-2",
          "text": "2.1 초기화 및 설정",
          "level": 3,
          "isMainTopic": false,
          "position": 100
        },
        {
          "id": "heading-3",
          "text": "2.2 음성 인식 시작과 중지",
          "level": 3,
          "isMainTopic": false,
          "position": 150
        },
        {
          "id": "heading-4",
          "text": "startListening",
          "level": 4,
          "isMainTopic": false,
          "position": 200
        },
        {
          "id": "heading-5",
          "text": "stopListening",
          "level": 4,
          "isMainTopic": false,
          "position": 250
        },
        {
          "id": "heading-6",
          "text": "2.3 이벤트 핸들러 등록: onResult와 onError",
          "level": 3,
          "isMainTopic": false,
          "position": 300
        },
        {
          "id": "heading-7",
          "text": "onResult",
          "level": 4,
          "isMainTopic": false,
          "position": 350
        },
        {
          "id": "heading-8",
          "text": "onError",
          "level": 4,
          "isMainTopic": false,
          "position": 400
        },
        {
          "id": "heading-9",
          "text": "3. SpeechRecognition 클래스의 장점",
          "level": 2,
          "isMainTopic": true,
          "position": 450
        },
        {
          "id": "heading-10",
          "text": "4. 실제 활용 예시",
          "level": 2,
          "isMainTopic": true,
          "position": 500
        },
        {
          "id": "heading-11",
          "text": "5. 마무리하며",
          "level": 2,
          "isMainTopic": true,
          "position": 550
        }
      ]
    },
    "en": {
      "title": "Implementing Web Voice Recognition with the SpeechRecognition Class",
      "description": "A guide on using the SpeechRecognition class that leverages the browser's Web Speech API to convert voice to text, including an introduction to its key features and usage.",
      "content": "<p>Hello! Today, we're going to explore the <strong>SpeechRecognition Class</strong>, which makes it easy to implement voice recognition functionality on the web. This class leverages the browser's built-in Web Speech API to convert your speech into text, allowing you to use voice recognition features effortlessly without complex configurations.</p>\n<hr>\n<h2 id=\"heading-0\">1. What is the SpeechRecognition Class?</h2>\n<p>The SpeechRecognition class acts like a friendly assistant that helps you with voice recognition. It wraps the browser's built-in Web Speech API (or <code>webkitSpeechRecognition</code> in some browsers) to simplify the process of converting speech to text. Thanks to this, developers can easily use voice recognition without having to deal with the complexities of the underlying API.</p>\n<hr>\n<h2 id=\"heading-1\">2. Key Features and Usage</h2>\n<h3 id=\"heading-2\">2.1 Initialization and Configuration</h3>\n<p>When you create an instance of the class, it internally creates a SpeechRecognition object built into the browser. During this process, it also applies the necessary default configurations. For example, you can set the language to Korean or disable continuous recognition so that it recognizes one sentence at a time.</p>\n<pre><code class=\"language-tsx\">class SpeechRecognition {\n  private recognition: any;\n\n  constructor() {\n    // Use SpeechRecognition or webkitSpeechRecognition depending on the browser\n    this.recognition = new (window.SpeechRecognition ||\n      window.webkitSpeechRecognition)();\n    this.setupConfig();\n  }\n\n  private setupConfig(): void {\n    this.recognition.lang = \"ko-KR\"; // Set language to Korean\n    this.recognition.continuous = false; // Disable continuous recognition\n    this.recognition.interimResults = false; // Disable interim results\n  }\n  // ...\n}\n</code></pre>\n<p>With just this initialization, you’re ready to start using voice recognition.</p>\n<hr>\n<h3 id=\"heading-3\">2.2 Starting and Stopping Voice Recognition</h3>\n<h4 id=\"heading-4\"><strong>startListening</strong></h4>\n<p>The <code>startListening</code> method is responsible for starting the voice recognition process. When the user begins speaking into the microphone, this method captures the audio data and converts it into text. You can also pass options to apply additional settings during the recognition process.</p>\n<pre><code class=\"language-tsx\">public startListening(options: ListeningOptions): void {\n  // Additional settings can be applied based on the provided options\n  this.recognition.start();\n}\n</code></pre>\n<h4 id=\"heading-5\"><strong>stopListening</strong></h4>\n<p>Conversely, the <code>stopListening</code> method stops the voice recognition process. Whether the user has finished speaking or an error occurs, this method ensures that recognition is halted to prevent unnecessary processing.</p>\n<pre><code class=\"language-tsx\">public stopListening(): void {\n  this.recognition.stop();\n}\n</code></pre>\n<hr>\n<h3 id=\"heading-6\">2.3 Registering Event Handlers: onResult and onError</h3>\n<h4 id=\"heading-7\"><strong>onResult</strong></h4>\n<p>During voice recognition, when a result is produced, the <code>onResult</code> callback receives the output. This callback may be invoked multiple times, and it aggregates the final recognized text for further processing.</p>\n<pre><code class=\"language-tsx\">private onResult(callback: (text: string) =&gt; void): void {\n  this.recognition.onresult = (event: SpeechRecognitionEvent) =&gt; {\n    const transcript = Array.from(event.results)\n      .map(result =&gt; result[0].transcript)\n      .join('');\n    callback(transcript);\n  };\n}\n</code></pre>\n<h4 id=\"heading-8\"><strong>onError</strong></h4>\n<p>If an error occurs during the voice recognition process, the <code>onError</code> event is triggered. By registering an onError callback, you can receive error information and, if necessary, provide helpful guidance to the user.</p>\n<pre><code class=\"language-tsx\">private onError(callback: (error: Error) =&gt; void): void {\n  this.recognition.onerror = (event: any) =&gt; {\n    callback(new Error(event.error));\n  };\n}\n</code></pre>\n<hr>\n<h2 id=\"heading-9\">3. Advantages of the SpeechRecognition Class</h2>\n<ul>\n<li>\n<p><strong>Real-time Voice-to-Text Conversion:</strong><br>\nAs soon as the user speaks, the audio is instantly converted into text, making it easy to build voice-command based applications.</p>\n</li>\n<li>\n<p><strong>Simple Interface:</strong><br>\nYou don’t have to deal with the complexities of the Web Speech API directly. Instead, you can start and stop voice recognition with simple method calls, which is extremely convenient for developers.</p>\n</li>\n<li>\n<p><strong>Error Handling:</strong><br>\nIf any issues occur during voice recognition, the onError handler is triggered immediately, allowing you to quickly identify and respond to problems. This means you can provide user-friendly error messages, thereby enhancing overall service quality.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"heading-10\">4. Practical Use Cases</h2>\n<p>Using the SpeechRecognition class, you can create a variety of applications. For example, you might control smart home devices via voice commands or switch content on digital signage systems using voice input.</p>\n<ol>\n<li>\n<p><strong>User Voice Input:</strong><br>\nWhen a user speaks into the microphone, the SpeechRecognition class converts the speech into text.</p>\n</li>\n<li>\n<p><strong>Integration with Command Processing Systems:</strong><br>\nThe converted text is then matched with the necessary commands through a command analyzer and executed accordingly.</p>\n</li>\n<li>\n<p><strong>Real-time Feedback:</strong><br>\nThe results of command execution are displayed on the screen or delivered via toast messages, providing quick feedback to the user.</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"heading-11\">5. Conclusion</h2>\n<p>Today, we explored the SpeechRecognition class, which allows web applications to easily implement voice recognition functionality. With voice command features, you can deliver a more intuitive and innovative user experience.</p>\n<p>If you have any questions about voice recognition or are eager to try it out yourself, feel free to dive in. This technology could open up a whole new world of possibilities for your applications!</p>\n<p>Thank you.</p>\n",
      "tocItems": [
        {
          "id": "heading-0",
          "text": "1. What is the SpeechRecognition Class?",
          "level": 2,
          "isMainTopic": true,
          "position": 0
        },
        {
          "id": "heading-1",
          "text": "2. Key Features and Usage",
          "level": 2,
          "isMainTopic": true,
          "position": 50
        },
        {
          "id": "heading-2",
          "text": "2.1 Initialization and Configuration",
          "level": 3,
          "isMainTopic": false,
          "position": 100
        },
        {
          "id": "heading-3",
          "text": "2.2 Starting and Stopping Voice Recognition",
          "level": 3,
          "isMainTopic": false,
          "position": 150
        },
        {
          "id": "heading-4",
          "text": "startListening",
          "level": 4,
          "isMainTopic": false,
          "position": 200
        },
        {
          "id": "heading-5",
          "text": "stopListening",
          "level": 4,
          "isMainTopic": false,
          "position": 250
        },
        {
          "id": "heading-6",
          "text": "2.3 Registering Event Handlers: onResult and onError",
          "level": 3,
          "isMainTopic": false,
          "position": 300
        },
        {
          "id": "heading-7",
          "text": "onResult",
          "level": 4,
          "isMainTopic": false,
          "position": 350
        },
        {
          "id": "heading-8",
          "text": "onError",
          "level": 4,
          "isMainTopic": false,
          "position": 400
        },
        {
          "id": "heading-9",
          "text": "3. Advantages of the SpeechRecognition Class",
          "level": 2,
          "isMainTopic": true,
          "position": 450
        },
        {
          "id": "heading-10",
          "text": "4. Practical Use Cases",
          "level": 2,
          "isMainTopic": true,
          "position": 500
        },
        {
          "id": "heading-11",
          "text": "5. Conclusion",
          "level": 2,
          "isMainTopic": true,
          "position": 550
        }
      ]
    }
  },
  "imageHeights": {}
}