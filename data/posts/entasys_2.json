{
  "id": "entasys_2",
  "title": "Entasys",
  "content": "\n# 데이터 흐름\n\n## 1. OpenSearch 데이터 처리\n\n### 1.1 쿼리 최적화\n\n```typescript\n// opensearch.ts\nexport const buildOptimizedQuery = (searchParams: SearchParams) => {\n  return {\n    index: \"logs-*\",\n    body: {\n      query: {\n        bool: {\n          must: [\n            {\n              range: {\n                \"@timestamp\": {\n                  gte: searchParams.timeFrom,\n                  lte: searchParams.timeTo,\n                  format: \"strict_date_time\",\n                  time_zone: \"+09:00\",\n                },\n              },\n            },\n            // 추가 필터\n          ],\n        },\n      },\n      sort: [{ \"@timestamp\": \"asc\" }],\n      _source: [\"필요한 필드만 선택\"],\n    },\n    scroll: \"2m\",\n    size: 1000,\n  };\n};\n```\n\n### 1.2 스크롤 API 활용\n\n```typescript\nasync function* scrollSearch(client: Client, query: SearchParams) {\n  let response = await client.search(buildOptimizedQuery(query));\n  let scrollId = response._scroll_id;\n\n  while (true) {\n    yield response.hits.hits;\n\n    if (!response.hits.hits.length) break;\n\n    response = await client.scroll({\n      scroll_id: scrollId,\n      scroll: \"2m\",\n    });\n  }\n}\n```\n\n### 1.3 Circuit Breaker 설정\n\n```yaml\n# opensearch.yml\nindices.breaker.total.limit: 70%\nindices.breaker.request.limit: 60%\nindices.breaker.fielddata.limit: 40%\n```\n\n### 1.4 데이터 변환 파이프라인\n\n```typescript\ninterface TransformPipeline {\n  preProcess: (data: RawData) => ProcessedData;\n  transform: (data: ProcessedData) => TransformedData;\n  validate: (data: TransformedData) => boolean;\n  format: (data: TransformedData) => string;\n}\n```\n\n## 2. 파일 처리 프로세스\n\n### 2.1 청크 관리\n\n```typescript\ninterface ChunkManager {\n  chunkSize: number;\n  maxParallel: number;\n  chunks: Map<string, ChunkStatus>;\n\n  calculateChunks(totalSize: number): number;\n  processChunk(chunkId: string): Promise<void>;\n  mergeChunks(chunks: string[]): Promise<string>;\n}\n```\n\n### 2.2 스트림 처리\n\n```typescript\nclass DownloadStream extends Transform {\n  constructor(options: TransformOptions) {\n    super(options);\n  }\n\n  _transform(chunk: any, encoding: string, callback: Function) {\n    // 메모리 효율적인 변환 처리\n    const transformed = this.transformData(chunk);\n    this.push(transformed);\n    callback();\n  }\n}\n```\n\n### 2.3 파일 시스템 작업\n\n```typescript\nclass FileManager {\n  async createTempFile(chunkId: string): Promise<string> {\n    const path = `${TEMP_DIR}/${chunkId}.tmp`;\n    await fs.promises.mkdir(TEMP_DIR, { recursive: true });\n    return path;\n  }\n\n  async mergeFiles(files: string[], output: string): Promise<void> {\n    const writeStream = fs.createWriteStream(output);\n    for (const file of files) {\n      await pipeline(fs.createReadStream(file), writeStream);\n    }\n  }\n}\n```\n\n## 3. 진행률 추적\n\n### 3.1 진행률 계산\n\n```typescript\ninterface ProgressTracker {\n  totalRows: number;\n  processedRows: number;\n  startTime: number;\n\n  calculateProgress(): number;\n  estimateTimeRemaining(): number;\n  calculateSpeed(): number;\n}\n```\n\n### 3.2 상태 업데이트\n\n```typescript\nclass ProgressEmitter extends EventEmitter {\n  private updateInterval: number = 1000;\n  private lastUpdate: number = 0;\n\n  emitProgress(progress: ProgressData) {\n    const now = Date.now();\n    if (now - this.lastUpdate >= this.updateInterval) {\n      this.emit(\"progress\", progress);\n      this.lastUpdate = now;\n    }\n  }\n}\n```\n\n## 4. 메모리 관리\n\n### 4.1 메모리 모니터링\n\n```typescript\nclass MemoryMonitor {\n  private maxMemoryUsage: number;\n  private warningThreshold: number;\n\n  checkMemoryUsage(): MemoryStatus {\n    const used = process.memoryUsage();\n    return {\n      heapUsed: used.heapUsed,\n      heapTotal: used.heapTotal,\n      external: used.external,\n      warning: this.isWarningLevel(used.heapUsed),\n    };\n  }\n}\n```\n\n### 4.2 가비지 컬렉션 최적화\n\n```typescript\nconst gcOptimization = {\n  scheduleGC() {\n    if (global.gc) {\n      setInterval(() => {\n        if (this.shouldRunGC()) {\n          global.gc();\n        }\n      }, 30000);\n    }\n  },\n};\n```\n\n## 5. 에러 처리 전략\n\n### 5.1 에러 타입 정의\n\n```typescript\nenum DownloadError {\n  MEMORY_LIMIT = \"MEMORY_LIMIT\",\n  NETWORK_ERROR = \"NETWORK_ERROR\",\n  FILE_SYSTEM = \"FILE_SYSTEM\",\n  OPENSEARCH = \"OPENSEARCH\",\n  TIMEOUT = \"TIMEOUT\",\n}\n```\n\n### 5.2 재시도 메커니즘\n\n```typescript\nclass RetryManager {\n  private maxRetries: number = 3;\n  private backoffMs: number = 1000;\n\n  async withRetry<T>(operation: () => Promise<T>, context: string): Promise<T> {\n    let lastError: Error;\n\n    for (let i = 0; i < this.maxRetries; i++) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = error;\n        await this.delay(this.calculateBackoff(i));\n      }\n    }\n\n    throw new Error(\n      `${context} failed after ${this.maxRetries} retries: ${lastError}`\n    );\n  }\n}\n```\n",
  "date": "2024-03-20",
  "category": "projects",
  "tags": [
    "React",
    "Express",
    "MySQL",
    "Web3.js",
    "AWS",
    "Ganache",
    "Truffle",
    "ERC20",
    "MetaMask",
    "Figma"
  ],
  "thumbnail": "/images/entasys/entaasys_search_term.gif",
  "translations": {
    "ko": {
      "title": "Entasys",
      "description": "Development of Virtual Asset Exchange",
      "content": "<h1 id=\"heading-0\">데이터 흐름</h1>\n<h2 id=\"heading-1\">1. OpenSearch 데이터 처리</h2>\n<h3 id=\"heading-2\">1.1 쿼리 최적화</h3>\n<pre><code class=\"language-typescript\">// opensearch.ts\nexport const buildOptimizedQuery = (searchParams: SearchParams) =&gt; {\n  return {\n    index: \"logs-*\",\n    body: {\n      query: {\n        bool: {\n          must: [\n            {\n              range: {\n                \"@timestamp\": {\n                  gte: searchParams.timeFrom,\n                  lte: searchParams.timeTo,\n                  format: \"strict_date_time\",\n                  time_zone: \"+09:00\",\n                },\n              },\n            },\n            // 추가 필터\n          ],\n        },\n      },\n      sort: [{ \"@timestamp\": \"asc\" }],\n      _source: [\"필요한 필드만 선택\"],\n    },\n    scroll: \"2m\",\n    size: 1000,\n  };\n};\n</code></pre>\n<h3 id=\"heading-3\">1.2 스크롤 API 활용</h3>\n<pre><code class=\"language-typescript\">async function* scrollSearch(client: Client, query: SearchParams) {\n  let response = await client.search(buildOptimizedQuery(query));\n  let scrollId = response._scroll_id;\n\n  while (true) {\n    yield response.hits.hits;\n\n    if (!response.hits.hits.length) break;\n\n    response = await client.scroll({\n      scroll_id: scrollId,\n      scroll: \"2m\",\n    });\n  }\n}\n</code></pre>\n<h3 id=\"heading-4\">1.3 Circuit Breaker 설정</h3>\n<pre><code class=\"language-yaml\"># opensearch.yml\nindices.breaker.total.limit: 70%\nindices.breaker.request.limit: 60%\nindices.breaker.fielddata.limit: 40%\n</code></pre>\n<h3 id=\"heading-5\">1.4 데이터 변환 파이프라인</h3>\n<pre><code class=\"language-typescript\">interface TransformPipeline {\n  preProcess: (data: RawData) =&gt; ProcessedData;\n  transform: (data: ProcessedData) =&gt; TransformedData;\n  validate: (data: TransformedData) =&gt; boolean;\n  format: (data: TransformedData) =&gt; string;\n}\n</code></pre>\n<h2 id=\"heading-6\">2. 파일 처리 프로세스</h2>\n<h3 id=\"heading-7\">2.1 청크 관리</h3>\n<pre><code class=\"language-typescript\">interface ChunkManager {\n  chunkSize: number;\n  maxParallel: number;\n  chunks: Map&lt;string, ChunkStatus&gt;;\n\n  calculateChunks(totalSize: number): number;\n  processChunk(chunkId: string): Promise&lt;void&gt;;\n  mergeChunks(chunks: string[]): Promise&lt;string&gt;;\n}\n</code></pre>\n<h3 id=\"heading-8\">2.2 스트림 처리</h3>\n<pre><code class=\"language-typescript\">class DownloadStream extends Transform {\n  constructor(options: TransformOptions) {\n    super(options);\n  }\n\n  _transform(chunk: any, encoding: string, callback: Function) {\n    // 메모리 효율적인 변환 처리\n    const transformed = this.transformData(chunk);\n    this.push(transformed);\n    callback();\n  }\n}\n</code></pre>\n<h3 id=\"heading-9\">2.3 파일 시스템 작업</h3>\n<pre><code class=\"language-typescript\">class FileManager {\n  async createTempFile(chunkId: string): Promise&lt;string&gt; {\n    const path = `${TEMP_DIR}/${chunkId}.tmp`;\n    await fs.promises.mkdir(TEMP_DIR, { recursive: true });\n    return path;\n  }\n\n  async mergeFiles(files: string[], output: string): Promise&lt;void&gt; {\n    const writeStream = fs.createWriteStream(output);\n    for (const file of files) {\n      await pipeline(fs.createReadStream(file), writeStream);\n    }\n  }\n}\n</code></pre>\n<h2 id=\"heading-10\">3. 진행률 추적</h2>\n<h3 id=\"heading-11\">3.1 진행률 계산</h3>\n<pre><code class=\"language-typescript\">interface ProgressTracker {\n  totalRows: number;\n  processedRows: number;\n  startTime: number;\n\n  calculateProgress(): number;\n  estimateTimeRemaining(): number;\n  calculateSpeed(): number;\n}\n</code></pre>\n<h3 id=\"heading-12\">3.2 상태 업데이트</h3>\n<pre><code class=\"language-typescript\">class ProgressEmitter extends EventEmitter {\n  private updateInterval: number = 1000;\n  private lastUpdate: number = 0;\n\n  emitProgress(progress: ProgressData) {\n    const now = Date.now();\n    if (now - this.lastUpdate &gt;= this.updateInterval) {\n      this.emit(\"progress\", progress);\n      this.lastUpdate = now;\n    }\n  }\n}\n</code></pre>\n<h2 id=\"heading-13\">4. 메모리 관리</h2>\n<h3 id=\"heading-14\">4.1 메모리 모니터링</h3>\n<pre><code class=\"language-typescript\">class MemoryMonitor {\n  private maxMemoryUsage: number;\n  private warningThreshold: number;\n\n  checkMemoryUsage(): MemoryStatus {\n    const used = process.memoryUsage();\n    return {\n      heapUsed: used.heapUsed,\n      heapTotal: used.heapTotal,\n      external: used.external,\n      warning: this.isWarningLevel(used.heapUsed),\n    };\n  }\n}\n</code></pre>\n<h3 id=\"heading-15\">4.2 가비지 컬렉션 최적화</h3>\n<pre><code class=\"language-typescript\">const gcOptimization = {\n  scheduleGC() {\n    if (global.gc) {\n      setInterval(() =&gt; {\n        if (this.shouldRunGC()) {\n          global.gc();\n        }\n      }, 30000);\n    }\n  },\n};\n</code></pre>\n<h2 id=\"heading-16\">5. 에러 처리 전략</h2>\n<h3 id=\"heading-17\">5.1 에러 타입 정의</h3>\n<pre><code class=\"language-typescript\">enum DownloadError {\n  MEMORY_LIMIT = \"MEMORY_LIMIT\",\n  NETWORK_ERROR = \"NETWORK_ERROR\",\n  FILE_SYSTEM = \"FILE_SYSTEM\",\n  OPENSEARCH = \"OPENSEARCH\",\n  TIMEOUT = \"TIMEOUT\",\n}\n</code></pre>\n<h3 id=\"heading-18\">5.2 재시도 메커니즘</h3>\n<pre><code class=\"language-typescript\">class RetryManager {\n  private maxRetries: number = 3;\n  private backoffMs: number = 1000;\n\n  async withRetry&lt;T&gt;(operation: () =&gt; Promise&lt;T&gt;, context: string): Promise&lt;T&gt; {\n    let lastError: Error;\n\n    for (let i = 0; i &lt; this.maxRetries; i++) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = error;\n        await this.delay(this.calculateBackoff(i));\n      }\n    }\n\n    throw new Error(\n      `${context} failed after ${this.maxRetries} retries: ${lastError}`\n    );\n  }\n}\n</code></pre>\n",
      "tocItems": [
        {
          "id": "heading-0",
          "text": "데이터 흐름",
          "level": 1,
          "isMainTopic": true,
          "position": 0
        },
        {
          "id": "heading-1",
          "text": "1. OpenSearch 데이터 처리",
          "level": 2,
          "isMainTopic": true,
          "position": 50
        },
        {
          "id": "heading-2",
          "text": "1.1 쿼리 최적화",
          "level": 3,
          "isMainTopic": false,
          "position": 100
        },
        {
          "id": "heading-3",
          "text": "1.2 스크롤 API 활용",
          "level": 3,
          "isMainTopic": false,
          "position": 150
        },
        {
          "id": "heading-4",
          "text": "1.3 Circuit Breaker 설정",
          "level": 3,
          "isMainTopic": false,
          "position": 200
        },
        {
          "id": "heading-5",
          "text": "1.4 데이터 변환 파이프라인",
          "level": 3,
          "isMainTopic": false,
          "position": 250
        },
        {
          "id": "heading-6",
          "text": "2. 파일 처리 프로세스",
          "level": 2,
          "isMainTopic": true,
          "position": 300
        },
        {
          "id": "heading-7",
          "text": "2.1 청크 관리",
          "level": 3,
          "isMainTopic": false,
          "position": 350
        },
        {
          "id": "heading-8",
          "text": "2.2 스트림 처리",
          "level": 3,
          "isMainTopic": false,
          "position": 400
        },
        {
          "id": "heading-9",
          "text": "2.3 파일 시스템 작업",
          "level": 3,
          "isMainTopic": false,
          "position": 450
        },
        {
          "id": "heading-10",
          "text": "3. 진행률 추적",
          "level": 2,
          "isMainTopic": true,
          "position": 500
        },
        {
          "id": "heading-11",
          "text": "3.1 진행률 계산",
          "level": 3,
          "isMainTopic": false,
          "position": 550
        },
        {
          "id": "heading-12",
          "text": "3.2 상태 업데이트",
          "level": 3,
          "isMainTopic": false,
          "position": 600
        },
        {
          "id": "heading-13",
          "text": "4. 메모리 관리",
          "level": 2,
          "isMainTopic": true,
          "position": 650
        },
        {
          "id": "heading-14",
          "text": "4.1 메모리 모니터링",
          "level": 3,
          "isMainTopic": false,
          "position": 700
        },
        {
          "id": "heading-15",
          "text": "4.2 가비지 컬렉션 최적화",
          "level": 3,
          "isMainTopic": false,
          "position": 750
        },
        {
          "id": "heading-16",
          "text": "5. 에러 처리 전략",
          "level": 2,
          "isMainTopic": true,
          "position": 800
        },
        {
          "id": "heading-17",
          "text": "5.1 에러 타입 정의",
          "level": 3,
          "isMainTopic": false,
          "position": 850
        },
        {
          "id": "heading-18",
          "text": "5.2 재시도 메커니즘",
          "level": 3,
          "isMainTopic": false,
          "position": 900
        }
      ]
    },
    "en": {
      "title": "Entasys",
      "description": "Development of Virtual Asset Exchange",
      "content": "<h1 id=\"heading-0\">Data Flow</h1>\n<h2 id=\"heading-1\">1. OpenSearch Data Processing</h2>\n<h3 id=\"heading-2\">1.1 Query Optimization</h3>\n<pre><code class=\"language-typescript\">// opensearch.ts\nexport const buildOptimizedQuery = (searchParams: SearchParams) =&gt; {\n  return {\n    index: \"logs-*\",\n    body: {\n      query: {\n        bool: {\n          must: [\n            {\n              range: {\n                \"@timestamp\": {\n                  gte: searchParams.timeFrom,\n                  lte: searchParams.timeTo,\n                  format: \"strict_date_time\",\n                  time_zone: \"+09:00\",\n                },\n              },\n            },\n            // Additional filters\n          ],\n        },\n      },\n      sort: [{ \"@timestamp\": \"asc\" }],\n      _source: [\"Select only required fields\"],\n    },\n    scroll: \"2m\",\n    size: 1000,\n  };\n};\n</code></pre>\n<h3 id=\"heading-3\">1.2 Using Scroll API</h3>\n<pre><code class=\"language-typescript\">async function* scrollSearch(client: Client, query: SearchParams) {\n  let response = await client.search(buildOptimizedQuery(query));\n  let scrollId = response._scroll_id;\n\n  while (true) {\n    yield response.hits.hits;\n\n    if (!response.hits.hits.length) break;\n\n    response = await client.scroll({\n      scroll_id: scrollId,\n      scroll: \"2m\",\n    });\n  }\n}\n</code></pre>\n<h3 id=\"heading-4\">1.3 Circuit Breaker Settings</h3>\n<pre><code class=\"language-yaml\"># opensearch.yml\nindices.breaker.total.limit: 70%\nindices.breaker.request.limit: 60%\nindices.breaker.fielddata.limit: 40%\n</code></pre>\n<h3 id=\"heading-5\">1.4 Data Transformation Pipeline</h3>\n<pre><code class=\"language-typescript\">interface TransformPipeline {\n  preProcess: (data: RawData) =&gt; ProcessedData;\n  transform: (data: ProcessedData) =&gt; TransformedData;\n  validate: (data: TransformedData) =&gt; boolean;\n  format: (data: TransformedData) =&gt; string;\n}\n</code></pre>\n<h2 id=\"heading-6\">2. File Processing Process</h2>\n<h3 id=\"heading-7\">2.1 Chunk Management</h3>\n<pre><code class=\"language-typescript\">interface ChunkManager {\n  chunkSize: number;\n  maxParallel: number;\n  chunks: Map&lt;string, ChunkStatus&gt;;\n\n  calculateChunks(totalSize: number): number;\n  processChunk(chunkId: string): Promise&lt;void&gt;;\n  mergeChunks(chunks: string[]): Promise&lt;string&gt;;\n}\n</code></pre>\n<h3 id=\"heading-8\">2.2 Stream Processing</h3>\n<pre><code class=\"language-typescript\">class DownloadStream extends Transform {\n  constructor(options: TransformOptions) {\n    super(options);\n  }\n\n  _transform(chunk: any, encoding: string, callback: Function) {\n    // Memory-efficient transformation processing\n    const transformed = this.transformData(chunk);\n    this.push(transformed);\n    callback();\n  }\n}\n</code></pre>\n<h3 id=\"heading-9\">2.3 File System Operations</h3>\n<pre><code class=\"language-typescript\">class FileManager {\n  async createTempFile(chunkId: string): Promise&lt;string&gt; {\n    const path = `${TEMP_DIR}/${chunkId}.tmp`;\n    await fs.promises.mkdir(TEMP_DIR, { recursive: true });\n    return path;\n  }\n\n  async mergeFiles(files: string[], output: string): Promise&lt;void&gt; {\n    const writeStream = fs.createWriteStream(output);\n    for (const file of files) {\n      await pipeline(fs.createReadStream(file), writeStream);\n    }\n  }\n}\n</code></pre>\n<h2 id=\"heading-10\">3. Progress Tracking</h2>\n<h3 id=\"heading-11\">3.1 Progress Calculation</h3>\n<pre><code class=\"language-typescript\">interface ProgressTracker {\n  totalRows: number;\n  processedRows: number;\n  startTime: number;\n\n  calculateProgress(): number;\n  estimateTimeRemaining(): number;\n  calculateSpeed(): number;\n}\n</code></pre>\n<h3 id=\"heading-12\">3.2 Status Updates</h3>\n<pre><code class=\"language-typescript\">class ProgressEmitter extends EventEmitter {\n  private updateInterval: number = 1000;\n  private lastUpdate: number = 0;\n\n  emitProgress(progress: ProgressData) {\n    const now = Date.now();\n    if (now - this.lastUpdate &gt;= this.updateInterval) {\n      this.emit(\"progress\", progress);\n      this.lastUpdate = now;\n    }\n  }\n}\n</code></pre>\n<h2 id=\"heading-13\">4. Memory Management</h2>\n<h3 id=\"heading-14\">4.1 Memory Monitoring</h3>\n<pre><code class=\"language-typescript\">class MemoryMonitor {\n  private maxMemoryUsage: number;\n  private warningThreshold: number;\n\n  checkMemoryUsage(): MemoryStatus {\n    const used = process.memoryUsage();\n    return {\n      heapUsed: used.heapUsed,\n      heapTotal: used.heapTotal,\n      external: used.external,\n      warning: this.isWarningLevel(used.heapUsed),\n    };\n  }\n}\n</code></pre>\n<h3 id=\"heading-15\">4.2 Garbage Collection Optimization</h3>\n<pre><code class=\"language-typescript\">const gcOptimization = {\n  scheduleGC() {\n    if (global.gc) {\n      setInterval(() =&gt; {\n        if (this.shouldRunGC()) {\n          global.gc();\n        }\n      }, 30000);\n    }\n  },\n};\n</code></pre>\n<h2 id=\"heading-16\">5. Error Handling Strategy</h2>\n<h3 id=\"heading-17\">5.1 Error Type Definition</h3>\n<pre><code class=\"language-typescript\">enum DownloadError {\n  MEMORY_LIMIT = \"MEMORY_LIMIT\",\n  NETWORK_ERROR = \"NETWORK_ERROR\",\n  FILE_SYSTEM = \"FILE_SYSTEM\",\n  OPENSEARCH = \"OPENSEARCH\",\n  TIMEOUT = \"TIMEOUT\",\n}\n</code></pre>\n<h3 id=\"heading-18\">5.2 Retry Mechanism</h3>\n<pre><code class=\"language-typescript\">class RetryManager {\n  private maxRetries: number = 3;\n  private backoffMs: number = 1000;\n\n  async withRetry&lt;T&gt;(operation: () =&gt; Promise&lt;T&gt;, context: string): Promise&lt;T&gt; {\n    let lastError: Error;\n\n    for (let i = 0; i &lt; this.maxRetries; i++) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = error;\n        await this.delay(this.calculateBackoff(i));\n      }\n    }\n\n    throw new Error(\n      `${context} failed after ${this.maxRetries} retries: ${lastError}`\n    );\n  }\n}\n</code></pre>\n",
      "tocItems": [
        {
          "id": "heading-0",
          "text": "Data Flow",
          "level": 1,
          "isMainTopic": true,
          "position": 0
        },
        {
          "id": "heading-1",
          "text": "1. OpenSearch Data Processing",
          "level": 2,
          "isMainTopic": true,
          "position": 50
        },
        {
          "id": "heading-2",
          "text": "1.1 Query Optimization",
          "level": 3,
          "isMainTopic": false,
          "position": 100
        },
        {
          "id": "heading-3",
          "text": "1.2 Using Scroll API",
          "level": 3,
          "isMainTopic": false,
          "position": 150
        },
        {
          "id": "heading-4",
          "text": "1.3 Circuit Breaker Settings",
          "level": 3,
          "isMainTopic": false,
          "position": 200
        },
        {
          "id": "heading-5",
          "text": "1.4 Data Transformation Pipeline",
          "level": 3,
          "isMainTopic": false,
          "position": 250
        },
        {
          "id": "heading-6",
          "text": "2. File Processing Process",
          "level": 2,
          "isMainTopic": true,
          "position": 300
        },
        {
          "id": "heading-7",
          "text": "2.1 Chunk Management",
          "level": 3,
          "isMainTopic": false,
          "position": 350
        },
        {
          "id": "heading-8",
          "text": "2.2 Stream Processing",
          "level": 3,
          "isMainTopic": false,
          "position": 400
        },
        {
          "id": "heading-9",
          "text": "2.3 File System Operations",
          "level": 3,
          "isMainTopic": false,
          "position": 450
        },
        {
          "id": "heading-10",
          "text": "3. Progress Tracking",
          "level": 2,
          "isMainTopic": true,
          "position": 500
        },
        {
          "id": "heading-11",
          "text": "3.1 Progress Calculation",
          "level": 3,
          "isMainTopic": false,
          "position": 550
        },
        {
          "id": "heading-12",
          "text": "3.2 Status Updates",
          "level": 3,
          "isMainTopic": false,
          "position": 600
        },
        {
          "id": "heading-13",
          "text": "4. Memory Management",
          "level": 2,
          "isMainTopic": true,
          "position": 650
        },
        {
          "id": "heading-14",
          "text": "4.1 Memory Monitoring",
          "level": 3,
          "isMainTopic": false,
          "position": 700
        },
        {
          "id": "heading-15",
          "text": "4.2 Garbage Collection Optimization",
          "level": 3,
          "isMainTopic": false,
          "position": 750
        },
        {
          "id": "heading-16",
          "text": "5. Error Handling Strategy",
          "level": 2,
          "isMainTopic": true,
          "position": 800
        },
        {
          "id": "heading-17",
          "text": "5.1 Error Type Definition",
          "level": 3,
          "isMainTopic": false,
          "position": 850
        },
        {
          "id": "heading-18",
          "text": "5.2 Retry Mechanism",
          "level": 3,
          "isMainTopic": false,
          "position": 900
        }
      ]
    }
  },
  "imageHeights": {}
}