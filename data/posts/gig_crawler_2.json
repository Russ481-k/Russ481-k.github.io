{
  "id": "gig_crawler_2",
  "title": "FastAPI와 PostgreSQL을 활용한 아웃소싱 크롤러 개발",
  "content": "\n# SQLAlchemy로 데이터베이스 비동기 처리 구현하기 🔄\n\n안녕하세요! 오늘은 FastAPI 크롤러 프로젝트에서 **데이터베이스 비동기 처리**를 어떻게 구현했는지 자세히 공유해볼게요.\n\n## 1. 들어가며 🎯\n\n요즘 웹 개발에서 비동기 처리는 정말 중요한 요소가 되었어요. 특히 크롤러처럼 데이터를 많이 다루는 애플리케이션에서는 더욱 그렇죠! 이번 글에서는 제가 SQLAlchemy를 사용해서 비동기 데이터베이스 처리를 구현한 경험을 나눠볼게요.\n\n## 2. 왜 비동기 처리가 필요했나요? 🤔\n\n기존에 동기 방식으로 처리했을 때 몇 가지 문제점이 있었어요:\n\n1. **응답 지연**: 데이터베이스 응답을 기다리는 동안 다른 작업을 못했어요\n2. **자원 낭비**: 서버 리소스가 효율적으로 사용되지 못했죠\n3. **확장성 한계**: 동시에 많은 요청이 들어오면 처리가 힘들었어요\n\n이런 문제들을 해결하기 위해 비동기 처리 도입이 필요했답니다!\n\n---\n\n## 3. SQLAlchemy 비동기 설정\n\n### 3.1 기존 동기 방식의 문제점\n\n일반적으로 SQLAlchemy는 동기 방식으로 작동합니다. 하지만 동기 방식의 문제점은 다음과 같습니다.\n\n- **I/O 블로킹**: 데이터베이스에서 응답을 받을 때까지 애플리케이션이 대기해야 함\n- **성능 저하**: 많은 요청이 동시에 들어오면 응답 시간이 길어짐\n- **확장성 부족**: 다중 작업을 효과적으로 처리하기 어려움\n\n이를 해결하기 위해 **SQLAlchemy 비동기 모드**를 활용할 수 있습니다.\n\n---\n\n### 3.2 SQLAlchemy 비동기 설정 방법\n\n#### 1) 비동기 엔진 생성 (`create_async_engine`)\n\n```python\nfrom sqlalchemy.ext.asyncio import create_async_engine\n\nDATABASE_URL = \"postgresql+asyncpg://user:password@localhost/dbname\"\nengine = create_async_engine(DATABASE_URL, echo=True)\n```\n\n#### 2) 비동기 세션 생성 (`async_session`)\n\n```python\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.orm import sessionmaker\n\nasync_session = sessionmaker(\n    bind=engine,\n    class_=AsyncSession,\n    expire_on_commit=False\n)\n```\n\n#### 3) 데이터베이스 작업 예제 (비동기 방식)\n\n```python\nfrom models import User  # 가정한 모델\n\nasync def get_user_by_id(user_id: int):\n    async with async_session() as session:\n        result = await session.get(User, user_id)\n        return result\n```\n\n위 예제에서는 `async_session`을 사용하여 비동기적으로 데이터베이스에서 사용자를 조회합니다.\n\n---\n\n## 4. 기존 동기 방식과 비교\n\n| 방식                  | 장점                        | 단점                        |\n| --------------------- | --------------------------- | --------------------------- |\n| 동기 (Synchronous)    | 간단한 코드, 익숙한 패턴    | 응답 속도 저하, 확장성 부족 |\n| 비동기 (Asynchronous) | 빠른 응답, 높은 동시성 처리 | 설정이 다소 복잡함          |\n\n비동기 방식은 특히 **대량의 요청을 처리하는 API 서버**나 **크롤러**를 운영할 때 매우 유용합니다.\n\n---\n\n## 5. 마치며\n\n이번 글에서는 SQLAlchemy의 비동기 설정 방법을 살펴보았습니다. 다음 글에서는 `database.py`를 비동기 방식으로 변경하고, **세션 관리 코드 통합**에 대해 다뤄보겠습니다! ��\n\n다음 글에서 만나요! 😊\n",
  "date": "2025-02-12",
  "category": "backend",
  "tags": [
    "FastAPI",
    "PostgreSQL",
    "Python",
    "Crawler",
    "asyncio",
    "SQLAlchemy",
    "비동기처리",
    "데이터수집",
    "실시간처리"
  ],
  "thumbnail": "/images/fastapi.png",
  "translations": {
    "ko": {
      "title": "FastAPI와 PostgreSQL을 활용한 아웃소싱 크롤러 개발",
      "description": "프리랜서 플랫폼의 프로젝트 정보를 실시간으로 수집하고 분석하는 크롤러를 만들어보았어요. FastAPI의 비동기 처리와 PostgreSQL의 강력한 기능을 활용해서 효율적인 시스템을 구축했답니다! 🚀",
      "content": "<h1 id=\"heading-0\">SQLAlchemy로 데이터베이스 비동기 처리 구현하기 🔄</h1>\n<p>안녕하세요! 오늘은 FastAPI 크롤러 프로젝트에서 <strong>데이터베이스 비동기 처리</strong>를 어떻게 구현했는지 자세히 공유해볼게요.</p>\n<h2 id=\"heading-1\">1. 들어가며 🎯</h2>\n<p>요즘 웹 개발에서 비동기 처리는 정말 중요한 요소가 되었어요. 특히 크롤러처럼 데이터를 많이 다루는 애플리케이션에서는 더욱 그렇죠! 이번 글에서는 제가 SQLAlchemy를 사용해서 비동기 데이터베이스 처리를 구현한 경험을 나눠볼게요.</p>\n<h2 id=\"heading-2\">2. 왜 비동기 처리가 필요했나요? 🤔</h2>\n<p>기존에 동기 방식으로 처리했을 때 몇 가지 문제점이 있었어요:</p>\n<ol>\n<li><strong>응답 지연</strong>: 데이터베이스 응답을 기다리는 동안 다른 작업을 못했어요</li>\n<li><strong>자원 낭비</strong>: 서버 리소스가 효율적으로 사용되지 못했죠</li>\n<li><strong>확장성 한계</strong>: 동시에 많은 요청이 들어오면 처리가 힘들었어요</li>\n</ol>\n<p>이런 문제들을 해결하기 위해 비동기 처리 도입이 필요했답니다!</p>\n<hr>\n<h2 id=\"heading-3\">3. SQLAlchemy 비동기 설정</h2>\n<h3 id=\"heading-4\">3.1 기존 동기 방식의 문제점</h3>\n<p>일반적으로 SQLAlchemy는 동기 방식으로 작동합니다. 하지만 동기 방식의 문제점은 다음과 같습니다.</p>\n<ul>\n<li><strong>I/O 블로킹</strong>: 데이터베이스에서 응답을 받을 때까지 애플리케이션이 대기해야 함</li>\n<li><strong>성능 저하</strong>: 많은 요청이 동시에 들어오면 응답 시간이 길어짐</li>\n<li><strong>확장성 부족</strong>: 다중 작업을 효과적으로 처리하기 어려움</li>\n</ul>\n<p>이를 해결하기 위해 <strong>SQLAlchemy 비동기 모드</strong>를 활용할 수 있습니다.</p>\n<hr>\n<h3 id=\"heading-5\">3.2 SQLAlchemy 비동기 설정 방법</h3>\n<h4 id=\"heading-6\">1) 비동기 엔진 생성 (<code>create_async_engine</code>)</h4>\n<pre><code class=\"language-python\">from sqlalchemy.ext.asyncio import create_async_engine\n\nDATABASE_URL = \"postgresql+asyncpg://user:password@localhost/dbname\"\nengine = create_async_engine(DATABASE_URL, echo=True)\n</code></pre>\n<h4 id=\"heading-7\">2) 비동기 세션 생성 (<code>async_session</code>)</h4>\n<pre><code class=\"language-python\">from sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.orm import sessionmaker\n\nasync_session = sessionmaker(\n    bind=engine,\n    class_=AsyncSession,\n    expire_on_commit=False\n)\n</code></pre>\n<h4 id=\"heading-8\">3) 데이터베이스 작업 예제 (비동기 방식)</h4>\n<pre><code class=\"language-python\">from models import User  # 가정한 모델\n\nasync def get_user_by_id(user_id: int):\n    async with async_session() as session:\n        result = await session.get(User, user_id)\n        return result\n</code></pre>\n<p>위 예제에서는 <code>async_session</code>을 사용하여 비동기적으로 데이터베이스에서 사용자를 조회합니다.</p>\n<hr>\n<h2 id=\"heading-9\">4. 기존 동기 방식과 비교</h2>\n<p>| 방식                  | 장점                        | 단점                        |\n| --------------------- | --------------------------- | --------------------------- |\n| 동기 (Synchronous)    | 간단한 코드, 익숙한 패턴    | 응답 속도 저하, 확장성 부족 |\n| 비동기 (Asynchronous) | 빠른 응답, 높은 동시성 처리 | 설정이 다소 복잡함          |</p>\n<p>비동기 방식은 특히 <strong>대량의 요청을 처리하는 API 서버</strong>나 <strong>크롤러</strong>를 운영할 때 매우 유용합니다.</p>\n<hr>\n<h2 id=\"heading-10\">5. 마치며</h2>\n<p>이번 글에서는 SQLAlchemy의 비동기 설정 방법을 살펴보았습니다. 다음 글에서는 <code>database.py</code>를 비동기 방식으로 변경하고, <strong>세션 관리 코드 통합</strong>에 대해 다뤄보겠습니다! ��</p>\n<p>다음 글에서 만나요! 😊</p>\n",
      "tocItems": [
        {
          "id": "heading-0",
          "text": "SQLAlchemy로 데이터베이스 비동기 처리 구현하기 🔄",
          "level": 1,
          "isMainTopic": true,
          "position": 0
        },
        {
          "id": "heading-1",
          "text": "1. 들어가며 🎯",
          "level": 2,
          "isMainTopic": true,
          "position": 50
        },
        {
          "id": "heading-2",
          "text": "2. 왜 비동기 처리가 필요했나요? 🤔",
          "level": 2,
          "isMainTopic": true,
          "position": 100
        },
        {
          "id": "heading-3",
          "text": "3. SQLAlchemy 비동기 설정",
          "level": 2,
          "isMainTopic": true,
          "position": 150
        },
        {
          "id": "heading-4",
          "text": "3.1 기존 동기 방식의 문제점",
          "level": 3,
          "isMainTopic": false,
          "position": 200
        },
        {
          "id": "heading-5",
          "text": "3.2 SQLAlchemy 비동기 설정 방법",
          "level": 3,
          "isMainTopic": false,
          "position": 250
        },
        {
          "id": "heading-6",
          "text": "1) 비동기 엔진 생성 (create_async_engine)",
          "level": 4,
          "isMainTopic": false,
          "position": 300
        },
        {
          "id": "heading-7",
          "text": "2) 비동기 세션 생성 (async_session)",
          "level": 4,
          "isMainTopic": false,
          "position": 350
        },
        {
          "id": "heading-8",
          "text": "3) 데이터베이스 작업 예제 (비동기 방식)",
          "level": 4,
          "isMainTopic": false,
          "position": 400
        },
        {
          "id": "heading-9",
          "text": "4. 기존 동기 방식과 비교",
          "level": 2,
          "isMainTopic": true,
          "position": 450
        },
        {
          "id": "heading-10",
          "text": "5. 마치며",
          "level": 2,
          "isMainTopic": true,
          "position": 500
        }
      ]
    },
    "en": {
      "title": "Building an Outsourcing Crawler with FastAPI and PostgreSQL",
      "description": "I created a crawler that collects and analyzes project information from freelance platforms in real-time. I built an efficient system using FastAPI's asynchronous processing and PostgreSQL's powerful features! 🚀",
      "content": "<h1 id=\"heading-0\">Implementing Asynchronous Database Operations with SQLAlchemy 🔄</h1>\n<p>Hello! Today I'll share in detail how I implemented <strong>asynchronous database operations</strong> in my FastAPI crawler project.</p>\n<h2 id=\"heading-1\">1. Introduction 🎯</h2>\n<p>Asynchronous processing has become a crucial element in modern web development. This is especially true for data-heavy applications like crawlers! In this post, I'll share my experience implementing asynchronous database operations using SQLAlchemy.</p>\n<h2 id=\"heading-2\">2. Why Did We Need Async Processing? 🤔</h2>\n<p>When using synchronous processing, we faced several issues:</p>\n<ol>\n<li><strong>Response Delays</strong>: Couldn't perform other tasks while waiting for database responses</li>\n<li><strong>Resource Waste</strong>: Server resources weren't being used efficiently</li>\n<li><strong>Scalability Limits</strong>: Struggled to handle many concurrent requests</li>\n</ol>\n<p>These problems made it necessary to implement asynchronous processing!</p>\n<hr>\n<h2 id=\"heading-3\">3. SQLAlchemy Async Configuration</h2>\n<h3 id=\"heading-4\">3.1 Issues with Traditional Synchronous Approach</h3>\n<p>SQLAlchemy typically operates synchronously. However, this synchronous approach has several drawbacks:</p>\n<ul>\n<li><strong>I/O Blocking</strong>: Application must wait for database responses</li>\n<li><strong>Performance Degradation</strong>: Response times increase with concurrent requests</li>\n<li><strong>Limited Scalability</strong>: Difficulty handling multiple operations effectively</li>\n</ul>\n<p>We can address these issues using <strong>SQLAlchemy's async mode</strong>.</p>\n<hr>\n<h3 id=\"heading-5\">3.2 Setting Up SQLAlchemy for Async Operations</h3>\n<h4 id=\"heading-6\">1) Creating an Async Engine (<code>create_async_engine</code>)</h4>\n",
      "tocItems": [
        {
          "id": "heading-0",
          "text": "Implementing Asynchronous Database Operations with SQLAlchemy 🔄",
          "level": 1,
          "isMainTopic": true,
          "position": 0
        },
        {
          "id": "heading-1",
          "text": "1. Introduction 🎯",
          "level": 2,
          "isMainTopic": true,
          "position": 50
        },
        {
          "id": "heading-2",
          "text": "2. Why Did We Need Async Processing? 🤔",
          "level": 2,
          "isMainTopic": true,
          "position": 100
        },
        {
          "id": "heading-3",
          "text": "3. SQLAlchemy Async Configuration",
          "level": 2,
          "isMainTopic": true,
          "position": 150
        },
        {
          "id": "heading-4",
          "text": "3.1 Issues with Traditional Synchronous Approach",
          "level": 3,
          "isMainTopic": false,
          "position": 200
        },
        {
          "id": "heading-5",
          "text": "3.2 Setting Up SQLAlchemy for Async Operations",
          "level": 3,
          "isMainTopic": false,
          "position": 250
        },
        {
          "id": "heading-6",
          "text": "1) Creating an Async Engine (create_async_engine)",
          "level": 4,
          "isMainTopic": false,
          "position": 300
        }
      ]
    }
  },
  "imageHeights": {}
}