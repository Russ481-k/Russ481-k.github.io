{
  "id": "entasis_engin_13",
  "title": "Entasis Engine - 데이터 수집기 구현",
  "content": "\n안녕하세요, 여러분! 😊\n\n오늘은 **Spring Boot** 기반으로 바이낸스의 현물과 선물 시장 데이터를 실시간으로 수집하여 **TimescaleDB**에 저장하는 데이터 수집기를 어떻게 구현했는지 공유해보려고 해요. 이 글에서는 시스템 아키텍처, API 호출 방법, 서비스 레이어 구성, 에러 처리 등 다양한 구현 포인트를 친근하게 풀어드릴게요!\n\n---\n\n## 시스템 개요\n\n우리 시스템은 아래와 같은 역할을 수행합니다:\n\n- **데이터 수집기**\n  - **BinanceExchange**: 바이낸스의 **현물 시장** 데이터(BTC/USDT, ETH/USDT) 수집\n  - **BinanceFuturesExchange**: 바이낸스의 **선물 시장** 데이터(BTCUSDT, ETHUSDT) 수집\n- **API 호출**: `WebClient`를 사용해 바이낸스 API를 호출합니다.\n- **서비스 레이어**\n  - `SpotMarketDataServiceImpl`: 현물 시장 데이터 처리\n  - `FuturesMarketDataServiceImpl`: 선물 시장 데이터 처리\n  - `ExchangeRepository`: 거래소 정보 관리 및 TimescaleDB 저장\n- **데이터 수집 주기**: 1초 간격으로 데이터 수집 및 저장\n- **에러 처리**: API 응답 null 체크, 예외 처리 및 로깅, 데이터베이스 제약조건 관련 오류 처리\n\n---\n\n## 주요 구현 포인트\n\n### 1. WebClient를 활용한 API 호출\n\n비동기 방식의 **WebClient**를 이용하여 바이낸스 API로부터 데이터를 호출합니다. 아래는 `BinanceExchange` 클래스의 예시입니다:\n\n```java\n@Service\npublic class BinanceExchange {\n\n    private static final Logger log = LoggerFactory.getLogger(BinanceExchange.class);\n    private final WebClient webClient = WebClient.create(\"https://api.binance.com\");\n\n    public Mono<JsonNode> getSpotMarketData(String symbol) {\n        return webClient.get()\n            .uri(uriBuilder -> uriBuilder\n                .path(\"/api/v3/ticker/price\")\n                .queryParam(\"symbol\", symbol)\n                .build())\n            .retrieve()\n            .bodyToMono(JsonNode.class)\n            .doOnError(e -> log.error(\"API 호출 중 에러 발생: {}\", e.getMessage()))\n            .onErrorReturn(null);\n    }\n}\n```\n\n> **Tip:** 에러 발생 시 로깅을 통해 문제를 쉽게 파악할 수 있고, `onErrorReturn(null)`을 사용해 null 체크로 이어지는 처리를 간편하게 했어요. 😉\n\n---\n\n### 2. 서비스 레이어 구현\n\n각 시장별 데이터를 처리하는 서비스 레이어에서는 API로부터 받은 데이터를 가공 후 저장하는 역할을 합니다. 예를 들어, `SpotMarketDataServiceImpl` 클래스는 다음과 같이 구성됩니다:\n\n```java\n@Service\npublic class SpotMarketDataServiceImpl implements SpotMarketDataService {\n\n    private static final Logger log = LoggerFactory.getLogger(SpotMarketDataServiceImpl.class);\n    private final BinanceExchange binanceExchange;\n    private final ExchangeRepository exchangeRepository;\n\n    public SpotMarketDataServiceImpl(BinanceExchange binanceExchange,\n                                     ExchangeRepository exchangeRepository) {\n        this.binanceExchange = binanceExchange;\n        this.exchangeRepository = exchangeRepository;\n    }\n\n    @Override\n    public void collectData() {\n        // 현물 시장: BTC/USDT, ETH/USDT 데이터를 수집합니다.\n        List<String> symbols = Arrays.asList(\"BTCUSDT\", \"ETHUSDT\");\n        for (String symbol : symbols) {\n            try {\n                JsonNode response = binanceExchange.getSpotMarketData(symbol).block();\n                if (response != null) {\n                    String price = response.get(\"price\").asText();\n                    ExchangeData data = new ExchangeData(symbol, price, LocalDateTime.now());\n                    exchangeRepository.save(data);\n                    log.info(\"데이터 저장 성공 - {}: {}\", symbol, price);\n                } else {\n                    log.warn(\"API 응답이 null입니다. symbol: {}\", symbol);\n                }\n            } catch (Exception e) {\n                log.error(\"데이터 수집 중 예외 발생: {}\", e.getMessage());\n            }\n        }\n    }\n}\n```\n\n> **참고:** 선물 시장 데이터 처리는 `FuturesMarketDataServiceImpl`에서 비슷한 로직으로 구현되며, 바이낸스의 선물 API 엔드포인트를 호출하도록 구성되어 있어요.\n\n---\n\n### 3. 스케줄러를 통한 주기적 데이터 수집\n\n데이터를 1초 간격으로 수집하기 위해 Spring의 `@Scheduled` 애노테이션을 활용했습니다:\n\n```java\n@Component\npublic class MarketDataScheduler {\n\n    private final SpotMarketDataService spotMarketDataService;\n    private final FuturesMarketDataService futuresMarketDataService;\n\n    public MarketDataScheduler(SpotMarketDataService spotMarketDataService,\n                               FuturesMarketDataService futuresMarketDataService) {\n        this.spotMarketDataService = spotMarketDataService;\n        this.futuresMarketDataService = futuresMarketDataService;\n    }\n\n    @Scheduled(fixedRate = 1000)\n    public void collectMarketData() {\n        spotMarketDataService.collectData();\n        futuresMarketDataService.collectData();\n    }\n}\n```\n\n> **노하우:** 주기적 데이터 수집 시, 반드시 예외 처리를 통해 스케줄러가 중단되지 않도록 하는 것이 중요해요. 😊\n\n---\n\n## 에러 처리 및 로깅\n\n- **API 응답 null 체크:** 응답이 null인 경우 적절한 경고 로깅을 수행하여 문제를 파악합니다.\n- **예외 처리:** try-catch 블록을 통해 예외 발생 시 로깅하고, 시스템 전체에 영향이 없도록 합니다.\n- **데이터베이스 제약조건 오류:** 저장 시 발생할 수 있는 제약조건 오류를 사전에 확인하고, 필요한 경우 트랜잭션 처리를 통해 안정성을 보장합니다.\n\n---\n\n## 마치며\n\n이와 같이 구현함으로써 **바이낸스**의 현물 및 선물 시장 데이터를 실시간으로 안정적으로 수집하고 **TimescaleDB**에 저장할 수 있게 되었어요. 이 과정에서 `WebClient`, 스케줄링, 에러 처리, 로깅 등 다양한 Spring Boot의 기능들을 활용하였는데요, 여러분의 프로젝트에도 도움이 되길 바랍니다! 🚀\n\n궁금한 점이나 의견이 있으시면 언제든지 편하게 이야기해 주세요! 좋은 하루 보내세요! 😄\n\nHappy Coding!\n",
  "date": "2025-02-14",
  "category": "projects",
  "tags": [
    "spring-boot",
    "binance-api",
    "webclient",
    "scheduler",
    "timescaledb",
    "data-collection",
    "error-handling"
  ],
  "thumbnail": "/images/cryptocurrency.jpg",
  "translations": {
    "ko": {
      "title": "Entasis Engine - 데이터 수집기 구현",
      "description": "가상자산 거래소 데이터 수집 및 저장 시스템 구현 가이드",
      "content": "<hr>\n<h2 id=\"heading-0\">title: \"Entasis Engine - 데이터 수집기 구현\"\ndate: \"2025-02-14\"\ncategory: \"projects\"\ndescription: \"가상자산 거래소 데이터 수집 및 저장 시스템 구현 가이드\"\ntags:\n[\n\"spring-boot\",\n\"binance-api\",\n\"webclient\",\n\"scheduler\",\n\"timescaledb\",\n\"data-collection\",\n\"error-handling\",\n]\nthumbnail: \"/images/cryptocurrency.jpg\"</h2>\n<p>안녕하세요, 여러분! 😊</p>\n<p>오늘은 <strong>Spring Boot</strong> 기반으로 바이낸스의 현물과 선물 시장 데이터를 실시간으로 수집하여 <strong>TimescaleDB</strong>에 저장하는 데이터 수집기를 어떻게 구현했는지 공유해보려고 해요. 이 글에서는 시스템 아키텍처, API 호출 방법, 서비스 레이어 구성, 에러 처리 등 다양한 구현 포인트를 친근하게 풀어드릴게요!</p>\n<hr>\n<h2 id=\"heading-1\">시스템 개요</h2>\n<p>우리 시스템은 아래와 같은 역할을 수행합니다:</p>\n<ul>\n<li><strong>데이터 수집기</strong>\n<ul>\n<li><strong>BinanceExchange</strong>: 바이낸스의 <strong>현물 시장</strong> 데이터(BTC/USDT, ETH/USDT) 수집</li>\n<li><strong>BinanceFuturesExchange</strong>: 바이낸스의 <strong>선물 시장</strong> 데이터(BTCUSDT, ETHUSDT) 수집</li>\n</ul>\n</li>\n<li><strong>API 호출</strong>: <code>WebClient</code>를 사용해 바이낸스 API를 호출합니다.</li>\n<li><strong>서비스 레이어</strong>\n<ul>\n<li><code>SpotMarketDataServiceImpl</code>: 현물 시장 데이터 처리</li>\n<li><code>FuturesMarketDataServiceImpl</code>: 선물 시장 데이터 처리</li>\n<li><code>ExchangeRepository</code>: 거래소 정보 관리 및 TimescaleDB 저장</li>\n</ul>\n</li>\n<li><strong>데이터 수집 주기</strong>: 1초 간격으로 데이터 수집 및 저장</li>\n<li><strong>에러 처리</strong>: API 응답 null 체크, 예외 처리 및 로깅, 데이터베이스 제약조건 관련 오류 처리</li>\n</ul>\n<hr>\n<h2 id=\"heading-2\">주요 구현 포인트</h2>\n<h3 id=\"heading-3\">1. WebClient를 활용한 API 호출</h3>\n<p>비동기 방식의 <strong>WebClient</strong>를 이용하여 바이낸스 API로부터 데이터를 호출합니다. 아래는 <code>BinanceExchange</code> 클래스의 예시입니다:</p>\n<pre><code class=\"language-java\">@Service\npublic class BinanceExchange {\n\n<pre><code>private static final Logger log = LoggerFactory.getLogger(BinanceExchange.class);\nprivate final WebClient webClient = WebClient.create(\"https://api.binance.com\");\n\npublic Mono&amp;#x3C;JsonNode&gt; getSpotMarketData(String symbol) {\n    return webClient.get()\n        .uri(uriBuilder -&gt; uriBuilder\n            .path(\"/api/v3/ticker/price\")\n            .queryParam(\"symbol\", symbol)\n            .build())\n        .retrieve()\n        .bodyToMono(JsonNode.class)\n        .doOnError(e -&gt; log.error(\"API 호출 중 에러 발생: {}\", e.getMessage()))\n        .onErrorReturn(null);\n}\n</code></pre>\n</code><p><code class=\"language-java\">}<br></code></p></pre><p></p><blockquote>\n<p><strong>Tip:</strong> 에러 발생 시 로깅을 통해 문제를 쉽게 파악할 수 있고, <code>onErrorReturn(null)</code>을 사용해 null 체크로 이어지는 처리를 간편하게 했어요. 😉</p>\n</blockquote>\n<hr>\n<h3 id=\"heading-4\">2. 서비스 레이어 구현</h3>\n<p>각 시장별 데이터를 처리하는 서비스 레이어에서는 API로부터 받은 데이터를 가공 후 저장하는 역할을 합니다. 예를 들어, <code>SpotMarketDataServiceImpl</code> 클래스는 다음과 같이 구성됩니다:</p>\n<pre><code class=\"language-java\">@Service\npublic class SpotMarketDataServiceImpl implements SpotMarketDataService {\n\n<pre><code>private static final Logger log = LoggerFactory.getLogger(SpotMarketDataServiceImpl.class);\nprivate final BinanceExchange binanceExchange;\nprivate final ExchangeRepository exchangeRepository;\n\npublic SpotMarketDataServiceImpl(BinanceExchange binanceExchange,\n                                 ExchangeRepository exchangeRepository) {\n    this.binanceExchange = binanceExchange;\n    this.exchangeRepository = exchangeRepository;\n}\n\n@Override\npublic void collectData() {\n    // 현물 시장: BTC/USDT, ETH/USDT 데이터를 수집합니다.\n    List&amp;#x3C;String&gt; symbols = Arrays.asList(\"BTCUSDT\", \"ETHUSDT\");\n    for (String symbol : symbols) {\n        try {\n            JsonNode response = binanceExchange.getSpotMarketData(symbol).block();\n            if (response != null) {\n                String price = response.get(\"price\").asText();\n                ExchangeData data = new ExchangeData(symbol, price, LocalDateTime.now());\n                exchangeRepository.save(data);\n                log.info(\"데이터 저장 성공 - {}: {}\", symbol, price);\n            } else {\n                log.warn(\"API 응답이 null입니다. symbol: {}\", symbol);\n            }\n        } catch (Exception e) {\n            log.error(\"데이터 수집 중 예외 발생: {}\", e.getMessage());\n        }\n    }\n}\n</code></pre>\n</code><p><code class=\"language-java\">}<br></code></p></pre><p></p><blockquote>\n<p><strong>참고:</strong> 선물 시장 데이터 처리는 <code>FuturesMarketDataServiceImpl</code>에서 비슷한 로직으로 구현되며, 바이낸스의 선물 API 엔드포인트를 호출하도록 구성되어 있어요.</p>\n</blockquote>\n<hr>\n<h3 id=\"heading-5\">3. 스케줄러를 통한 주기적 데이터 수집</h3>\n<p>데이터를 1초 간격으로 수집하기 위해 Spring의 <code>@Scheduled</code> 애노테이션을 활용했습니다:</p>\n<pre><code class=\"language-java\">@Component\npublic class MarketDataScheduler {\n\n<pre><code>private final SpotMarketDataService spotMarketDataService;\nprivate final FuturesMarketDataService futuresMarketDataService;\n\npublic MarketDataScheduler(SpotMarketDataService spotMarketDataService,\n                           FuturesMarketDataService futuresMarketDataService) {\n    this.spotMarketDataService = spotMarketDataService;\n    this.futuresMarketDataService = futuresMarketDataService;\n}\n\n@Scheduled(fixedRate = 1000)\npublic void collectMarketData() {\n    spotMarketDataService.collectData();\n    futuresMarketDataService.collectData();\n}\n</code></pre>\n</code><p><code class=\"language-java\">}<br></code></p></pre><p></p><blockquote>\n<p><strong>노하우:</strong> 주기적 데이터 수집 시, 반드시 예외 처리를 통해 스케줄러가 중단되지 않도록 하는 것이 중요해요. 😊</p>\n</blockquote>\n<hr>\n<h2 id=\"heading-6\">에러 처리 및 로깅</h2>\n<ul>\n<li><strong>API 응답 null 체크:</strong> 응답이 null인 경우 적절한 경고 로깅을 수행하여 문제를 파악합니다.</li>\n<li><strong>예외 처리:</strong> try-catch 블록을 통해 예외 발생 시 로깅하고, 시스템 전체에 영향이 없도록 합니다.</li>\n<li><strong>데이터베이스 제약조건 오류:</strong> 저장 시 발생할 수 있는 제약조건 오류를 사전에 확인하고, 필요한 경우 트랜잭션 처리를 통해 안정성을 보장합니다.</li>\n</ul>\n<hr>\n<h2 id=\"heading-7\">마치며</h2>\n<p>이와 같이 구현함으로써 <strong>바이낸스</strong>의 현물 및 선물 시장 데이터를 실시간으로 안정적으로 수집하고 <strong>TimescaleDB</strong>에 저장할 수 있게 되었어요. 이 과정에서 <code>WebClient</code>, 스케줄링, 에러 처리, 로깅 등 다양한 Spring Boot의 기능들을 활용하였는데요, 여러분의 프로젝트에도 도움이 되길 바랍니다! 🚀</p>\n<p>궁금한 점이나 의견이 있으시면 언제든지 편하게 이야기해 주세요! 좋은 하루 보내세요! 😄</p>\n<p>Happy Coding!</p>\n",
      "tocItems": [
        {
          "id": "heading-0",
          "text": "title: \"Entasis Engine - 데이터 수집기 구현\"\ndate: \"2025-02-14\"\ncategory: \"projects\"\ndescription: \"가상자산 거래소 데이터 수집 및 저장 시스템 구현 가이드\"\ntags:\n[\n\"spring-boot\",\n\"binance-api\",\n\"webclient\",\n\"scheduler\",\n\"timescaledb\",\n\"data-collection\",\n\"error-handling\",\n]\nthumbnail: \"/images/cryptocurrency.jpg\"",
          "level": 2,
          "isMainTopic": true,
          "position": 0
        },
        {
          "id": "heading-1",
          "text": "시스템 개요",
          "level": 2,
          "isMainTopic": true,
          "position": 50
        },
        {
          "id": "heading-2",
          "text": "주요 구현 포인트",
          "level": 2,
          "isMainTopic": true,
          "position": 100
        },
        {
          "id": "heading-3",
          "text": "1. WebClient를 활용한 API 호출",
          "level": 3,
          "isMainTopic": false,
          "position": 150
        },
        {
          "id": "heading-4",
          "text": "2. 서비스 레이어 구현",
          "level": 3,
          "isMainTopic": false,
          "position": 200
        },
        {
          "id": "heading-5",
          "text": "3. 스케줄러를 통한 주기적 데이터 수집",
          "level": 3,
          "isMainTopic": false,
          "position": 250
        },
        {
          "id": "heading-6",
          "text": "에러 처리 및 로깅",
          "level": 2,
          "isMainTopic": true,
          "position": 300
        },
        {
          "id": "heading-7",
          "text": "마치며",
          "level": 2,
          "isMainTopic": true,
          "position": 350
        }
      ]
    },
    "en": {
      "title": "Entasis Engine - Data Collector Implementation",
      "description": "Guide for implementing cryptocurrency exchange data collection and storage system",
      "content": "<hr>\n<h2 id=\"heading-0\">title: \"Entasis Engine - Data Collector Implementation\"\ndate: \"2025-02-14\"\ncategory: \"projects\"\ndescription: \"Guide for implementing cryptocurrency exchange data collection and storage system\"\ntags:\n[\n\"spring-boot\",\n\"binance-api\",\n\"webclient\",\n\"scheduler\",\n\"timescaledb\",\n\"data-collection\",\n\"error-handling\",\n]\nthumbnail: \"/images/cryptocurrency.jpg\"</h2>\n<p>Hello everyone! 😊</p>\n<p>Today, I'd like to share how we implemented a data collector based on <strong>Spring Boot</strong> that collects real-time spot and futures market data from Binance and stores it in <strong>TimescaleDB</strong>. In this post, I'll walk you through various implementation points including system architecture, API calls, service layer configuration, and error handling in a friendly way!</p>\n<hr>\n<h2 id=\"heading-1\">System Overview</h2>\n<p>Our system performs the following roles:</p>\n<ul>\n<li><strong>Data Collector</strong>\n<ul>\n<li><strong>BinanceExchange</strong>: Collects <strong>spot market</strong> data (BTC/USDT, ETH/USDT) from Binance</li>\n<li><strong>BinanceFuturesExchange</strong>: Collects <strong>futures market</strong> data (BTCUSDT, ETHUSDT) from Binance</li>\n</ul>\n</li>\n<li><strong>API Calls</strong>: Uses <code>WebClient</code> to call Binance APIs</li>\n<li><strong>Service Layer</strong>\n<ul>\n<li><code>SpotMarketDataServiceImpl</code>: Processes spot market data</li>\n<li><code>FuturesMarketDataServiceImpl</code>: Processes futures market data</li>\n<li><code>ExchangeRepository</code>: Manages exchange information and TimescaleDB storage</li>\n</ul>\n</li>\n<li><strong>Data Collection Interval</strong>: Collects and stores data at 1-second intervals</li>\n<li><strong>Error Handling</strong>: API response null checks, exception handling and logging, database constraint error handling</li>\n</ul>\n<hr>\n<h2 id=\"heading-2\">Key Implementation Points</h2>\n<h3 id=\"heading-3\">1. API Calls Using WebClient</h3>\n<p>We use the asynchronous <strong>WebClient</strong> to call data from the Binance API. Here's an example from the <code>BinanceExchange</code> class:</p>\n",
      "tocItems": [
        {
          "id": "heading-0",
          "text": "title: \"Entasis Engine - Data Collector Implementation\"\ndate: \"2025-02-14\"\ncategory: \"projects\"\ndescription: \"Guide for implementing cryptocurrency exchange data collection and storage system\"\ntags:\n[\n\"spring-boot\",\n\"binance-api\",\n\"webclient\",\n\"scheduler\",\n\"timescaledb\",\n\"data-collection\",\n\"error-handling\",\n]\nthumbnail: \"/images/cryptocurrency.jpg\"",
          "level": 2,
          "isMainTopic": true,
          "position": 0
        },
        {
          "id": "heading-1",
          "text": "System Overview",
          "level": 2,
          "isMainTopic": true,
          "position": 50
        },
        {
          "id": "heading-2",
          "text": "Key Implementation Points",
          "level": 2,
          "isMainTopic": true,
          "position": 100
        },
        {
          "id": "heading-3",
          "text": "1. API Calls Using WebClient",
          "level": 3,
          "isMainTopic": false,
          "position": 150
        }
      ]
    }
  },
  "imageHeights": {}
}