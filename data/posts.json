[
  {
    "id": "about-me",
    "title": "개발자 윤수빈입니다.",
    "content": "\n## About Me\n\n금융공학과 데이터 처리에 특화된 풀스택 엔지니어입니다. Next.js, Python, Java를 활용하여 대규모 데이터 처리 및 금융 시스템을 구축하며, 알고리즘 최적화와 안정적인 웹 솔루션 개발에 중점을 두고 있습니다.\n\n다양한 프로젝트 경험을 통해 복잡한 데이터 구조를 효율적으로 처리하고, 금융 모델을 실시간으로 구현하는 데 강점을 가지고 있습니다. 금융 플랫폼 개발에 있어 혁신적인 접근을 추구하며, 확장성 있는 웹 애플리케이션과 데이터를 활용한 전략적 시스템 구축을 통해 비즈니스 가치를 창출하고자 합니다.\n\n## Contact\n\n- **Location**: Busan, South Korea\n- **E-mail**: yunsubin481@gmail.com\n- **Notion**: [Bin's Space](https://binsspace.notion.site/Bin-s-Space)\n\n## Research & Studies\n\n- **금융공학**: 투자론, 거시경제, 회계 연구\n- **컴퓨터 과학**: 자료구조, 네트워크, 데이터베이스, AI 연구\n- **블록체인**: STO 기반 증권형 토큰 거래소, NFT 거래소 프로젝트 연구\n\n## Education\n\n- **2018 - 2019**: Bachelor of Business (독학학위제)\n  - 금융공학, 투자론, 거시경제, 회계 전공\n- **2019 - 2024**: Bachelor of Computer Science (독학학위제)\n  - 자료구조, 네트워크, 데이터베이스, AI 전공\n- **2022 - 2023**: BootCamp BlockChain (CodeStates)\n  - STO, NFT, DeFi 플랫폼 개발 과정 수료\n\n## Experience\n\n### VISIONTEC (FullStack Developer)\n\n**2024-05 ~ 2025-01**\n\n- 삼성화재, 한양대학교 데이터 관리 시스템 총괄\n- 실시간 데이터 처리 속도 최적화 (800건/초 → 25,000건/초)\n- 대규모 로그 데이터 분석 및 시각화 시스템 구축\n- Next.js, PostgreSQL, Prisma, Docker, ChakraUI\n- 기획 및 디자인 포함 기여도 100%\n\n**2024-01 ~ 2024-05**\n\n- 금융 ERP 시스템 마이그레이션\n- 레거시 시스템을 React와 Flask 기반으로 현대화\n- 실시간 금융 데이터 처리 및 성능 최적화\n- React, ChakraUI, Python Flask, MariaDB\n- 기여도 35%\n\n### IDINO (FullStack Developer)\n\n**2024-05 ~ 현재**\n\n- 학사행정 시스템 개발\n- 마산대학교, 강원대학교, 여주대학교 장학생 관리 시스템 개발\n- 기업 협업 및 자문 결재 시스템 개발\n- 교원 평가 관리 및 학생 평가 관리 시스템 구축\n- JAVA JSP, WebSquare, MySQL\n- 기여도 35%\n\n### KT, NAVER, KAKAO 연동 (Frontend Developer)\n\n**2023-09 ~ 2024-01**\n\n- 문자 대량 발송 상담 챗봇 관리 시스템 개발\n- Redux를 이용한 사용자 데이터 및 권한 관리 기능 구현\n- KT API를 통한 대량 문자 발송 기능 구현\n- 카카오톡 알림톡 대량 발송 기능 구현\n- 챗봇 시나리오 및 템플릿 관리 기능 구현\n- 기여도 90%\n\n### NICEpay, 반응형 웹 (Frontend Developer)\n\n**2023-04 ~ 2023-09**\n\n- 전자문서 및 전자고지 발송 기능 개발\n- NICEpay 결제 기능 연동\n- 통계 페이지 및 반응형 웹 기능 개발\n\n![Profile Image 3](/images/profile3.jpg)\n\n## Core Competencies\n\n### 금융 시스템 개발 전문성\n\n복잡한 금융 모델을 실시간으로 처리하고 시각화하는 시스템 개발에 전문성을 보유하고 있습니다.\n대규모 데이터 처리 시스템 구축 경험을 통해, 금융 시장의 빠른 변화에 대응할 수 있는 확장성 있는 솔루션을 제공합니다.\n\n### 지속적인 학습과 혁신\n\n금융 시장과 기술의 빠른 변화에 대응하기 위해 끊임없이 새로운 것을 학습하고 있습니다.\n독학으로 금융공학과 컴퓨터 과학을 습득했으며, 블록체인과 같은 최신 기술을 금융 시스템에 접목시키는 시도를 지속하고 있습니다.\n\n### 문제 해결 능력\n\n복잡한 금융 데이터 처리 문제를 분석하고 효과적인 해결책을 찾아내는 과정에서 큰 성과를 이루어냈습니다.\n삼성화재와 한양대학교 프로젝트에서 데이터 처리 속도를 획기적으로 향상시킨 경험은 문제 해결에 대한 자신감을 더해주었습니다.\n\n### 건강한 신체 관리\n\n지속적인 성과 창출을 위해 체력 관리를 중요하게 생각합니다.\n주 5회, 하루 1시간 30분의 꾸준한 운동을 통해 업무 효율성과 집중력을 유지하고 있습니다.\n",
    "date": "2024-03-20",
    "category": "about",
    "tags": [
      "Full Stack",
      "Next.js",
      "Python",
      "Financial"
    ],
    "thumbnail": "/images/profile1.jpg",
    "translations": {
      "ko": {
        "title": "개발자 윤수빈입니다.",
        "description": "Hello! 👋 I am a Full Stack Engineer specialized in Financial Engineering and Data Processing.",
        "content": "<h2 id=\"heading-0\">About Me</h2>\n<p>금융공학과 데이터 처리에 특화된 풀스택 엔지니어입니다. Next.js, Python, Java를 활용하여 대규모 데이터 처리 및 금융 시스템을 구축하며, 알고리즘 최적화와 안정적인 웹 솔루션 개발에 중점을 두고 있습니다.</p>\n<p>다양한 프로젝트 경험을 통해 복잡한 데이터 구조를 효율적으로 처리하고, 금융 모델을 실시간으로 구현하는 데 강점을 가지고 있습니다. 금융 플랫폼 개발에 있어 혁신적인 접근을 추구하며, 확장성 있는 웹 애플리케이션과 데이터를 활용한 전략적 시스템 구축을 통해 비즈니스 가치를 창출하고자 합니다.</p>\n<h2 id=\"heading-1\">Contact</h2>\n<ul>\n<li><strong>Location</strong>: Busan, South Korea</li>\n<li><strong>E-mail</strong>: <a href=\"mailto:yunsubin481@gmail.com\">yunsubin481@gmail.com</a></li>\n<li><strong>Notion</strong>: <a href=\"https://binsspace.notion.site/Bin-s-Space\">Bin's Space</a></li>\n</ul>\n<h2 id=\"heading-2\">Research &amp; Studies</h2>\n<ul>\n<li><strong>금융공학</strong>: 투자론, 거시경제, 회계 연구</li>\n<li><strong>컴퓨터 과학</strong>: 자료구조, 네트워크, 데이터베이스, AI 연구</li>\n<li><strong>블록체인</strong>: STO 기반 증권형 토큰 거래소, NFT 거래소 프로젝트 연구</li>\n</ul>\n<h2 id=\"heading-3\">Education</h2>\n<ul>\n<li><strong>2018 - 2019</strong>: Bachelor of Business (독학학위제)\n<ul>\n<li>금융공학, 투자론, 거시경제, 회계 전공</li>\n</ul>\n</li>\n<li><strong>2019 - 2024</strong>: Bachelor of Computer Science (독학학위제)\n<ul>\n<li>자료구조, 네트워크, 데이터베이스, AI 전공</li>\n</ul>\n</li>\n<li><strong>2022 - 2023</strong>: BootCamp BlockChain (CodeStates)\n<ul>\n<li>STO, NFT, DeFi 플랫폼 개발 과정 수료</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"heading-4\">Experience</h2>\n<h3 id=\"heading-5\">VISIONTEC (FullStack Developer)</h3>\n<p><strong>2024-05 ~ 2025-01</strong></p>\n<ul>\n<li>삼성화재, 한양대학교 데이터 관리 시스템 총괄</li>\n<li>실시간 데이터 처리 속도 최적화 (800건/초 → 25,000건/초)</li>\n<li>대규모 로그 데이터 분석 및 시각화 시스템 구축</li>\n<li>Next.js, PostgreSQL, Prisma, Docker, ChakraUI</li>\n<li>기획 및 디자인 포함 기여도 100%</li>\n</ul>\n<p><strong>2024-01 ~ 2024-05</strong></p>\n<ul>\n<li>금융 ERP 시스템 마이그레이션</li>\n<li>레거시 시스템을 React와 Flask 기반으로 현대화</li>\n<li>실시간 금융 데이터 처리 및 성능 최적화</li>\n<li>React, ChakraUI, Python Flask, MariaDB</li>\n<li>기여도 35%</li>\n</ul>\n<h3 id=\"heading-6\">IDINO (FullStack Developer)</h3>\n<p><strong>2024-05 ~ 현재</strong></p>\n<ul>\n<li>학사행정 시스템 개발</li>\n<li>마산대학교, 강원대학교, 여주대학교 장학생 관리 시스템 개발</li>\n<li>기업 협업 및 자문 결재 시스템 개발</li>\n<li>교원 평가 관리 및 학생 평가 관리 시스템 구축</li>\n<li>JAVA JSP, WebSquare, MySQL</li>\n<li>기여도 35%</li>\n</ul>\n<h3 id=\"heading-7\">KT, NAVER, KAKAO 연동 (Frontend Developer)</h3>\n<p><strong>2023-09 ~ 2024-01</strong></p>\n<ul>\n<li>문자 대량 발송 상담 챗봇 관리 시스템 개발</li>\n<li>Redux를 이용한 사용자 데이터 및 권한 관리 기능 구현</li>\n<li>KT API를 통한 대량 문자 발송 기능 구현</li>\n<li>카카오톡 알림톡 대량 발송 기능 구현</li>\n<li>챗봇 시나리오 및 템플릿 관리 기능 구현</li>\n<li>기여도 90%</li>\n</ul>\n<h3 id=\"heading-8\">NICEpay, 반응형 웹 (Frontend Developer)</h3>\n<p><strong>2023-04 ~ 2023-09</strong></p>\n<ul>\n<li>전자문서 및 전자고지 발송 기능 개발</li>\n<li>NICEpay 결제 기능 연동</li>\n<li>통계 페이지 및 반응형 웹 기능 개발</li>\n</ul>\n<p><img src=\"/images/profile3.jpg\" alt=\"Profile Image 3\"></p>\n<h2 id=\"heading-9\">Core Competencies</h2>\n<h3 id=\"heading-10\">금융 시스템 개발 전문성</h3>\n<p>복잡한 금융 모델을 실시간으로 처리하고 시각화하는 시스템 개발에 전문성을 보유하고 있습니다.\n대규모 데이터 처리 시스템 구축 경험을 통해, 금융 시장의 빠른 변화에 대응할 수 있는 확장성 있는 솔루션을 제공합니다.</p>\n<h3 id=\"heading-11\">지속적인 학습과 혁신</h3>\n<p>금융 시장과 기술의 빠른 변화에 대응하기 위해 끊임없이 새로운 것을 학습하고 있습니다.\n독학으로 금융공학과 컴퓨터 과학을 습득했으며, 블록체인과 같은 최신 기술을 금융 시스템에 접목시키는 시도를 지속하고 있습니다.</p>\n<h3 id=\"heading-12\">문제 해결 능력</h3>\n<p>복잡한 금융 데이터 처리 문제를 분석하고 효과적인 해결책을 찾아내는 과정에서 큰 성과를 이루어냈습니다.\n삼성화재와 한양대학교 프로젝트에서 데이터 처리 속도를 획기적으로 향상시킨 경험은 문제 해결에 대한 자신감을 더해주었습니다.</p>\n<h3 id=\"heading-13\">건강한 신체 관리</h3>\n<p>지속적인 성과 창출을 위해 체력 관리를 중요하게 생각합니다.\n주 5회, 하루 1시간 30분의 꾸준한 운동을 통해 업무 효율성과 집중력을 유지하고 있습니다.</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "About Me",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "Contact",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "Research & Studies",
            "level": 2,
            "isMainTopic": true,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "Education",
            "level": 2,
            "isMainTopic": true,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "Experience",
            "level": 2,
            "isMainTopic": true,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "VISIONTEC (FullStack Developer)",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "IDINO (FullStack Developer)",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "KT, NAVER, KAKAO 연동 (Frontend Developer)",
            "level": 3,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "NICEpay, 반응형 웹 (Frontend Developer)",
            "level": 3,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "Core Competencies",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-10",
            "text": "금융 시스템 개발 전문성",
            "level": 3,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "지속적인 학습과 혁신",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "문제 해결 능력",
            "level": 3,
            "isMainTopic": false,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "건강한 신체 관리",
            "level": 3,
            "isMainTopic": false,
            "position": 650
          }
        ]
      },
      "en": {
        "title": "I am Developer Subin Yun",
        "description": "Hello! 👋 I am a Full Stack Engineer specialized in Financial Engineering and Data Processing.",
        "content": "<h2 id=\"heading-0\">About Me</h2>\n<p>I am a Full Stack Engineer specialized in Financial Engineering and Data Processing. Using Next.js, Python, and Java, I focus on building large-scale data processing and financial systems, with emphasis on algorithm optimization and stable web solution development.</p>\n<p>Through diverse project experiences, I have strengths in efficiently handling complex data structures and implementing financial models in real-time. I pursue innovative approaches in financial platform development and aim to create business value through scalable web applications and strategic systems utilizing data.</p>\n<h2 id=\"heading-1\">Contact</h2>\n<ul>\n<li><strong>Location</strong>: Busan, South Korea</li>\n<li><strong>E-mail</strong>: <a href=\"mailto:yunsubin481@gmail.com\">yunsubin481@gmail.com</a></li>\n<li><strong>Notion</strong>: <a href=\"https://binsspace.notion.site/Bin-s-Space\">Bin's Space</a></li>\n</ul>\n<h2 id=\"heading-2\">Research &amp; Studies</h2>\n<ul>\n<li><strong>Financial Engineering</strong>: Investment Theory, Macroeconomics, Accounting Research</li>\n<li><strong>Computer Science</strong>: Data Structures, Networks, Databases, AI Research</li>\n<li><strong>Blockchain</strong>: STO-based Security Token Exchange, NFT Exchange Project Research</li>\n</ul>\n<h2 id=\"heading-3\">Education</h2>\n<ul>\n<li><strong>2018 - 2019</strong>: Bachelor of Business (Self-Study Degree Program)\n<ul>\n<li>Major in Financial Engineering, Investment Theory, Macroeconomics, Accounting</li>\n</ul>\n</li>\n<li><strong>2019 - 2024</strong>: Bachelor of Computer Science (Self-Study Degree Program)\n<ul>\n<li>Major in Data Structures, Networks, Databases, AI</li>\n</ul>\n</li>\n<li><strong>2022 - 2023</strong>: BootCamp BlockChain (CodeStates)\n<ul>\n<li>Completed STO, NFT, DeFi Platform Development Course</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"heading-4\">Experience</h2>\n<h3 id=\"heading-5\">VISIONTEC (FullStack Developer)</h3>\n<p><strong>2024-05 ~ 2025-01</strong></p>\n<ul>\n<li>Overall management of Samsung Fire &amp; Marine Insurance and Hanyang University data management systems</li>\n<li>Optimized real-time data processing speed (800 transactions/sec → 25,000 transactions/sec)</li>\n<li>Built large-scale log data analysis and visualization system</li>\n<li>Next.js, PostgreSQL, Prisma, Docker, ChakraUI</li>\n<li>100% contribution including planning and design</li>\n</ul>\n<p><strong>2024-01 ~ 2024-05</strong></p>\n<ul>\n<li>Financial ERP system migration</li>\n<li>Modernized legacy system to React and Flask-based architecture</li>\n<li>Real-time financial data processing and performance optimization</li>\n<li>React, ChakraUI, Python Flask, MariaDB</li>\n<li>35% contribution</li>\n</ul>\n<h3 id=\"heading-6\">IDINO (FullStack Developer)</h3>\n<p><strong>2024-05 ~ Present</strong></p>\n<ul>\n<li>Academic administration system development</li>\n<li>Scholarship management system development for Masan University, Kangwon University, Yeoju University</li>\n<li>Corporate collaboration and consultation approval system development</li>\n<li>Faculty evaluation management and student assessment management system implementation</li>\n<li>JAVA JSP, WebSquare, MySQL</li>\n<li>35% contribution</li>\n</ul>\n<h3 id=\"heading-7\">KT, NAVER, KAKAO Integration (Frontend Developer)</h3>\n<p><strong>2023-09 ~ 2024-01</strong></p>\n<ul>\n<li>Developed bulk messaging and chatbot management system</li>\n<li>Implemented user data and permission management using Redux</li>\n<li>Implemented bulk messaging functionality through KT API</li>\n<li>Implemented KakaoTalk notification bulk sending feature</li>\n<li>Developed chatbot scenario and template management features</li>\n<li>90% contribution</li>\n</ul>\n<h3 id=\"heading-8\">NICEpay, Responsive Web (Frontend Developer)</h3>\n<p><strong>2023-04 ~ 2023-09</strong></p>\n<ul>\n<li>Developed electronic document and notification delivery features</li>\n<li>Integrated NICEpay payment functionality</li>\n<li>Developed statistics page and responsive web features</li>\n</ul>\n<p><img src=\"/images/profile3.jpg\" alt=\"Profile Image 3\"></p>\n<h2 id=\"heading-9\">Core Competencies</h2>\n<h3 id=\"heading-10\">Financial System Development Expertise</h3>\n<p>I possess expertise in developing systems that process and visualize complex financial models in real-time.\nThrough experience in building large-scale data processing systems, I provide scalable solutions that can respond to rapid changes in the financial market.</p>\n<h3 id=\"heading-11\">Continuous Learning and Innovation</h3>\n<p>I continuously learn new technologies to respond to rapid changes in financial markets and technology.\nI have self-taught financial engineering and computer science, and continue to attempt integrating cutting-edge technologies like blockchain into financial systems.</p>\n<h3 id=\"heading-12\">Problem-Solving Ability</h3>\n<p>I have achieved significant results in analyzing complex financial data processing problems and finding effective solutions.\nThe experience of dramatically improving data processing speed in Samsung Fire &amp; Marine Insurance and Hanyang University projects has added to my confidence in problem-solving.</p>\n<h3 id=\"heading-13\">Physical Health Management</h3>\n<p>I consider physical fitness management important for continuous performance.\nI maintain work efficiency and concentration through consistent exercise of 1.5 hours per day, 5 times a week.</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "About Me",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "Contact",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "Research & Studies",
            "level": 2,
            "isMainTopic": true,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "Education",
            "level": 2,
            "isMainTopic": true,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "Experience",
            "level": 2,
            "isMainTopic": true,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "VISIONTEC (FullStack Developer)",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "IDINO (FullStack Developer)",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "KT, NAVER, KAKAO Integration (Frontend Developer)",
            "level": 3,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "NICEpay, Responsive Web (Frontend Developer)",
            "level": 3,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "Core Competencies",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-10",
            "text": "Financial System Development Expertise",
            "level": 3,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "Continuous Learning and Innovation",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "Problem-Solving Ability",
            "level": 3,
            "isMainTopic": false,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "Physical Health Management",
            "level": 3,
            "isMainTopic": false,
            "position": 650
          }
        ]
      }
    },
    "imageHeights": {
      "img-9": 400
    }
  },
  {
    "id": "career",
    "title": "개발자 윤수빈입니다.",
    "content": "\n## 프로젝트 경력\n\n---\n\n### 국제 아웃소싱 데이터 크롤링 웹서비스\n\n- **기간**: 2025.02 ~ 2025.03\n- **역할**: Full Stack Developer (기여도 100%)\n- **기술**: FastAPI, Next.js, React Query, PostgreSQL\n- **주요 성과**:\n  - 아웃소싱 플랫폼의 신규 프로젝트 실시간 DB 반영 (INSERT, UPDATE)\n  - 국가 간 임금 격차 해소 및 한국 개발자의 해외 진출 지원\n\n---\n\n### 사이니지 통합관제 플랫폼\n\n- **기간**: 2024.12 ~ 2025.03\n- **역할**: Full Stack Developer (기여도 100%)\n- **기술**: React Native (Expo), Socket, 음성인식 알고리즘\n- **주요 성과**:\n  - 음성인식률 95% 달성 (리히텐슈타인 거리, 자카드 유사도, 초성, 한글 특화 알고리즘 조합)\n  - 기능 도달률 99%\n  - 안드로이드 사이니지 클라이언트 개발\n  - 초당 1만건 데이터 처리 기능 구현\n\n---\n\n### 삼성화재, 한양대학교 PoC 로그데이터 관리 시스템\n\n- **기간**: 2024.05 ~ 2024.11\n- **역할**: Full Stack Developer (기여도 100%)\n- **기술**: Next.js, PostgreSQL, Prisma, Docker, ChakraUI\n- **주요 성과**:\n  - 로그 데이터 관리 시스템 전체 개발\n  - 데이터 처리 및 시각화 최적화\n\n---\n\n### 네트워크 보안 장비 업체 ERP 시스템 마이그레이션\n\n- **기간**: 2024.01 ~ 2024.05\n- **역할**: Full Stack Developer (기여도 35%)\n- **기술**: React, ChakraUI, Python Flask, MariaDB\n- **주요 성과**:\n  - 레거시 시스템을 React와 Flask 기반으로 마이그레이션\n  - 사용자 UI/UX 개선 및 성능 향상\n\n---\n\n### 학사행정프로그램 개발\n\n#### 마산대학교\n\n- **기간**: 2024.05\n- **역할**: Full Stack Developer (기여도 100%)\n- **기술**: JAVA JSP, WebSquare, MySQL\n- **주요 성과**: 장학생 관리 시스템 개발, 학사 관리 시스템 구현\n\n#### 강원대학교\n\n- **기간**: 2024.08 ~ 2024.11\n- **기술**: JAVA JSP, WebSquare, OracleDB\n- **주요 성과**: 기업 협업 및 자문 결재 시스템 개발, 결재내역 문서화 및 출력 기능 구현\n\n#### 여주대학교\n\n- **기간**: 2024.06 ~ 2024.07\n- **기술**: JAVA JSP, WebSquare, OracleDB\n- **주요 성과**: 교원 평가 관리 및 학생 평가 관리 시스템 구축\n\n---\n\n### 문자 대량 발송 상담 챗봇 관리 시스템\n\n- **기간**: 2023.09 ~ 2024.01\n- **역할**: Frontend Developer (기여도 90%)\n- **기술**: Redux, KT 연동 API, 카카오톡 연동\n- **주요 성과**:\n  - Redux를 이용한 사용자 데이터 및 권한 관리 기능 구현\n  - KT API를 통한 대량 문자 발송 기능 구현\n  - 카카오톡 알림톡 대량 발송 기능 구현\n  - 챗봇 시나리오 및 템플릿 관리 기능 구현\n  - 통계 페이지 구현\n\n---\n\n### 전자고지 시스템 개발\n\n- **기간**: 2023.04 ~ 2023.09\n- **역할**: Frontend Developer (기여도 40%)\n- **기술**: NICEpay, 반응형 웹\n- **주요 성과**:\n  - 전자문서 및 전자고지 발송 기능 개발\n  - NICEpay 결제 기능 연동\n  - 사용자 데이터 및 권한 관리 기능 개발\n  - 전자고지 미리보기 기능 구현\n  - 통계 페이지 및 반응형 웹 기능 개발\n\n---\n\n### FreqTrade 커스터마이징\n\n- **기간**: 2024.04 ~ 2024.09\n- **역할**: Full Stack Developer (기여도 100%)\n- **기술**: Python, FreqTrade\n- **주요 성과**: 자동매매 전략 개발 및 커스터마이징\n\n---\n\n| 프로젝트명                                                     | 기간              | 역할 및 기여도               | 기술 스택                                      | 주요 성과                                                                                                                                                                                        |\n| -------------------------------------------------------------- | ----------------- | ---------------------------- | ---------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| 국제 아웃소싱 데이터 크롤링 웹서비스                           | 2025-02 ~ 2025-03 | FullStack 기여도 100%        | FastAPI, Next.js, React Query, PostgreSQL      | - 아웃소싱 플랫폼의 신규 프로젝트 실시간 DB 반영 (INSERT, UPDATE)- 국가 간 임금 격차 해소 및 한국 개발자의 해외 진출 지원                                                                        |\n| **사이니지 통합관제 플랫폼**                                   | 2024-12 ~ 2025-03 | FullStack 기여도 100%        | React Native (Expo), Socket, 음성인식 알고리즘 | - 음성인식률 95% 달성 (리히텐슈타인 거리, 자카드 유사도, 초성, 한글 특화 알고리즘 조합) - 기능 도달률 99% - 안드로이드 사이니지 클라이언트 개발 (실시간 데이터 패칭, 컨텐츠 및 스케줄링 적용)    |\n| - 초당 1만건 데이터 처리 기능 구현                             |\n| **삼성화재, 한양대학교 PoC 로그데이터 관리 시스템**            | 2024-05 ~ 2024-11 | FullStack 기여도 100%        | Next.js, PostgreSQL, Prisma, Docker, ChakraUI  | - 로그 데이터 관리 시스템 전체 개발 - 데이터 처리 및 시각화 최적화                                                                                                                               |\n| **네트워크 보안 장비 업체 ERP 시스템 마이그레이션**            | 2024-01 ~ 2024-05 | 프론트엔드/백엔드 기여도 35% | React, ChakraUI, Python Flask, MariaDB         | - 레거시 시스템을 React와 Flask 기반으로 마이그레이션 - 사용자 UI/UX 개선 및 성능 향상                                                                                                           |\n| **마산대학교 학사행정프로그램**                                | 2024-05           | FullStack 기여도 100%        | JAVA JSP, WebSquare, MySQL                     | - 장학생 관리 시스템 개발 - 학사 관리 시스템 구현                                                                                                                                                |\n| **강원대학교 학사행정프로그램**                                | 2024-08 ~ 2024-11 | FullStack 기여도 100%        | JAVA JSP, WebSquare, OracleDB                  | - 기업 협업 및 자문 결재 시스템 개발 - 결재내역 문서화 및 출력 기능 구현                                                                                                                         |\n| **여주대학교 학사행정프로그램**                                | 2024-06 ~ 2024-07 | FullStack 기여도 100%        | JAVA JSP, WebSquare, OracleDB                  | - 교원 평가 관리 및 학생 평가 관리 시스템 구축                                                                                                                                                   |\n| **문자 대량 발송 상담 챗봇 관리 시스템 개발**                  | 2023-09 ~ 2024-01 | 프론트엔드 기여도 90%        | Redux, KT 연동 API, 카카오톡 연동              | - Redux를 이용한 사용자 데이터 및 권한 관리 기능 구현 - KT API를 통한 대량 문자 발송 기능 구현 - 카카오톡 알림톡 대량 발송 기능 구현 - 챗봇 시나리오 및 템플릿 관리 기능 구현 - 통계 페이지 구현 |\n| **카카오 네이버 KT 전자문서 발송을 통한 전자고지 시스템 개발** | 2023-04 ~ 2023-09 | 프론트엔드 기여도 40%        | NICEpay, 반응형 웹                             | - 전자문서 및 전자고지 발송 기능 개발 - NICEpay 결제 기능 연동 - 사용자 데이터 및 권한 관리 기능 개발 - 전자고지 미리보기 기능 구현 - 통계 페이지 및 반응형 웹 기능 개발                         |\n| **자동매매 오픈소스 FreqTrade 커스터마이징**                   | 2024-04 ~ 2024-09 | 풀스택 기여도 100%           | Python, FreqTrade                              | - 자동매매 전략 개발 및 커스터마이징                                                                                                                                                             |\n",
    "date": "2024-03-20",
    "category": "career",
    "tags": [
      "Full Stack",
      "Next.js",
      "React",
      "Python",
      "PostgreSQL",
      "Docker",
      "React Native",
      "음성인식",
      "ERP Systems",
      "Financial Engineering",
      "Data Processing"
    ],
    "thumbnail": "/images/profile1.jpg",
    "translations": {
      "ko": {
        "title": "개발자 윤수빈입니다.",
        "description": "웹 개발, 금융 시스템, 기업솔루션 분야의 Full Stack 엔지니어입니다. Next.js, React, Python, 데이터베이스 관리에 능숙하며, 삼성화재 등 대기업 프로젝트를 성공적으로 수행했습니다.",
        "content": "<h2 id=\"heading-0\">프로젝트 경력</h2>\n<hr>\n<h3 id=\"heading-1\">국제 아웃소싱 데이터 크롤링 웹서비스</h3>\n<ul>\n<li><strong>기간</strong>: 2025.02 ~ 2025.03</li>\n<li><strong>역할</strong>: Full Stack Developer (기여도 100%)</li>\n<li><strong>기술</strong>: FastAPI, Next.js, React Query, PostgreSQL</li>\n<li><strong>주요 성과</strong>:\n<ul>\n<li>아웃소싱 플랫폼의 신규 프로젝트 실시간 DB 반영 (INSERT, UPDATE)</li>\n<li>국가 간 임금 격차 해소 및 한국 개발자의 해외 진출 지원</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"heading-2\">사이니지 통합관제 플랫폼</h3>\n<ul>\n<li><strong>기간</strong>: 2024.12 ~ 2025.03</li>\n<li><strong>역할</strong>: Full Stack Developer (기여도 100%)</li>\n<li><strong>기술</strong>: React Native (Expo), Socket, 음성인식 알고리즘</li>\n<li><strong>주요 성과</strong>:\n<ul>\n<li>음성인식률 95% 달성 (리히텐슈타인 거리, 자카드 유사도, 초성, 한글 특화 알고리즘 조합)</li>\n<li>기능 도달률 99%</li>\n<li>안드로이드 사이니지 클라이언트 개발</li>\n<li>초당 1만건 데이터 처리 기능 구현</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"heading-3\">삼성화재, 한양대학교 PoC 로그데이터 관리 시스템</h3>\n<ul>\n<li><strong>기간</strong>: 2024.05 ~ 2024.11</li>\n<li><strong>역할</strong>: Full Stack Developer (기여도 100%)</li>\n<li><strong>기술</strong>: Next.js, PostgreSQL, Prisma, Docker, ChakraUI</li>\n<li><strong>주요 성과</strong>:\n<ul>\n<li>로그 데이터 관리 시스템 전체 개발</li>\n<li>데이터 처리 및 시각화 최적화</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"heading-4\">네트워크 보안 장비 업체 ERP 시스템 마이그레이션</h3>\n<ul>\n<li><strong>기간</strong>: 2024.01 ~ 2024.05</li>\n<li><strong>역할</strong>: Full Stack Developer (기여도 35%)</li>\n<li><strong>기술</strong>: React, ChakraUI, Python Flask, MariaDB</li>\n<li><strong>주요 성과</strong>:\n<ul>\n<li>레거시 시스템을 React와 Flask 기반으로 마이그레이션</li>\n<li>사용자 UI/UX 개선 및 성능 향상</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"heading-5\">학사행정프로그램 개발</h3>\n<h4 id=\"heading-6\">마산대학교</h4>\n<ul>\n<li><strong>기간</strong>: 2024.05</li>\n<li><strong>역할</strong>: Full Stack Developer (기여도 100%)</li>\n<li><strong>기술</strong>: JAVA JSP, WebSquare, MySQL</li>\n<li><strong>주요 성과</strong>: 장학생 관리 시스템 개발, 학사 관리 시스템 구현</li>\n</ul>\n<h4 id=\"heading-7\">강원대학교</h4>\n<ul>\n<li><strong>기간</strong>: 2024.08 ~ 2024.11</li>\n<li><strong>기술</strong>: JAVA JSP, WebSquare, OracleDB</li>\n<li><strong>주요 성과</strong>: 기업 협업 및 자문 결재 시스템 개발, 결재내역 문서화 및 출력 기능 구현</li>\n</ul>\n<h4 id=\"heading-8\">여주대학교</h4>\n<ul>\n<li><strong>기간</strong>: 2024.06 ~ 2024.07</li>\n<li><strong>기술</strong>: JAVA JSP, WebSquare, OracleDB</li>\n<li><strong>주요 성과</strong>: 교원 평가 관리 및 학생 평가 관리 시스템 구축</li>\n</ul>\n<hr>\n<h3 id=\"heading-9\">문자 대량 발송 상담 챗봇 관리 시스템</h3>\n<ul>\n<li><strong>기간</strong>: 2023.09 ~ 2024.01</li>\n<li><strong>역할</strong>: Frontend Developer (기여도 90%)</li>\n<li><strong>기술</strong>: Redux, KT 연동 API, 카카오톡 연동</li>\n<li><strong>주요 성과</strong>:\n<ul>\n<li>Redux를 이용한 사용자 데이터 및 권한 관리 기능 구현</li>\n<li>KT API를 통한 대량 문자 발송 기능 구현</li>\n<li>카카오톡 알림톡 대량 발송 기능 구현</li>\n<li>챗봇 시나리오 및 템플릿 관리 기능 구현</li>\n<li>통계 페이지 구현</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"heading-10\">전자고지 시스템 개발</h3>\n<ul>\n<li><strong>기간</strong>: 2023.04 ~ 2023.09</li>\n<li><strong>역할</strong>: Frontend Developer (기여도 40%)</li>\n<li><strong>기술</strong>: NICEpay, 반응형 웹</li>\n<li><strong>주요 성과</strong>:\n<ul>\n<li>전자문서 및 전자고지 발송 기능 개발</li>\n<li>NICEpay 결제 기능 연동</li>\n<li>사용자 데이터 및 권한 관리 기능 개발</li>\n<li>전자고지 미리보기 기능 구현</li>\n<li>통계 페이지 및 반응형 웹 기능 개발</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"heading-11\">FreqTrade 커스터마이징</h3>\n<ul>\n<li><strong>기간</strong>: 2024.04 ~ 2024.09</li>\n<li><strong>역할</strong>: Full Stack Developer (기여도 100%)</li>\n<li><strong>기술</strong>: Python, FreqTrade</li>\n<li><strong>주요 성과</strong>: 자동매매 전략 개발 및 커스터마이징</li>\n</ul>\n<hr>\n<table class=\"markdown-table\">\n<thead>\n<tr>\n<th>프로젝트명</th>\n<th>기간</th>\n<th>역할 및 기여도</th>\n<th>기술 스택</th>\n<th>주요 성과</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>국제 아웃소싱 데이터 크롤링 웹서비스</td>\n<td>2025-02 ~ 2025-03</td>\n<td>FullStack 기여도 100%</td>\n<td>FastAPI, Next.js, React Query, PostgreSQL</td>\n<td>- 아웃소싱 플랫폼의 신규 프로젝트 실시간 DB 반영 (INSERT, UPDATE)- 국가 간 임금 격차 해소 및 한국 개발자의 해외 진출 지원</td>\n</tr>\n<tr>\n<td><strong>사이니지 통합관제 플랫폼</strong></td>\n<td>2024-12 ~ 2025-03</td>\n<td>FullStack 기여도 100%</td>\n<td>React Native (Expo), Socket, 음성인식 알고리즘</td>\n<td>- 음성인식률 95% 달성 (리히텐슈타인 거리, 자카드 유사도, 초성, 한글 특화 알고리즘 조합) - 기능 도달률 99% - 안드로이드 사이니지 클라이언트 개발 (실시간 데이터 패칭, 컨텐츠 및 스케줄링 적용)</td>\n</tr>\n<tr>\n<td>- 초당 1만건 데이터 처리 기능 구현</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>삼성화재, 한양대학교 PoC 로그데이터 관리 시스템</strong></td>\n<td>2024-05 ~ 2024-11</td>\n<td>FullStack 기여도 100%</td>\n<td>Next.js, PostgreSQL, Prisma, Docker, ChakraUI</td>\n<td>- 로그 데이터 관리 시스템 전체 개발 - 데이터 처리 및 시각화 최적화</td>\n</tr>\n<tr>\n<td><strong>네트워크 보안 장비 업체 ERP 시스템 마이그레이션</strong></td>\n<td>2024-01 ~ 2024-05</td>\n<td>프론트엔드/백엔드 기여도 35%</td>\n<td>React, ChakraUI, Python Flask, MariaDB</td>\n<td>- 레거시 시스템을 React와 Flask 기반으로 마이그레이션 - 사용자 UI/UX 개선 및 성능 향상</td>\n</tr>\n<tr>\n<td><strong>마산대학교 학사행정프로그램</strong></td>\n<td>2024-05</td>\n<td>FullStack 기여도 100%</td>\n<td>JAVA JSP, WebSquare, MySQL</td>\n<td>- 장학생 관리 시스템 개발 - 학사 관리 시스템 구현</td>\n</tr>\n<tr>\n<td><strong>강원대학교 학사행정프로그램</strong></td>\n<td>2024-08 ~ 2024-11</td>\n<td>FullStack 기여도 100%</td>\n<td>JAVA JSP, WebSquare, OracleDB</td>\n<td>- 기업 협업 및 자문 결재 시스템 개발 - 결재내역 문서화 및 출력 기능 구현</td>\n</tr>\n<tr>\n<td><strong>여주대학교 학사행정프로그램</strong></td>\n<td>2024-06 ~ 2024-07</td>\n<td>FullStack 기여도 100%</td>\n<td>JAVA JSP, WebSquare, OracleDB</td>\n<td>- 교원 평가 관리 및 학생 평가 관리 시스템 구축</td>\n</tr>\n<tr>\n<td><strong>문자 대량 발송 상담 챗봇 관리 시스템 개발</strong></td>\n<td>2023-09 ~ 2024-01</td>\n<td>프론트엔드 기여도 90%</td>\n<td>Redux, KT 연동 API, 카카오톡 연동</td>\n<td>- Redux를 이용한 사용자 데이터 및 권한 관리 기능 구현 - KT API를 통한 대량 문자 발송 기능 구현 - 카카오톡 알림톡 대량 발송 기능 구현 - 챗봇 시나리오 및 템플릿 관리 기능 구현 - 통계 페이지 구현</td>\n</tr>\n<tr>\n<td><strong>카카오 네이버 KT 전자문서 발송을 통한 전자고지 시스템 개발</strong></td>\n<td>2023-04 ~ 2023-09</td>\n<td>프론트엔드 기여도 40%</td>\n<td>NICEpay, 반응형 웹</td>\n<td>- 전자문서 및 전자고지 발송 기능 개발 - NICEpay 결제 기능 연동 - 사용자 데이터 및 권한 관리 기능 개발 - 전자고지 미리보기 기능 구현 - 통계 페이지 및 반응형 웹 기능 개발</td>\n</tr>\n<tr>\n<td><strong>자동매매 오픈소스 FreqTrade 커스터마이징</strong></td>\n<td>2024-04 ~ 2024-09</td>\n<td>풀스택 기여도 100%</td>\n<td>Python, FreqTrade</td>\n<td>- 자동매매 전략 개발 및 커스터마이징</td>\n</tr>\n</tbody>\n</table>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "프로젝트 경력",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "국제 아웃소싱 데이터 크롤링 웹서비스",
            "level": 3,
            "isMainTopic": false,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "사이니지 통합관제 플랫폼",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "삼성화재, 한양대학교 PoC 로그데이터 관리 시스템",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "네트워크 보안 장비 업체 ERP 시스템 마이그레이션",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "학사행정프로그램 개발",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "마산대학교",
            "level": 4,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "강원대학교",
            "level": 4,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "여주대학교",
            "level": 4,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "문자 대량 발송 상담 챗봇 관리 시스템",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "전자고지 시스템 개발",
            "level": 3,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "FreqTrade 커스터마이징",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          }
        ]
      },
      "en": {
        "title": "Subin Yoon, Software Developer",
        "description": "Full Stack Engineer with expertise in Web Development, Financial Systems, and Enterprise Solutions. Experienced in Next.js, React, Python, and Database Management. Successfully delivered projects for major corporations including Samsung Fire & Marine Insurance.",
        "content": "<h2 id=\"heading-0\">Project Experience</h2>\n<h3 id=\"heading-1\">International Outsourcing Data Crawling Web Service</h3>\n<ul>\n<li><strong>Period</strong>: Feb 2025 - Mar 2025</li>\n<li><strong>Role</strong>: Full Stack Developer (Contribution 100%)</li>\n<li><strong>Tech Stack</strong>: FastAPI, Next.js, React Query, PostgreSQL</li>\n<li><strong>Key Achievements</strong>:\n<ul>\n<li>Implemented real-time DB updates for new outsourcing projects (INSERT, UPDATE)</li>\n<li>Facilitated global wage gap resolution and supported Korean developers' overseas expansion</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"heading-2\">Digital Signage Integrated Control Platform</h3>\n<ul>\n<li><strong>Period</strong>: Dec 2024 - Mar 2025</li>\n<li><strong>Role</strong>: Full Stack Developer (Contribution 100%)</li>\n<li><strong>Tech Stack</strong>: React Native (Expo), Socket, Voice Recognition Algorithm</li>\n<li><strong>Key Achievements</strong>:\n<ul>\n<li>Achieved 95% voice recognition accuracy (using Levenshtein distance, Jaccard similarity, Korean-specific algorithms)</li>\n<li>Reached 99% feature implementation rate</li>\n<li>Developed Android signage client with real-time data fetching</li>\n<li>Implemented processing of 10,000 data points per second</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"heading-3\">Samsung Fire &amp; Marine Insurance, Hanyang University PoC Log Data Management System</h3>\n<ul>\n<li><strong>Period</strong>: May 2024 - Nov 2024</li>\n<li><strong>Role</strong>: Full Stack Developer (Contribution 100%)</li>\n<li><strong>Tech Stack</strong>: Next.js, PostgreSQL, Prisma, Docker, ChakraUI</li>\n<li><strong>Key Achievements</strong>:\n<ul>\n<li>Developed complete log data management system</li>\n<li>Optimized data processing and visualization</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"heading-4\">Network Security Equipment Company ERP System Migration</h3>\n<ul>\n<li><strong>Period</strong>: Jan 2024 - May 2024</li>\n<li><strong>Role</strong>: Full Stack Developer (Contribution 35%)</li>\n<li><strong>Tech Stack</strong>: React, ChakraUI, Python Flask, MariaDB</li>\n<li><strong>Key Achievements</strong>:\n<ul>\n<li>Migrated legacy system to React and Flask</li>\n<li>Enhanced user UI/UX and improved performance</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"heading-5\">Academic Administration Program Development</h3>\n<h4 id=\"heading-6\">Masan University</h4>\n<ul>\n<li><strong>Period</strong>: May 2024</li>\n<li><strong>Role</strong>: Full Stack Developer (Contribution 100%)</li>\n<li><strong>Tech Stack</strong>: JAVA JSP, WebSquare, MySQL</li>\n<li><strong>Key Achievements</strong>: Developed scholarship management and academic administration systems</li>\n</ul>\n<h4 id=\"heading-7\">Kangwon University</h4>\n<ul>\n<li><strong>Period</strong>: Aug 2024 - Nov 2024</li>\n<li><strong>Tech Stack</strong>: JAVA JSP, WebSquare, OracleDB</li>\n<li><strong>Key Achievements</strong>: Implemented corporate collaboration and consultation approval system</li>\n</ul>\n<h4 id=\"heading-8\">Yeoju University</h4>\n<ul>\n<li><strong>Period</strong>: Jun 2024 - Jul 2024</li>\n<li><strong>Tech Stack</strong>: JAVA JSP, WebSquare, OracleDB</li>\n<li><strong>Key Achievements</strong>: Built faculty and student evaluation management system</li>\n</ul>\n<hr>\n<h3 id=\"heading-9\">Bulk SMS Chatbot Management System</h3>\n<ul>\n<li><strong>Period</strong>: Sep 2023 - Jan 2024</li>\n<li><strong>Role</strong>: Frontend Developer (Contribution 90%)</li>\n<li><strong>Tech Stack</strong>: Redux, KT API Integration, KakaoTalk Integration</li>\n<li><strong>Key Achievements</strong>:\n<ul>\n<li>Implemented user data and permission management using Redux</li>\n<li>Developed bulk SMS sending functionality using KT API</li>\n<li>Integrated KakaoTalk notification system</li>\n<li>Created chatbot scenario and template management</li>\n<li>Built statistics dashboard</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"heading-10\">Electronic Notification System Development</h3>\n<ul>\n<li><strong>Period</strong>: Apr 2023 - Sep 2023</li>\n<li><strong>Role</strong>: Frontend Developer (Contribution 40%)</li>\n<li><strong>Tech Stack</strong>: NICEpay, Responsive Web</li>\n<li><strong>Key Achievements</strong>:\n<ul>\n<li>Developed electronic document delivery system</li>\n<li>Integrated NICEpay payment functionality</li>\n<li>Implemented user data and permission management</li>\n<li>Created notification preview feature</li>\n<li>Built responsive statistics dashboard</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"heading-11\">FreqTrade Customization</h3>\n<ul>\n<li><strong>Period</strong>: Apr 2024 - Sep 2024</li>\n<li><strong>Role</strong>: Full Stack Developer (Contribution 100%)</li>\n<li><strong>Tech Stack</strong>: Python, FreqTrade</li>\n<li><strong>Key Achievements</strong>: Developed and customized automated trading strategies</li>\n</ul>\n<hr>\n<table class=\"markdown-table\">\n<thead>\n<tr>\n<th>Project Name</th>\n<th>Period</th>\n<th>Role &amp; Contribution</th>\n<th>Tech Stack</th>\n<th>Key Achievements</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>International Outsourcing Data Crawling Web Service</td>\n<td>Feb 2025 - Mar 2025</td>\n<td>Full Stack (100%)</td>\n<td>FastAPI, Next.js, React Query, PostgreSQL</td>\n<td>- Real-time DB updates for new outsourcing projects (INSERT, UPDATE) - Facilitated global wage gap resolution and supported Korean developers' overseas expansion</td>\n</tr>\n<tr>\n<td>Digital Signage Integrated Control Platform</td>\n<td>Dec 2024 - Mar 2025</td>\n<td>Full Stack (100%)</td>\n<td>React Native (Expo), Socket, Voice Recognition Algorithm</td>\n<td>- Achieved 95% voice recognition accuracy (using Levenshtein distance, Jaccard similarity, Korean-specific algorithms) - Reached 99% feature implementation rate - Developed Android signage client with real-time data fetching - Implemented processing of 10,000 data points per second</td>\n</tr>\n<tr>\n<td>Samsung Fire &amp; Marine Insurance, Hanyang University PoC Log Data Management System</td>\n<td>May 2024 - Nov 2024</td>\n<td>Full Stack (100%)</td>\n<td>Next.js, PostgreSQL, Prisma, Docker, ChakraUI</td>\n<td>- Developed complete log data management system - Optimized data processing and visualization</td>\n</tr>\n<tr>\n<td>Network Security Equipment Company ERP System Migration</td>\n<td>Jan 2024 - May 2024</td>\n<td>Full Stack (35%)</td>\n<td>React, ChakraUI, Python Flask, MariaDB</td>\n<td>- Migrated legacy system to React and Flask - Enhanced user UI/UX and improved performance</td>\n</tr>\n<tr>\n<td>Masan University Academic Administration Program</td>\n<td>May 2024</td>\n<td>Full Stack (100%)</td>\n<td>JAVA JSP, WebSquare, MySQL</td>\n<td>- Developed scholarship management system - Implemented academic administration system</td>\n</tr>\n<tr>\n<td>Kangwon University Academic Administration Program</td>\n<td>Aug 2024 - Nov 2024</td>\n<td>Full Stack (100%)</td>\n<td>JAVA JSP, WebSquare, OracleDB</td>\n<td>- Developed corporate collaboration and consultation approval system - Implemented document processing and printing functionality</td>\n</tr>\n<tr>\n<td>Yeoju University Academic Administration Program</td>\n<td>Jun 2024 - Jul 2024</td>\n<td>Full Stack (100%)</td>\n<td>JAVA JSP, WebSquare, OracleDB</td>\n<td>- Built faculty and student evaluation management system</td>\n</tr>\n<tr>\n<td>Bulk SMS Chatbot Management System</td>\n<td>Sep 2023 - Jan 2024</td>\n<td>Frontend (90%)</td>\n<td>Redux, KT API Integration, KakaoTalk Integration</td>\n<td>- Implemented user data and permission management using Redux - Developed bulk SMS sending functionality - Integrated KakaoTalk notification system - Created chatbot scenario and template management - Built statistics dashboard</td>\n</tr>\n<tr>\n<td>Electronic Notification System</td>\n<td>Apr 2023 - Sep 2023</td>\n<td>Frontend (40%)</td>\n<td>NICEpay, Responsive Web</td>\n<td>- Developed electronic document delivery system - Integrated NICEpay payment functionality - Implemented user data and permission management - Created notification preview feature - Built responsive statistics dashboard</td>\n</tr>\n<tr>\n<td>FreqTrade Automated Trading Customization</td>\n<td>Apr 2024 - Sep 2024</td>\n<td>Full Stack (100%)</td>\n<td>Python, FreqTrade</td>\n<td>- Developed and customized automated trading strategies</td>\n</tr>\n</tbody>\n</table>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "Project Experience",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "International Outsourcing Data Crawling Web Service",
            "level": 3,
            "isMainTopic": false,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "Digital Signage Integrated Control Platform",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "Samsung Fire & Marine Insurance, Hanyang University PoC Log Data Management System",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "Network Security Equipment Company ERP System Migration",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "Academic Administration Program Development",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "Masan University",
            "level": 4,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "Kangwon University",
            "level": 4,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "Yeoju University",
            "level": 4,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "Bulk SMS Chatbot Management System",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "Electronic Notification System Development",
            "level": 3,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "FreqTrade Customization",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          }
        ]
      }
    },
    "imageHeights": {}
  },
  {
    "id": "convention_document",
    "title": "Convention Document",
    "content": "\n## 1. 목적\n\n1. 개발 표준화: 프론트엔드 개발에 일관성을 부여하여 코드의 가독성과 유지보수성을 높입니다.\n2. 팀 협업 강화: 개발자들 간의 협업을 원활하게 하고 의사소통을 개선합니다.\n3. 새로운 개발자 온보딩: 새로 합류한 개발자가 프로젝트에 빠르게 적응하고 효율적으로 개발할 수 있도록 돕습니다.\n4. 코드 품질 향상: 일관된 코딩 스타일과 최적화 기법을 적용하여 코드의 품질을 향상시킵니다.\n5. 유지보수성 강화: 일관된 구조와 명명 규칙을 통해 코드의 가독성을 높이고 유지보수를 용이하게 합니다.\n\n## 2. 코딩 스타일 가이드\n\n### 2.1. 들여쓰기\n\n1. Prettier의 기본설정으로 들여쓰기 합니다.\n\n### 2.2. 변수와 상수\n\n변수와 상수는 프론트엔드 개발에서 중요한 개념입니다. 이 섹션에서는 변수와 상수의 사용에 대한 가이드라인을 설명합니다.\n\n1. 변수명과 상수명\n   - 변수명과 상수명은 의미를 명확하게 전달할 수 있도록 짓는 것이 좋습니다.\n   - 변수명과 상수명은 영문을 사용하여 작성합니다.\n   - 여러 단어로 이루어진 경우에는 단어 사이를 카멜케이스로 구분합니다. 예: myVariable, userName\n2. 변수의 선언과 할당\n   - 변수를 선언할 때에는 let 키워드를 사용합니다. 예: let count = 0;\n   - 변수의 값은 필요에 따라 언제든지 변경할 수 있습니다.\n3. 상수의 선언과 할당\n   - 상수를 선언할 때에는 const 키워드를 사용합니다. 예: const PI = 3.14;\n   - 상수는 한 번 할당된 값은 변경할 수 없습니다.\n4. 변수와 상수의 초기화\n   - 변수와 상수는 선언과 동시에 초기값을 할당하는 것이 좋습니다.\n   - 초기화되지 않은 변수나 상수는 의도치 않은 동작을 야기할 수 있으므로 주의해야 합니다.\n\n변수와 상수는 프로그램의 데이터를 저장하고 조작하는 데에 필수적인 요소입니다. 적절하게 변수와 상수를 활용하여 가독성 높은 코드를 작성하고, 필요에 따라 값의 변경 여부를 고려하여 변수와 상수를 선택하시기 바랍니다.\n\n### 2.3. 함수와 메서드\n\n함수와 메서드는 프론트엔드 개발에서 코드의 재사용성과 모듈화를 위해 중요한 요소입니다. 이 섹션에서는 함수와 메서드의 사용에 대한 가이드라인을 제시합니다.\n\n1. 함수와 메서드의 정의\n   - 함수는 독립적으로 동작하는 코드 블록입니다. 주어진 입력을 받아서 처리하고, 결과를 반환할 수 있습니다.\n   - 메서드는 객체에 속해 있는 함수로, 객체의 상태를 조작하거나 객체의 동작을 수행합니다.\n2. 함수와 메서드의 명명 규칙\n   - 함수와 메서드의 이름은 동사 형태로 짓는 것이 일반적입니다. 예: calculateTotal, loginUser\n   - 함수와 메서드의 이름은 의미를 명확하게 전달할 수 있도록 작성해야 합니다.\n   - 여러 단어로 이루어진 경우에는 카멜 케이스(camelCase)를 사용하여 작성합니다. 예: calculateTaxAmount, loginUserWithCredentials\n3. 함수와 메서드의 매개변수\n   - 함수와 메서드는 필요한 입력값을 매개변수(parameter)로 받을 수 있습니다.\n   - 매개변수의 이름은 변수와 동일한 명명 규칙을 따르며, 입력값의 의미를 잘 표현할 수 있도록 작성해야 합니다.\n4. 함수와 메서드의 반환값\n   - 함수와 메서드는 필요에 따라 결과값을 반환할 수 있습니다.\n   - 반환값의 타입은 명확하게 정의하고, 함수 또는 메서드의 목적과 일치하는 데이터를 반환해야 합니다.\n5. 함수와 메서드의 범위\n   - 함수와 메서드는 선언된 블록(scope) 내에서 유효합니다. 함수 내부에서 선언된 변수는 함수 내에서만 사용할 수 있으며, 함수 외부에서는 접근할 수 없습니다.\n\n함수와 메서드는 코드의 재사용성과 유지보수성을 높여주는 도구입니다. 적절하게 함수와 메서드를 활용하여 코드를 구성하고, 가독성과 유연성을 고려하여 함수와 메서드를 설계하시기 바랍니다.\n\n### 2.4. 컴포넌트\n\n클래스와 컴포넌트는 객체지향 프로그래밍과 리액트 프론트엔드 개발에서 중요한 개념입니다. 이 섹션에서는 클래스와 컴포넌트의 사용에 대한 가이드라인을 제시합니다.\n\n1. 컴포넌트의 정의\n   - 컴포넌트는 UI의 독립적인 구성 요소입니다. 화면에 특정한 기능을 가진 모듈 형태로 나타낼 수 있습니다.\n   - 리액트에서 컴포넌트는 클래스로 정의될 수도 있고, 함수로 정의될 수도 있습니다. 클래스 컴포넌트와 함수형 컴포넌트가 있습니다.\n2. 컴포넌트의 명명 규칙\n   - 컴포넌트의 이름은 대문자로 시작해야 합니다.\n   - 컴포넌트의 이름은 명사나 명사구로 짓는 것이 일반적입니다. 예: User, LoginForm, Header\n3. 상속과 확장성\n   - 컴포넌트는 상속을 통해 기존의 컴포넌트를 확장할 수 있습니다. 이를 통해 코드의 재사용성과 확장성을 높일 수 있습니다.\n   - 상속을 사용할 때는 상속받은 컴포넌트의 기능을 잘 이해하고, 필요한 부분을 재정의하여 사용해야 합니다.\n\n컴포넌트는 객체지향 개념과 리액트 개발에서 핵심적인 역할을 수행합니다.컴포넌트를 잘 이해하고 적절하게 활용하여 유지보수 가능하고 확장성 있는 코드를 작성해야 합니다.\n\n### 2.5. 주석\n\n주석은 코드에 대한 설명이나 추가 정보를 제공하기 위해 사용됩니다. 올바른 주석 작성은 코드의 가독성과 유지보수성을 향상시키는 데 도움이 됩니다. 아래는 주석 작성에 대한 가이드라인입니다.\n\n1. 주석의 목적\n   - 주석의 사용을 최대한 지양하며 필수적인 경우에만 사용합니다.\n   - 중요한 사항이나 추후에 작업을 필요로하는 부분을 강조하는 주석을 작성합니다.\n2. 주석의 작성 규칙\n   - 주석은 명확하고 간결하게 작성되어야 합니다.\n   - 주석은 코드에 비해 적절한 수로 작성되어야 합니다. 과도한 주석은 코드를 가독성이 떨어뜨릴 수 있습니다.\n   - 주석은 필요한 부분에 작성되어야 하며, 필요 없는 주석은 삭제되어야 합니다.\n   - 주석은 코드의 변경에 따라 업데이트되어야 합니다.\n\n주석은 코드를 이해하고 유지보수하기 쉽게 만들어줍니다. 주석을 적절하게 작성하여 코드를 더욱 명확하고 의미 있는 형태로 유지해야 합니다.\n\n### 2.6. 네이밍 규칙\n\n일관된 네이밍 규칙은 코드의 가독성과 일관성을 유지하는 데 중요합니다. 아래는 네이밍 규칙에 대한 가이드라인입니다.\n\n1. 변수와 상수 네이밍\n   - 의미 전달: 변수와 상수의 이름은 해당 값을 잘 설명해야 합니다. 다른 개발자들이 이름만으로 변수의 역할과 용도를 이해할 수 있어야 합니다.\n   - 카멜 케이스: 변수와 상수의 이름은 카멜 케이스를 사용합니다. 첫 단어는 소문자로 시작하고, 이후 단어의 첫 글자는 대문자로 작성합니다. 예: firstName, userAge\n   - 가독성: 변수의 길이는 적절하게 설정해야 합니다. 너무 짧으면 의미 전달이 어려우며, 너무 길면 가독성이 저하될 수 있습니다.\n2. 함수와 메서드 네이밍\n   - 동사 형태: 함수와 메서드의 이름은 동사로 시작해야 합니다. 동작하는 기능을 잘 설명하는 동사를 선택합니다. 예: getUserData, calculateTotal\n   - 카멜 케이스: 함수와 메서드의 이름은 카멜 케이스를 사용합니다. 첫 단어는 소문자로 시작하고, 이후 단어의 첫 글자는 대문자로 작성합니다. 예: fetchData, updateProfile\n3. 컴포넌트 네이밍\n   - 파스칼 케이스: 컴포넌트의 이름은 파스칼 케이스를 사용합니다. 모든 단어의 첫 글자를 대문자로 작성하고, 단어 사이에는 공백이 없습니다. 예: UserService, HomePage\n   - 명확한 역할: 클래스와 컴포넌트의 이름은 해당 역할을 명확하게 전달해야 합니다. 다른 개발자들이 이름만으로 해당 클래스나 컴포넌트의 역할을 이해할 수 있어야 합니다.\n4. 폴더 디렉토리 파일 네이밍: routes와 type폴더를 제외하고 src의 모든 폴더 내의 파일의 이름은 index로 통일합니다.\n   - 컴포넌트 폴더\n     - 대문자와 파스칼 케이스: 파일의 이름은 첫 글자를 대문자로 작성하고, 단어 사이에는 공백이 없습니다\n   - 이외의 폴더\n     - 소문자와 하이픈: 파일의 이름은 소문자로 작성하며, 여러 단어는 하이픈으로 구분합니다. 예: user-service.js, home-page.tsx\n   - 파일 확장자: 파일의 확장자는 해당 파일의 유형에 맞게 설정합니다. 예: .ts, .tsx\n\n일관된 네이밍 규칙을 따르면 코드의 가독성이 향상되고 협업 시에도 일관성을 유지할 수 있습니다. 모든 개발자들이 네이밍 규칙을 공유하고 준수하도록 합니다.\n\n### 2.7. 코드 포맷팅\n\n일관된 코드 포맷팅은 가독성을 향상시키고 협업을 용이하게 만듭니다.\n\n아래는 코드 포맷팅에 대한 가이드라인이며 순서대로 구성됩니다.\n\n- 대분류(1,2,3…)를 기준으로 한 줄 띄웁니다.\n- 소분류(a,b,c…)는 띄우지 않습니다.\n\n  1. import Module\n\n     ```jsx\n     import {\n       Box,\n       Flex,\n       FormControl,\n       FormLabel,\n       Input,\n     } from \"@chakra-ui/react\";\n     import { useMemo } from \"react\";\n     import { useForm } from \"react-hook-form\";\n\n     import { CodeSelect } from \"@mobyen-frontend/common\";\n     import useUserRoles from \"features/user/hooks/useUserRoles\";\n     ```\n\n     1. 외부 모듈: from 이후를 기준, 알파벳 순으로 정렬합니다.\n     2. 내부 모듈: from 이후를 기준, 알파벳 순으로 정렬합니다.\n\n  2. interface: 스코프 내에 있는 내용을 알파벳 순서대로 정렬합니다.\n\n     ```jsx\n     interface SearchPanelProps {\n       isSearching: boolean;\n       onChange: (param: {\n         email: string | null,\n         ext: string | null,\n         mobile: string | null,\n         name: string | null,\n         tel: string | null,\n         userRole: string | null,\n         useYN: string | null,\n       }) => void;\n       onReset: () => void;\n     }\n     ```\n\n  3. defaultProps: 스코프 내에 있는 내용을 알파벳 순서대로 정렬합니다.\n\n     ```jsx\n     const defaultProps = {\n       isSearching: false,\n       onChange(_param: {\n         email: null,\n         ext: null,\n         mobile: null,\n         name: null,\n         tel: null,\n         userRole: null,\n         useYN: null,\n       }) {},\n       onReset() {},\n     };\n     ```\n\n  4. component\n\n     ```jsx\n     function SearchPanel({ isSearching, onChange, onReset }: SearchPanelProps) {\n       const { handleSubmit, register, reset, resetField } = useForm<{\n         search: string;\n         searchType?: \"email\" | \"ext\" | \"mobile\" | \"name\" | \"tel\";\n         useYN: string;\n         userRole: string;\n       }>();\n\n       const { data: userRoles } = useUserRoles({ publicYN: \"Y\" });\n\n       const handleFormSubmit = handleSubmit(\n         ({ search, searchType, userRole, useYN }) => {\n           let email = null;\n           let ext = null;\n           let mobile = null;\n           let name = null;\n           let tel = null;\n           if (searchType) {\n             email = searchType === \"email\" ? search : null;\n             ext = searchType === \"ext\" ? search : null;\n             mobile = searchType === \"mobile\" ? search : null;\n             name = searchType === \"name\" ? search : null;\n             tel = searchType === \"tel\" ? search : null;\n           } else {\n             resetField(\"search\");\n           }\n           onChange({\n             email: email ?? null,\n             ext: ext ?? null,\n             mobile: mobile ?? null,\n             name: name ?? null,\n             tel: tel ?? null,\n             userRole: userRole ? userRole : null,\n             useYN: useYN ? useYN : null,\n           });\n         }\n       );\n\n       const handleResetButtonClick = () => {\n         reset();\n         onReset();\n       };\n\n       const userRoleOptions = useMemo(\n         () =>\n           userRoles?.map((role) => ({\n             code: String(role.id),\n             name: role.name ?? \"\",\n           })) ?? [],\n         [userRoles]\n       );\n       const searchTypeOption = [\n         {\n           code: \"name\",\n           name: \"이름\",\n         },\n         {\n           code: \"email\",\n           name: \"이메일\",\n         },\n         {\n           code: \"tel\",\n           name: \"전화번호\",\n         },\n         {\n           code: \"ext\",\n           name: \"내선번호\",\n         },\n         {\n           code: \"mobile\",\n           name: \"휴대폰번호\",\n         },\n       ];\n\n       return (\n         <Flex\n           as=\"form\"\n           flexDirection=\"column\"\n           gap={2}\n           onSubmit={handleFormSubmit}\n           width=\"100%\"\n         >\n           <Box\n             borderBottomColor=\"black\"\n             borderBottomWidth=\"1px\"\n             borderTopColor=\"black\"\n             borderTopWidth=\"1px\"\n             p={3}\n           >\n             <FormControl>\n               <FormLabel fontSize=\"xs\" fontWeight=\"bold\" htmlFor=\"userRole\">\n                 검색조건\n               </FormLabel>\n               <Flex flexWrap=\"wrap\" gap={2}>\n                 <CodeSelect\n                   codes={userRoleOptions}\n                   flex={{ md: 1 }}\n                   id=\"userRole\"\n                   minWidth={{ md: \"150px\" }}\n                   maxWidth={{ lg: \"200px\" }}\n                   placeholder=\"권한\"\n                   {...register(\"userRole\")}\n                 />\n                 <CodeSelect\n                   codes={[\n                     { code: \"Y\", name: \"사용\" },\n                     { code: \"N\", name: \"미사용\" },\n                   ]}\n                   flex={{ sm: 1 }}\n                   id=\"useYN\"\n                   maxWidth={{ lg: \"200px\" }}\n                   minWidth={{ md: \"150px\" }}\n                   placeholder=\"사용여부\"\n                   {...register(\"useYN\")}\n                 />\n                 <CodeSelect\n                   codes={searchTypeOption}\n                   flex={{ sm: 1 }}\n                   id=\"searchType\"\n                   maxWidth={{ lg: \"170px\" }}\n                   minWidth={{ md: \"130px\" }}\n                   placeholder=\"검색조건\"\n                   {...register(\"searchType\")}\n                 />\n                 <Input\n                   flex={{ md: 2 }}\n                   id=\"search\"\n                   maxWidth={{ lg: \"300px\" }}\n                   minWidth={{ md: \"200px\" }}\n                   placeholder=\"검색어\"\n                   {...register(\"search\")}\n                 />\n                 <Input\n                   disabled={isSearching}\n                   hidden\n                   id=\"searchButton\"\n                   type=\"submit\"\n                 />\n                 <Input\n                   hidden\n                   id=\"resetButton\"\n                   type=\"button\"\n                   onClick={handleResetButtonClick}\n                 />\n               </Flex>\n             </FormControl>\n           </Box>\n         </Flex>\n       );\n     }\n     ```\n\n     1. 리액트 훅: 선언 명을 기준, 알파벳 순으로 정렬합니다.\n     2. 커스텀 훅: 선언 명을 기준, 알파벳 순으로 정렬합니다.\n     3. useState: 첫 번째 상태변수를 기준, 알파벳 순으로 정렬합니다.\n     4. function: 선언 명을 기준, 알파벳 순으로 정렬합니다.\n     5. useEffect\n     6. watch 함수\n\n  5. defaultProps\n\n     ```jsx\n     SearchPanel.defaultProps = defaultProps;\n     ```\n\n  6. export default\n\n     ```jsx\n     export default SearchPanel;\n     ```\n\n### 2.8. 에러 처리\n\n애플리케이션에서 발생하는 에러를 적절히 처리하는 것은 안정성과 예외 상황에 대한 대응력을 향상시킵니다. 아래는 에러 처리에 대한 가이드라인입니다.\n\n1. 예외 처리: 예외 상황이 발생할 수 있는 코드 블록에는 적절한 예외 처리를 구현합니다. 이는 try-catch 문을 사용하여 예외를 캐치하고, 적절한 로그 메시지를 출력하거나 사용자에게 에러 메시지를 표시하는 등의 처리를 수행합니다.\n2. 에러 핸들링: 애플리케이션의 최상위 수준에서 에러 핸들링을 구현합니다. 이는 예상치 못한 예외 상황이 발생했을 때 알림을 표시하고, 사용자에게 적절한 안내를 제공하는 등의 처리를 수행합니다.\n3. 로깅: 에러 발생 시 로그를 기록하고 추적 가능한 정보를 포함시킵니다. 이는 디버깅과 문제 해결에 도움을 줄 수 있습니다.\n4. 사용자 피드백: 에러 발생 시 사용자에게 적절한 피드백을 제공합니다. 이는 사용자가 문제 상황을 이해하고 대처할 수 있도록 도움을 줄 수 있습니다.\n5. 예외 처리 모듈: 애플리케이션에서 공통적으로 발생하는 예외 상황에 대한 처리를 모듈화하여 재사용성을 높일 수 있습니다.\n\n애플리케이션에서 발생할 수 있는 예외 상황을 사전에 고려하고, 적절한 에러 처리를 구현하여 안정성과 사용자 경험을 개선하는 것이 좋습니다.\n\n## 3. 프로젝트 구조\n\n### 3.1. 파일 및 폴더 구조\n\n```jsx\n- `package`: 프로젝트의 루트 디렉토리\n    - `app`: 애플리케이션의 소스 코드와 관련된 디렉토리\n        - `node_modules`: 프로젝트의 의존성 패키지들이 설치되는 디렉토리\n        - `public`: 정적 파일이 위치하는 디렉토리\n        - `src`: 소스 코드가 위치하는 디렉토리입니다.\n            - `api`: 서버 API와 통신하는 코드가 위치하는 디렉토리입니다.\n            - `assets`: 애플리케이션에서 사용되는 정적 리소스(이미지, 아이콘 등)가 위치\n            - `components`: 재사용 가능한 React 컴포넌트들이 위치하는 디렉토리\n            - `features`: 애플리케이션의 기능별로 구성된 모듈이 위치하는 디렉토리\n            - `libs`: 애플리케이션에서 사용되는 유틸리티 함수, 헬퍼 클래스 등이 위치\n            - `redux`: 리덕스의 리듀서, 액션, 미들웨어 등이 포함됩니다.\n            - `routes`: 라우팅과 관련된 코드가 위치하는 디렉토리입니다.\n            - `type`: 타입 정의 파일이 위치하는 디렉토리입니다.\n            - `App.css`: 애플리케이션 전체에 적용되는 CSS 스타일을 정의\n            - `App.test.tsx`: 애플리케이션의 테스트 코드가 위치하는 파일\n            - `index.css`: index.html 파일에서 사용되는 전역 CSS 스타일을 정의하는 파일\n            - `index.tsx`: React DOM 렌더링을 수행하는 코드가 이 파일에 포함됩니다.\n            - `react-app-env.d.ts`: Create React App에 의해 자동 생성되는 TypeScript 환경 설정 파일\n            - `reportWebVitals.ts`: 웹 애플리케이션의 성능 측정을 위한 코드가 위치하는 파일\n            - `setupProxy.js`: 개발 환경에서 프록시 설정을 위한 파일, 개발 서버와 API 서버 간의 통신을 프록시하는데 사용됩니다.\n            - `setupTest.ts`: 테스트 환경 설정을 위한 파일\n            - `theme.ts`: 애플리케이션의 테마 설정을 관리하는 파일\n    - `common`: 재사용되는 코드나 모듈들을 관리하는 디렉토리\n        - `dist`: 재사용되는 코드의 빌드 결과물이 위치하는 디렉토리\n        - `src`: 재사용되는 코드의 소스 파일들이 위치하는 디렉토리\n        - `package.json`: 재사용되는 코드의 의존성 패키지들을 관리하는 파일\n        - `tsconfig.json`: 재사용되는 코드의 TypeScript 환경 설정 파일\n```\n\n### 3.2. 모듈화와 컴포넌트 구성\n\n모듈화와 컴포넌트 구성은 코드의 재사용성과 유지보수성을 높이는 중요한 요소입니다. 아래는 모듈화와 컴포넌트 구성에 대한 가이드라인입니다.\n\n1. 모듈화:\n   - 기능 단위로 모듈을 분리하여 개발합니다. 각 모듈은 특정 기능을 수행하도록 설계되며, 관련된 코드와 리소스를 포함해야 합니다.\n   - 모듈 간의 의존성을 최소화하고, 각 모듈이 독립적으로 작동할 수 있도록 설계합니다. 이는 모듈 간의 결합도를 낮추고 유연성을 높일 수 있습니다.\n   - 모듈의 인터페이스를 명확하게 정의하고, 다른 모듈에서 재사용할 수 있는 API를 제공합니다.\n   - 모듈의 구현을 추상화하고, 내부 구현의 변경에 유연하게 대처할 수 있도록 설계합니다.\n2. 컴포넌트 구성:\n   - 컴포넌트는 UI 요소의 재사용 가능한 조합입니다. 비슷한 동작을 하는 UI 요소들을 하나의 컴포넌트로 추상화하고, 필요에 따라 다양한 속성을 통해 재사용할 수 있도록 설계합니다.\n   - 컴포넌트는 단일 책임 원칙을 준수하고, 가능한 한 작고 재사용 가능한 형태로 구성합니다. 이는 컴포넌트의 이해와 유지보수를 용이하게 합니다.\n   - 컴포넌트 간의 계층 구조를 구성하여, 복잡한 UI를 단순화하고 관리 가능한 단위로 분할합니다. 이는 코드의 가독성과 유지보수성을 향상시킵니다.\n   - 컴포넌트의 인터페이스를 명확하게 정의하고, 다른 컴포넌트와의 상호작용을 규정합니다.\n   - 컴포넌트 간의 상태 공유를 최소화하고, 필요한 데이터는 프로퍼티로 전달하여 컴포넌트 간의 독립성을 유지합니다.\n\n모듈화와 컴포넌트 구성은 코드의 구조를 개선하고, 재사용 가능한 코드의 양을 늘리는데 중요한 역할을 합니다. 적절한 모듈화와 컴포넌트 구성을 통해 개발 생산성과 코드 품질을 향상시킬 수 있습니다.\n\n### 3.3. 상태 관리\n\n상태 관리는 애플리케이션에서 데이터의 상태를 효과적으로 관리하는 것을 의미합니다. 아래는 상태 관리에 대한 가이드라인입니다.\n\n1. 단일 소스로 상태 관리하기:\n   - 애플리케이션의 모든 상태를 단일한 곳에서 관리하는 것이 중요합니다. 이를 통해 상태의 일관성을 유지하고, 데이터의 중복을 피할 수 있습니다.\n   - 상태 관리 라이브러리인 Redux 사용하여 상태를 중앙 집중화합니다.\n2. 상태의 불변성 유지:\n   - 상태는 불변성을 유지해야 합니다. 이는 상태를 직접 수정하지 않고 새로운 상태를 생성하여 업데이트하는 방식으로 작업해야 함을 의미합니다.\n3. 컴포넌트와 상태의 연결:\n   - 상태 관리 라이브러리를 활용하면 컴포넌트와 상태를 쉽게 연결할 수 있습니다. 이를 통해 상태의 변경을 자동으로 감지하고 컴포넌트를 업데이트할 수 있습니다.\n   - React의 Context API, ReactQuery 등을 활용하여 컴포넌트와 상태를 연결하고 패칭합니다.\n4. 비동기 상태 관리:\n   - 비동기 작업과 관련된 상태를 효과적으로 관리해야 합니다. API 호출, 비동기 데이터 로딩 등의 작업을 처리하는데 있어서 상태 관리 라이브러리의 비동기 처리 기능을 활용할 수 있습니다.\n   - Redux-Thunk를 사용하여 비동기 작업을 처리합니다.\n\n### 3.4. 라우팅\n\n라우팅은 사용자가 애플리케이션 내에서 다른 페이지 또는 뷰로 이동할 수 있는 기능을 제공하는 것입니다. 아래는 라우팅에 대한 가이드라인입니다.\n\n1. 라우팅 라이브러리 선택:\n   - React 애플리케이션에서 라우팅을 구현하기 위해 React Router 라우팅 라이브러리를 사용합니다.\n2. 라우팅 구성:\n   - 라우팅은 URL 경로와 해당 경로에 연결된 컴포넌트를 매핑하는 방식으로 구성됩니다.\n   - 라우터 컴포넌트를 사용하여 URL 경로와 컴포넌트를 매핑하고, 필요에 따라 중첩된 라우트와 파라미터를 처리할 수 있습니다.\n3. 네비게이션:\n   - 사용자가 다른 페이지로 이동할 수 있도록 네비게이션 기능을 구현합니다.\n   - useNavigate와 react-router-dom의 Navigate를 사용하여 라우터를 조작하여 네비게이션을 처리합니다.\n4. 보안과 권한 관리:\n   - 라우팅 시 보안 및 권한 관리가 필요한 경우, 인증 여부를 확인하고 접근 권한을 제어합니다.\n     - AppLayout: 토큰인증이 요구되는 접근 영역\n     - NonAuthenticationLayout: 비인증 상태 접근 영역\n   - 보호된 라우트, 권한 검사 및 리다이렉션과 같은 기능을 구현하여 보안과 권한 관리를 처리할 수 있습니다.\n\n라우팅은 사용자 경험을 향상시키고, 애플리케이션 내의 다양한 기능과 페이지 간의 이동을 가능하게 합니다. 적절한 라우팅 구현은 사용자의 효율성과 편의성을 높이는 데 중요한 역할을 합니다.\n\n## 4. 리소스 관리\n\n### 4.1. 이미지 및 아이콘\n\n이미지 및 아이콘은 애플리케이션에서 시각적인 요소를 추가하고 사용자 경험을 향상시키는 데 중요한 역할을 합니다. 아래는 이미지 및 아이콘 사용에 대한 가이드라인입니다.\n\n1. 이미지 사용:\n   - 애플리케이션에서 이미지를 사용하여 콘텐츠를 시각적으로 표현할 수 있습니다.\n   - 이미지를 삽입할 때는 최적화된 이미지를 사용하여 로딩 속도를 개선하고, 반응형 디자인에 맞게 이미지 크기를 조정해야 합니다.\n   - 이미지에 대체 텍스트를 제공하여 시각 장애인이나 이미지 로딩에 실패한 경우에도 콘텐츠를 이해할 수 있도록 해야 합니다.\n2. 아이콘 사용:\n   - 아이콘은 작고 간결한 그래픽 요소로서 애플리케이션에서 기능이나 상태를 시각적으로 나타내는 데 유용합니다.\n   - 아이콘 라이브러리로 Font Awesome를 사용합니다.\n   - 아이콘은 의미를 명확하게 전달해야 하므로, 사용 시 해당 아이콘의 의미와 사용 범위를 이해하고 적절하게 활용해야 합니다.\n3. 이미지 및 아이콘 관리:\n   - 이미지 및 아이콘은 프로젝트의 assets 디렉토리에서 관리됩니다.\n\n### 4.2. 스타일시트.\n\n스타일시트는 애플리케이션의 외관과 레이아웃을 결정하는 중요한 요소입니다. Chakra UI와 같은 스타일시트 라이브러리를 사용하면 일관된 디자인 시스템을 구축하고 UI 개발을 효율적으로 진행할 수 있습니다. 아래는 Chakra UI를 사용한 스타일시트 작성에 대한 가이드라인입니다.\n\n1. Chakra UI:\n   - 프로젝트에 Chakra UI가 설치되어있습니다.\n   - ChakraProvider는 애플리케이션의 최상위에 Chakra UI가 적용되어 있습니다.\n2. 컴포넌트 스타일링:\n   - Chakra UI는 다양한 사전 정의된 컴포넌트와 스타일 프로퍼티를 제공합니다. 이를 활용하여 컴포넌트를 스타일링할 수 있습니다.\n   - 스타일 프로퍼티를 사용하여 컴포넌트의 스타일을 변경하거나 커스터마이징할 수 있습니다.\n   - Chakra UI의 ThemeProvider를 사용하여 테마 설정을 관리하고 커스텀 테마를 적용할 수 있습니다.\n3. 반응형 디자인:\n   - Chakra UI는 반응형 디자인을 지원하여 다양한 장치와 화면 크기에 대응할 수 있습니다.\n   - \"@chakra-ui/media-query\" 모듈을 사용하여 미디어 쿼리를 활용할 수 있습니다. 이를 활용하여 특정 화면 크기에 대한 스타일 조정합니다.\n4. 커스텀 컴포넌트:\n   - 필요에 따라 Chakra UI의 컴포넌트를 확장하여 커스텀 컴포넌트를 생성합니다.\n   - 커스텀 컴포넌트를 생성하여 재사용성과 코드 유지 보수성을 향상킵니다.\n\nChakra UI를 사용하여 스타일시트를 작성하면 일관된 디자인 시스템을 구축하고 개발 생산성을 높일 수 있습니다. 적절하게 활용하여 사용자 인터페이스를 구성하고 디자인 요소를 일관되게 관리해야 합니다.\n\n### 4.3. 외부 라이브러리와 의존성 관리\n\n모던한 프론트엔드 애플리케이션 개발에는 종종 외부 라이브러리와 의존성이 필요합니다. 이러한 라이브러리와 의존성을 효율적으로 관리하고 활용하는 것이 중요합니다. 아래는 몇 가지 널리 사용되는 라이브러리와 의존성에 대한 간단한 소개입니다:\n\n1. emotion:\n   - emotion은 CSS-in-JS 라이브러리로, JavaScript 코드 내에서 CSS 스타일을 작성할 수 있습니다. 컴포넌트 단위로 스타일을 캡슐화하여 유지보수 및 재사용성을 높일 수 있습니다.\n2. reduxjs:\n   - reduxjs는 상태 관리 라이브러리로, 애플리케이션의 상태를 중앙에서 관리하고 예측 가능한 상태 변화를 제공합니다. redux를 사용하여 복잡한 애플리케이션 상태를 효과적으로 관리할 수 있습니다.\n3. ag-grid-react:\n   - ag-grid-react는 강력한 그리드 컴포넌트 라이브러리로, 테이블 형태의 데이터를 표시하고 조작할 수 있습니다. 유연한 기능과 다양한 커스터마이징 옵션을 제공하여 데이터 그리드를 구축할 수 있습니다.\n4. axios:\n   - axios는 HTTP 클라이언트 라이브러리로, 비동기적으로 서버와 데이터 통신을 할 수 있습니다. REST API와의 상호작용이나 데이터 요청 처리에 유용합니다.\n5. date-fns:\n   - date-fns는 JavaScript 날짜 유틸리티 라이브러리로, 날짜와 시간 관련 작업을 쉽게 처리할 수 있습니다. 날짜 형식 변환, 날짜 계산, 로컬라이징 등 다양한 기능을 제공합니다.\n6. framer-motion:\n   - framer-motion은 React용 모션 및 애니메이션 라이브러리로, 화면 전환 및 요소 애니메이션을 부드럽게 구현할 수 있습니다. 유연한 애니메이션 효과와 상호작용을 제공합니다.\n7. lodash:\n   - lodash는 JavaScript 유틸리티 라이브러리로, 다양한 유용한 함수들을 제공합니다. 배열, 객체, 함수 등을 다루는 다양한 작업에 활용할 수 있습니다.\n8. quill:\n   - quill은 리치 텍스트 에디터 라이브러리로, 사용자가 서식 있는 텍스트를 작성하고 편집할 수 있는 기능을 제공합니다. 이미지, 표, 링크 등을 삽입할 수 있는 다양한 기능을 제공합니다.\n9. react-datepicker:\n   - react-datepicker는 React용 날짜 선택 컴포넌트 라이브러리로, 사용자가 날짜를 선택하고 입력할 수 있는 기능을 제공합니다. 다양한 날짜 형식과 옵션을 설정할 수 있습니다.\n10. web-vitals:\n    - web-vitals는 웹 애플리케이션의 성능 지표를 측정하는 라이브러리로, 사용자 경험을 평가하고 개선하는 데 도움을 줍니다. 측정된 지표를 통해 성능 최적화에 대한 통찰력을 얻을 수 있습니다.\n11. xlsx:\n    - xlsx는 Excel 파일을 다루는 라이브러리로, 데이터를 읽고 쓰는 기능을 제공합니다. Excel 파일 형식을 다루는 다양한 작업을 수행할 수 있습니다.\n12. monaco-editor:\n    - monaco-editor는 웹 기반의 텍스트 편집기 라이브러리로, 문법 강조, 자동 완성, 신택스 검증 등 다양한 기능을 제공합니다. 개발자용 IDE나 코드 에디터에 적용할 수 있습니다.\n\n이러한 외부 라이브러리와 의존성을 적절하게 활용하여 개발 생산성을 향상시키고 애플리케이션에 필요한 기능을 구현할 수 있습니다. 의존성 관리와 버전 업데이트에 주의하여 안정성과 호환성을 유지하는 것이 중요합니다. 6. framer-motion:\n\n- framer-motion은 React용 모션 및 애니메이션 라이브러리로, 화면 전환 및 요소 애니메이션을 부드럽게 구현할 수 있습니다. 유연한 애니메이션 효과와 상호작용을 제공합니다.\n\n7. lodash:\n   - lodash는 JavaScript 유틸리티 라이브러리로, 다양한 유용한 함수들을 제공합니다. 배열, 객체, 함수 등을 다루는 다양한 작업에 활용할 수 있습니다.\n8. quill:\n   - quill은 리치 텍스트 에디터 라이브러리로, 사용자가 서식 있는 텍스트를 작성하고 편집할 수 있는 기능을 제공합니다. 이미지, 표, 링크 등을 삽입할 수 있는 다양한 기능을 제공합니다.\n9. react-datepicker:\n   - react-datepicker는 React용 날짜 선택 컴포넌트 라이브러리로, 사용자가 날짜를 선택하고 입력할 수 있는 기능을 제공합니다. 다양한 날짜 형식과 옵션을 설정할 수 있습니다.\n10. web-vitals:\n    - web-vitals는 웹 애플리케이션의 성능 지표를 측정하는 라이브러리로, 사용자 경험을 평가하고 개선하는 데 도움을 줍니다. 측정된 지표를 통해 성능 최적화에 대한 통찰력을 얻을 수 있습니다.\n11. xlsx:\n    - xlsx는 Excel 파일을 다루는 라이브러리로, 데이터를 읽고 쓰는 기능을 제공합니다. Excel 파일 형식을 다루는 다양한 작업을 수행할 수 있습니다.\n12. monaco-editor:\n    - monaco-editor는 웹 기반의 텍스트 편집기 라이브러리로, 문법 강조, 자동 완성, 신택스 검증 등 다양한 기능을 제공합니다. 개발자용 IDE나 코드 에디터에 적용할 수 있습니다.\n\n이러한 외부 라이브러리와 의존성을 적절하게 활용하여 개발 생산성을 향상시키고 애플리케이션에 필요한 기능을 구현할 수 있습니다. 의존성 관리와 버전 업데이트에 주의하여 안정성과 호환성을 유지하는 것이 중요합니다.\n",
    "date": "2024-03-20",
    "category": "frontend",
    "tags": [
      "Convention",
      "Document"
    ],
    "thumbnail": "/images/convention.png",
    "translations": {
      "ko": {
        "title": "Convention Document",
        "description": "개발 규칙",
        "content": "<h2 id=\"heading-0\">1. 목적</h2>\n<ol>\n<li>개발 표준화: 프론트엔드 개발에 일관성을 부여하여 코드의 가독성과 유지보수성을 높입니다.</li>\n<li>팀 협업 강화: 개발자들 간의 협업을 원활하게 하고 의사소통을 개선합니다.</li>\n<li>새로운 개발자 온보딩: 새로 합류한 개발자가 프로젝트에 빠르게 적응하고 효율적으로 개발할 수 있도록 돕습니다.</li>\n<li>코드 품질 향상: 일관된 코딩 스타일과 최적화 기법을 적용하여 코드의 품질을 향상시킵니다.</li>\n<li>유지보수성 강화: 일관된 구조와 명명 규칙을 통해 코드의 가독성을 높이고 유지보수를 용이하게 합니다.</li>\n</ol>\n<h2 id=\"heading-1\">2. 코딩 스타일 가이드</h2>\n<h3 id=\"heading-2\">2.1. 들여쓰기</h3>\n<ol>\n<li>Prettier의 기본설정으로 들여쓰기 합니다.</li>\n</ol>\n<h3 id=\"heading-3\">2.2. 변수와 상수</h3>\n<p>변수와 상수는 프론트엔드 개발에서 중요한 개념입니다. 이 섹션에서는 변수와 상수의 사용에 대한 가이드라인을 설명합니다.</p>\n<ol>\n<li>변수명과 상수명\n<ul>\n<li>변수명과 상수명은 의미를 명확하게 전달할 수 있도록 짓는 것이 좋습니다.</li>\n<li>변수명과 상수명은 영문을 사용하여 작성합니다.</li>\n<li>여러 단어로 이루어진 경우에는 단어 사이를 카멜케이스로 구분합니다. 예: myVariable, userName</li>\n</ul>\n</li>\n<li>변수의 선언과 할당\n<ul>\n<li>변수를 선언할 때에는 let 키워드를 사용합니다. 예: let count = 0;</li>\n<li>변수의 값은 필요에 따라 언제든지 변경할 수 있습니다.</li>\n</ul>\n</li>\n<li>상수의 선언과 할당\n<ul>\n<li>상수를 선언할 때에는 const 키워드를 사용합니다. 예: const PI = 3.14;</li>\n<li>상수는 한 번 할당된 값은 변경할 수 없습니다.</li>\n</ul>\n</li>\n<li>변수와 상수의 초기화\n<ul>\n<li>변수와 상수는 선언과 동시에 초기값을 할당하는 것이 좋습니다.</li>\n<li>초기화되지 않은 변수나 상수는 의도치 않은 동작을 야기할 수 있으므로 주의해야 합니다.</li>\n</ul>\n</li>\n</ol>\n<p>변수와 상수는 프로그램의 데이터를 저장하고 조작하는 데에 필수적인 요소입니다. 적절하게 변수와 상수를 활용하여 가독성 높은 코드를 작성하고, 필요에 따라 값의 변경 여부를 고려하여 변수와 상수를 선택하시기 바랍니다.</p>\n<h3 id=\"heading-4\">2.3. 함수와 메서드</h3>\n<p>함수와 메서드는 프론트엔드 개발에서 코드의 재사용성과 모듈화를 위해 중요한 요소입니다. 이 섹션에서는 함수와 메서드의 사용에 대한 가이드라인을 제시합니다.</p>\n<ol>\n<li>함수와 메서드의 정의\n<ul>\n<li>함수는 독립적으로 동작하는 코드 블록입니다. 주어진 입력을 받아서 처리하고, 결과를 반환할 수 있습니다.</li>\n<li>메서드는 객체에 속해 있는 함수로, 객체의 상태를 조작하거나 객체의 동작을 수행합니다.</li>\n</ul>\n</li>\n<li>함수와 메서드의 명명 규칙\n<ul>\n<li>함수와 메서드의 이름은 동사 형태로 짓는 것이 일반적입니다. 예: calculateTotal, loginUser</li>\n<li>함수와 메서드의 이름은 의미를 명확하게 전달할 수 있도록 작성해야 합니다.</li>\n<li>여러 단어로 이루어진 경우에는 카멜 케이스(camelCase)를 사용하여 작성합니다. 예: calculateTaxAmount, loginUserWithCredentials</li>\n</ul>\n</li>\n<li>함수와 메서드의 매개변수\n<ul>\n<li>함수와 메서드는 필요한 입력값을 매개변수(parameter)로 받을 수 있습니다.</li>\n<li>매개변수의 이름은 변수와 동일한 명명 규칙을 따르며, 입력값의 의미를 잘 표현할 수 있도록 작성해야 합니다.</li>\n</ul>\n</li>\n<li>함수와 메서드의 반환값\n<ul>\n<li>함수와 메서드는 필요에 따라 결과값을 반환할 수 있습니다.</li>\n<li>반환값의 타입은 명확하게 정의하고, 함수 또는 메서드의 목적과 일치하는 데이터를 반환해야 합니다.</li>\n</ul>\n</li>\n<li>함수와 메서드의 범위\n<ul>\n<li>함수와 메서드는 선언된 블록(scope) 내에서 유효합니다. 함수 내부에서 선언된 변수는 함수 내에서만 사용할 수 있으며, 함수 외부에서는 접근할 수 없습니다.</li>\n</ul>\n</li>\n</ol>\n<p>함수와 메서드는 코드의 재사용성과 유지보수성을 높여주는 도구입니다. 적절하게 함수와 메서드를 활용하여 코드를 구성하고, 가독성과 유연성을 고려하여 함수와 메서드를 설계하시기 바랍니다.</p>\n<h3 id=\"heading-5\">2.4. 컴포넌트</h3>\n<p>클래스와 컴포넌트는 객체지향 프로그래밍과 리액트 프론트엔드 개발에서 중요한 개념입니다. 이 섹션에서는 클래스와 컴포넌트의 사용에 대한 가이드라인을 제시합니다.</p>\n<ol>\n<li>컴포넌트의 정의\n<ul>\n<li>컴포넌트는 UI의 독립적인 구성 요소입니다. 화면에 특정한 기능을 가진 모듈 형태로 나타낼 수 있습니다.</li>\n<li>리액트에서 컴포넌트는 클래스로 정의될 수도 있고, 함수로 정의될 수도 있습니다. 클래스 컴포넌트와 함수형 컴포넌트가 있습니다.</li>\n</ul>\n</li>\n<li>컴포넌트의 명명 규칙\n<ul>\n<li>컴포넌트의 이름은 대문자로 시작해야 합니다.</li>\n<li>컴포넌트의 이름은 명사나 명사구로 짓는 것이 일반적입니다. 예: User, LoginForm, Header</li>\n</ul>\n</li>\n<li>상속과 확장성\n<ul>\n<li>컴포넌트는 상속을 통해 기존의 컴포넌트를 확장할 수 있습니다. 이를 통해 코드의 재사용성과 확장성을 높일 수 있습니다.</li>\n<li>상속을 사용할 때는 상속받은 컴포넌트의 기능을 잘 이해하고, 필요한 부분을 재정의하여 사용해야 합니다.</li>\n</ul>\n</li>\n</ol>\n<p>컴포넌트는 객체지향 개념과 리액트 개발에서 핵심적인 역할을 수행합니다.컴포넌트를 잘 이해하고 적절하게 활용하여 유지보수 가능하고 확장성 있는 코드를 작성해야 합니다.</p>\n<h3 id=\"heading-6\">2.5. 주석</h3>\n<p>주석은 코드에 대한 설명이나 추가 정보를 제공하기 위해 사용됩니다. 올바른 주석 작성은 코드의 가독성과 유지보수성을 향상시키는 데 도움이 됩니다. 아래는 주석 작성에 대한 가이드라인입니다.</p>\n<ol>\n<li>주석의 목적\n<ul>\n<li>주석의 사용을 최대한 지양하며 필수적인 경우에만 사용합니다.</li>\n<li>중요한 사항이나 추후에 작업을 필요로하는 부분을 강조하는 주석을 작성합니다.</li>\n</ul>\n</li>\n<li>주석의 작성 규칙\n<ul>\n<li>주석은 명확하고 간결하게 작성되어야 합니다.</li>\n<li>주석은 코드에 비해 적절한 수로 작성되어야 합니다. 과도한 주석은 코드를 가독성이 떨어뜨릴 수 있습니다.</li>\n<li>주석은 필요한 부분에 작성되어야 하며, 필요 없는 주석은 삭제되어야 합니다.</li>\n<li>주석은 코드의 변경에 따라 업데이트되어야 합니다.</li>\n</ul>\n</li>\n</ol>\n<p>주석은 코드를 이해하고 유지보수하기 쉽게 만들어줍니다. 주석을 적절하게 작성하여 코드를 더욱 명확하고 의미 있는 형태로 유지해야 합니다.</p>\n<h3 id=\"heading-7\">2.6. 네이밍 규칙</h3>\n<p>일관된 네이밍 규칙은 코드의 가독성과 일관성을 유지하는 데 중요합니다. 아래는 네이밍 규칙에 대한 가이드라인입니다.</p>\n<ol>\n<li>변수와 상수 네이밍\n<ul>\n<li>의미 전달: 변수와 상수의 이름은 해당 값을 잘 설명해야 합니다. 다른 개발자들이 이름만으로 변수의 역할과 용도를 이해할 수 있어야 합니다.</li>\n<li>카멜 케이스: 변수와 상수의 이름은 카멜 케이스를 사용합니다. 첫 단어는 소문자로 시작하고, 이후 단어의 첫 글자는 대문자로 작성합니다. 예: firstName, userAge</li>\n<li>가독성: 변수의 길이는 적절하게 설정해야 합니다. 너무 짧으면 의미 전달이 어려우며, 너무 길면 가독성이 저하될 수 있습니다.</li>\n</ul>\n</li>\n<li>함수와 메서드 네이밍\n<ul>\n<li>동사 형태: 함수와 메서드의 이름은 동사로 시작해야 합니다. 동작하는 기능을 잘 설명하는 동사를 선택합니다. 예: getUserData, calculateTotal</li>\n<li>카멜 케이스: 함수와 메서드의 이름은 카멜 케이스를 사용합니다. 첫 단어는 소문자로 시작하고, 이후 단어의 첫 글자는 대문자로 작성합니다. 예: fetchData, updateProfile</li>\n</ul>\n</li>\n<li>컴포넌트 네이밍\n<ul>\n<li>파스칼 케이스: 컴포넌트의 이름은 파스칼 케이스를 사용합니다. 모든 단어의 첫 글자를 대문자로 작성하고, 단어 사이에는 공백이 없습니다. 예: UserService, HomePage</li>\n<li>명확한 역할: 클래스와 컴포넌트의 이름은 해당 역할을 명확하게 전달해야 합니다. 다른 개발자들이 이름만으로 해당 클래스나 컴포넌트의 역할을 이해할 수 있어야 합니다.</li>\n</ul>\n</li>\n<li>폴더 디렉토리 파일 네이밍: routes와 type폴더를 제외하고 src의 모든 폴더 내의 파일의 이름은 index로 통일합니다.\n<ul>\n<li>컴포넌트 폴더\n<ul>\n<li>대문자와 파스칼 케이스: 파일의 이름은 첫 글자를 대문자로 작성하고, 단어 사이에는 공백이 없습니다</li>\n</ul>\n</li>\n<li>이외의 폴더\n<ul>\n<li>소문자와 하이픈: 파일의 이름은 소문자로 작성하며, 여러 단어는 하이픈으로 구분합니다. 예: user-service.js, home-page.tsx</li>\n</ul>\n</li>\n<li>파일 확장자: 파일의 확장자는 해당 파일의 유형에 맞게 설정합니다. 예: .ts, .tsx</li>\n</ul>\n</li>\n</ol>\n<p>일관된 네이밍 규칙을 따르면 코드의 가독성이 향상되고 협업 시에도 일관성을 유지할 수 있습니다. 모든 개발자들이 네이밍 규칙을 공유하고 준수하도록 합니다.</p>\n<h3 id=\"heading-8\">2.7. 코드 포맷팅</h3>\n<p>일관된 코드 포맷팅은 가독성을 향상시키고 협업을 용이하게 만듭니다.</p>\n<p>아래는 코드 포맷팅에 대한 가이드라인이며 순서대로 구성됩니다.</p>\n<ul>\n<li>\n<p>대분류(1,2,3…)를 기준으로 한 줄 띄웁니다.</p>\n</li>\n<li>\n<p>소분류(a,b,c…)는 띄우지 않습니다.</p>\n<ol>\n<li>\n<p>import Module</p>\n<pre><code class=\"language-jsx\">import {\n  Box,\n  Flex,\n  FormControl,\n  FormLabel,\n  Input,\n} from \"@chakra-ui/react\";\nimport { useMemo } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport { CodeSelect } from \"@mobyen-frontend/common\";\nimport useUserRoles from \"features/user/hooks/useUserRoles\";\n</code></pre>\n<ol>\n<li>외부 모듈: from 이후를 기준, 알파벳 순으로 정렬합니다.</li>\n<li>내부 모듈: from 이후를 기준, 알파벳 순으로 정렬합니다.</li>\n</ol>\n</li>\n<li>\n<p>interface: 스코프 내에 있는 내용을 알파벳 순서대로 정렬합니다.</p>\n<pre><code class=\"language-jsx\">interface SearchPanelProps {\n  isSearching: boolean;\n  onChange: (param: {\n    email: string | null,\n    ext: string | null,\n    mobile: string | null,\n    name: string | null,\n    tel: string | null,\n    userRole: string | null,\n    useYN: string | null,\n  }) =&gt; void;\n  onReset: () =&gt; void;\n}\n</code></pre>\n</li>\n<li>\n<p>defaultProps: 스코프 내에 있는 내용을 알파벳 순서대로 정렬합니다.</p>\n<pre><code class=\"language-jsx\">const defaultProps = {\n  isSearching: false,\n  onChange(_param: {\n    email: null,\n    ext: null,\n    mobile: null,\n    name: null,\n    tel: null,\n    userRole: null,\n    useYN: null,\n  }) {},\n  onReset() {},\n};\n</code></pre>\n</li>\n<li>\n<p>component</p>\n<pre><code class=\"language-jsx\">function SearchPanel({ isSearching, onChange, onReset }: SearchPanelProps) {\n  const { handleSubmit, register, reset, resetField } = useForm&lt;{\n    search: string;\n    searchType?: \"email\" | \"ext\" | \"mobile\" | \"name\" | \"tel\";\n    useYN: string;\n    userRole: string;\n  }&gt;();\n\n  const { data: userRoles } = useUserRoles({ publicYN: \"Y\" });\n\n  const handleFormSubmit = handleSubmit(\n    ({ search, searchType, userRole, useYN }) =&gt; {\n      let email = null;\n      let ext = null;\n      let mobile = null;\n      let name = null;\n      let tel = null;\n      if (searchType) {\n        email = searchType === \"email\" ? search : null;\n        ext = searchType === \"ext\" ? search : null;\n        mobile = searchType === \"mobile\" ? search : null;\n        name = searchType === \"name\" ? search : null;\n        tel = searchType === \"tel\" ? search : null;\n      } else {\n        resetField(\"search\");\n      }\n      onChange({\n        email: email ?? null,\n        ext: ext ?? null,\n        mobile: mobile ?? null,\n        name: name ?? null,\n        tel: tel ?? null,\n        userRole: userRole ? userRole : null,\n        useYN: useYN ? useYN : null,\n      });\n    }\n  );\n\n  const handleResetButtonClick = () =&gt; {\n    reset();\n    onReset();\n  };\n\n  const userRoleOptions = useMemo(\n    () =&gt;\n      userRoles?.map((role) =&gt; ({\n        code: String(role.id),\n        name: role.name ?? \"\",\n      })) ?? [],\n    [userRoles]\n  );\n  const searchTypeOption = [\n    {\n      code: \"name\",\n      name: \"이름\",\n    },\n    {\n      code: \"email\",\n      name: \"이메일\",\n    },\n    {\n      code: \"tel\",\n      name: \"전화번호\",\n    },\n    {\n      code: \"ext\",\n      name: \"내선번호\",\n    },\n    {\n      code: \"mobile\",\n      name: \"휴대폰번호\",\n    },\n  ];\n\n  return (\n    &lt;Flex\n      as=\"form\"\n      flexDirection=\"column\"\n      gap={2}\n      onSubmit={handleFormSubmit}\n      width=\"100%\"\n    &gt;\n      &lt;Box\n        borderBottomColor=\"black\"\n        borderBottomWidth=\"1px\"\n        borderTopColor=\"black\"\n        borderTopWidth=\"1px\"\n        p={3}\n      &gt;\n        &lt;FormControl&gt;\n          &lt;FormLabel fontSize=\"xs\" fontWeight=\"bold\" htmlFor=\"userRole\"&gt;\n            검색조건\n          &lt;/FormLabel&gt;\n          &lt;Flex flexWrap=\"wrap\" gap={2}&gt;\n            &lt;CodeSelect\n              codes={userRoleOptions}\n              flex={{ md: 1 }}\n              id=\"userRole\"\n              minWidth={{ md: \"150px\" }}\n              maxWidth={{ lg: \"200px\" }}\n              placeholder=\"권한\"\n              {...register(\"userRole\")}\n            /&gt;\n            &lt;CodeSelect\n              codes={[\n                { code: \"Y\", name: \"사용\" },\n                { code: \"N\", name: \"미사용\" },\n              ]}\n              flex={{ sm: 1 }}\n              id=\"useYN\"\n              maxWidth={{ lg: \"200px\" }}\n              minWidth={{ md: \"150px\" }}\n              placeholder=\"사용여부\"\n              {...register(\"useYN\")}\n            /&gt;\n            &lt;CodeSelect\n              codes={searchTypeOption}\n              flex={{ sm: 1 }}\n              id=\"searchType\"\n              maxWidth={{ lg: \"170px\" }}\n              minWidth={{ md: \"130px\" }}\n              placeholder=\"검색조건\"\n              {...register(\"searchType\")}\n            /&gt;\n            &lt;Input\n              flex={{ md: 2 }}\n              id=\"search\"\n              maxWidth={{ lg: \"300px\" }}\n              minWidth={{ md: \"200px\" }}\n              placeholder=\"검색어\"\n              {...register(\"search\")}\n            /&gt;\n            &lt;Input\n              disabled={isSearching}\n              hidden\n              id=\"searchButton\"\n              type=\"submit\"\n            /&gt;\n            &lt;Input\n              hidden\n              id=\"resetButton\"\n              type=\"button\"\n              onClick={handleResetButtonClick}\n            /&gt;\n          &lt;/Flex&gt;\n        &lt;/FormControl&gt;\n      &lt;/Box&gt;\n    &lt;/Flex&gt;\n  );\n}\n</code></pre>\n<ol>\n<li>리액트 훅: 선언 명을 기준, 알파벳 순으로 정렬합니다.</li>\n<li>커스텀 훅: 선언 명을 기준, 알파벳 순으로 정렬합니다.</li>\n<li>useState: 첫 번째 상태변수를 기준, 알파벳 순으로 정렬합니다.</li>\n<li>function: 선언 명을 기준, 알파벳 순으로 정렬합니다.</li>\n<li>useEffect</li>\n<li>watch 함수</li>\n</ol>\n</li>\n<li>\n<p>defaultProps</p>\n<pre><code class=\"language-jsx\">SearchPanel.defaultProps = defaultProps;\n</code></pre>\n</li>\n<li>\n<p>export default</p>\n<pre><code class=\"language-jsx\">export default SearchPanel;\n</code></pre>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"heading-9\">2.8. 에러 처리</h3>\n<p>애플리케이션에서 발생하는 에러를 적절히 처리하는 것은 안정성과 예외 상황에 대한 대응력을 향상시킵니다. 아래는 에러 처리에 대한 가이드라인입니다.</p>\n<ol>\n<li>예외 처리: 예외 상황이 발생할 수 있는 코드 블록에는 적절한 예외 처리를 구현합니다. 이는 try-catch 문을 사용하여 예외를 캐치하고, 적절한 로그 메시지를 출력하거나 사용자에게 에러 메시지를 표시하는 등의 처리를 수행합니다.</li>\n<li>에러 핸들링: 애플리케이션의 최상위 수준에서 에러 핸들링을 구현합니다. 이는 예상치 못한 예외 상황이 발생했을 때 알림을 표시하고, 사용자에게 적절한 안내를 제공하는 등의 처리를 수행합니다.</li>\n<li>로깅: 에러 발생 시 로그를 기록하고 추적 가능한 정보를 포함시킵니다. 이는 디버깅과 문제 해결에 도움을 줄 수 있습니다.</li>\n<li>사용자 피드백: 에러 발생 시 사용자에게 적절한 피드백을 제공합니다. 이는 사용자가 문제 상황을 이해하고 대처할 수 있도록 도움을 줄 수 있습니다.</li>\n<li>예외 처리 모듈: 애플리케이션에서 공통적으로 발생하는 예외 상황에 대한 처리를 모듈화하여 재사용성을 높일 수 있습니다.</li>\n</ol>\n<p>애플리케이션에서 발생할 수 있는 예외 상황을 사전에 고려하고, 적절한 에러 처리를 구현하여 안정성과 사용자 경험을 개선하는 것이 좋습니다.</p>\n<h2 id=\"heading-10\">3. 프로젝트 구조</h2>\n<h3 id=\"heading-11\">3.1. 파일 및 폴더 구조</h3>\n<pre><code class=\"language-jsx\">- `package`: 프로젝트의 루트 디렉토리\n    - `app`: 애플리케이션의 소스 코드와 관련된 디렉토리\n        - `node_modules`: 프로젝트의 의존성 패키지들이 설치되는 디렉토리\n        - `public`: 정적 파일이 위치하는 디렉토리\n        - `src`: 소스 코드가 위치하는 디렉토리입니다.\n            - `api`: 서버 API와 통신하는 코드가 위치하는 디렉토리입니다.\n            - `assets`: 애플리케이션에서 사용되는 정적 리소스(이미지, 아이콘 등)가 위치\n            - `components`: 재사용 가능한 React 컴포넌트들이 위치하는 디렉토리\n            - `features`: 애플리케이션의 기능별로 구성된 모듈이 위치하는 디렉토리\n            - `libs`: 애플리케이션에서 사용되는 유틸리티 함수, 헬퍼 클래스 등이 위치\n            - `redux`: 리덕스의 리듀서, 액션, 미들웨어 등이 포함됩니다.\n            - `routes`: 라우팅과 관련된 코드가 위치하는 디렉토리입니다.\n            - `type`: 타입 정의 파일이 위치하는 디렉토리입니다.\n            - `App.css`: 애플리케이션 전체에 적용되는 CSS 스타일을 정의\n            - `App.test.tsx`: 애플리케이션의 테스트 코드가 위치하는 파일\n            - `index.css`: index.html 파일에서 사용되는 전역 CSS 스타일을 정의하는 파일\n            - `index.tsx`: React DOM 렌더링을 수행하는 코드가 이 파일에 포함됩니다.\n            - `react-app-env.d.ts`: Create React App에 의해 자동 생성되는 TypeScript 환경 설정 파일\n            - `reportWebVitals.ts`: 웹 애플리케이션의 성능 측정을 위한 코드가 위치하는 파일\n            - `setupProxy.js`: 개발 환경에서 프록시 설정을 위한 파일, 개발 서버와 API 서버 간의 통신을 프록시하는데 사용됩니다.\n            - `setupTest.ts`: 테스트 환경 설정을 위한 파일\n            - `theme.ts`: 애플리케이션의 테마 설정을 관리하는 파일\n    - `common`: 재사용되는 코드나 모듈들을 관리하는 디렉토리\n        - `dist`: 재사용되는 코드의 빌드 결과물이 위치하는 디렉토리\n        - `src`: 재사용되는 코드의 소스 파일들이 위치하는 디렉토리\n        - `package.json`: 재사용되는 코드의 의존성 패키지들을 관리하는 파일\n        - `tsconfig.json`: 재사용되는 코드의 TypeScript 환경 설정 파일\n</code></pre>\n<h3 id=\"heading-12\">3.2. 모듈화와 컴포넌트 구성</h3>\n<p>모듈화와 컴포넌트 구성은 코드의 재사용성과 유지보수성을 높이는 중요한 요소입니다. 아래는 모듈화와 컴포넌트 구성에 대한 가이드라인입니다.</p>\n<ol>\n<li>모듈화:\n<ul>\n<li>기능 단위로 모듈을 분리하여 개발합니다. 각 모듈은 특정 기능을 수행하도록 설계되며, 관련된 코드와 리소스를 포함해야 합니다.</li>\n<li>모듈 간의 의존성을 최소화하고, 각 모듈이 독립적으로 작동할 수 있도록 설계합니다. 이는 모듈 간의 결합도를 낮추고 유연성을 높일 수 있습니다.</li>\n<li>모듈의 인터페이스를 명확하게 정의하고, 다른 모듈에서 재사용할 수 있는 API를 제공합니다.</li>\n<li>모듈의 구현을 추상화하고, 내부 구현의 변경에 유연하게 대처할 수 있도록 설계합니다.</li>\n</ul>\n</li>\n<li>컴포넌트 구성:\n<ul>\n<li>컴포넌트는 UI 요소의 재사용 가능한 조합입니다. 비슷한 동작을 하는 UI 요소들을 하나의 컴포넌트로 추상화하고, 필요에 따라 다양한 속성을 통해 재사용할 수 있도록 설계합니다.</li>\n<li>컴포넌트는 단일 책임 원칙을 준수하고, 가능한 한 작고 재사용 가능한 형태로 구성합니다. 이는 컴포넌트의 이해와 유지보수를 용이하게 합니다.</li>\n<li>컴포넌트 간의 계층 구조를 구성하여, 복잡한 UI를 단순화하고 관리 가능한 단위로 분할합니다. 이는 코드의 가독성과 유지보수성을 향상시킵니다.</li>\n<li>컴포넌트의 인터페이스를 명확하게 정의하고, 다른 컴포넌트와의 상호작용을 규정합니다.</li>\n<li>컴포넌트 간의 상태 공유를 최소화하고, 필요한 데이터는 프로퍼티로 전달하여 컴포넌트 간의 독립성을 유지합니다.</li>\n</ul>\n</li>\n</ol>\n<p>모듈화와 컴포넌트 구성은 코드의 구조를 개선하고, 재사용 가능한 코드의 양을 늘리는데 중요한 역할을 합니다. 적절한 모듈화와 컴포넌트 구성을 통해 개발 생산성과 코드 품질을 향상시킬 수 있습니다.</p>\n<h3 id=\"heading-13\">3.3. 상태 관리</h3>\n<p>상태 관리는 애플리케이션에서 데이터의 상태를 효과적으로 관리하는 것을 의미합니다. 아래는 상태 관리에 대한 가이드라인입니다.</p>\n<ol>\n<li>단일 소스로 상태 관리하기:\n<ul>\n<li>애플리케이션의 모든 상태를 단일한 곳에서 관리하는 것이 중요합니다. 이를 통해 상태의 일관성을 유지하고, 데이터의 중복을 피할 수 있습니다.</li>\n<li>상태 관리 라이브러리인 Redux 사용하여 상태를 중앙 집중화합니다.</li>\n</ul>\n</li>\n<li>상태의 불변성 유지:\n<ul>\n<li>상태는 불변성을 유지해야 합니다. 이는 상태를 직접 수정하지 않고 새로운 상태를 생성하여 업데이트하는 방식으로 작업해야 함을 의미합니다.</li>\n</ul>\n</li>\n<li>컴포넌트와 상태의 연결:\n<ul>\n<li>상태 관리 라이브러리를 활용하면 컴포넌트와 상태를 쉽게 연결할 수 있습니다. 이를 통해 상태의 변경을 자동으로 감지하고 컴포넌트를 업데이트할 수 있습니다.</li>\n<li>React의 Context API, ReactQuery 등을 활용하여 컴포넌트와 상태를 연결하고 패칭합니다.</li>\n</ul>\n</li>\n<li>비동기 상태 관리:\n<ul>\n<li>비동기 작업과 관련된 상태를 효과적으로 관리해야 합니다. API 호출, 비동기 데이터 로딩 등의 작업을 처리하는데 있어서 상태 관리 라이브러리의 비동기 처리 기능을 활용할 수 있습니다.</li>\n<li>Redux-Thunk를 사용하여 비동기 작업을 처리합니다.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"heading-14\">3.4. 라우팅</h3>\n<p>라우팅은 사용자가 애플리케이션 내에서 다른 페이지 또는 뷰로 이동할 수 있는 기능을 제공하는 것입니다. 아래는 라우팅에 대한 가이드라인입니다.</p>\n<ol>\n<li>라우팅 라이브러리 선택:\n<ul>\n<li>React 애플리케이션에서 라우팅을 구현하기 위해 React Router 라우팅 라이브러리를 사용합니다.</li>\n</ul>\n</li>\n<li>라우팅 구성:\n<ul>\n<li>라우팅은 URL 경로와 해당 경로에 연결된 컴포넌트를 매핑하는 방식으로 구성됩니다.</li>\n<li>라우터 컴포넌트를 사용하여 URL 경로와 컴포넌트를 매핑하고, 필요에 따라 중첩된 라우트와 파라미터를 처리할 수 있습니다.</li>\n</ul>\n</li>\n<li>네비게이션:\n<ul>\n<li>사용자가 다른 페이지로 이동할 수 있도록 네비게이션 기능을 구현합니다.</li>\n<li>useNavigate와 react-router-dom의 Navigate를 사용하여 라우터를 조작하여 네비게이션을 처리합니다.</li>\n</ul>\n</li>\n<li>보안과 권한 관리:\n<ul>\n<li>라우팅 시 보안 및 권한 관리가 필요한 경우, 인증 여부를 확인하고 접근 권한을 제어합니다.\n<ul>\n<li>AppLayout: 토큰인증이 요구되는 접근 영역</li>\n<li>NonAuthenticationLayout: 비인증 상태 접근 영역</li>\n</ul>\n</li>\n<li>보호된 라우트, 권한 검사 및 리다이렉션과 같은 기능을 구현하여 보안과 권한 관리를 처리할 수 있습니다.</li>\n</ul>\n</li>\n</ol>\n<p>라우팅은 사용자 경험을 향상시키고, 애플리케이션 내의 다양한 기능과 페이지 간의 이동을 가능하게 합니다. 적절한 라우팅 구현은 사용자의 효율성과 편의성을 높이는 데 중요한 역할을 합니다.</p>\n<h2 id=\"heading-15\">4. 리소스 관리</h2>\n<h3 id=\"heading-16\">4.1. 이미지 및 아이콘</h3>\n<p>이미지 및 아이콘은 애플리케이션에서 시각적인 요소를 추가하고 사용자 경험을 향상시키는 데 중요한 역할을 합니다. 아래는 이미지 및 아이콘 사용에 대한 가이드라인입니다.</p>\n<ol>\n<li>이미지 사용:\n<ul>\n<li>애플리케이션에서 이미지를 사용하여 콘텐츠를 시각적으로 표현할 수 있습니다.</li>\n<li>이미지를 삽입할 때는 최적화된 이미지를 사용하여 로딩 속도를 개선하고, 반응형 디자인에 맞게 이미지 크기를 조정해야 합니다.</li>\n<li>이미지에 대체 텍스트를 제공하여 시각 장애인이나 이미지 로딩에 실패한 경우에도 콘텐츠를 이해할 수 있도록 해야 합니다.</li>\n</ul>\n</li>\n<li>아이콘 사용:\n<ul>\n<li>아이콘은 작고 간결한 그래픽 요소로서 애플리케이션에서 기능이나 상태를 시각적으로 나타내는 데 유용합니다.</li>\n<li>아이콘 라이브러리로 Font Awesome를 사용합니다.</li>\n<li>아이콘은 의미를 명확하게 전달해야 하므로, 사용 시 해당 아이콘의 의미와 사용 범위를 이해하고 적절하게 활용해야 합니다.</li>\n</ul>\n</li>\n<li>이미지 및 아이콘 관리:\n<ul>\n<li>이미지 및 아이콘은 프로젝트의 assets 디렉토리에서 관리됩니다.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"heading-17\">4.2. 스타일시트.</h3>\n<p>스타일시트는 애플리케이션의 외관과 레이아웃을 결정하는 중요한 요소입니다. Chakra UI와 같은 스타일시트 라이브러리를 사용하면 일관된 디자인 시스템을 구축하고 UI 개발을 효율적으로 진행할 수 있습니다. 아래는 Chakra UI를 사용한 스타일시트 작성에 대한 가이드라인입니다.</p>\n<ol>\n<li>Chakra UI:\n<ul>\n<li>프로젝트에 Chakra UI가 설치되어있습니다.</li>\n<li>ChakraProvider는 애플리케이션의 최상위에 Chakra UI가 적용되어 있습니다.</li>\n</ul>\n</li>\n<li>컴포넌트 스타일링:\n<ul>\n<li>Chakra UI는 다양한 사전 정의된 컴포넌트와 스타일 프로퍼티를 제공합니다. 이를 활용하여 컴포넌트를 스타일링할 수 있습니다.</li>\n<li>스타일 프로퍼티를 사용하여 컴포넌트의 스타일을 변경하거나 커스터마이징할 수 있습니다.</li>\n<li>Chakra UI의 ThemeProvider를 사용하여 테마 설정을 관리하고 커스텀 테마를 적용할 수 있습니다.</li>\n</ul>\n</li>\n<li>반응형 디자인:\n<ul>\n<li>Chakra UI는 반응형 디자인을 지원하여 다양한 장치와 화면 크기에 대응할 수 있습니다.</li>\n<li>\"@chakra-ui/media-query\" 모듈을 사용하여 미디어 쿼리를 활용할 수 있습니다. 이를 활용하여 특정 화면 크기에 대한 스타일 조정합니다.</li>\n</ul>\n</li>\n<li>커스텀 컴포넌트:\n<ul>\n<li>필요에 따라 Chakra UI의 컴포넌트를 확장하여 커스텀 컴포넌트를 생성합니다.</li>\n<li>커스텀 컴포넌트를 생성하여 재사용성과 코드 유지 보수성을 향상킵니다.</li>\n</ul>\n</li>\n</ol>\n<p>Chakra UI를 사용하여 스타일시트를 작성하면 일관된 디자인 시스템을 구축하고 개발 생산성을 높일 수 있습니다. 적절하게 활용하여 사용자 인터페이스를 구성하고 디자인 요소를 일관되게 관리해야 합니다.</p>\n<h3 id=\"heading-18\">4.3. 외부 라이브러리와 의존성 관리</h3>\n<p>모던한 프론트엔드 애플리케이션 개발에는 종종 외부 라이브러리와 의존성이 필요합니다. 이러한 라이브러리와 의존성을 효율적으로 관리하고 활용하는 것이 중요합니다. 아래는 몇 가지 널리 사용되는 라이브러리와 의존성에 대한 간단한 소개입니다:</p>\n<ol>\n<li>emotion:\n<ul>\n<li>emotion은 CSS-in-JS 라이브러리로, JavaScript 코드 내에서 CSS 스타일을 작성할 수 있습니다. 컴포넌트 단위로 스타일을 캡슐화하여 유지보수 및 재사용성을 높일 수 있습니다.</li>\n</ul>\n</li>\n<li>reduxjs:\n<ul>\n<li>reduxjs는 상태 관리 라이브러리로, 애플리케이션의 상태를 중앙에서 관리하고 예측 가능한 상태 변화를 제공합니다. redux를 사용하여 복잡한 애플리케이션 상태를 효과적으로 관리할 수 있습니다.</li>\n</ul>\n</li>\n<li>ag-grid-react:\n<ul>\n<li>ag-grid-react는 강력한 그리드 컴포넌트 라이브러리로, 테이블 형태의 데이터를 표시하고 조작할 수 있습니다. 유연한 기능과 다양한 커스터마이징 옵션을 제공하여 데이터 그리드를 구축할 수 있습니다.</li>\n</ul>\n</li>\n<li>axios:\n<ul>\n<li>axios는 HTTP 클라이언트 라이브러리로, 비동기적으로 서버와 데이터 통신을 할 수 있습니다. REST API와의 상호작용이나 데이터 요청 처리에 유용합니다.</li>\n</ul>\n</li>\n<li>date-fns:\n<ul>\n<li>date-fns는 JavaScript 날짜 유틸리티 라이브러리로, 날짜와 시간 관련 작업을 쉽게 처리할 수 있습니다. 날짜 형식 변환, 날짜 계산, 로컬라이징 등 다양한 기능을 제공합니다.</li>\n</ul>\n</li>\n<li>framer-motion:\n<ul>\n<li>framer-motion은 React용 모션 및 애니메이션 라이브러리로, 화면 전환 및 요소 애니메이션을 부드럽게 구현할 수 있습니다. 유연한 애니메이션 효과와 상호작용을 제공합니다.</li>\n</ul>\n</li>\n<li>lodash:\n<ul>\n<li>lodash는 JavaScript 유틸리티 라이브러리로, 다양한 유용한 함수들을 제공합니다. 배열, 객체, 함수 등을 다루는 다양한 작업에 활용할 수 있습니다.</li>\n</ul>\n</li>\n<li>quill:\n<ul>\n<li>quill은 리치 텍스트 에디터 라이브러리로, 사용자가 서식 있는 텍스트를 작성하고 편집할 수 있는 기능을 제공합니다. 이미지, 표, 링크 등을 삽입할 수 있는 다양한 기능을 제공합니다.</li>\n</ul>\n</li>\n<li>react-datepicker:\n<ul>\n<li>react-datepicker는 React용 날짜 선택 컴포넌트 라이브러리로, 사용자가 날짜를 선택하고 입력할 수 있는 기능을 제공합니다. 다양한 날짜 형식과 옵션을 설정할 수 있습니다.</li>\n</ul>\n</li>\n<li>web-vitals:\n<ul>\n<li>web-vitals는 웹 애플리케이션의 성능 지표를 측정하는 라이브러리로, 사용자 경험을 평가하고 개선하는 데 도움을 줍니다. 측정된 지표를 통해 성능 최적화에 대한 통찰력을 얻을 수 있습니다.</li>\n</ul>\n</li>\n<li>xlsx:\n<ul>\n<li>xlsx는 Excel 파일을 다루는 라이브러리로, 데이터를 읽고 쓰는 기능을 제공합니다. Excel 파일 형식을 다루는 다양한 작업을 수행할 수 있습니다.</li>\n</ul>\n</li>\n<li>monaco-editor:\n<ul>\n<li>monaco-editor는 웹 기반의 텍스트 편집기 라이브러리로, 문법 강조, 자동 완성, 신택스 검증 등 다양한 기능을 제공합니다. 개발자용 IDE나 코드 에디터에 적용할 수 있습니다.</li>\n</ul>\n</li>\n</ol>\n<p>이러한 외부 라이브러리와 의존성을 적절하게 활용하여 개발 생산성을 향상시키고 애플리케이션에 필요한 기능을 구현할 수 있습니다. 의존성 관리와 버전 업데이트에 주의하여 안정성과 호환성을 유지하는 것이 중요합니다. 6. framer-motion:</p>\n<ul>\n<li>framer-motion은 React용 모션 및 애니메이션 라이브러리로, 화면 전환 및 요소 애니메이션을 부드럽게 구현할 수 있습니다. 유연한 애니메이션 효과와 상호작용을 제공합니다.</li>\n</ul>\n<ol start=\"7\">\n<li>lodash:\n<ul>\n<li>lodash는 JavaScript 유틸리티 라이브러리로, 다양한 유용한 함수들을 제공합니다. 배열, 객체, 함수 등을 다루는 다양한 작업에 활용할 수 있습니다.</li>\n</ul>\n</li>\n<li>quill:\n<ul>\n<li>quill은 리치 텍스트 에디터 라이브러리로, 사용자가 서식 있는 텍스트를 작성하고 편집할 수 있는 기능을 제공합니다. 이미지, 표, 링크 등을 삽입할 수 있는 다양한 기능을 제공합니다.</li>\n</ul>\n</li>\n<li>react-datepicker:\n<ul>\n<li>react-datepicker는 React용 날짜 선택 컴포넌트 라이브러리로, 사용자가 날짜를 선택하고 입력할 수 있는 기능을 제공합니다. 다양한 날짜 형식과 옵션을 설정할 수 있습니다.</li>\n</ul>\n</li>\n<li>web-vitals:\n<ul>\n<li>web-vitals는 웹 애플리케이션의 성능 지표를 측정하는 라이브러리로, 사용자 경험을 평가하고 개선하는 데 도움을 줍니다. 측정된 지표를 통해 성능 최적화에 대한 통찰력을 얻을 수 있습니다.</li>\n</ul>\n</li>\n<li>xlsx:\n<ul>\n<li>xlsx는 Excel 파일을 다루는 라이브러리로, 데이터를 읽고 쓰는 기능을 제공합니다. Excel 파일 형식을 다루는 다양한 작업을 수행할 수 있습니다.</li>\n</ul>\n</li>\n<li>monaco-editor:\n<ul>\n<li>monaco-editor는 웹 기반의 텍스트 편집기 라이브러리로, 문법 강조, 자동 완성, 신택스 검증 등 다양한 기능을 제공합니다. 개발자용 IDE나 코드 에디터에 적용할 수 있습니다.</li>\n</ul>\n</li>\n</ol>\n<p>이러한 외부 라이브러리와 의존성을 적절하게 활용하여 개발 생산성을 향상시키고 애플리케이션에 필요한 기능을 구현할 수 있습니다. 의존성 관리와 버전 업데이트에 주의하여 안정성과 호환성을 유지하는 것이 중요합니다.</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "1. 목적",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "2. 코딩 스타일 가이드",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "2.1. 들여쓰기",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "2.2. 변수와 상수",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "2.3. 함수와 메서드",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "2.4. 컴포넌트",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "2.5. 주석",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "2.6. 네이밍 규칙",
            "level": 3,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "2.7. 코드 포맷팅",
            "level": 3,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "2.8. 에러 처리",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "3. 프로젝트 구조",
            "level": 2,
            "isMainTopic": true,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "3.1. 파일 및 폴더 구조",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "3.2. 모듈화와 컴포넌트 구성",
            "level": 3,
            "isMainTopic": false,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "3.3. 상태 관리",
            "level": 3,
            "isMainTopic": false,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "3.4. 라우팅",
            "level": 3,
            "isMainTopic": false,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "4. 리소스 관리",
            "level": 2,
            "isMainTopic": true,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "4.1. 이미지 및 아이콘",
            "level": 3,
            "isMainTopic": false,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "4.2. 스타일시트.",
            "level": 3,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "4.3. 외부 라이브러리와 의존성 관리",
            "level": 3,
            "isMainTopic": false,
            "position": 900
          }
        ]
      },
      "en": {
        "title": "Convention Document",
        "description": "Development Rules",
        "content": "<h2 id=\"heading-0\">1. Purpose</h2>\n<ol>\n<li>Development Standardization: Provide consistency in frontend development to improve code readability and maintainability.</li>\n<li>Team Collaboration Enhancement: Facilitate collaboration between developers and improve communication.</li>\n<li>New Developer Onboarding: Help newly joined developers quickly adapt to the project and develop efficiently.</li>\n<li>Code Quality Improvement: Enhance code quality through consistent coding styles and optimization techniques.</li>\n<li>Maintainability Enhancement: Improve code readability and ease maintenance through consistent structure and naming conventions.</li>\n</ol>\n<h2 id=\"heading-1\">2. Coding Style Guide</h2>\n<h3 id=\"heading-2\">2.1. Indentation</h3>\n<ol>\n<li>Use Prettier's default settings for indentation.</li>\n</ol>\n<h3 id=\"heading-3\">2.2. Variables and Constants</h3>\n<p>Variables and constants are important concepts in frontend development. This section explains guidelines for using variables and constants.</p>\n<ol>\n<li>Variable and Constant Names\n<ul>\n<li>Variable and constant names should be chosen to clearly convey their meaning.</li>\n<li>Variable and constant names should be written in English.</li>\n<li>For multi-word names, use camelCase to separate words. Example: myVariable, userName</li>\n</ul>\n</li>\n<li>Variable Declaration and Assignment\n<ul>\n<li>Use the let keyword when declaring variables. Example: let count = 0;</li>\n<li>Variable values can be changed whenever needed.</li>\n</ul>\n</li>\n<li>Constant Declaration and Assignment\n<ul>\n<li>Use the const keyword when declaring constants. Example: const PI = 3.14;</li>\n<li>Constants cannot be changed once assigned.</li>\n</ul>\n</li>\n<li>Variable and Constant Initialization\n<ul>\n<li>It's recommended to assign initial values when declaring variables and constants.</li>\n<li>Uninitialized variables or constants can cause unintended behavior and should be avoided.</li>\n</ul>\n</li>\n</ol>\n<p>Variables and constants are essential elements for storing and manipulating program data. Use variables and constants appropriately to write readable code, and choose between them considering whether values need to be mutable.</p>\n<h3 id=\"heading-4\">2.3. Functions and Methods</h3>\n<p>Functions and methods are important elements for code reusability and modularity in frontend development. This section provides guidelines for using functions and methods.</p>\n<ol>\n<li>Function and Method Definition\n<ul>\n<li>Functions are independent code blocks that can receive input, process it, and return results.</li>\n<li>Methods are functions that belong to objects, manipulating object state or performing object behavior.</li>\n</ul>\n</li>\n<li>Function and Method Naming Conventions\n<ul>\n<li>Function and method names typically take verb forms. Example: calculateTotal, loginUser</li>\n<li>Function and method names should clearly convey their purpose.</li>\n<li>For multi-word names, use camelCase. Example: calculateTaxAmount, loginUserWithCredentials</li>\n</ul>\n</li>\n<li>Function and Method Parameters\n<ul>\n<li>Functions and methods can receive input values as parameters.</li>\n<li>Parameter names should follow the same naming conventions as variables and clearly express the meaning of input values.</li>\n</ul>\n</li>\n<li>Function and Method Return Values\n<ul>\n<li>Functions and methods can return results as needed.</li>\n<li>Return value types should be clearly defined and return data that matches the function or method's purpose.</li>\n</ul>\n</li>\n<li>Function and Method Scope\n<ul>\n<li>Functions and methods are valid within their declared block (scope). Variables declared inside a function can only be used within that function and cannot be accessed from outside.</li>\n</ul>\n</li>\n</ol>\n<p>Functions and methods are tools that enhance code reusability and maintainability. Structure your code using appropriate functions and methods, and design them considering readability and flexibility.</p>\n<h3 id=\"heading-5\">2.4. Components</h3>\n<p>Classes and components are important concepts in object-oriented programming and React frontend development. This section provides guidelines for using classes and components.</p>\n<ol>\n<li>Component Definition\n<ul>\n<li>Components are independent UI elements. They can be represented as modules with specific functionality on the screen.</li>\n<li>In React, components can be defined as either classes or functions. There are class components and functional components.</li>\n</ul>\n</li>\n<li>Component Naming Conventions\n<ul>\n<li>Component names must start with a capital letter.</li>\n<li>Component names are typically nouns or noun phrases. Example: User, LoginForm, Header</li>\n</ul>\n</li>\n<li>Inheritance and Extensibility\n<ul>\n<li>Components can be extended through inheritance. This enhances code reusability and extensibility.</li>\n<li>When using inheritance, understand the functionality of the inherited component well and redefine necessary parts.</li>\n</ul>\n</li>\n</ol>\n<p>Components play a crucial role in object-oriented concepts and React development. Understand components well and use them appropriately to write maintainable and extensible code.</p>\n<h3 id=\"heading-6\">2.5. Comments</h3>\n<p>Comments are used to provide explanations or additional information about code. Proper comment writing helps improve code readability and maintainability. Below are guidelines for writing comments.</p>\n<ol>\n<li>Comment Purpose\n<ul>\n<li>Minimize the use of comments and only use them when necessary.</li>\n<li>Write comments to emphasize important points or parts that need future work.</li>\n</ul>\n</li>\n<li>Comment Writing Rules\n<ul>\n<li>Comments should be clear and concise.</li>\n<li>Comments should be written in appropriate amounts relative to the code. Excessive comments can reduce code readability.</li>\n<li>Comments should be written where needed, and unnecessary comments should be deleted.</li>\n<li>Comments should be updated according to code changes.</li>\n</ul>\n</li>\n</ol>\n<p>Comments help make code easier to understand and maintain. Write appropriate comments to keep code clear and meaningful.</p>\n<h3 id=\"heading-7\">2.6. Naming Conventions</h3>\n<p>Consistent naming conventions are important for maintaining code readability and consistency. Below are guidelines for naming conventions.</p>\n<ol>\n<li>Variable and Constant Naming\n<ul>\n<li>Meaning Conveyance: Variable and constant names should explain their values well. Other developers should be able to understand the role and purpose of variables from their names.</li>\n<li>Camel Case: Use camelCase for variable and constant names. Start the first word with a lowercase letter and capitalize the first letter of subsequent words. Example: firstName, userAge</li>\n<li>Readability: Set appropriate variable lengths. Too short can make meaning unclear, too long can reduce readability.</li>\n</ul>\n</li>\n<li>Function and Method Naming\n<ul>\n<li>Verb Form: Function and method names should start with verbs. Choose verbs that well describe the functioning feature. Example: getUserData, calculateTotal</li>\n<li>Camel Case: Use camelCase for function and method names. Start the first word with a lowercase letter and capitalize the first letter of subsequent words. Example: fetchData, updateProfile</li>\n</ul>\n</li>\n<li>Component Naming\n<ul>\n<li>Pascal Case: Use PascalCase for component names. Capitalize the first letter of every word with no spaces between words. Example: UserService, HomePage</li>\n<li>Clear Role: Class and component names should clearly convey their roles. Other developers should be able to understand the role of the class or component from its name.</li>\n</ul>\n</li>\n<li>Folder Directory File Naming: All files in src folders except routes and type folders should be unified as index.\n<ul>\n<li>Component Folders\n<ul>\n<li>Capital Letters and Pascal Case: File names should start with a capital letter with no spaces between words</li>\n</ul>\n</li>\n<li>Other Folders\n<ul>\n<li>Lowercase and Hyphens: File names should be written in lowercase, with multiple words separated by hyphens. Example: user-service.js, home-page.tsx</li>\n</ul>\n</li>\n<li>File Extensions: Set file extensions according to the file type. Example: .ts, .tsx</li>\n</ul>\n</li>\n</ol>\n<p>Following consistent naming conventions improves code readability and maintains consistency in collaboration. Ensure all developers share and follow naming conventions.</p>\n<h3 id=\"heading-8\">2.7. Code Formatting</h3>\n<p>Consistent code formatting improves readability and facilitates collaboration.</p>\n<p>Below are guidelines for code formatting, organized in order.</p>\n<ul>\n<li>\n<p>Leave one line between major categories (1,2,3...)</p>\n</li>\n<li>\n<p>Do not leave lines between subcategories (a,b,c...)</p>\n<ol>\n<li>\n<p>import Module</p>\n<pre><code class=\"language-jsx\">import {\n  Box,\n  Flex,\n  FormControl,\n  FormLabel,\n  Input,\n} from \"@chakra-ui/react\";\nimport { useMemo } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport { CodeSelect } from \"@mobyen-frontend/common\";\nimport useUserRoles from \"features/user/hooks/useUserRoles\";\n</code></pre>\n<ol>\n<li>External modules: Sort alphabetically based on what comes after from</li>\n<li>Internal modules: Sort alphabetically based on what comes after from</li>\n</ol>\n</li>\n<li>\n<p>interface: Sort contents alphabetically within scope</p>\n<pre><code class=\"language-jsx\">interface SearchPanelProps {\n  isSearching: boolean;\n  onChange: (param: {\n    email: string | null,\n    ext: string | null,\n    mobile: string | null,\n    name: string | null,\n    tel: string | null,\n    userRole: string | null,\n    useYN: string | null,\n  }) =&gt; void;\n  onReset: () =&gt; void;\n}\n</code></pre>\n</li>\n<li>\n<p>defaultProps: Sort contents alphabetically within scope</p>\n<pre><code class=\"language-jsx\">const defaultProps = {\n  isSearching: false,\n  onChange(_param: {\n    email: null,\n    ext: null,\n    mobile: null,\n    name: null,\n    tel: null,\n    userRole: null,\n    useYN: null,\n  }) {},\n  onReset() {},\n};\n</code></pre>\n</li>\n<li>\n<p>component</p>\n<pre><code class=\"language-jsx\">function SearchPanel({ isSearching, onChange, onReset }: SearchPanelProps) {\n  const { handleSubmit, register, reset, resetField } = useForm&lt;{\n    search: string;\n    searchType?: \"email\" | \"ext\" | \"mobile\" | \"name\" | \"tel\";\n    useYN: string;\n    userRole: string;\n  }&gt;();\n\n  const { data: userRoles } = useUserRoles({ publicYN: \"Y\" });\n\n  const handleFormSubmit = handleSubmit(\n    ({ search, searchType, userRole, useYN }) =&gt; {\n      let email = null;\n      let ext = null;\n      let mobile = null;\n      let name = null;\n      let tel = null;\n      if (searchType) {\n        email = searchType === \"email\" ? search : null;\n        ext = searchType === \"ext\" ? search : null;\n        mobile = searchType === \"mobile\" ? search : null;\n        name = searchType === \"name\" ? search : null;\n        tel = searchType === \"tel\" ? search : null;\n      } else {\n        resetField(\"search\");\n      }\n      onChange({\n        email: email ?? null,\n        ext: ext ?? null,\n        mobile: mobile ?? null,\n        name: name ?? null,\n        tel: tel ?? null,\n        userRole: userRole ? userRole : null,\n        useYN: useYN ? useYN : null,\n      });\n    }\n  );\n\n  const handleResetButtonClick = () =&gt; {\n    reset();\n    onReset();\n  };\n\n  const userRoleOptions = useMemo(\n    () =&gt;\n      userRoles?.map((role) =&gt; ({\n        code: String(role.id),\n        name: role.name ?? \"\",\n      })) ?? [],\n    [userRoles]\n  );\n  const searchTypeOption = [\n    {\n      code: \"name\",\n      name: \"Name\",\n    },\n    {\n      code: \"email\",\n      name: \"Email\",\n    },\n    {\n      code: \"tel\",\n      name: \"Phone Number\",\n    },\n    {\n      code: \"ext\",\n      name: \"Extension Number\",\n    },\n    {\n      code: \"mobile\",\n      name: \"Mobile Number\",\n    },\n  ];\n\n  return (\n    &lt;Flex\n      as=\"form\"\n      flexDirection=\"column\"\n      gap={2}\n      onSubmit={handleFormSubmit}\n      width=\"100%\"\n    &gt;\n      &lt;Box\n        borderBottomColor=\"black\"\n        borderBottomWidth=\"1px\"\n        borderTopColor=\"black\"\n        borderTopWidth=\"1px\"\n        p={3}\n      &gt;\n        &lt;FormControl&gt;\n          &lt;FormLabel fontSize=\"xs\" fontWeight=\"bold\" htmlFor=\"userRole\"&gt;\n            Search Conditions\n          &lt;/FormLabel&gt;\n          &lt;Flex flexWrap=\"wrap\" gap={2}&gt;\n            &lt;CodeSelect\n              codes={userRoleOptions}\n              flex={{ md: 1 }}\n              id=\"userRole\"\n              minWidth={{ md: \"150px\" }}\n              maxWidth={{ lg: \"200px\" }}\n              placeholder=\"Role\"\n              {...register(\"userRole\")}\n            /&gt;\n            &lt;CodeSelect\n              codes={[\n                { code: \"Y\", name: \"In Use\" },\n                { code: \"N\", name: \"Not in Use\" },\n              ]}\n              flex={{ sm: 1 }}\n              id=\"useYN\"\n              maxWidth={{ lg: \"200px\" }}\n              minWidth={{ md: \"150px\" }}\n              placeholder=\"Usage Status\"\n              {...register(\"useYN\")}\n            /&gt;\n            &lt;CodeSelect\n              codes={searchTypeOption}\n              flex={{ sm: 1 }}\n              id=\"searchType\"\n              maxWidth={{ lg: \"170px\" }}\n              minWidth={{ md: \"130px\" }}\n              placeholder=\"Search Condition\"\n              {...register(\"searchType\")}\n            /&gt;\n            &lt;Input\n              flex={{ md: 2 }}\n              id=\"search\"\n              maxWidth={{ lg: \"300px\" }}\n              minWidth={{ md: \"200px\" }}\n              placeholder=\"Search Term\"\n              {...register(\"search\")}\n            /&gt;\n            &lt;Input\n              disabled={isSearching}\n              hidden\n              id=\"searchButton\"\n              type=\"submit\"\n            /&gt;\n            &lt;Input\n              hidden\n              id=\"resetButton\"\n              type=\"button\"\n              onClick={handleResetButtonClick}\n            /&gt;\n          &lt;/Flex&gt;\n        &lt;/FormControl&gt;\n      &lt;/Box&gt;\n    &lt;/Flex&gt;\n  );\n}\n</code></pre>\n<ol>\n<li>React hooks: Sort alphabetically based on declaration name</li>\n<li>Custom hooks: Sort alphabetically based on declaration name</li>\n<li>useState: Sort alphabetically based on first state variable</li>\n<li>function: Sort alphabetically based on declaration name</li>\n<li>useEffect</li>\n<li>watch functions</li>\n</ol>\n</li>\n<li>\n<p>defaultProps</p>\n<pre><code class=\"language-jsx\">SearchPanel.defaultProps = defaultProps;\n</code></pre>\n</li>\n<li>\n<p>export default</p>\n<pre><code class=\"language-jsx\">export default SearchPanel;\n</code></pre>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"heading-9\">2.8. Error Handling</h3>\n<p>Properly handling errors in applications improves stability and response to exceptional situations. Below are guidelines for error handling.</p>\n<ol>\n<li>Exception Handling: Implement appropriate exception handling for code blocks where exceptions may occur. This involves using try-catch statements to catch exceptions, outputting appropriate log messages, or displaying error messages to users.</li>\n<li>Error Handling: Implement error handling at the highest level of the application. This involves displaying notifications and providing appropriate guidance to users when unexpected exceptions occur.</li>\n<li>Logging: Record logs and include traceable information when errors occur. This can help with debugging and problem-solving.</li>\n<li>User Feedback: Provide appropriate feedback to users when errors occur. This can help users understand and deal with problem situations.</li>\n<li>Exception Handling Module: Modularize handling of common exceptions in the application to improve reusability.</li>\n</ol>\n<p>It's good to consider potential exceptional situations in advance and implement appropriate error handling to improve stability and user experience.</p>\n<h2 id=\"heading-10\">3. Project Structure</h2>\n<h3 id=\"heading-11\">3.1. File and Folder Structure</h3>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "1. Purpose",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "2. Coding Style Guide",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "2.1. Indentation",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "2.2. Variables and Constants",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "2.3. Functions and Methods",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "2.4. Components",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "2.5. Comments",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "2.6. Naming Conventions",
            "level": 3,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "2.7. Code Formatting",
            "level": 3,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "2.8. Error Handling",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "3. Project Structure",
            "level": 2,
            "isMainTopic": true,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "3.1. File and Folder Structure",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          }
        ]
      }
    },
    "imageHeights": {}
  },
  {
    "id": "cursor_ai",
    "title": "Cursor AI",
    "content": "\n---\n\n이번에 작성한 글은 Cursor를 빨리 익히기 위해 정보들을 모아봤습니다.\n\n알아두면 진짜 좋은 기능들도 있으니 한번 공부해보시는걸 추천합니다.\n\n---\n\n## **#1 VSCode 연동**\n\nCursor는 VSCode를 포크 떠서 만든 IDE기 떄문에 기존에 VSCode에서 사용하던 확장들을 가져올 수 있습니다.\n\nCursor Settings > General > Account\n\n로 가셔서 설정할 수 있습니다.\n\n**Cursor Settings를 못찾겠다면 Ctrl + Shift + J를 누르셔서 여시면 됩니다.**\n\n## **#2 주요 커맨드 ( 단축키 )**\n\nCursor에서는 아래 3가지 기능을 단축키로 외워두시면 80퍼센트 알게된거라 보시면 됩니다.\n\n**1. Tab**\n\n에디터에서 약 1초간 가만히 있으면 Cursor Copilot++이 AI로 **코드를 자동완성** 해줍니다.\n\n![1](https://blog.kakaocdn.net/dn/cdDb18/btsJ4eATVwU/hvckbgbLoex5JEeOo5UKG0/img.png)\n\n코드 자동 예측해서 완성\n\n![2](https://blog.kakaocdn.net/dn/cRoxgk/btsJ5fTbJeO/s6G0KkwOoU6ZsaJCzPkkn0/img.png)\n\n다른 줄의 패턴에 따라 자동 완성\n다른 줄의 패턴에 따라 자동 완성\n\n**2. Ctrl + K**\n\nCtrl + K를 사용하면 AI로 **바로바로 코드를 편집**하고 작성할 수 있습니다.\n\n이걸 쓰는 이유는 특정 범위 또는 줄만 바로 프롬포트로 수정하거나 질문 가능하기때문입니다.\n\n완전히 새로운 코드를 생성하려면 아무 것도 선택하지 않고 Ctrl K만 입력하면 됩니다.\n\n@Codebase, @Docs, @Web 등 여러 가지 심볼 설정을 똑같이 사용가능합니다.\n\n심볼에 관해선 아래 #3 에 설명\n\n![3](https://blog.kakaocdn.net/dn/GTFbL/btsJ3XMKOBh/ZJRPnbzrqi0EbExZGmQjgK/img.png)\n\n코드에 Ctrl + K를 사용하면 미니 팝업이 뜹니다.\n\n![4](https://blog.kakaocdn.net/dn/cEzQo2/btsJ6cOZUZc/ORWKTYcniTMSg7xunqKN01/img.png)\n\n코드를 생성하거나 수정요청할 수 있으며 바뀌는걸 Ctrl + shift + Y로 수락, Ctrl + N로 거부\n\n![5](https://blog.kakaocdn.net/dn/bH7nMH/btsJ6fZfVhl/auMcvlKPV3Zbu0sKPHHk71/img.png)\n\n미니팝업에 질문을 쓰고 Alt + Enter를 입력하면 바로 해당 코드에 질문 가능합니다\n\n![6](https://blog.kakaocdn.net/dn/HHXcp/btsJ303JNcn/GPk9Jue2AqkAOMbjiUq04k/img.png)\n\n또한 VSCode 내부 CMD 커맨드 터미널에도 사용 가능합니다\n\n**3. Ctrl + L**\n\nCtrl + L를 사용하면 에디터 화면 오른쪽에 LLM과 **Chat을 할 수 있는 탭**이 열립니다.\n\nChat을 통해 현재 열린 코드 파일을 보는 AI와 대화할 수 있습니다.\n\n채팅에서는 항상 현재 파일과 커서를 볼 수 있으므로 \"지금 코드에 버그가 있나요?\"와 같은 질문을 할 수 있습니다.\n\n@Codebase, @Docs, @Web 등 여러 가지 심볼 설정을 똑같이 사용가능합니다.\n\n심볼에 관해선 아래 #3 에 설명\n\n![7](https://blog.kakaocdn.net/dn/cWeTgN/btsJ6V61F8p/QHZY7X7fSTtvreM8Wfp2O0/img.png)\n\nCtrl+Shift+L 또는 \"@\"을 사용하여 특정 코드 블록을 컨텍스트에 추가할 수 있습니다.\n\n![8](https://blog.kakaocdn.net/dn/Td96H/btsJ6pggIG3/QEJHTBjc8Vd5N97QhZqOdk/img.png)\n\nCtrl+Enter를 눌러 전체 코드베이스와 채팅할 수 있습니다. 스캔에 조금 시간 걸립니다.\n\n---\n\n## **#3 심볼 @**\n\nCursor에는 Chat이나 미니 프롬프트에 챗을 사용할 때 심볼로 검색 기능을 바꿀 수 있습니다.\n\n\"@\" 기호를 입력시 여러 검색 기능을 볼 수 있으며 원하는 검색 방식을 선택할 수 있습니다.\n\n**@Codebase**\n\n![9](https://blog.kakaocdn.net/dn/bkYI3Z/btsJ6H2hFeI/MPnqVe6Khe0JnrvTEYutTK/img.png)\n\n@Codebase 를 입력시 전체 코드베이스를 스캔하여 답변을 합니다.\n\n프로젝트 전체적으로 훑어보고 싶으시거나 파일 전체를 대상으로 질문하고 싶을 때 사용을 추천합니다.\n\n**@Docs**\n\n![10](https://blog.kakaocdn.net/dn/cUcSsm/btsJ6jm0xDQ/GCIQq5JQGnSF3WkHaxCqc0/img.png)\n\n@Docs 탭\n\n![11](https://blog.kakaocdn.net/dn/sMKQt/btsJ3Y5YZT1/jCKqjgW61O1y5U2tqKDgoK/img.png)\n\nDocs 탭을 선택 후 뜨는 입력창, 원하시는 문서 링크를 넣으시고 Confirm 눌러주세요\n\n![12](https://blog.kakaocdn.net/dn/kCIHe/btsJ418wVBx/3Jgmyu3bIBLvgBMVZ8O9H1/img.png)\n\n문서를 제대로 받아온 모습\n\n@Docs 를 입력시 인기 있는 라이브러리를 참조하거나 @Docs → Add new doc 를 사용하여\n\n원하시는 문서의 웹사이트 링크를 입력하여 참조가능합니다. 참조한 문서는 계속 사용 가능합니다.\n\n참조한 문서를 토대로 AI가 답변을 해줍니다.\n\n**@Web**\n\n![13](https://blog.kakaocdn.net/dn/FRGN9/btsJ5BIhtqh/2wFJe1MGlngfokGK8R0LA0/img.png)\n\n@Web 를 입력시 AI가 인터넷에서 최신 정보를 검색하여 요약한 내용을 바탕으로 답변을 해줍니다.\n\n이렇게 심볼을 상황에 맞게 잘 선택하여 써주시면 됩니다.\n\n근데 @Web은 써보니까 그냥 제가 검색하는게 나을것 같은 성능이네요.\n\n---\n\n## **#4 AI 모델 추천, 어떤 모델을 써야할까?**\n\n![14](https://blog.kakaocdn.net/dn/dHnTx9/btsJ5B9lOeZ/jWocrv6PoagJEpkKuqLOG1/img.png)\n\n2024.10.15 날짜 기준으로 Hobby(기본) 요금제를 사용하고 있는 제 화면에는 이렇게 모델들이 있습니다.\n\n상황에 따라 다른 모델을 쓰는것을 추천합니다.\n\n**일반적인 상황**\n\n**claude-3.5-sonnet**이 추론 능력이라던지 일반적인 상황에선 쓰기 가장 좋았습니다.\n\n**복잡한 코드나 에러 분석해야할 때**\n\n**o1-mini**가 가장 전문적인 것 같아 쓰기 좋았습니다.\n\n참고 : 모델 교체할 때는 ctrl + / 키를 누르시면 단축키로 바로 모델 교체 가능합니다.\n\n모델 교체 메뉴를 바로 여는 단축키는 ctrl + alt + / 키입니다.\n\n![15](https://blog.kakaocdn.net/dn/yFAmD/btsJ4da1zkb/4Klu0kxgIi5E6KhgyWKVk0/img.png)\n\n이외에도 따로 쓰고 싶으신 모델은 Cursor Settings 설정에 가셔서 토글하실 수 있고 원하는 모델을 추가할 수 있습니다.\n\n---\n\n## **#5 AI 규칙 설정**\n\n![16](https://blog.kakaocdn.net/dn/dBWkCU/btsJ4fNc1KA/Xm3nE1yAqFcrX09RiauX9k/img.png)\n\nCursor Settings -> General -> Rules for AI\n\nCursor Settings(Ctrl + Shift + J)를 들어가보시면 AI 규칙을 설정할 수 있습니다.\n\n그냥 써도 기본으로 최대한 한국어로 답변하라는 규칙이 설정되어있을겁니다.\n\n이걸 조금 더 가공해서 더 퀄리티 높은 답변을 할 수 있도록하는 규칙을 공유해드리겠습니다.\n\n**닫기**\n\nyou are an expert AI programming assistant in VSCode that primarily focuses on producing clear, readable code.\n\nYou are thoughtful, give nuanced answers, and are brilliant at reasoning.\n\nYou carefully provide accurate, factual, and thoughtful answers, and you are a genius at reasoning.\n\n1. Follow the user's requirements carefully and precisely.\n\n2. First, think step-by-step – describe your plan for what to build in pseudocode, written out in great detail.\n\n3. Confirm, then write the code!\n\n4. Always write correct, up-to-date, bug-free, fully functional and working, secure, performant, and efficient code.\n\n5. Focus on **readability** over performance.\n\n6. Fully implement all requested functionality.\n\n7. Leave **NO** to-dos, placeholders, or missing pieces.\n\n8. Ensure the code is complete! Thoroughly verify the final version.\n\n9. Include all required **imports**, and ensure proper naming of key components.\n\n10. Be concise. Minimize any unnecessary explanations.\n\n11. If you think there might not be a correct answer, say so. If you do not know the answer, admit it instead of guessing.\n\n12. Always provide concise answers.\n\n13. Please answer in Korean\n\n혹시나 현재 사용하고 계신 언어에 맞게 또는 원하는 플랫폼에 맞는 AI 답변을 원할 경우\n\n아래 링크에서 다른 규칙도 찾아보시는걸 추천 드립니다.\n\nhttps://cursor.directory/\n\n[**Cursor Directory**\nFind the best cursor rules for your framework and language\ncursor.directory](https://cursor.directory/)\n\n---\n\n## **#6 노트패드 기능 (베타)**\n\nCursor에서도 노트패드를 관리할 수 있습니다.\n\nCtrl + i 키 또는 맥에선 Cmd + i 키를 누르셔서 Composer 탭을 열어주신 뒤(아마 작을겁니다)\n\n![17](https://blog.kakaocdn.net/dn/bYjCvy/btsJ4KlQRZ4/SBt6wNNBs3KpFbiiO8okqk/img.png)\n\n오른쪽 상단에 Open Control Panel 버튼을 눌러주시면 노트패드가 열립니다.\n\n![18](https://blog.kakaocdn.net/dn/cHyWbo/btsJ5ovExHi/hQT95gHW0IwY0hLYH3HKM1/img.png)\n\n노트패드창에서 왼쪽탭 상단에 더하기 버튼이 있을텐데 이 버튼을 눌러서 노트 하나 생성합시다.\n\n![19](https://blog.kakaocdn.net/dn/QC5AR/btsJ3Z3P8F5/rTCtSsUwyDVa5aSqluyxsk/img.png)\n\n노트 내용에 아무거나 쓰신 뒤 Ctrl + L 키를 눌러 프롬프트에 들고 갑시다.\n\n![20](https://blog.kakaocdn.net/dn/bKlwOE/btsJ4YYtlhY/uHMukld8JLY9qIvuBqQlKK/img.png)\n\n이런식으로 방금 만든 노트패드가 @로 추적이 가능합니다.\n\n![21](https://blog.kakaocdn.net/dn/c6cglp/btsJ5CNZZlJ/8k4TMMZSMR25xODbkCT1K0/img.png)\n\n노트패드를 프롬프트에 포함시켜 이런식으로 결과물을 받아올 수도 있긴하지만\n\n노트패드 작성시에 AI 기능이 있었다면 더 좋지 않을까 싶네요 아직 베타니까 기다려봅시다.\n\n---\n\n## **#7 프로젝트 5분만에 분석하는 법**\n\nCursor를 이용해 5분 만에 프로젝트 구조를 파악하는 방법을 알려드리겠습니다.\n\n> 1. Ctrl + L 을 눌러 Cursor 채팅 패널을 엽니다.\n>\n> [http://www.mermaidchart.com](http://www.mermaidchart.com/)\n\nhttps://kimyir.tistory.com/97\n\n[**Cursor로 5분만에 프로젝트 분석하기**\n프로젝트 5분만에 분석하는 법 Cursor를 이용해 5분 만에 프로젝트 구조를 파악하는 방법을 알려드리겠습니다. 1. Ctrl + L 을 눌러 Cursor 채팅 패널을 엽니다. 2. \"Normal chat\"에서 \"Long Co\nkimyir.tistory.com](https://kimyir.tistory.com/97)\n\n---\n\n이상 Cursor의 기본 사용 방법과 꿀팁을 정리해보았습니다.\n\nVSCode를 바탕으로 만들어서 그런지 접근하기 쉬웠고 쓰기도 편한 것 같습니다.\n\n물론 기능이 많은 만큼 IDE 속도가 느려진 것 같지만 능률을 위해서라면 그래도 쓸 것 같네요.\n\n내 코드가 혹시나 AI가 학습하지 않을까 걱정되신다면\n\nCursor Settings -> General -> Privacy mode 탭에 가셔서 enabled로 설정해주시면 됩니다.\n\n코드가 외부에 유출안되지만 AI 답변 품질이 떨어질 순 있습니다.\n\n**번외) 다른 유용한 AI 추천**\n\n터미널 AI 도우미\n\nhttps://github.com/Aider-AI/aider\n",
    "date": "2024-03-20",
    "category": "projects",
    "tags": [
      "Cursor",
      "AI",
      "VSCode"
    ],
    "thumbnail": "/images/cursor.png",
    "translations": {
      "ko": {
        "title": "Cursor AI",
        "description": "Cursor AI 사용법",
        "content": "<hr>\n<p>이번에 작성한 글은 Cursor를 빨리 익히기 위해 정보들을 모아봤습니다.</p>\n<p>알아두면 진짜 좋은 기능들도 있으니 한번 공부해보시는걸 추천합니다.</p>\n<hr>\n<h2 id=\"heading-0\"><strong>#1 VSCode 연동</strong></h2>\n<p>Cursor는 VSCode를 포크 떠서 만든 IDE기 떄문에 기존에 VSCode에서 사용하던 확장들을 가져올 수 있습니다.</p>\n<p>Cursor Settings&nbsp;&gt;&nbsp;General&nbsp;&gt;&nbsp;Account</p>\n<p>로 가셔서 설정할 수 있습니다.</p>\n<p><strong>Cursor Settings를 못찾겠다면 Ctrl + Shift + J를 누르셔서 여시면 됩니다.</strong></p>\n<h2 id=\"heading-1\"><strong>#2 주요 커맨드 ( 단축키 )</strong></h2>\n<p>Cursor에서는 아래 3가지 기능을 단축키로 외워두시면 80퍼센트 알게된거라 보시면 됩니다.</p>\n<p><strong>1. Tab</strong></p>\n<p>에디터에서 약 1초간 가만히 있으면 Cursor Copilot++이 AI로&nbsp;<strong>코드를 자동완성</strong>&nbsp;해줍니다.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/cdDb18/btsJ4eATVwU/hvckbgbLoex5JEeOo5UKG0/img.png\" alt=\"1\"></p>\n<p>코드 자동 예측해서 완성</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/cRoxgk/btsJ5fTbJeO/s6G0KkwOoU6ZsaJCzPkkn0/img.png\" alt=\"2\"></p>\n<p>다른 줄의 패턴에 따라 자동 완성\n다른 줄의 패턴에 따라 자동 완성</p>\n<p><strong>2. Ctrl + K</strong></p>\n<p>Ctrl + K를 사용하면 AI로&nbsp;<strong>바로바로 코드를 편집</strong>하고 작성할 수 있습니다.</p>\n<p>이걸 쓰는 이유는 특정 범위 또는 줄만 바로 프롬포트로 수정하거나 질문 가능하기때문입니다.</p>\n<p>완전히 새로운 코드를 생성하려면 아무 것도 선택하지 않고 Ctrl K만 입력하면 됩니다.</p>\n<p>@Codebase, @Docs, @Web 등 여러 가지 심볼 설정을 똑같이 사용가능합니다.</p>\n<p>심볼에 관해선 아래 #3 에 설명</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/GTFbL/btsJ3XMKOBh/ZJRPnbzrqi0EbExZGmQjgK/img.png\" alt=\"3\"></p>\n<p>코드에 Ctrl + K를 사용하면 미니 팝업이 뜹니다.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/cEzQo2/btsJ6cOZUZc/ORWKTYcniTMSg7xunqKN01/img.png\" alt=\"4\"></p>\n<p>코드를 생성하거나 수정요청할 수 있으며 바뀌는걸 Ctrl + shift + Y로 수락, Ctrl + N로 거부</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/bH7nMH/btsJ6fZfVhl/auMcvlKPV3Zbu0sKPHHk71/img.png\" alt=\"5\"></p>\n<p>미니팝업에 질문을 쓰고 Alt + Enter를 입력하면 바로 해당 코드에 질문 가능합니다</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/HHXcp/btsJ303JNcn/GPk9Jue2AqkAOMbjiUq04k/img.png\" alt=\"6\"></p>\n<p>또한 VSCode 내부 CMD 커맨드 터미널에도 사용 가능합니다</p>\n<p><strong>3. Ctrl + L</strong></p>\n<p>Ctrl + L를 사용하면 에디터 화면 오른쪽에 LLM과&nbsp;<strong>Chat을 할 수 있는 탭</strong>이 열립니다.</p>\n<p>Chat을 통해 현재 열린 코드 파일을 보는 AI와 대화할 수 있습니다.</p>\n<p>채팅에서는 항상 현재 파일과 커서를 볼 수 있으므로 \"지금 코드에 버그가 있나요?\"와 같은 질문을 할 수 있습니다.</p>\n<p>@Codebase, @Docs, @Web 등 여러 가지 심볼 설정을 똑같이 사용가능합니다.</p>\n<p>심볼에 관해선 아래 #3 에 설명</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/cWeTgN/btsJ6V61F8p/QHZY7X7fSTtvreM8Wfp2O0/img.png\" alt=\"7\"></p>\n<p>Ctrl+Shift+L&nbsp;또는&nbsp;\"@\"을&nbsp;사용하여&nbsp;특정&nbsp;코드&nbsp;블록을&nbsp;컨텍스트에&nbsp;추가할&nbsp;수&nbsp;있습니다.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/Td96H/btsJ6pggIG3/QEJHTBjc8Vd5N97QhZqOdk/img.png\" alt=\"8\"></p>\n<p>Ctrl+Enter를 눌러 전체 코드베이스와 채팅할 수 있습니다. 스캔에 조금 시간 걸립니다.</p>\n<hr>\n<h2 id=\"heading-2\"><strong>#3 심볼 @</strong></h2>\n<p>Cursor에는 Chat이나 미니 프롬프트에 챗을 사용할 때 심볼로 검색 기능을 바꿀 수 있습니다.</p>\n<p>\"@\" 기호를 입력시 여러 검색 기능을 볼 수 있으며 원하는 검색 방식을 선택할 수 있습니다.</p>\n<p><strong>@Codebase</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/bkYI3Z/btsJ6H2hFeI/MPnqVe6Khe0JnrvTEYutTK/img.png\" alt=\"9\"></p>\n<p>@Codebase 를 입력시 전체 코드베이스를 스캔하여 답변을 합니다.</p>\n<p>프로젝트 전체적으로 훑어보고 싶으시거나 파일 전체를 대상으로 질문하고 싶을 때 사용을 추천합니다.</p>\n<p><strong>@Docs</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/cUcSsm/btsJ6jm0xDQ/GCIQq5JQGnSF3WkHaxCqc0/img.png\" alt=\"10\"></p>\n<p>@Docs 탭</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/sMKQt/btsJ3Y5YZT1/jCKqjgW61O1y5U2tqKDgoK/img.png\" alt=\"11\"></p>\n<p>Docs 탭을 선택 후 뜨는 입력창, 원하시는 문서 링크를 넣으시고 Confirm 눌러주세요</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/kCIHe/btsJ418wVBx/3Jgmyu3bIBLvgBMVZ8O9H1/img.png\" alt=\"12\"></p>\n<p>문서를 제대로 받아온 모습</p>\n<p>@Docs 를 입력시 인기 있는 라이브러리를 참조하거나 @Docs → Add new doc 를 사용하여</p>\n<p>원하시는 문서의 웹사이트 링크를 입력하여 참조가능합니다. 참조한 문서는 계속 사용 가능합니다.</p>\n<p>참조한 문서를 토대로 AI가 답변을 해줍니다.</p>\n<p><strong>@Web</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/FRGN9/btsJ5BIhtqh/2wFJe1MGlngfokGK8R0LA0/img.png\" alt=\"13\"></p>\n<p>@Web 를 입력시 AI가 인터넷에서 최신 정보를 검색하여 요약한 내용을 바탕으로 답변을 해줍니다.</p>\n<p>이렇게 심볼을 상황에 맞게 잘 선택하여 써주시면 됩니다.</p>\n<p>근데 @Web은 써보니까 그냥 제가 검색하는게 나을것 같은 성능이네요.</p>\n<hr>\n<h2 id=\"heading-3\"><strong>#4 AI 모델 추천, 어떤 모델을 써야할까?</strong></h2>\n<p><img src=\"https://blog.kakaocdn.net/dn/dHnTx9/btsJ5B9lOeZ/jWocrv6PoagJEpkKuqLOG1/img.png\" alt=\"14\"></p>\n<p>2024.10.15 날짜 기준으로 Hobby(기본) 요금제를 사용하고 있는 제 화면에는 이렇게 모델들이 있습니다.</p>\n<p>상황에 따라 다른 모델을 쓰는것을 추천합니다.</p>\n<p><strong>일반적인 상황</strong></p>\n<p><strong>claude-3.5-sonnet</strong>이 추론 능력이라던지 일반적인 상황에선 쓰기 가장 좋았습니다.</p>\n<p><strong>복잡한 코드나 에러 분석해야할 때</strong></p>\n<p><strong>o1-mini</strong>가 가장 전문적인 것 같아 쓰기 좋았습니다.</p>\n<p>참고 : 모델 교체할 때는 ctrl + / 키를 누르시면 단축키로 바로 모델 교체 가능합니다.</p>\n<p>모델 교체 메뉴를 바로 여는 단축키는 ctrl + alt + / 키입니다.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/yFAmD/btsJ4da1zkb/4Klu0kxgIi5E6KhgyWKVk0/img.png\" alt=\"15\"></p>\n<p>이외에도 따로 쓰고 싶으신 모델은 Cursor Settings 설정에 가셔서 토글하실 수 있고 원하는 모델을 추가할 수 있습니다.</p>\n<hr>\n<h2 id=\"heading-4\"><strong>#5 AI 규칙 설정</strong></h2>\n<p><img src=\"https://blog.kakaocdn.net/dn/dBWkCU/btsJ4fNc1KA/Xm3nE1yAqFcrX09RiauX9k/img.png\" alt=\"16\"></p>\n<p>Cursor Settings -&gt; General -&gt; Rules for AI</p>\n<p>Cursor Settings(Ctrl + Shift + J)를 들어가보시면 AI 규칙을 설정할 수 있습니다.</p>\n<p>그냥 써도 기본으로 최대한 한국어로 답변하라는 규칙이 설정되어있을겁니다.</p>\n<p>이걸 조금 더 가공해서 더 퀄리티 높은 답변을 할 수 있도록하는 규칙을 공유해드리겠습니다.</p>\n<p><strong>닫기</strong></p>\n<p>you&nbsp;are&nbsp;an&nbsp;expert&nbsp;AI&nbsp;programming&nbsp;assistant&nbsp;in&nbsp;VSCode&nbsp;that&nbsp;primarily&nbsp;focuses&nbsp;on&nbsp;producing&nbsp;clear,&nbsp;readable&nbsp;code.</p>\n<p>You&nbsp;are&nbsp;thoughtful,&nbsp;give&nbsp;nuanced&nbsp;answers,&nbsp;and&nbsp;are&nbsp;brilliant&nbsp;at&nbsp;reasoning.</p>\n<p>You&nbsp;carefully&nbsp;provide&nbsp;accurate,&nbsp;factual,&nbsp;and&nbsp;thoughtful&nbsp;answers,&nbsp;and&nbsp;you&nbsp;are&nbsp;a&nbsp;genius&nbsp;at&nbsp;reasoning.</p>\n<p>1.&nbsp;Follow&nbsp;the&nbsp;user's&nbsp;requirements&nbsp;carefully&nbsp;and&nbsp;precisely.</p>\n<p>2.&nbsp;First,&nbsp;think&nbsp;step-by-step&nbsp;–&nbsp;describe&nbsp;your&nbsp;plan&nbsp;for&nbsp;what&nbsp;to&nbsp;build&nbsp;in&nbsp;pseudocode,&nbsp;written&nbsp;out&nbsp;in&nbsp;great&nbsp;detail.</p>\n<p>3.&nbsp;Confirm,&nbsp;then&nbsp;write&nbsp;the&nbsp;code!</p>\n<p>4.&nbsp;Always&nbsp;write&nbsp;correct,&nbsp;up-to-date,&nbsp;bug-free,&nbsp;fully&nbsp;functional&nbsp;and&nbsp;working,&nbsp;secure,&nbsp;performant,&nbsp;and&nbsp;efficient&nbsp;code.</p>\n<p>5.&nbsp;Focus&nbsp;on&nbsp;<strong>readability</strong>&nbsp;over&nbsp;performance.</p>\n<p>6.&nbsp;Fully&nbsp;implement&nbsp;all&nbsp;requested&nbsp;functionality.</p>\n<p>7.&nbsp;Leave&nbsp;<strong>NO</strong>&nbsp;to-dos,&nbsp;placeholders,&nbsp;or&nbsp;missing&nbsp;pieces.</p>\n<p>8.&nbsp;Ensure&nbsp;the&nbsp;code&nbsp;is&nbsp;complete!&nbsp;Thoroughly&nbsp;verify&nbsp;the&nbsp;final&nbsp;version.</p>\n<p>9.&nbsp;Include&nbsp;all&nbsp;required&nbsp;<strong>imports</strong>,&nbsp;and&nbsp;ensure&nbsp;proper&nbsp;naming&nbsp;of&nbsp;key&nbsp;components.</p>\n<p>10.&nbsp;Be&nbsp;concise.&nbsp;Minimize&nbsp;any&nbsp;unnecessary&nbsp;explanations.</p>\n<p>11.&nbsp;If&nbsp;you&nbsp;think&nbsp;there&nbsp;might&nbsp;not&nbsp;be&nbsp;a&nbsp;correct&nbsp;answer,&nbsp;say&nbsp;so.&nbsp;If&nbsp;you&nbsp;do&nbsp;not&nbsp;know&nbsp;the&nbsp;answer,&nbsp;admit&nbsp;it&nbsp;instead&nbsp;of&nbsp;guessing.</p>\n<p>12.&nbsp;Always&nbsp;provide&nbsp;concise&nbsp;answers.</p>\n<p>13.&nbsp;Please&nbsp;answer&nbsp;in&nbsp;Korean</p>\n<p>혹시나 현재 사용하고 계신 언어에 맞게 또는 원하는 플랫폼에 맞는 AI 답변을 원할 경우</p>\n<p>아래 링크에서 다른 규칙도 찾아보시는걸 추천 드립니다.</p>\n<p><a href=\"https://cursor.directory/\">https://cursor.directory/</a></p>\n<p><a href=\"https://cursor.directory/\"><strong>Cursor Directory</strong>\nFind the best cursor rules for your framework and language\ncursor.directory</a></p>\n<hr>\n<h2 id=\"heading-5\"><strong>#6 노트패드 기능 (베타)</strong></h2>\n<p>Cursor에서도 노트패드를 관리할 수 있습니다.</p>\n<p>Ctrl + i 키 또는 맥에선 Cmd + i 키를 누르셔서 Composer 탭을 열어주신 뒤(아마 작을겁니다)</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/bYjCvy/btsJ4KlQRZ4/SBt6wNNBs3KpFbiiO8okqk/img.png\" alt=\"17\"></p>\n<p>오른쪽 상단에 Open Control Panel 버튼을 눌러주시면 노트패드가 열립니다.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/cHyWbo/btsJ5ovExHi/hQT95gHW0IwY0hLYH3HKM1/img.png\" alt=\"18\"></p>\n<p>노트패드창에서 왼쪽탭 상단에 더하기 버튼이 있을텐데 이 버튼을 눌러서 노트 하나 생성합시다.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/QC5AR/btsJ3Z3P8F5/rTCtSsUwyDVa5aSqluyxsk/img.png\" alt=\"19\"></p>\n<p>노트 내용에 아무거나 쓰신 뒤 Ctrl + L 키를 눌러 프롬프트에 들고 갑시다.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/bKlwOE/btsJ4YYtlhY/uHMukld8JLY9qIvuBqQlKK/img.png\" alt=\"20\"></p>\n<p>이런식으로 방금 만든 노트패드가 @로 추적이 가능합니다.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/c6cglp/btsJ5CNZZlJ/8k4TMMZSMR25xODbkCT1K0/img.png\" alt=\"21\"></p>\n<p>노트패드를 프롬프트에 포함시켜 이런식으로 결과물을 받아올 수도 있긴하지만</p>\n<p>노트패드 작성시에 AI 기능이 있었다면 더 좋지 않을까 싶네요 아직 베타니까 기다려봅시다.</p>\n<hr>\n<h2 id=\"heading-6\"><strong>#7 프로젝트 5분만에 분석하는 법</strong></h2>\n<p>Cursor를 이용해 5분 만에 프로젝트 구조를 파악하는 방법을 알려드리겠습니다.</p>\n<blockquote>\n<ol>\n<li>Ctrl + L 을 눌러 Cursor 채팅 패널을 엽니다.</li>\n</ol>\n<p><a href=\"http://www.mermaidchart.com/\">http://www.mermaidchart.com</a></p>\n</blockquote>\n<p><a href=\"https://kimyir.tistory.com/97\">https://kimyir.tistory.com/97</a></p>\n<p><a href=\"https://kimyir.tistory.com/97\"><strong>Cursor로 5분만에 프로젝트 분석하기</strong>\n프로젝트 5분만에 분석하는 법&nbsp;Cursor를&nbsp;이용해&nbsp;5분&nbsp;만에&nbsp;프로젝트&nbsp;구조를&nbsp;파악하는&nbsp;방법을&nbsp;알려드리겠습니다. 1.&nbsp;Ctrl&nbsp;+&nbsp;L&nbsp;을&nbsp;눌러&nbsp;Cursor&nbsp;채팅&nbsp;패널을&nbsp;엽니다. 2.&nbsp;\"Normal&nbsp;chat\"에서&nbsp;\"Long&nbsp;Co\nkimyir.tistory.com</a></p>\n<hr>\n<p>이상 Cursor의 기본 사용 방법과 꿀팁을 정리해보았습니다.</p>\n<p>VSCode를 바탕으로 만들어서 그런지 접근하기 쉬웠고 쓰기도 편한 것 같습니다.</p>\n<p>물론 기능이 많은 만큼 IDE 속도가 느려진 것 같지만 능률을 위해서라면 그래도 쓸 것 같네요.</p>\n<p>내 코드가 혹시나 AI가 학습하지 않을까 걱정되신다면</p>\n<p>Cursor Settings -&gt; General -&gt; Privacy mode 탭에 가셔서 enabled로 설정해주시면 됩니다.</p>\n<p>코드가 외부에 유출안되지만 AI 답변 품질이 떨어질 순 있습니다.</p>\n<p><strong>번외) 다른 유용한 AI 추천</strong></p>\n<p>터미널 AI 도우미</p>\n<p><a href=\"https://github.com/Aider-AI/aider\">https://github.com/Aider-AI/aider</a></p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "#1 VSCode 연동",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "#2 주요 커맨드 ( 단축키 )",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "#3 심볼 @",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-3",
            "text": "#4 AI 모델 추천, 어떤 모델을 써야할까?",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-4",
            "text": "#5 AI 규칙 설정",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-5",
            "text": "#6 노트패드 기능 (베타)",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-6",
            "text": "#7 프로젝트 5분만에 분석하는 법",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          }
        ]
      },
      "en": {
        "title": "Cursor AI",
        "description": "How to use Cursor AI",
        "content": "<hr>\n<p>This article compiles information to help you quickly learn Cursor.</p>\n<p>There are some really useful features that I recommend learning.</p>\n<hr>\n<h2 id=\"heading-0\"><strong>#1 VSCode Integration</strong></h2>\n<p>Since Cursor is an IDE forked from VSCode, you can import your existing VSCode extensions.</p>\n<p>You can set this up by going to:\nCursor Settings &gt; General &gt; Account</p>\n<p><strong>If you can't find Cursor Settings, press Ctrl + Shift + J to open it.</strong></p>\n<h2 id=\"heading-1\"><strong>#2 Key Commands (Shortcuts)</strong></h2>\n<p>In Cursor, knowing these 3 features and their shortcuts will cover about 80% of what you need to know.</p>\n<p><strong>1. Tab</strong></p>\n<p>If you pause for about 1 second in the editor, Cursor Copilot++ will <strong>auto-complete code</strong> using AI.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/cdDb18/btsJ4eATVwU/hvckbgbLoex5JEeOo5UKG0/img.png\" alt=\"1\"></p>\n<p>Code auto-prediction and completion</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/cRoxgk/btsJ5fTbJeO/s6G0KkwOoU6ZsaJCzPkkn0/img.png\" alt=\"2\"></p>\n<p>Auto-completion based on patterns from other lines\nAuto-completion based on patterns from other lines</p>\n<p><strong>2. Ctrl + K</strong></p>\n<p>Using Ctrl + K allows you to <strong>instantly edit and write code</strong> with AI.</p>\n<p>This is useful because you can modify or ask questions about specific ranges or lines directly with prompts.</p>\n<p>To generate completely new code, just press Ctrl + K without selecting anything.</p>\n<p>You can use various symbol settings like @Codebase, @Docs, @Web in the same way.</p>\n<p>More about symbols in #3 below</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/GTFbL/btsJ3XMKOBh/ZJRPnbzrqi0EbExZGmQjgK/img.png\" alt=\"3\"></p>\n<p>Using Ctrl + K on code opens a mini popup.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/cEzQo2/btsJ6cOZUZc/ORWKTYcniTMSg7xunqKN01/img.png\" alt=\"4\"></p>\n<p>You can generate or request code modifications, accept changes with Ctrl + Shift + Y, reject with Ctrl + N</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/bH7nMH/btsJ6fZfVhl/auMcvlKPV3Zbu0sKPHHk71/img.png\" alt=\"5\"></p>\n<p>Write a question in the mini popup and press Alt + Enter to ask about the code directly</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/HHXcp/btsJ303JNcn/GPk9Jue2AqkAOMbjiUq04k/img.png\" alt=\"6\"></p>\n<p>Also works in VSCode's internal CMD command terminal</p>\n<p><strong>3. Ctrl + L</strong></p>\n<p>Pressing Ctrl + L opens a tab on the right side of the editor for <strong>chatting with the LLM</strong>.</p>\n<p>You can chat with AI that sees the currently open code file.</p>\n<p>Since the chat always sees the current file and cursor position, you can ask questions like \"Are there any bugs in this code?\"</p>\n<p>You can use various symbol settings like @Codebase, @Docs, @Web in the same way.</p>\n<p>More about symbols in #3 below</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/cWeTgN/btsJ6V61F8p/QHZY7X7fSTtvreM8Wfp2O0/img.png\" alt=\"7\"></p>\n<p>Use Ctrl+Shift+L or \"@\" to add specific code blocks to the context.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/Td96H/btsJ6pggIG3/QEJHTBjc8Vd5N97QhZqOdk/img.png\" alt=\"8\"></p>\n<p>Press Ctrl+Enter to chat with the entire codebase. Scanning takes some time.</p>\n<hr>\n<h2 id=\"heading-2\"><strong>#3 Symbol @</strong></h2>\n<p>In Cursor, you can change the search functionality using symbols when using chat or mini prompts.</p>\n<p>Type \"@\" to see various search options and select your preferred search method.</p>\n<p><strong>@Codebase</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/bkYI3Z/btsJ6H2hFeI/MPnqVe6Khe0JnrvTEYutTK/img.png\" alt=\"9\"></p>\n<p>Typing @Codebase scans the entire codebase to provide answers.</p>\n<p>Recommended when you want to browse the entire project or ask questions about the whole file.</p>\n<p><strong>@Docs</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/cUcSsm/btsJ6jm0xDQ/GCIQq5JQGnSF3WkHaxCqc0/img.png\" alt=\"10\"></p>\n<p>@Docs tab</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/sMKQt/btsJ3Y5YZT1/jCKqjgW61O1y5U2tqKDgoK/img.png\" alt=\"11\"></p>\n<p>Input window after selecting Docs tab, enter your desired document link and click Confirm</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/kCIHe/btsJ418wVBx/3Jgmyu3bIBLvgBMVZ8O9H1/img.png\" alt=\"12\"></p>\n<p>Successfully loaded document</p>\n<p>Using @Docs allows you to reference popular libraries or use @Docs → Add new doc to</p>\n<p>input website links for desired documents as references. Referenced documents remain available for use.</p>\n<p>AI provides answers based on the referenced documents.</p>\n<p><strong>@Web</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/FRGN9/btsJ5BIhtqh/2wFJe1MGlngfokGK8R0LA0/img.png\" alt=\"13\"></p>\n<p>Using @Web makes AI search the internet for latest information and provide answers based on summarized content.</p>\n<p>Use these symbols appropriately for different situations.</p>\n<p>However, after trying @Web, I think searching myself might be better given its current performance.</p>\n<hr>\n<h2 id=\"heading-3\"><strong>#4 AI Model Recommendations - Which Model Should I Use?</strong></h2>\n<p><img src=\"https://blog.kakaocdn.net/dn/dHnTx9/btsJ5B9lOeZ/jWocrv6PoagJEpkKuqLOG1/img.png\" alt=\"14\"></p>\n<p>As of 2024.10.15, these are the models available on my screen using the Hobby (basic) plan.</p>\n<p>I recommend using different models depending on the situation.</p>\n<p><strong>For General Situations</strong></p>\n<p><strong>claude-3.5-sonnet</strong> was best for reasoning ability and general situations.</p>\n<p><strong>For Complex Code or Error Analysis</strong></p>\n<p><strong>o1-mini</strong> seemed most professional and worked best.</p>\n<p>Note: To switch models, press ctrl + / for quick model switching.\nThe shortcut to open the model switch menu is ctrl + alt + /.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/yFAmD/btsJ4da1zkb/4Klu0kxgIi5E6KhgyWKVk0/img.png\" alt=\"15\"></p>\n<p>You can toggle and add other desired models in Cursor Settings.</p>\n<hr>\n<h2 id=\"heading-4\"><strong>#5 AI Rules Configuration</strong></h2>\n<p><img src=\"https://blog.kakaocdn.net/dn/dBWkCU/btsJ4fNc1KA/Xm3nE1yAqFcrX09RiauX9k/img.png\" alt=\"16\"></p>\n<p>Cursor Settings -&gt; General -&gt; Rules for AI</p>\n<p>In Cursor Settings (Ctrl + Shift + J), you can configure AI rules.</p>\n<p>By default, it should be set to respond in Korean as much as possible.</p>\n<p>Here's a refined set of rules to get higher quality responses:</p>\n<p><strong>Close</strong></p>\n<p>you are an expert AI programming assistant in VSCode that primarily focuses on producing clear, readable code.</p>\n<p>You are thoughtful, give nuanced answers, and are brilliant at reasoning.</p>\n<p>You carefully provide accurate, factual, and thoughtful answers, and you are a genius at reasoning.</p>\n<ol>\n<li>\n<p>Follow the user's requirements carefully and precisely.</p>\n</li>\n<li>\n<p>First, think step-by-step – describe your plan for what to build in pseudocode, written out in great detail.</p>\n</li>\n<li>\n<p>Confirm, then write the code!</p>\n</li>\n<li>\n<p>Always write correct, up-to-date, bug-free, fully functional and working, secure, performant, and efficient code.</p>\n</li>\n<li>\n<p>Focus on <strong>readability</strong> over performance.</p>\n</li>\n<li>\n<p>Fully implement all requested functionality.</p>\n</li>\n<li>\n<p>Leave <strong>NO</strong> to-dos, placeholders, or missing pieces.</p>\n</li>\n<li>\n<p>Ensure the code is complete! Thoroughly verify the final version.</p>\n</li>\n<li>\n<p>Include all required <strong>imports</strong>, and ensure proper naming of key components.</p>\n</li>\n<li>\n<p>Be concise. Minimize any unnecessary explanations.</p>\n</li>\n<li>\n<p>If you think there might not be a correct answer, say so. If you do not know the answer, admit it instead of guessing.</p>\n</li>\n<li>\n<p>Always provide concise answers.</p>\n</li>\n<li>\n<p>Please answer in Korean</p>\n</li>\n</ol>\n<p>If you want AI responses tailored to your current language or desired platform,\nI recommend checking other rules at the link below:</p>\n<p><a href=\"https://cursor.directory/\">https://cursor.directory/</a></p>\n<p><a href=\"https://cursor.directory/\"><strong>Cursor Directory</strong>\nFind the best cursor rules for your framework and language\ncursor.directory</a></p>\n<hr>\n<h2 id=\"heading-5\"><strong>#6 Notepad Feature (Beta)</strong></h2>\n<p>You can manage notepads in Cursor.</p>\n<p>Press Ctrl + i (or Cmd + i on Mac) to open the Composer tab (it will likely be small)</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/bYjCvy/btsJ4KlQRZ4/SBt6wNNBs3KpFbiiO8okqk/img.png\" alt=\"17\"></p>\n<p>Click the Open Control Panel button in the top right to open the notepad.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/cHyWbo/btsJ5ovExHi/hQT95gHW0IwY0hLYH3HKM1/img.png\" alt=\"18\"></p>\n<p>Click the plus button at the top of the left tab in the notepad window to create a new note.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/QC5AR/btsJ3Z3P8F5/rTCtSsUwyDVa5aSqluyxsk/img.png\" alt=\"19\"></p>\n<p>Write anything in the note and press Ctrl + L to bring it to the prompt.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/bKlwOE/btsJ4YYtlhY/uHMukld8JLY9qIvuBqQlKK/img.png\" alt=\"20\"></p>\n<p>The notepad you just created can be tracked using @.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/c6cglp/btsJ5CNZZlJ/8k4TMMZSMR25xODbkCT1K0/img.png\" alt=\"21\"></p>\n<p>While you can include notepads in prompts to get results like this,\nit would be nice if the notepad had AI features. Since it's still in beta, let's wait and see.</p>\n<hr>\n<h2 id=\"heading-6\"><strong>#7 How to Analyze Projects in 5 Minutes</strong></h2>\n<p>I'll show you how to understand project structure in 5 minutes using Cursor.</p>\n<blockquote>\n<ol>\n<li>Press Ctrl + L to open the Cursor chat panel.</li>\n</ol>\n<p><a href=\"http://www.mermaidchart.com/\">http://www.mermaidchart.com</a></p>\n</blockquote>\n<p><a href=\"https://kimyir.tistory.com/97\">https://kimyir.tistory.com/97</a></p>\n<p><a href=\"https://kimyir.tistory.com/97\"><strong>Analyzing Projects in 5 Minutes with Cursor</strong>\nHow to Analyze Projects in 5 Minutes I'll show you how to understand project structure in 5 minutes using Cursor. 1. Press Ctrl + L to open the Cursor chat panel. 2. Switch from \"Normal chat\" to \"Long Co\nkimyir.tistory.com</a></p>\n<hr>\n<p>That concludes the basic usage and tips for Cursor.</p>\n<p>Being based on VSCode makes it accessible and easy to use.</p>\n<p>While the many features might slow down the IDE a bit, I think it's worth it for productivity.</p>\n<p>If you're concerned about AI learning from your code,\ngo to Cursor Settings -&gt; General -&gt; Privacy mode and set it to enabled.\nThis prevents code from being exposed externally but may reduce AI response quality.</p>\n<p><strong>Bonus) Other Useful AI Recommendations</strong></p>\n<p>Terminal AI Assistant</p>\n<p><a href=\"https://github.com/Aider-AI/aider\">https://github.com/Aider-AI/aider</a></p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "#1 VSCode Integration",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "#2 Key Commands (Shortcuts)",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "#3 Symbol @",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-3",
            "text": "#4 AI Model Recommendations - Which Model Should I Use?",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-4",
            "text": "#5 AI Rules Configuration",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-5",
            "text": "#6 Notepad Feature (Beta)",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-6",
            "text": "#7 How to Analyze Projects in 5 Minutes",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          }
        ]
      }
    },
    "imageHeights": {
      "img-2": 400,
      "img-3": 400,
      "img-4": 400,
      "img-5": 400,
      "img-6": 400,
      "img-7": 400,
      "img-8": 400,
      "img-9": 400,
      "img-11": 400,
      "img-12": 400,
      "img-13": 400,
      "img-14": 400,
      "img-15": 400,
      "img-17": 400,
      "img-18": 400,
      "img-20": 400,
      "img-22": 400,
      "img-23": 400,
      "img-24": 400,
      "img-25": 400,
      "img-26": 400
    }
  },
  {
    "id": "entasis",
    "title": "Entasis",
    "content": "\n## 1.소개\n\n- 프로젝트 명 : ENTASIS]\n- Github 링크 : [GitHub - codestates-beb/BEB-07-final-entasis](https://github.com/codestates-beb/BEB-07-final-entasis)\n- 블록체인 네트워크 주소 : [http://18.183.252.200:8545](http://18.183.252.200:8545/) 체인ID : 1337\n\n### 윤수빈\n\n- 포지션 : PM / Full Stack / Design\n- 개인 깃허브 : https://github.com/Russ481-k\n- 활용 스택 : Figma / Javascript / React/ HTML / CSS / MySQL / Sequelize / Node.js / Scale-Liner / Axios\n- 구현 기능 :\n  - 프로젝트 기획&관리\n  - 디자인 구상 및 구현\n  - 프론트엔드 UI, UX 구현\n  - 차트 구현\n  - 서버 제공 API를 통한 데이터 요청\n  - 서버 실시간 데이터 생성 기능 구현\n\n## 2. 프로젝트 소개\n\n[ STO 거래소 “ENTASIS” ]\n![거래](/images/entasis/entasis_trade.gif)\n\n투자자의 입장에서 STO가 무엇이고, 어떤 기능이 있으며, 어떻게 투자할 수 있는지를\n이 프로젝트를 통해 이해하도록 도움으로써 증권형 토큰에 대한 투자를 확대시키는 것이\n이 프로젝트의 목표다.\n\n[래리핑크 인터뷰](https://www.youtube.com/watch?v=0fmODCTVs0g)\n\n글로벌 자산운용사 블랙록의 대표 래리핑크는 2022. 12. 1. 인터뷰에서\nSTO를 통해 현재 증권 거래 비용에 포함된 브로커들의 수수료를 매매 당사자들에게 나누어주며\n수수료가 낮아질 것이고 투표 또한 ST 소유자들이 할 수 있게 될 것이라고 말했다.\n\n래리핑크의 STO에 대한 인식은 프로젝트 주제 선정에 결정에 도움을 주었다.\n\n[STO 설명 영상](https://www.youtube.com/watch?v=PSVpth7uqb4&t=650s)\n\n우리가 흔히 알고 있는 토큰은 ICO를 기반한 '유틸리티 토큰' 이다.\n\n그렇다면 STO란 무엇일까?\n\n![STO 설명](/images/entasis/entasis_sto.png)\n\n우선 STO의 기반이 되는 “증권형 토큰(Secturity Token)”이 무엇인지에 대해 이해할 필요가 있다.\n\n증권형 토큰(일명 ST)은 기업이 주식, 채권 대신 암호화폐 형태로 발행하는 유가 증권이다.\n이 증권형 토큰은 블록체인 플랫폼이 제공하는 서비스를 활용할 권리 대신 주식과 마찬가지로\n기업의 법적 소유권을 가졌음을 의미한다.\n\n때문에 증권형 토큰을 보유하고 있으면 기업 또는 기업의 블록체인 플랫폼이 낸 수익이나\n자산의 일부를 배당받을 수 있다.\n\n증권형 토큰은 그 용도가 주식, 채권 등 유가증권과 동일하기 때문에 법과 정책의 개입과 규제를 받아야만 한다.\n상법에 정해진 절차에 따라 주식을 발행하듯 관련 법에 따라 증권형 토큰을 발행해야 한다는 것이다.\n\n이 증권형 토큰을 IPO와 같이 상장하여 거래가 이루어지도록 하는 것이 STO 라고 할 수 있다.\n\n![STO 설명 2](/images/entasis/entasis_sto2.png)\n\n[ About Service ]\nEntasis는 실제 STO 거래소의 기능을 일부 축소하여 상대적으로 기업보다 STO에 대해 접근을 어려워 할 개인 투자자들에게 실제 ST에 투자를 해봄으로써 증권형 토큰에 대해서 더 쉽게 이해하고 접근할 수 있도록 도와주는 “STO 거래소 튜토리얼” 이다.\n\n## 3.기본 환경 조성\n\n### 토큰 가격 형성 및 변동성\n\n실제 거래소에서 Market Maker & Market Taker 와 토큰 매매를 통해 가격이 형성이 되지만,\n이 프로젝트를 진행하는데 있어서 튜토리얼이라는 점과 대규모의 트래픽이 기대되지 않는다는 점으로 인해\n실제 거래소에서 가격 형성이 되는 방식으로 구현하는 것은 제한된다고 판단하였다.\n\n그에 따라 난수를 통해 가격을 형성하고 주기적으로 가격이 변동할 수 있도록 구현하였다.\n단기 변동성과 중장기 변동성, 기업의 당기순이익 발표의 값이 난수로 설정되어 각각 3 개의 ST시장을 형성했다.\n또한 당기순이익에 배당률을 적용하여 기업의 이익을 지분에 따라 배당한다.\n토큰 소유자는 지분율에 따라 투표를 할 수 있다.\n\n### 블록체인\n\n이더리움 : EC2 인스턴스에서 백그라운드로 가나슈 네트워크를 실행시켰으며, 트러플을 이용하여 컨트랙트를 배포하였다.\n근본적으로 토큰 거래 기능을 위해 ERC20을 사용하였으며, 증권형 토큰의 기능 일부를 추가하기 위해 ERC1400의 운영자 및 제어자 변수와 거래제한 함수를 발췌하였다.\n투자자 입장에서 다양한 토큰에 대해서 분석하고 거래를 할 필요가 있다고 판단하여 3개의 기업으로 다양화하여 3개의 컨트랙트를 배포하였으며, 토큰 거래가 이루어질 때마다 해당 토큰 보유자 배열에 저장하여 배당금을 분배할 때 토큰 보유 여부를 확인할 수 있도록 하였다.\n스테이킹시 토큰 매매 제한을 강제하기 위해서 스테이킹의 모든 기능은 컨트랙트 내에서 구현하였으며, 만료일을 계산하는 데에는 block.timestamp 를 이용하여 만료 여부를 확인할 수 있도록 하였다.\n\n## 4.프로젝트 기록\n\nProject Entasis를 4F 방식으로 기록하고자 한다.\n\n- 사실(Fact) : 프로젝트를 통해 어떤 내용을 고민했고 어떤 방법으로 개념을 이해하고 문제를 해결했는지 작성\n- 감정(Feeling) : 프로젝트를 진행하면서 느꼈던 감정을 솔직하게 기록발견\n- (Finding) : 문제를 해결하면서 무엇을 깨달았고, 시도해본 해결 방법에 대해서 개선이 필요한 부분을 발견했다면 발견 항목에 기록다음주를 위한 행동\n- (Future Action) : 위의 회고를 통해서 당장 다음 프로젝트에 적용해 볼 학습 방법이나 조금 더 고민이 필요한 내용, 커뮤니케이션 방식 등을 기록\n\n### Fact\n\n주요 기능\n\n- **1초마다 실시간으로 가격 변동이 일어나는 차트 중심의 한 메인 페이지**\n  - 차트는 1분 15분 1시간 4시간 1일 1주 단위로 캔들 단위를 조정하여 볼 수 있도록 한다.\n  - 차트에 포커스 된 경우, 스크롤 값은 캔들의 넓이에 값을 주어 페이지 높이가 아닌 차트 범위를 조정할 수 있도록 한다.\n  - 차트에 포커스 된 경우, 십자 좌표를 표시하며, 시세와 거래량 각각의 영역에 포인트 값에 따라 우측에 해당 높이에 대한 값을 출력한다.\n  -\n- **메타 마스크를 통한 지갑 등록**\n\n![메타마스크 연동](/images/entasis/entasis_metamask.png)\n\n- WEB3.0을 지향하여 지갑을 위주로 유저의 상태를 관리한다.\n- 회원가입을 따로 진행할 필요가 없으며, 메타마스크로 지갑등록을 하면 자동으로 로그인한다.\n- 메타마스크가 설치되어있지 않은 경우 메타마스크 설치 링크로 유도한다.\n- 처음 로그인을 하는 메타마스크 지갑인 경우 DB에 등록한다.\n\n- **튜토리얼 및 이용법 설명**\n  ![튜토리얼](/images/entasis/entasis_tutorial.gif)\n\n  - CSS의 transition을 활용하여 모달을 이동하며 서비스의 전체적인 이용방법을 사용자에게 전달한다.\n  - 실제 매매를 일으키며 유저에게 거래 경험을 제공하려 하였으나 손익에 대한 경험을 강제적으로 실행하는 것이 바람직하지 않다고 여겨 모달 프로세스 형태로 튜토리얼을 구현한다.\n\n- **FAUCET : 초기 자본금 50ETH 부여**\n\n![튜토리얼 과정](/images/entasis/entasis_tutorial.gif)\n\n![파우셋](/images/entasis/entasis_faucet.png)\n\n- 튜토리얼을 완료하면 자동으로 faucet 기능을 통해 50ETH가 부여한다.\n- faucet은 1회로 제한한다.\n\n- **ETH를 통한 증권형 토큰 구매 및 판매**\n\n![거래 수수료](/images/entasis/entasis_sign.png)\n\n- 실시간으로 변하는 가격을 보고 토큰을 구매 및 판매할 수 있다.\n- 투자자가 토큰 거래를 할 경우 메타마스크를 통해 서명한다.\n\n![거래 수수료](/images/entasis/entasis_fee.png)\n\n- 거래 수수료는 거래대금의 0.04%로 자동으로 계산한다.\n\n- **배당금 투표**\n\n![투표](/images/entasis/entasis_vote.gif)\n\n- 10분에 한 번씩 지급되는 배당금에 대한 배당률을 결정하기 위해 배당률 투표를 진행한다.\n- 투표를 하지 않더라도 배당금을 지급 받는다.\n\n- **배당금 지급**\n  ![배당금](/images/entasis/entasis_dividend.gif)\n  - 토큰 별로 totalSupply 대비 투자자가 보유하고 있는 토큰양에 따라 배당금이 지불한다.\n\n[배당금 지급 전 거래내역]\n![거래 내역](/images/entasis/entasis_trade.gif)\n\n[배당금 지급 후 거래내역]\n![거래 후 내역](/images/entasis/entasis_after_trade.png)\n\n웹사이트 상단 로고 아래에 있는 배당금 지급 시간이 모두 지나면 자동으로 배당금이 지급되며, 그 내역이 History에 표시된다.\n\n- **거래제한(Circuit Breaker)**\n\n![서킷 브레이커](/images/entasis/entasis_circuit_breaker.png)\n\n- 극단적인 가격 변동률이 발생할 경우 모든 토큰에 거래를 제한한다.\n- 1분간 거래가 불가능해지며 이에 따라 토큰 가격도 1분간 정지된다.\n- 본 프로젝트에서는 극단적인 가격 변동이 일어날 일이 없는 점으로 인해\n  거래 제한 기능을 보여주기 위하여 Circuit Breaker 버튼을 누를 경우 거래 제한이 발동하도록 구현한다.\n  [거래 제한 발동]\n  ![서킷 브레이커 발동](/images/entasis/entasis_circuit.gif)\n\n  [거래 제한 해제]\n  ![서킷 브레이커 해제](/images/entasis/entasis_circuit_end.gif)\n\n- **스테이킹 기능(Staking)**\n  ![스테이킹](/images/entasis/entasis_staking.png)\n  - 스테이킹은 본인이 보유하고 있는 디지털자산을 블록체인 네트워크에 맡기는 방식으로 현금을 은행에 맡기는 예금과 구조가 유사하다.\n  - 보유한 디지털 자산을 블록체인 검증에 활용하도록 맡기는 것을 뜻한다.\n  - 스테이킹을 할 경우 일정기간동안 토큰을 거래소에 맡기고 기간이 만료되면 상대적으로 높은 이율에 따른 보상과 함께 토큰을 돌려받게 된다.\n  - 단, 스테이킹 기간동안에는 해당 토큰을 사용할 수 없기 때문에, 토큰 가격이 변동으로 인해 토큰을 돌려 받고 싶어도 해당 기간동안에는 돌려 받을 수 없다.\n    [스테이킹 요청시]\n    ![스테이킹 화면 1](/images/entasis/entasis_staking_1.png)\n  - 사용자는 Staking 버튼을 눌러 메타마스크를 통해 서명한 데이터를 원하는 ST 컨트랙트에 보내 스테이킹을 진행한다.\n  - 이 때, 이미 스테이킹이 되어있거나 기입한 Amount(수량)보다 토큰 보유량이 적을 시 에러를 반환한다.\n  - 토큰이 문제없이 스테이킹이 된다면 우측 Amount List와 Reward List가 갱신되고 하단 Reward Time에 보상 인출까지 남은 기간이 표시한다.\n    [보상 인출시]\n    ![스테이킹 화면 2](/images/entasis/entasis_staking_2.png)\n  - Reward Time이 Able로 변경되어 보상 인출이 가능해지면, 사용자는 Reward 버튼을 눌러 보상 인출 함수를 실행하는 데이터를 메타마스크로 서명해 컨트랙트에 보낸다.\n  - 컨트랙트에서 만료일을 확인한 후, 문제가 없다면 사용자에게 스테이킹한 Amount에 Reward를 합한 토큰을 사용자에게 전송한다.\n    - 만료일이 지나지 않았을 경우 Reward 버튼이 비활성화\n  - 토큰과 보상이 사용자에게 전송되면 다시 Amount List와 Reward List가 0으로 초기화한다.\n\n# [ A**bout Dev ]\\*\\*\n\n## **기술 스택**\n\n![기술 스택](/images/entasis/entasis_tech_stack.png)\n\n## 와이어프레임\n\nhttps://www.figma.com/embed?embed_host=notion&url=https%3A%2F%2Fwww.figma.com%2Ffile%2FHP5FZix2FedecrcLWhUsb7%2FProject_Entasis%3Fnode-id%3D0%253A1%26t%3DL4XWojmyo6BCQvJK-1\n\n## 플로우 차트\n\n- **Chart Data Flow**\n\nhttps://www.figma.com/embed?embed_host=notion&url=https%3A%2F%2Fwww.figma.com%2Ffile%2FjC6wwRAyBiQJ8Y0nB6iyiH%2FUntitled%3Fnode-id%3D0%253A1%26t%3DrlPZeEHfPYzyxIO4-1\n\n## 아키텍처\n\n![아키텍처](/images/entasis/entasis_arch.png)\n\n아키텍처의 경우 S3를 이용한 정적 호스트 페이지와 EC2를 이용한 서비스 서버, Database 클라우드 서버, 그리고 블록체인 네트워크 서버로 구성되어 있다.\n\n- 먼저 배포과정에서는 Github Actions 를 활용하여 CI/CD 파이프라인을 구성하여 Github에서 push가 발생할 때마다 배포중인 서비스에 반영되어 자동 배포가 실행된다.\n- 클라이언트는 AWS IAM를 통해 S3에 접근하여 배포하였으며, 블록체인 네트워크의 경우 AWS EC2의 인스턴스 내에서 가나슈 네트워크를 백그라운드로 실행하여 네트워크가 지속 가능하도록 설정하였다.\n- 서버 부분은 EC2를 이용하여 Docker와 Github Container Registry를 사용하여 EC2내에서 백그라운드로 자동서비스를 실행할 수 있도록 설계하였다.\n\n## **데이터베이스 스키마 다이어그램**\n\n![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7a81b8d5-5578-4f17-9037-10eedb81a23a/Untitled.png)\n\n## API 문서\n\n[API 문서](https://www.notion.so/API-feb98146eeb4481193df2505f966b9c6?pvs=21)\n\n## 스마트 컨트랙트 및 토큰 이코노미 설계\n\n[스마트 컨트랙트 설계](https://www.notion.so/ebe74ce3e9af4b7db5edf7ae39c7728e?pvs=21)\n\n## Feeling\n\n4주간의 시간동안 변동성과 시장의 형태를 구현할 수 있어서 의미있는 시간이었다. 시장의 형태를 구현하여 팀원들이 각자 수익률을 공유하며 자산을 늘려가는 즐거움을 공유했던 것이 가장 기억에 남는다.\n\nNFT와 선물 옵션 등 파생상품 시장 또한 다루어 보고 싶었지만, 시간이 넉넉하지 않았던 것에 아쉬움이 남았다\n\n스스로 서비스를 구현할수 있다는 것을 알게 되었고. 그것을 위해 내게 필요한 기술이 무엇인지 또한 알 수 있었던 소중한 시간이었다.\n\n## Finding\n\n1. 최소 단위기간에 1인이 감당할 수 있는 작업량에 대해 명확한 기준이 없이 무리하게 기능을 추가하여 4주라는 시간 대비 과한 범위를 적용하였고 그 범위를 재설정하는 것에 적지 않은 시간이 소요되었다.\n2. 차트 이외에 트렌젝션 데이터와 유저 수익률 및 트랜잭션 데이터를 검색엔진에 노출되기 어려운 CSR형태로 구현하였다.\n3. 상태관리 라이브러리를 활용하지 못하여 실시간 가격(currentPrice)이 자식 컴포넌트로 깊게 내려가는 props drilling 현상이 발생했다.\n4. 잘못된 접근을 알리는 404페이지를 구현하였으나, 지갑이 등록 되었을 경우에만 접근할 수 있는 페이지로 구분하지 못했다.\n5. 서버와의 통신을 HTTP요청을 통해 구현하여 대규모 트래픽에 대비하지 못했다.\n\n## Future Action\n\n1. 프로젝트를 진행함에 따라 그 기간을 어떻게 설정해야 적절한지 알 수 있었고 그것을 측정하는 것 또한 프로젝트의 중요한 부분이라는 점을 알 수 있었다. 프로젝트 초기부터 CPM을 설정하여 진행상황 평가를 공유하며 작업 진도에 대한 합의를 하는 것이 필요하다는 것을 알 수 있었다.\n2. NEXTJS를 통해 SSR을 구현, SEO를 실현할 수 있는, 사용자들에게 노출될 수 있는 웹 서비스로 구현해야겠다.\n3. 효율적인 컴포넌트 구조를 찾기 위해 Redux, Mobx, Recoil 등의 상태관리 라이브러리와 리액트의 컴포지션, 컨택스트, 포탈을 사용을 고려하여 데이터 흐름 최적화에 대한 고민을 해야겠다.\n4. 지갑의 등록되었을 경우에만 볼 수 있는 버튼을 구현함으로 유저데이터를 안전하게 관리하는 접근 영역이 명료한 웹 서비스로 리팩토링해야겠다.\n5. 데이터 처리에 대한 피드백 받은 내용을 토대로 실시간 데이터 연동 웹소켓을 적용해야겠다.\n\n## **기술적 문제 해결**\n\n- **랜더링 최적화**에 문제가 있었다. **프로젝트 종료 3일 전**에 거래 토큰 다양화 과정에서 실시간 차트 **데이터 요청이 기하급수로 늘어나는 것**을 보았다. **웹은 시간이 갈수록 무거워졌고 DB의 용량이 무한히 커졌으며 체인 네트워크는 수 시간 만에 8G의 용량을 소진해 버렸다.** 같은 내용을 랜더링 하지 않는 **useMemo**나 랜더링을 최소화하기 위해 상태를 전역으로 관리하는 **Redux** 사용을 고려 하였으나, 우선 기존의 작성되었던 모든 **useEffect의 디펜던시**를 확인 해 보았다. 차트 데이터, 실시간 데이터, 실시간 데이터들의 일정시간 경과 후 차트 배열에 축적 시키는 과정에서 useEffect의 디펜던시에 해당 **요소 값**이 전부 들어가 있었다. 즉 **차트에 포함되는 함수와 배열이 변경될 때 마다 관련된 모든 컴포넌트에서 리랜더링이 일어났던 것**이다. 해당 디펜던시에 난수 적용 **단위 기간과 같은 간격으로 비동기 처리**를 할 수 있도록 했더니 기하급수 리랜더링 문제는 해결되었다.\n- **캔들 차트**에서 **스크롤 이벤트**에 대한 이해 없이 작업을 진행하다 보니, 차트를 제외한 페이지와의 **스크롤 값 충돌** 문제와 **마우스 포인터의 값**을 구하는 작업에 어려움을 느꼈다. 입력되는 스크롤 값에 대해 차트 컴포넌트와 메인페이지와의 입력 값의 구분이 필요했고 **스크롤을 제한하고 제한을 푸는 작업**이 필요하다 생각했다. 해당 키워드로 검색해보니, **document.body.style.overflow의 값을 unset과 hidden으로 독립**시킬 수 있다는 것을 알게 되었고, 메인페이지에서 스크롤을 할 때마다 차트에 영향을 주는 문제를 해결했다.\n- **SVG**를 통해 차트의 가격 높이 값과 거래량 높이 값을 설정해 준 후 **마우스 포인터의 위치에 비례한 값**을 보여주는 것에서 어려움이 있었다. 분명 해당 가격의 소수점 둘째 자리까지 **정확히** 맞아 떨어지는 것을 확인했는데, 며칠 뒤에 그 값이 **음수**로 바뀌어 있었다. 당혹스러웠지만 다시 살펴 보았다. 차트의 위치 값은 위로 **올라갈수록** 커지지만 마우스의 위치 값은 **아래로 내려올수록** 커진다는 것에서 값이 반전되거나 음수를 출력하는 문제가 발생한 것이었다. **방정식**으로 정확한 값을 구할 수 있었으나 잘못된 식을 대입했었고 **차트와 거래량 간의 값 차이**를 생각하지 않고 동일한 요소 값을 설정 했던 것에서 문제가 발생했음을 깨닫고 **캔들은 최댓값과 최솟값**이 달라질 수 있지만 **거래량은 최솟값이 0으로 고정**인 것을 이해하여 오류를 해결했다.\n\n### 프로젝트를 마치며\n\nNEXTjs를 통해 SSR을 구현하여 SEO를 구현하기를 바란다.\n\n서버의 차트데이터 로직 구현 외 백엔드와 컨트랙트 부분에 역할을 맡지 못한 점 또한 추후 솔로 프로젝트로 구현해야겠다.\n",
    "date": "2024-03-20",
    "category": "projects",
    "tags": [
      "React",
      "Express",
      "MySQL",
      "Web3.js",
      "AWS",
      "Ganache",
      "Truffle",
      "ERC20",
      "MetaMask",
      "Figma"
    ],
    "thumbnail": "/images/entasis/entasis_circuit.gif",
    "translations": {
      "ko": {
        "title": "Entasis",
        "description": "가상자산 거래소 개발",
        "content": "<h2 id=\"heading-0\">1.소개</h2>\n<ul>\n<li>프로젝트 명 : ENTASIS]</li>\n<li>Github 링크 : <a href=\"https://github.com/codestates-beb/BEB-07-final-entasis\">GitHub - codestates-beb/BEB-07-final-entasis</a></li>\n<li>블록체인 네트워크 주소 : <a href=\"http://18.183.252.200:8545/\">http://18.183.252.200:8545</a> 체인ID : 1337</li>\n</ul>\n<h3 id=\"heading-1\">윤수빈</h3>\n<ul>\n<li>포지션 : PM / Full Stack / Design</li>\n<li>개인 깃허브 : <a href=\"https://github.com/Russ481-k\">https://github.com/Russ481-k</a></li>\n<li>활용 스택 : Figma / Javascript / React/ HTML / CSS / MySQL / Sequelize / Node.js / Scale-Liner / Axios</li>\n<li>구현 기능 :\n<ul>\n<li>프로젝트 기획&amp;관리</li>\n<li>디자인 구상 및 구현</li>\n<li>프론트엔드 UI, UX 구현</li>\n<li>차트 구현</li>\n<li>서버 제공 API를 통한 데이터 요청</li>\n<li>서버 실시간 데이터 생성 기능 구현</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"heading-2\">2. 프로젝트 소개</h2>\n<p>[ STO 거래소 “ENTASIS” ]\n<img src=\"/images/entasis/entasis_trade.gif\" alt=\"거래\"></p>\n<p>투자자의 입장에서 STO가 무엇이고, 어떤 기능이 있으며, 어떻게 투자할 수 있는지를\n이 프로젝트를 통해 이해하도록 도움으로써 증권형 토큰에 대한 투자를 확대시키는 것이\n이 프로젝트의 목표다.</p>\n<p><a href=\"https://www.youtube.com/watch?v=0fmODCTVs0g\">래리핑크 인터뷰</a></p>\n<p>글로벌 자산운용사 블랙록의 대표 래리핑크는 2022. 12. 1. 인터뷰에서\nSTO를 통해 현재 증권 거래 비용에 포함된 브로커들의 수수료를 매매 당사자들에게 나누어주며\n수수료가 낮아질 것이고 투표 또한 ST 소유자들이 할 수 있게 될 것이라고 말했다.</p>\n<p>래리핑크의 STO에 대한 인식은 프로젝트 주제 선정에 결정에 도움을 주었다.</p>\n<p><a href=\"https://www.youtube.com/watch?v=PSVpth7uqb4&amp;t=650s\">STO 설명 영상</a></p>\n<p>우리가 흔히 알고 있는 토큰은 ICO를 기반한 '유틸리티 토큰' 이다.</p>\n<p>그렇다면 STO란 무엇일까?</p>\n<p><img src=\"/images/entasis/entasis_sto.png\" alt=\"STO 설명\"></p>\n<p>우선 STO의 기반이 되는 “증권형 토큰(Secturity Token)”이 무엇인지에 대해 이해할 필요가 있다.</p>\n<p>증권형 토큰(일명 ST)은 기업이 주식, 채권 대신 암호화폐 형태로 발행하는 유가 증권이다.\n이 증권형 토큰은 블록체인 플랫폼이 제공하는 서비스를 활용할 권리 대신 주식과 마찬가지로\n기업의 법적 소유권을 가졌음을 의미한다.</p>\n<p>때문에 증권형 토큰을 보유하고 있으면 기업 또는 기업의 블록체인 플랫폼이 낸 수익이나\n자산의 일부를 배당받을 수 있다.</p>\n<p>증권형 토큰은 그 용도가 주식, 채권 등 유가증권과 동일하기 때문에 법과 정책의 개입과 규제를 받아야만 한다.\n상법에 정해진 절차에 따라 주식을 발행하듯 관련 법에 따라 증권형 토큰을 발행해야 한다는 것이다.</p>\n<p>이 증권형 토큰을 IPO와 같이 상장하여 거래가 이루어지도록 하는 것이 STO 라고 할 수 있다.</p>\n<p><img src=\"/images/entasis/entasis_sto2.png\" alt=\"STO 설명 2\"></p>\n<p>[ About Service ]\nEntasis는 실제 STO 거래소의 기능을 일부 축소하여 상대적으로 기업보다 STO에 대해 접근을 어려워 할 개인 투자자들에게 실제 ST에 투자를 해봄으로써 증권형 토큰에 대해서 더 쉽게 이해하고 접근할 수 있도록 도와주는 “STO 거래소 튜토리얼” 이다.</p>\n<h2 id=\"heading-3\">3.기본 환경 조성</h2>\n<h3 id=\"heading-4\">토큰 가격 형성 및 변동성</h3>\n<p>실제 거래소에서 Market Maker &amp; Market Taker 와 토큰 매매를 통해 가격이 형성이 되지만,\n이 프로젝트를 진행하는데 있어서 튜토리얼이라는 점과 대규모의 트래픽이 기대되지 않는다는 점으로 인해\n실제 거래소에서 가격 형성이 되는 방식으로 구현하는 것은 제한된다고 판단하였다.</p>\n<p>그에 따라 난수를 통해 가격을 형성하고 주기적으로 가격이 변동할 수 있도록 구현하였다.\n단기 변동성과 중장기 변동성, 기업의 당기순이익 발표의 값이 난수로 설정되어 각각 3 개의 ST시장을 형성했다.\n또한 당기순이익에 배당률을 적용하여 기업의 이익을 지분에 따라 배당한다.\n토큰 소유자는 지분율에 따라 투표를 할 수 있다.</p>\n<h3 id=\"heading-5\">블록체인</h3>\n<p>이더리움 : EC2 인스턴스에서 백그라운드로 가나슈 네트워크를 실행시켰으며, 트러플을 이용하여 컨트랙트를 배포하였다.\n근본적으로 토큰 거래 기능을 위해 ERC20을 사용하였으며, 증권형 토큰의 기능 일부를 추가하기 위해 ERC1400의 운영자 및 제어자 변수와 거래제한 함수를 발췌하였다.\n투자자 입장에서 다양한 토큰에 대해서 분석하고 거래를 할 필요가 있다고 판단하여 3개의 기업으로 다양화하여 3개의 컨트랙트를 배포하였으며, 토큰 거래가 이루어질 때마다 해당 토큰 보유자 배열에 저장하여 배당금을 분배할 때 토큰 보유 여부를 확인할 수 있도록 하였다.\n스테이킹시 토큰 매매 제한을 강제하기 위해서 스테이킹의 모든 기능은 컨트랙트 내에서 구현하였으며, 만료일을 계산하는 데에는 block.timestamp 를 이용하여 만료 여부를 확인할 수 있도록 하였다.</p>\n<h2 id=\"heading-6\">4.프로젝트 기록</h2>\n<p>Project Entasis를 4F 방식으로 기록하고자 한다.</p>\n<ul>\n<li>사실(Fact) : 프로젝트를 통해 어떤 내용을 고민했고 어떤 방법으로 개념을 이해하고 문제를 해결했는지 작성</li>\n<li>감정(Feeling) : 프로젝트를 진행하면서 느꼈던 감정을 솔직하게 기록발견</li>\n<li>(Finding) : 문제를 해결하면서 무엇을 깨달았고, 시도해본 해결 방법에 대해서 개선이 필요한 부분을 발견했다면 발견 항목에 기록다음주를 위한 행동</li>\n<li>(Future Action) : 위의 회고를 통해서 당장 다음 프로젝트에 적용해 볼 학습 방법이나 조금 더 고민이 필요한 내용, 커뮤니케이션 방식 등을 기록</li>\n</ul>\n<h3 id=\"heading-7\">Fact</h3>\n<p>주요 기능</p>\n<ul>\n<li><strong>1초마다 실시간으로 가격 변동이 일어나는 차트 중심의 한 메인 페이지</strong>\n<ul>\n<li>차트는 1분 15분 1시간 4시간 1일 1주 단위로 캔들 단위를 조정하여 볼 수 있도록 한다.</li>\n<li>차트에 포커스 된 경우, 스크롤 값은 캔들의 넓이에 값을 주어 페이지 높이가 아닌 차트 범위를 조정할 수 있도록 한다.</li>\n<li>차트에 포커스 된 경우, 십자 좌표를 표시하며, 시세와 거래량 각각의 영역에 포인트 값에 따라 우측에 해당 높이에 대한 값을 출력한다.</li>\n<li></li>\n</ul>\n</li>\n<li><strong>메타 마스크를 통한 지갑 등록</strong></li>\n</ul>\n<p><img src=\"/images/entasis/entasis_metamask.png\" alt=\"메타마스크 연동\"></p>\n<ul>\n<li>\n<p>WEB3.0을 지향하여 지갑을 위주로 유저의 상태를 관리한다.</p>\n</li>\n<li>\n<p>회원가입을 따로 진행할 필요가 없으며, 메타마스크로 지갑등록을 하면 자동으로 로그인한다.</p>\n</li>\n<li>\n<p>메타마스크가 설치되어있지 않은 경우 메타마스크 설치 링크로 유도한다.</p>\n</li>\n<li>\n<p>처음 로그인을 하는 메타마스크 지갑인 경우 DB에 등록한다.</p>\n</li>\n<li>\n<p><strong>튜토리얼 및 이용법 설명</strong>\n<img src=\"/images/entasis/entasis_tutorial.gif\" alt=\"튜토리얼\"></p>\n<ul>\n<li>CSS의 transition을 활용하여 모달을 이동하며 서비스의 전체적인 이용방법을 사용자에게 전달한다.</li>\n<li>실제 매매를 일으키며 유저에게 거래 경험을 제공하려 하였으나 손익에 대한 경험을 강제적으로 실행하는 것이 바람직하지 않다고 여겨 모달 프로세스 형태로 튜토리얼을 구현한다.</li>\n</ul>\n</li>\n<li>\n<p><strong>FAUCET : 초기 자본금 50ETH 부여</strong></p>\n</li>\n</ul>\n<p><img src=\"/images/entasis/entasis_tutorial.gif\" alt=\"튜토리얼 과정\"></p>\n<p><img src=\"/images/entasis/entasis_faucet.png\" alt=\"파우셋\"></p>\n<ul>\n<li>\n<p>튜토리얼을 완료하면 자동으로 faucet 기능을 통해 50ETH가 부여한다.</p>\n</li>\n<li>\n<p>faucet은 1회로 제한한다.</p>\n</li>\n<li>\n<p><strong>ETH를 통한 증권형 토큰 구매 및 판매</strong></p>\n</li>\n</ul>\n<p><img src=\"/images/entasis/entasis_sign.png\" alt=\"거래 수수료\"></p>\n<ul>\n<li>실시간으로 변하는 가격을 보고 토큰을 구매 및 판매할 수 있다.</li>\n<li>투자자가 토큰 거래를 할 경우 메타마스크를 통해 서명한다.</li>\n</ul>\n<p><img src=\"/images/entasis/entasis_fee.png\" alt=\"거래 수수료\"></p>\n<ul>\n<li>\n<p>거래 수수료는 거래대금의 0.04%로 자동으로 계산한다.</p>\n</li>\n<li>\n<p><strong>배당금 투표</strong></p>\n</li>\n</ul>\n<p><img src=\"/images/entasis/entasis_vote.gif\" alt=\"투표\"></p>\n<ul>\n<li>\n<p>10분에 한 번씩 지급되는 배당금에 대한 배당률을 결정하기 위해 배당률 투표를 진행한다.</p>\n</li>\n<li>\n<p>투표를 하지 않더라도 배당금을 지급 받는다.</p>\n</li>\n<li>\n<p><strong>배당금 지급</strong>\n<img src=\"/images/entasis/entasis_dividend.gif\" alt=\"배당금\"></p>\n<ul>\n<li>토큰 별로 totalSupply 대비 투자자가 보유하고 있는 토큰양에 따라 배당금이 지불한다.</li>\n</ul>\n</li>\n</ul>\n<p>[배당금 지급 전 거래내역]\n<img src=\"/images/entasis/entasis_trade.gif\" alt=\"거래 내역\"></p>\n<p>[배당금 지급 후 거래내역]\n<img src=\"/images/entasis/entasis_after_trade.png\" alt=\"거래 후 내역\"></p>\n<p>웹사이트 상단 로고 아래에 있는 배당금 지급 시간이 모두 지나면 자동으로 배당금이 지급되며, 그 내역이 History에 표시된다.</p>\n<ul>\n<li><strong>거래제한(Circuit Breaker)</strong></li>\n</ul>\n<p><img src=\"/images/entasis/entasis_circuit_breaker.png\" alt=\"서킷 브레이커\"></p>\n<ul>\n<li>\n<p>극단적인 가격 변동률이 발생할 경우 모든 토큰에 거래를 제한한다.</p>\n</li>\n<li>\n<p>1분간 거래가 불가능해지며 이에 따라 토큰 가격도 1분간 정지된다.</p>\n</li>\n<li>\n<p>본 프로젝트에서는 극단적인 가격 변동이 일어날 일이 없는 점으로 인해\n거래 제한 기능을 보여주기 위하여 Circuit Breaker 버튼을 누를 경우 거래 제한이 발동하도록 구현한다.\n[거래 제한 발동]\n<img src=\"/images/entasis/entasis_circuit.gif\" alt=\"서킷 브레이커 발동\"></p>\n<p>[거래 제한 해제]\n<img src=\"/images/entasis/entasis_circuit_end.gif\" alt=\"서킷 브레이커 해제\"></p>\n</li>\n<li>\n<p><strong>스테이킹 기능(Staking)</strong>\n<img src=\"/images/entasis/entasis_staking.png\" alt=\"스테이킹\"></p>\n<ul>\n<li>스테이킹은 본인이 보유하고 있는 디지털자산을 블록체인 네트워크에 맡기는 방식으로 현금을 은행에 맡기는 예금과 구조가 유사하다.</li>\n<li>보유한 디지털 자산을 블록체인 검증에 활용하도록 맡기는 것을 뜻한다.</li>\n<li>스테이킹을 할 경우 일정기간동안 토큰을 거래소에 맡기고 기간이 만료되면 상대적으로 높은 이율에 따른 보상과 함께 토큰을 돌려받게 된다.</li>\n<li>단, 스테이킹 기간동안에는 해당 토큰을 사용할 수 없기 때문에, 토큰 가격이 변동으로 인해 토큰을 돌려 받고 싶어도 해당 기간동안에는 돌려 받을 수 없다.\n[스테이킹 요청시]\n<img src=\"/images/entasis/entasis_staking_1.png\" alt=\"스테이킹 화면 1\"></li>\n<li>사용자는 Staking 버튼을 눌러 메타마스크를 통해 서명한 데이터를 원하는 ST 컨트랙트에 보내 스테이킹을 진행한다.</li>\n<li>이 때, 이미 스테이킹이 되어있거나 기입한 Amount(수량)보다 토큰 보유량이 적을 시 에러를 반환한다.</li>\n<li>토큰이 문제없이 스테이킹이 된다면 우측 Amount List와 Reward List가 갱신되고 하단 Reward Time에 보상 인출까지 남은 기간이 표시한다.\n[보상 인출시]\n<img src=\"/images/entasis/entasis_staking_2.png\" alt=\"스테이킹 화면 2\"></li>\n<li>Reward Time이 Able로 변경되어 보상 인출이 가능해지면, 사용자는 Reward 버튼을 눌러 보상 인출 함수를 실행하는 데이터를 메타마스크로 서명해 컨트랙트에 보낸다.</li>\n<li>컨트랙트에서 만료일을 확인한 후, 문제가 없다면 사용자에게 스테이킹한 Amount에 Reward를 합한 토큰을 사용자에게 전송한다.\n<ul>\n<li>만료일이 지나지 않았을 경우 Reward 버튼이 비활성화</li>\n</ul>\n</li>\n<li>토큰과 보상이 사용자에게 전송되면 다시 Amount List와 Reward List가 0으로 초기화한다.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"heading-8\">[ A**bout Dev ]**</h1>\n<h2 id=\"heading-9\"><strong>기술 스택</strong></h2>\n<p><img src=\"/images/entasis/entasis_tech_stack.png\" alt=\"기술 스택\"></p>\n<h2 id=\"heading-10\">와이어프레임</h2>\n<p><a href=\"https://www.figma.com/embed?embed_host=notion&amp;url=https%3A%2F%2Fwww.figma.com%2Ffile%2FHP5FZix2FedecrcLWhUsb7%2FProject_Entasis%3Fnode-id%3D0%253A1%26t%3DL4XWojmyo6BCQvJK-1\">https://www.figma.com/embed?embed_host=notion&amp;url=https%3A%2F%2Fwww.figma.com%2Ffile%2FHP5FZix2FedecrcLWhUsb7%2FProject_Entasis%3Fnode-id%3D0%253A1%26t%3DL4XWojmyo6BCQvJK-1</a></p>\n<h2 id=\"heading-11\">플로우 차트</h2>\n<ul>\n<li><strong>Chart Data Flow</strong></li>\n</ul>\n<p><a href=\"https://www.figma.com/embed?embed_host=notion&amp;url=https%3A%2F%2Fwww.figma.com%2Ffile%2FjC6wwRAyBiQJ8Y0nB6iyiH%2FUntitled%3Fnode-id%3D0%253A1%26t%3DrlPZeEHfPYzyxIO4-1\">https://www.figma.com/embed?embed_host=notion&amp;url=https%3A%2F%2Fwww.figma.com%2Ffile%2FjC6wwRAyBiQJ8Y0nB6iyiH%2FUntitled%3Fnode-id%3D0%253A1%26t%3DrlPZeEHfPYzyxIO4-1</a></p>\n<h2 id=\"heading-12\">아키텍처</h2>\n<p><img src=\"/images/entasis/entasis_arch.png\" alt=\"아키텍처\"></p>\n<p>아키텍처의 경우 S3를 이용한 정적 호스트 페이지와 EC2를 이용한 서비스 서버, Database 클라우드 서버, 그리고 블록체인 네트워크 서버로 구성되어 있다.</p>\n<ul>\n<li>먼저 배포과정에서는 Github Actions 를 활용하여 CI/CD 파이프라인을 구성하여 Github에서 push가 발생할 때마다 배포중인 서비스에 반영되어 자동 배포가 실행된다.</li>\n<li>클라이언트는 AWS IAM를 통해 S3에 접근하여 배포하였으며, 블록체인 네트워크의 경우 AWS EC2의 인스턴스 내에서 가나슈 네트워크를 백그라운드로 실행하여 네트워크가 지속 가능하도록 설정하였다.</li>\n<li>서버 부분은 EC2를 이용하여 Docker와 Github Container Registry를 사용하여 EC2내에서 백그라운드로 자동서비스를 실행할 수 있도록 설계하였다.</li>\n</ul>\n<h2 id=\"heading-13\"><strong>데이터베이스 스키마 다이어그램</strong></h2>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7a81b8d5-5578-4f17-9037-10eedb81a23a/Untitled.png\" alt=\"Untitled\"></p>\n<h2 id=\"heading-14\">API 문서</h2>\n<p><a href=\"https://www.notion.so/API-feb98146eeb4481193df2505f966b9c6?pvs=21\">API 문서</a></p>\n<h2 id=\"heading-15\">스마트 컨트랙트 및 토큰 이코노미 설계</h2>\n<p><a href=\"https://www.notion.so/ebe74ce3e9af4b7db5edf7ae39c7728e?pvs=21\">스마트 컨트랙트 설계</a></p>\n<h2 id=\"heading-16\">Feeling</h2>\n<p>4주간의 시간동안 변동성과 시장의 형태를 구현할 수 있어서 의미있는 시간이었다. 시장의 형태를 구현하여 팀원들이 각자 수익률을 공유하며 자산을 늘려가는 즐거움을 공유했던 것이 가장 기억에 남는다.</p>\n<p>NFT와 선물 옵션 등 파생상품 시장 또한 다루어 보고 싶었지만, 시간이 넉넉하지 않았던 것에 아쉬움이 남았다</p>\n<p>스스로 서비스를 구현할수 있다는 것을 알게 되었고. 그것을 위해 내게 필요한 기술이 무엇인지 또한 알 수 있었던 소중한 시간이었다.</p>\n<h2 id=\"heading-17\">Finding</h2>\n<ol>\n<li>최소 단위기간에 1인이 감당할 수 있는 작업량에 대해 명확한 기준이 없이 무리하게 기능을 추가하여 4주라는 시간 대비 과한 범위를 적용하였고 그 범위를 재설정하는 것에 적지 않은 시간이 소요되었다.</li>\n<li>차트 이외에 트렌젝션 데이터와 유저 수익률 및 트랜잭션 데이터를 검색엔진에 노출되기 어려운 CSR형태로 구현하였다.</li>\n<li>상태관리 라이브러리를 활용하지 못하여 실시간 가격(currentPrice)이 자식 컴포넌트로 깊게 내려가는 props drilling 현상이 발생했다.</li>\n<li>잘못된 접근을 알리는 404페이지를 구현하였으나, 지갑이 등록 되었을 경우에만 접근할 수 있는 페이지로 구분하지 못했다.</li>\n<li>서버와의 통신을 HTTP요청을 통해 구현하여 대규모 트래픽에 대비하지 못했다.</li>\n</ol>\n<h2 id=\"heading-18\">Future Action</h2>\n<ol>\n<li>프로젝트를 진행함에 따라 그 기간을 어떻게 설정해야 적절한지 알 수 있었고 그것을 측정하는 것 또한 프로젝트의 중요한 부분이라는 점을 알 수 있었다. 프로젝트 초기부터 CPM을 설정하여 진행상황 평가를 공유하며 작업 진도에 대한 합의를 하는 것이 필요하다는 것을 알 수 있었다.</li>\n<li>NEXTJS를 통해 SSR을 구현, SEO를 실현할 수 있는, 사용자들에게 노출될 수 있는 웹 서비스로 구현해야겠다.</li>\n<li>효율적인 컴포넌트 구조를 찾기 위해 Redux, Mobx, Recoil 등의 상태관리 라이브러리와 리액트의 컴포지션, 컨택스트, 포탈을 사용을 고려하여 데이터 흐름 최적화에 대한 고민을 해야겠다.</li>\n<li>지갑의 등록되었을 경우에만 볼 수 있는 버튼을 구현함으로 유저데이터를 안전하게 관리하는 접근 영역이 명료한 웹 서비스로 리팩토링해야겠다.</li>\n<li>데이터 처리에 대한 피드백 받은 내용을 토대로 실시간 데이터 연동 웹소켓을 적용해야겠다.</li>\n</ol>\n<h2 id=\"heading-19\"><strong>기술적 문제 해결</strong></h2>\n<ul>\n<li><strong>랜더링 최적화</strong>에 문제가 있었다. <strong>프로젝트 종료 3일 전</strong>에 거래 토큰 다양화 과정에서 실시간 차트 <strong>데이터 요청이 기하급수로 늘어나는 것</strong>을 보았다. <strong>웹은 시간이 갈수록 무거워졌고 DB의 용량이 무한히 커졌으며 체인 네트워크는 수 시간 만에 8G의 용량을 소진해 버렸다.</strong> 같은 내용을 랜더링 하지 않는 <strong>useMemo</strong>나 랜더링을 최소화하기 위해 상태를 전역으로 관리하는 <strong>Redux</strong> 사용을 고려 하였으나, 우선 기존의 작성되었던 모든 <strong>useEffect의 디펜던시</strong>를 확인 해 보았다. 차트 데이터, 실시간 데이터, 실시간 데이터들의 일정시간 경과 후 차트 배열에 축적 시키는 과정에서 useEffect의 디펜던시에 해당 <strong>요소 값</strong>이 전부 들어가 있었다. 즉 <strong>차트에 포함되는 함수와 배열이 변경될 때 마다 관련된 모든 컴포넌트에서 리랜더링이 일어났던 것</strong>이다. 해당 디펜던시에 난수 적용 <strong>단위 기간과 같은 간격으로 비동기 처리</strong>를 할 수 있도록 했더니 기하급수 리랜더링 문제는 해결되었다.</li>\n<li><strong>캔들 차트</strong>에서 <strong>스크롤 이벤트</strong>에 대한 이해 없이 작업을 진행하다 보니, 차트를 제외한 페이지와의 <strong>스크롤 값 충돌</strong> 문제와 <strong>마우스 포인터의 값</strong>을 구하는 작업에 어려움을 느꼈다. 입력되는 스크롤 값에 대해 차트 컴포넌트와 메인페이지와의 입력 값의 구분이 필요했고 <strong>스크롤을 제한하고 제한을 푸는 작업</strong>이 필요하다 생각했다. 해당 키워드로 검색해보니, <strong>document.body.style.overflow의 값을 unset과 hidden으로 독립</strong>시킬 수 있다는 것을 알게 되었고, 메인페이지에서 스크롤을 할 때마다 차트에 영향을 주는 문제를 해결했다.</li>\n<li><strong>SVG</strong>를 통해 차트의 가격 높이 값과 거래량 높이 값을 설정해 준 후 <strong>마우스 포인터의 위치에 비례한 값</strong>을 보여주는 것에서 어려움이 있었다. 분명 해당 가격의 소수점 둘째 자리까지 <strong>정확히</strong> 맞아 떨어지는 것을 확인했는데, 며칠 뒤에 그 값이 <strong>음수</strong>로 바뀌어 있었다. 당혹스러웠지만 다시 살펴 보았다. 차트의 위치 값은 위로 <strong>올라갈수록</strong> 커지지만 마우스의 위치 값은 <strong>아래로 내려올수록</strong> 커진다는 것에서 값이 반전되거나 음수를 출력하는 문제가 발생한 것이었다. <strong>방정식</strong>으로 정확한 값을 구할 수 있었으나 잘못된 식을 대입했었고 <strong>차트와 거래량 간의 값 차이</strong>를 생각하지 않고 동일한 요소 값을 설정 했던 것에서 문제가 발생했음을 깨닫고 <strong>캔들은 최댓값과 최솟값</strong>이 달라질 수 있지만 <strong>거래량은 최솟값이 0으로 고정</strong>인 것을 이해하여 오류를 해결했다.</li>\n</ul>\n<h3 id=\"heading-20\">프로젝트를 마치며</h3>\n<p>NEXTjs를 통해 SSR을 구현하여 SEO를 구현하기를 바란다.</p>\n<p>서버의 차트데이터 로직 구현 외 백엔드와 컨트랙트 부분에 역할을 맡지 못한 점 또한 추후 솔로 프로젝트로 구현해야겠다.</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "1.소개",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "윤수빈",
            "level": 3,
            "isMainTopic": false,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "2. 프로젝트 소개",
            "level": 2,
            "isMainTopic": true,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "3.기본 환경 조성",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-4",
            "text": "토큰 가격 형성 및 변동성",
            "level": 3,
            "isMainTopic": false,
            "position": 0
          },
          {
            "id": "heading-5",
            "text": "블록체인",
            "level": 3,
            "isMainTopic": false,
            "position": 0
          },
          {
            "id": "heading-6",
            "text": "4.프로젝트 기록",
            "level": 2,
            "isMainTopic": true,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "Fact",
            "level": 3,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "[ A**bout Dev ]**",
            "level": 1,
            "isMainTopic": true,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "기술 스택",
            "level": 2,
            "isMainTopic": true,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "와이어프레임",
            "level": 2,
            "isMainTopic": true,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "플로우 차트",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-12",
            "text": "아키텍처",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-13",
            "text": "데이터베이스 스키마 다이어그램",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-14",
            "text": "API 문서",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-15",
            "text": "스마트 컨트랙트 및 토큰 이코노미 설계",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-16",
            "text": "Feeling",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-17",
            "text": "Finding",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-18",
            "text": "Future Action",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-19",
            "text": "기술적 문제 해결",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-20",
            "text": "프로젝트를 마치며",
            "level": 3,
            "isMainTopic": false,
            "position": 0
          }
        ]
      },
      "en": {
        "title": "Entasis",
        "description": "Digital Asset Exchange Development",
        "content": "<h2 id=\"heading-0\">1. Introduction</h2>\n<ul>\n<li>Project Name: ENTASIS</li>\n<li>Github Link: <a href=\"https://github.com/codestates-beb/BEB-07-final-entasis\">GitHub - codestates-beb/BEB-07-final-entasis</a></li>\n<li>Blockchain Network Address: <a href=\"http://18.183.252.200:8545/\">http://18.183.252.200:8545</a> Chain ID: 1337</li>\n</ul>\n<h3 id=\"heading-1\">Yoon Subin</h3>\n<ul>\n<li>Position: PM / Full Stack / Design</li>\n<li>Personal Github: <a href=\"https://github.com/Russ481-k\">https://github.com/Russ481-k</a></li>\n<li>Tech Stack: Figma / Javascript / React / HTML / CSS / MySQL / Sequelize / Node.js / Scale-Liner / Axios</li>\n<li>Implemented Features:\n<ul>\n<li>Project Planning &amp; Management</li>\n<li>Design Conceptualization and Implementation</li>\n<li>Frontend UI/UX Implementation</li>\n<li>Chart Implementation</li>\n<li>Data Requests through Server APIs</li>\n<li>Real-time Data Generation Implementation</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"heading-2\">2. Project Overview</h2>\n<p>[ STO Exchange \"ENTASIS\" ]\n<img src=\"/images/entasis/entasis_trade.gif\" alt=\"Trading\"></p>\n<p>The goal of this project is to help investors understand what STOs are, what features they have, and how to invest in them, thereby expanding investment in security tokens.</p>\n<p><a href=\"https://www.youtube.com/watch?v=0fmODCTVs0g\">Larry Fink Interview</a></p>\n<p>In an interview on December 1, 2022, BlackRock CEO Larry Fink stated that through STOs, broker fees included in current securities trading costs would be distributed to trading parties, lowering fees, and ST holders would be able to vote.</p>\n<p>Larry Fink's perspective on STOs helped inform our project topic selection.</p>\n<p><a href=\"https://www.youtube.com/watch?v=PSVpth7uqb4&amp;t=650s\">STO Explanation Video</a></p>\n<p>The tokens we commonly know are 'utility tokens' based on ICOs.</p>\n<p>So what is an STO?</p>\n<p><img src=\"/images/entasis/entasis_sto.png\" alt=\"STO Explanation\"></p>\n<p>First, we need to understand what \"Security Tokens\" are, which form the basis of STOs.</p>\n<p>Security tokens (ST) are securities issued by companies in cryptocurrency form instead of stocks or bonds. These security tokens represent legal ownership in the company, rather than just rights to use services provided by the blockchain platform.</p>\n<p>Therefore, holding security tokens allows you to receive dividends from the company's profits or blockchain platform assets.</p>\n<p>Since security tokens serve the same purpose as securities like stocks and bonds, they must be subject to legal and policy regulation. They must be issued according to relevant laws, just as stocks are issued according to commercial law procedures.</p>\n<p>STO refers to listing these security tokens for trading, similar to an IPO.</p>\n<p><img src=\"/images/entasis/entasis_sto2.png\" alt=\"STO Explanation 2\"></p>\n<p>[ About Service ]\nEntasis is an \"STO Exchange Tutorial\" that helps individual investors better understand and approach security tokens by allowing them to invest in actual STs, with some features of real STO exchanges scaled down.</p>\n<h2 id=\"heading-3\">3. Basic Environment Setup</h2>\n<h3 id=\"heading-4\">Token Price Formation and Volatility</h3>\n<p>While prices are typically formed through Market Maker &amp; Market Taker trading in real exchanges, we implemented price formation through random numbers due to the tutorial nature of this project and limited expected traffic.</p>\n<p>We created three ST markets with short-term volatility, medium-long term volatility, and company quarterly profit announcements set by random numbers. Dividends are distributed according to shareholding ratio by applying dividend rates to quarterly profits.\nToken holders can vote according to their shareholding ratio.</p>\n<h3 id=\"heading-5\">Blockchain</h3>\n<p>Ethereum: We ran the Ganache network in the background on an EC2 instance and deployed contracts using Truffle.\nWe fundamentally used ERC20 for token trading functionality and extracted operator/controller variables and trading restriction functions from ERC1400 to add some security token features.\nWe deployed three contracts diversifying into three companies, as investors need to analyze and trade various tokens. When token trades occur, holder arrays store token ownership to verify dividend distribution eligibility.\nAll staking features were implemented within the contract to enforce trading restrictions during staking, using block.timestamp to verify expiration.</p>\n<h2 id=\"heading-6\">4. Project Documentation</h2>\n<p>I want to document Project Entasis using the 4F method.</p>\n<ul>\n<li>Fact: Document what issues were considered through the project and how concepts were understood and problems solved</li>\n<li>Feeling: Honestly record emotions felt during project progress</li>\n<li>Finding: Record what was learned while solving problems and areas needing improvement in attempted solutions</li>\n<li>Future Action: Record learning methods to apply in the next project, items needing more consideration, communication methods, etc.</li>\n</ul>\n<h3 id=\"heading-7\">Fact</h3>\n<p>Key Features</p>\n<ul>\n<li><strong>Main page centered on real-time price movement charts updating every second</strong>\n<ul>\n<li>Charts can be adjusted to view candles in 1min, 15min, 1hr, 4hr, 1day, 1week units</li>\n<li>When chart is focused, scroll value adjusts chart range rather than page height by setting candle width values</li>\n<li>When chart is focused, crosshair coordinates are displayed with point values shown at corresponding heights for price and volume areas</li>\n</ul>\n</li>\n<li><strong>Wallet Registration via MetaMask</strong></li>\n</ul>\n<p><img src=\"/images/entasis/entasis_metamask.png\" alt=\"MetaMask Integration\"></p>\n<ul>\n<li>\n<p>Aiming for WEB3.0, user state is managed primarily through wallets</p>\n</li>\n<li>\n<p>No separate signup needed; automatic login with MetaMask wallet registration</p>\n</li>\n<li>\n<p>Redirects to MetaMask installation link if not installed</p>\n</li>\n<li>\n<p>Registers new MetaMask wallets in DB on first login</p>\n</li>\n<li>\n<p><strong>Tutorial and Usage Instructions</strong>\n<img src=\"/images/entasis/entasis_tutorial.gif\" alt=\"Tutorial\"></p>\n<ul>\n<li>Uses CSS transitions to move modals while conveying overall service usage to users</li>\n<li>Implemented as modal process tutorial rather than forcing actual trading experience due to concerns about mandating profit/loss experiences</li>\n</ul>\n</li>\n<li>\n<p><strong>FAUCET: Initial Capital of 50ETH</strong></p>\n</li>\n</ul>\n<p><img src=\"/images/entasis/entasis_tutorial.gif\" alt=\"Tutorial Process\"></p>\n<p><img src=\"/images/entasis/entasis_faucet.png\" alt=\"Faucet\"></p>\n<ul>\n<li>\n<p>Automatically grants 50ETH through faucet feature upon tutorial completion</p>\n</li>\n<li>\n<p>Faucet limited to one-time use</p>\n</li>\n<li>\n<p><strong>Security Token Purchase and Sale using ETH</strong></p>\n</li>\n</ul>\n<p><img src=\"/images/entasis/entasis_sign.png\" alt=\"Trading Fees\"></p>\n<ul>\n<li>Users can buy and sell tokens based on real-time price changes</li>\n<li>Investors sign transactions through MetaMask for token trading</li>\n</ul>\n<p><img src=\"/images/entasis/entasis_fee.png\" alt=\"Trading Fees\"></p>\n<ul>\n<li>\n<p>Trading fee automatically calculated at 0.04% of transaction amount</p>\n</li>\n<li>\n<p><strong>Dividend Voting</strong></p>\n</li>\n</ul>\n<p><img src=\"/images/entasis/entasis_vote.gif\" alt=\"Voting\"></p>\n<ul>\n<li>\n<p>Dividend rate voting conducted to determine rate for dividends paid every 10 minutes</p>\n</li>\n<li>\n<p>Dividends received even without voting</p>\n</li>\n<li>\n<p><strong>Dividend Distribution</strong>\n<img src=\"/images/entasis/entasis_dividend.gif\" alt=\"Dividends\"></p>\n<ul>\n<li>Dividends paid according to investor's token holdings relative to totalSupply per token</li>\n</ul>\n</li>\n</ul>\n<p>[Transaction History Before Dividend Payment]\n<img src=\"/images/entasis/entasis_trade.gif\" alt=\"Trade History\"></p>\n<p>[Transaction History After Dividend Payment]\n<img src=\"/images/entasis/entasis_after_trade.png\" alt=\"Post-Trade History\"></p>\n<p>When dividend payment time shown below website logo passes, dividends are automatically paid and recorded in History.</p>\n<ul>\n<li><strong>Trading Restrictions (Circuit Breaker)</strong></li>\n</ul>\n<p><img src=\"/images/entasis/entasis_circuit_breaker.png\" alt=\"Circuit Breaker\"></p>\n<ul>\n<li>Restricts trading on all tokens in case of extreme price volatility</li>\n<li>Trading disabled for 1 minute with token prices frozen</li>\n<li>Due to unlikely extreme price movements in this project, circuit breaker activates via button press to demonstrate trading restriction functionality</li>\n</ul>\n<p>[Circuit Breaker Activation]\n<img src=\"/images/entasis/entasis_circuit.gif\" alt=\"Circuit Breaker Activation\"></p>\n<p>[Circuit Breaker Deactivation]\n<img src=\"/images/entasis/entasis_circuit_end.gif\" alt=\"Circuit Breaker Deactivation\"></p>\n<ul>\n<li><strong>Staking Feature</strong>\n<img src=\"/images/entasis/entasis_staking.png\" alt=\"Staking\">\n<ul>\n<li>Staking involves depositing digital assets to blockchain network, similar to bank deposits</li>\n<li>Means lending held digital assets for blockchain validation</li>\n<li>When staking, tokens are deposited for a period and returned with relatively high interest rewards upon maturity</li>\n<li>However, tokens cannot be used during staking period - even if price changes make you want tokens back, they cannot be withdrawn during this period</li>\n</ul>\n</li>\n</ul>\n<p>[When Requesting Staking]\n<img src=\"/images/entasis/entasis_staking_1.png\" alt=\"Staking Screen 1\"></p>\n<ul>\n<li>Users click Staking button to send MetaMask-signed data to desired ST contract</li>\n<li>Returns error if already staking or token balance less than entered Amount</li>\n<li>Upon successful staking, Amount List and Reward List update with remaining reward time shown</li>\n</ul>\n<p>[When Withdrawing Rewards]\n<img src=\"/images/entasis/entasis_staking_2.png\" alt=\"Staking Screen 2\"></p>\n<ul>\n<li>When Reward Time changes to \"Able\", users can click Reward button to send MetaMask-signed reward withdrawal function data</li>\n<li>Contract verifies maturity date and sends staked Amount plus Reward if valid\n<ul>\n<li>Reward button disabled if not matured</li>\n</ul>\n</li>\n<li>Amount List and Reward List reset to 0 after token and reward transfer</li>\n</ul>\n<h1 id=\"heading-8\">[About Dev]</h1>\n<h2 id=\"heading-9\">Tech Stack</h2>\n<p><img src=\"/images/entasis/entasis_tech_stack.png\" alt=\"Tech Stack\"></p>\n<h2 id=\"heading-10\">Wireframe</h2>\n<p><a href=\"https://www.figma.com/embed?embed_host=notion&amp;url=https%3A%2F%2Fwww.figma.com%2Ffile%2FHP5FZix2FedecrcLWhUsb7%2FProject_Entasis%3Fnode-id%3D0%253A1%26t%3DL4XWojmyo6BCQvJK-1\">https://www.figma.com/embed?embed_host=notion&amp;url=https%3A%2F%2Fwww.figma.com%2Ffile%2FHP5FZix2FedecrcLWhUsb7%2FProject_Entasis%3Fnode-id%3D0%253A1%26t%3DL4XWojmyo6BCQvJK-1</a></p>\n<h2 id=\"heading-11\">Flowchart</h2>\n<ul>\n<li><strong>Chart Data Flow</strong></li>\n</ul>\n<p><a href=\"https://www.figma.com/embed?embed_host=notion&amp;url=https%3A%2F%2Fwww.figma.com%2Ffile%2FjC6wwRAyBiQJ8Y0nB6iyiH%2FUntitled%3Fnode-id%3D0%253A1%26t%3DrlPZeEHfPYzyxIO4-1\">https://www.figma.com/embed?embed_host=notion&amp;url=https%3A%2F%2Fwww.figma.com%2Ffile%2FjC6wwRAyBiQJ8Y0nB6iyiH%2FUntitled%3Fnode-id%3D0%253A1%26t%3DrlPZeEHfPYzyxIO4-1</a></p>\n<h2 id=\"heading-12\">Architecture</h2>\n<p><img src=\"/images/entasis/entasis_arch.png\" alt=\"Architecture\"></p>\n<p>The architecture consists of static host pages using S3, service server using EC2, cloud database server, and blockchain network server.</p>\n<ul>\n<li>CI/CD pipeline configured using Github Actions for automatic deployment on Github pushes</li>\n<li>Client deployed through AWS IAM S3 access, blockchain network runs Ganache in background on AWS EC2</li>\n<li>Server designed for automatic background service using Docker and Github Container Registry on EC2</li>\n</ul>\n<h2 id=\"heading-13\">Database Schema Diagram</h2>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7a81b8d5-5578-4f17-9037-10eedb81a23a/Untitled.png\" alt=\"Untitled\"></p>\n<h2 id=\"heading-14\">API Documentation</h2>\n<p><a href=\"https://www.notion.so/API-feb98146eeb4481193df2505f966b9c6?pvs=21\">API Documentation</a></p>\n<h2 id=\"heading-15\">Smart Contract and Token Economy Design</h2>\n<p><a href=\"https://www.notion.so/ebe74ce3e9af4b7db5edf7ae39c7728e?pvs=21\">Smart Contract Design</a></p>\n<h2 id=\"heading-16\">Feeling</h2>\n<p>The 4-week period was meaningful in implementing volatility and market forms. Most memorable was sharing the joy of growing assets as team members shared their returns.</p>\n<p>While we wanted to cover NFTs and derivatives like futures/options, time constraints left us wanting more.</p>\n<p>It was valuable time learning we could implement services ourselves and identifying needed technologies.</p>\n<h2 id=\"heading-17\">Finding</h2>\n<ol>\n<li>Without clear criteria for manageable workload per minimum time unit, we over-ambitiously added features requiring significant time to rescope relative to 4 weeks</li>\n<li>Implemented transaction data, user returns and transaction data in CSR form difficult for search engines to index beyond charts</li>\n<li>Without clear criteria for manageable workload per minimum time unit, we over-ambitiously added features requiring significant time to rescope relative to 4 weeks</li>\n<li>Chart data and transaction data and user returns data are implemented in CSR form difficult for search engines to index beyond charts</li>\n<li>We did not use state management libraries and experienced props drilling phenomenon where real-time price (currentPrice) goes deeply into child components</li>\n<li>We implemented a 404 page to indicate incorrect access, but failed to separate pages that can only be accessed if a wallet is registered</li>\n<li>We implemented server communication through HTTP requests and did not handle large-scale traffic</li>\n</ol>\n<h2 id=\"heading-18\">Future Action</h2>\n<ol>\n<li>As we progressed, we learned how to set the project duration appropriately and how to measure it, which is an important part of the project. It was valuable to set CPM from the beginning of the project and share progress evaluations to reach an agreement on the project's progress.</li>\n<li>We need to implement SSR through NEXTJS to achieve SEO and create a web service that can be exposed to users.</li>\n<li>To find an efficient component structure, we need to consider using state management libraries like Redux, Mobx, Recoil and React's composition, context, and portal to optimize data flow.</li>\n<li>We need to refactor the web service to be a secure web service that can only be accessed if a wallet is registered by implementing a button that can only be viewed if a wallet is registered.</li>\n<li>We need to apply a real-time data-linked web socket based on feedback on data processing.</li>\n</ol>\n<h2 id=\"heading-19\"><strong>Technical Problem Solving</strong></h2>\n<ul>\n<li>\n<p>There was an issue with <strong>rendering optimization</strong>. <strong>3 days before project completion</strong>, we observed <strong>exponential growth in data requests</strong> for real-time charts during token diversification. <strong>The web became increasingly heavy over time, DB capacity grew infinitely, and the chain network consumed 8G of capacity within hours.</strong> We considered using <strong>useMemo</strong> to avoid rendering the same content or <strong>Redux</strong> for global state management to minimize rendering, but first checked all <strong>useEffect dependencies</strong> in existing code. Chart data, real-time data, and the process of accumulating real-time data into chart arrays after a certain time period had all their <strong>element values</strong> in useEffect dependencies. In other words, <strong>re-rendering occurred in all related components whenever functions and arrays included in charts changed</strong>. The exponential re-rendering issue was resolved by applying <strong>asynchronous processing at intervals matching random number generation periods</strong> to those dependencies.</p>\n</li>\n<li>\n<p>Working on the <strong>candlestick chart</strong> without understanding <strong>scroll events</strong> led to difficulties with <strong>scroll value conflicts</strong> between the chart and other pages, and obtaining <strong>mouse pointer values</strong>. We needed to distinguish between input values for the chart component and main page, and thought we needed to work on <strong>restricting and unrestricting scrolling</strong>. Searching these keywords, we learned we could <strong>isolate document.body.style.overflow values between unset and hidden</strong>, resolving the issue of main page scrolling affecting the chart.</p>\n</li>\n<li>\n<p>After setting price height and volume height values through <strong>SVG</strong>, we faced challenges showing values <strong>proportional to mouse pointer position</strong>. While we confirmed values matched precisely to two decimal places, days later those values had become <strong>negative</strong>. Upon review, we realized chart position values <strong>increase upward</strong> while mouse position values <strong>increase downward</strong>, causing value inversion and negative output issues. While we could find exact values using <strong>equations</strong>, we had applied incorrect formulas and set identical element values without considering <strong>differences between chart and volume values</strong>. We resolved the error by understanding that while <strong>candles can have different max and min values</strong>, <strong>volume has a fixed minimum of 0</strong>.</p>\n</li>\n</ul>\n<h3 id=\"heading-20\">At the end of the project</h3>\n<p>I hope to implement SSR through NEXTjs to achieve SEO.</p>\n<p>In addition to implementing the chart data logic on the server, I also failed to take on the role of the backend and contract parts in the future solo project.</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "1. Introduction",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "Yoon Subin",
            "level": 3,
            "isMainTopic": false,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "2. Project Overview",
            "level": 2,
            "isMainTopic": true,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "3. Basic Environment Setup",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-4",
            "text": "Token Price Formation and Volatility",
            "level": 3,
            "isMainTopic": false,
            "position": 0
          },
          {
            "id": "heading-5",
            "text": "Blockchain",
            "level": 3,
            "isMainTopic": false,
            "position": 0
          },
          {
            "id": "heading-6",
            "text": "4. Project Documentation",
            "level": 2,
            "isMainTopic": true,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "Fact",
            "level": 3,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "[About Dev]",
            "level": 1,
            "isMainTopic": true,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "Tech Stack",
            "level": 2,
            "isMainTopic": true,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "Wireframe",
            "level": 2,
            "isMainTopic": true,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "Flowchart",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-12",
            "text": "Architecture",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-13",
            "text": "Database Schema Diagram",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-14",
            "text": "API Documentation",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-15",
            "text": "Smart Contract and Token Economy Design",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-16",
            "text": "Feeling",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-17",
            "text": "Finding",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-18",
            "text": "Future Action",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-19",
            "text": "Technical Problem Solving",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-20",
            "text": "At the end of the project",
            "level": 3,
            "isMainTopic": false,
            "position": 0
          }
        ]
      }
    },
    "imageHeights": {
      "img-3": 400,
      "img-4": 400,
      "img-5": 400,
      "img-11": 400,
      "img-12": 400,
      "img-13": 400,
      "img-14": 400,
      "img-15": 400,
      "img-16": 400,
      "img-17": 400,
      "img-18": 400,
      "img-19": 400,
      "img-20": 400,
      "img-21": 400,
      "img-22": 400,
      "img-23": 400,
      "img-24": 400,
      "img-25": 400,
      "img-26": 400,
      "img-29": 400,
      "img-33": 400,
      "img-35": 400
    }
  },
  {
    "id": "entasis_engin_1",
    "title": "Entasis Engine - 가상자산 데이터 분석 및 AI 연동 솔루션",
    "content": "\n# 금융 데이터 분석 및 AI 연동 솔루션 – 기술 스택 선정과 시스템 아키텍처\n\n## 🚀 프로젝트 개요\n\n금융 시장에서 데이터 기반 의사결정의 중요성이 날로 증가하고 있습니다. 특히 현물, 선물, 옵션 시장의 데이터를 통합적으로 분석하고 AI를 활용한 시장 예측은 현대 트레이딩의 핵심 요소가 되었습니다.\n\n이 프로젝트는 **실시간 데이터 수집 → 고성능 데이터 처리 → AI 기반 분석 → 실시간 대시보드 제공**의 전체 프로세스를 자동화하여 사용자에게 데이터 기반의 투자 인사이트를 제공합니다.\n\n### 핵심 목표\n\n- 실시간 금융 데이터 통합 및 분석\n- AI 기반 시장 예측 모델 구현\n- 포지션별 기대 수익률 계산\n- 리스크 관리 지표 제공\n- 사용자 친화적 대시보드 구현\n\n---\n\n## 🛠️ 기술 스택 및 아키텍처\n\n### 1. 데이터 파이프라인\n\n- **데이터 수집**: CCXT, Deribit API\n- **데이터 처리**: Java, Apache Spark\n- **저장소**: PostgreSQL, TimescaleDB\n- **워크플로우**: Apache Airflow\n\n### 2. 분석 엔진\n\n- **AI/ML**: Python, TensorFlow, Scikit-learn\n- **금융공학**: Pandas, NumPy\n- **분석 모델**:\n  - 블랙숄즈 모델 (옵션 가격 평가)\n  - Heston 모델 (변동성 분석)\n  - LSTM 네트워크 (시계열 예측)\n\n### 3. 프론트엔드\n\n- **프레임워크**: Next.js\n- **시각화**: D3.js\n- **실시간 통신**: WebSocket\n\n## 📊 시스템 아키텍처\n\n```plaintext\n+-------------------+       +-------------------+       +-------------------+\n|   Data Sources    |       |   Backend (AI &   |       |   Frontend (User   |\n|-------------------|       | Financial Models) |       |     Interface)    |\n| Binance API       | ----> | Python (Pandas,   | ----> | Next.js           |\n| Bybit API         | ----> | TensorFlow)       | ----> | D3.js             |\n| Deribit API       | ----> |                   | ----> | Interactive Charts|\n+-------------------+       +-------------------+       +-------------------+\n\n+-------------------+\n| Database          |\n|-------------------|\n| PostgreSQL        |\n| TimescaleDB       |\n+-------------------+\n\n+--------------------------------------------+\n| Workflow Orchestration                     |\n|--------------------------------------------|\n| Apache Airflow                             |\n+--------------------------------------------+\n```\n\n---\n\n## 💡 주요 기능 및 구현\n\n### 1. 데이터 통합 시스템\n\n- 멀티 거래소 실시간 데이터 수집\n- 시계열 데이터 최적화 저장\n- 분산 처리 기반 대용량 데이터 처리\n\n### 2. AI 기반 분석 엔진\n\n- 딥러닝 기반 가격 예측 모델\n- 변동성 예측 및 리스크 분석\n- 포트폴리오 최적화 알고리즘\n\n### 3. 투자 전략 시스템\n\n- 실시간 포지션 분석\n- 리스크-리턴 프로파일 생성\n- 백테스팅 및 시나리오 분석\n\n### 4. 실시간 모니터링\n\n- 대화형 차트 및 지표\n- 실시간 알림 시스템\n- 커스텀 대시보드 구성\n\n---\n\n## 🔄 워크플로우 상세\n\n1. **데이터 수집 단계**\n\n   - 거래소 API 연동 및 데이터 수집\n   - WebSocket을 통한 실시간 데이터 스트리밍\n   - 데이터 정합성 검증\n\n2. **전처리 및 저장 단계**\n\n   - Apache Spark 기반 대규모 데이터 처리\n   - 시계열 데이터 최적화 저장\n   - 파생 변수 계산 (변동성, 그리스 지표 등)\n\n3. **분석 및 예측 단계**\n\n   - 머신러닝 모델 학습 및 예측\n   - 금융공학 모델 적용\n   - 리스크 지표 계산\n\n4. **시각화 및 제공 단계**\n   - 실시간 대시보드 업데이트\n   - 사용자 맞춤형 보고서 생성\n   - 알림 및 통지 발송\n\n---\n\n## 🎁 기대 효과\n\n### 1. 운영 효율성\n\n- 자동화된 데이터 수집 및 분석\n- 실시간 시장 모니터링\n- 신속한 의사결정 지원\n\n### 2. 리스크 관리\n\n- 포트폴리오 리스크 실시간 모니터링\n- 시나리오 기반 스트레스 테스트\n- 손실 제한 전략 자동화\n\n### 3. 투자 성과\n\n- 데이터 기반 투자 전략 수립\n- AI 기반 시장 예측\n- 체계적인 포트폴리오 관리\n\n---\n\n## 🚀 향후 발전 방향\n\n1. **기능 확장**\n\n   - 추가 자산군 지원\n   - 고급 AI 모델 도입\n   - 소셜 트레이딩 기능\n\n2. **성능 개선**\n\n   - 처리 속도 최적화\n   - 확장성 강화\n   - 보안 강화\n\n3. **사용자 경험**\n   - 모바일 앱 개발\n   - 맞춤형 알림 시스템\n   - API 서비스 제공\n\n이 프로젝트는 금융 시장의 데이터를 효과적으로 분석하고 AI와 결합하여 실질적인 투자 인사이트를 제공하는 종합 솔루션을 목표로 합니다. 🎯\n",
    "date": "2025-02-10",
    "category": "projects",
    "tags": [
      "Java",
      "Python",
      "PostgreSQL",
      "TimescaleDB",
      "Next.js",
      "D3.js",
      "Apache Spark",
      "TensorFlow",
      "Apache Airflow",
      "CCXT",
      "금융공학",
      "머신러닝"
    ],
    "thumbnail": "/images/cryptocurrency.jpg",
    "translations": {
      "ko": {
        "title": "Entasis Engine - 가상자산 데이터 분석 및 AI 연동 솔루션",
        "description": "현물/선물/옵션 데이터 통합 분석 및 AI 기반 투자 전략 제공 시스템",
        "content": "<h1 id=\"heading-0\">금융 데이터 분석 및 AI 연동 솔루션 – 기술 스택 선정과 시스템 아키텍처</h1>\n<h2 id=\"heading-1\">🚀 프로젝트 개요</h2>\n<p>금융 시장에서 데이터 기반 의사결정의 중요성이 날로 증가하고 있습니다. 특히 현물, 선물, 옵션 시장의 데이터를 통합적으로 분석하고 AI를 활용한 시장 예측은 현대 트레이딩의 핵심 요소가 되었습니다.</p>\n<p>이 프로젝트는 <strong>실시간 데이터 수집 → 고성능 데이터 처리 → AI 기반 분석 → 실시간 대시보드 제공</strong>의 전체 프로세스를 자동화하여 사용자에게 데이터 기반의 투자 인사이트를 제공합니다.</p>\n<h3 id=\"heading-2\">핵심 목표</h3>\n<ul>\n<li>실시간 금융 데이터 통합 및 분석</li>\n<li>AI 기반 시장 예측 모델 구현</li>\n<li>포지션별 기대 수익률 계산</li>\n<li>리스크 관리 지표 제공</li>\n<li>사용자 친화적 대시보드 구현</li>\n</ul>\n<hr>\n<h2 id=\"heading-3\">🛠️ 기술 스택 및 아키텍처</h2>\n<h3 id=\"heading-4\">1. 데이터 파이프라인</h3>\n<ul>\n<li><strong>데이터 수집</strong>: CCXT, Deribit API</li>\n<li><strong>데이터 처리</strong>: Java, Apache Spark</li>\n<li><strong>저장소</strong>: PostgreSQL, TimescaleDB</li>\n<li><strong>워크플로우</strong>: Apache Airflow</li>\n</ul>\n<h3 id=\"heading-5\">2. 분석 엔진</h3>\n<ul>\n<li><strong>AI/ML</strong>: Python, TensorFlow, Scikit-learn</li>\n<li><strong>금융공학</strong>: Pandas, NumPy</li>\n<li><strong>분석 모델</strong>:\n<ul>\n<li>블랙숄즈 모델 (옵션 가격 평가)</li>\n<li>Heston 모델 (변동성 분석)</li>\n<li>LSTM 네트워크 (시계열 예측)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"heading-6\">3. 프론트엔드</h3>\n<ul>\n<li><strong>프레임워크</strong>: Next.js</li>\n<li><strong>시각화</strong>: D3.js</li>\n<li><strong>실시간 통신</strong>: WebSocket</li>\n</ul>\n<h2 id=\"heading-7\">📊 시스템 아키텍처</h2>\n<pre><code class=\"language-plaintext\">+-------------------+       +-------------------+       +-------------------+\n|   Data Sources    |       |   Backend (AI &amp;   |       |   Frontend (User   |\n|-------------------|       | Financial Models) |       |     Interface)    |\n| Binance API       | ----&gt; | Python (Pandas,   | ----&gt; | Next.js           |\n| Bybit API         | ----&gt; | TensorFlow)       | ----&gt; | D3.js             |\n| Deribit API       | ----&gt; |                   | ----&gt; | Interactive Charts|\n+-------------------+       +-------------------+       +-------------------+\n\n+-------------------+\n| Database          |\n|-------------------|\n| PostgreSQL        |\n| TimescaleDB       |\n+-------------------+\n\n+--------------------------------------------+\n| Workflow Orchestration                     |\n|--------------------------------------------|\n| Apache Airflow                             |\n+--------------------------------------------+\n</code></pre>\n<hr>\n<h2 id=\"heading-8\">💡 주요 기능 및 구현</h2>\n<h3 id=\"heading-9\">1. 데이터 통합 시스템</h3>\n<ul>\n<li>멀티 거래소 실시간 데이터 수집</li>\n<li>시계열 데이터 최적화 저장</li>\n<li>분산 처리 기반 대용량 데이터 처리</li>\n</ul>\n<h3 id=\"heading-10\">2. AI 기반 분석 엔진</h3>\n<ul>\n<li>딥러닝 기반 가격 예측 모델</li>\n<li>변동성 예측 및 리스크 분석</li>\n<li>포트폴리오 최적화 알고리즘</li>\n</ul>\n<h3 id=\"heading-11\">3. 투자 전략 시스템</h3>\n<ul>\n<li>실시간 포지션 분석</li>\n<li>리스크-리턴 프로파일 생성</li>\n<li>백테스팅 및 시나리오 분석</li>\n</ul>\n<h3 id=\"heading-12\">4. 실시간 모니터링</h3>\n<ul>\n<li>대화형 차트 및 지표</li>\n<li>실시간 알림 시스템</li>\n<li>커스텀 대시보드 구성</li>\n</ul>\n<hr>\n<h2 id=\"heading-13\">🔄 워크플로우 상세</h2>\n<ol>\n<li>\n<p><strong>데이터 수집 단계</strong></p>\n<ul>\n<li>거래소 API 연동 및 데이터 수집</li>\n<li>WebSocket을 통한 실시간 데이터 스트리밍</li>\n<li>데이터 정합성 검증</li>\n</ul>\n</li>\n<li>\n<p><strong>전처리 및 저장 단계</strong></p>\n<ul>\n<li>Apache Spark 기반 대규모 데이터 처리</li>\n<li>시계열 데이터 최적화 저장</li>\n<li>파생 변수 계산 (변동성, 그리스 지표 등)</li>\n</ul>\n</li>\n<li>\n<p><strong>분석 및 예측 단계</strong></p>\n<ul>\n<li>머신러닝 모델 학습 및 예측</li>\n<li>금융공학 모델 적용</li>\n<li>리스크 지표 계산</li>\n</ul>\n</li>\n<li>\n<p><strong>시각화 및 제공 단계</strong></p>\n<ul>\n<li>실시간 대시보드 업데이트</li>\n<li>사용자 맞춤형 보고서 생성</li>\n<li>알림 및 통지 발송</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"heading-14\">🎁 기대 효과</h2>\n<h3 id=\"heading-15\">1. 운영 효율성</h3>\n<ul>\n<li>자동화된 데이터 수집 및 분석</li>\n<li>실시간 시장 모니터링</li>\n<li>신속한 의사결정 지원</li>\n</ul>\n<h3 id=\"heading-16\">2. 리스크 관리</h3>\n<ul>\n<li>포트폴리오 리스크 실시간 모니터링</li>\n<li>시나리오 기반 스트레스 테스트</li>\n<li>손실 제한 전략 자동화</li>\n</ul>\n<h3 id=\"heading-17\">3. 투자 성과</h3>\n<ul>\n<li>데이터 기반 투자 전략 수립</li>\n<li>AI 기반 시장 예측</li>\n<li>체계적인 포트폴리오 관리</li>\n</ul>\n<hr>\n<h2 id=\"heading-18\">🚀 향후 발전 방향</h2>\n<ol>\n<li>\n<p><strong>기능 확장</strong></p>\n<ul>\n<li>추가 자산군 지원</li>\n<li>고급 AI 모델 도입</li>\n<li>소셜 트레이딩 기능</li>\n</ul>\n</li>\n<li>\n<p><strong>성능 개선</strong></p>\n<ul>\n<li>처리 속도 최적화</li>\n<li>확장성 강화</li>\n<li>보안 강화</li>\n</ul>\n</li>\n<li>\n<p><strong>사용자 경험</strong></p>\n<ul>\n<li>모바일 앱 개발</li>\n<li>맞춤형 알림 시스템</li>\n<li>API 서비스 제공</li>\n</ul>\n</li>\n</ol>\n<p>이 프로젝트는 금융 시장의 데이터를 효과적으로 분석하고 AI와 결합하여 실질적인 투자 인사이트를 제공하는 종합 솔루션을 목표로 합니다. 🎯</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "금융 데이터 분석 및 AI 연동 솔루션 – 기술 스택 선정과 시스템 아키텍처",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "🚀 프로젝트 개요",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "핵심 목표",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "🛠️ 기술 스택 및 아키텍처",
            "level": 2,
            "isMainTopic": true,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "1. 데이터 파이프라인",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "2. 분석 엔진",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "3. 프론트엔드",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "📊 시스템 아키텍처",
            "level": 2,
            "isMainTopic": true,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "💡 주요 기능 및 구현",
            "level": 2,
            "isMainTopic": true,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "1. 데이터 통합 시스템",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "2. AI 기반 분석 엔진",
            "level": 3,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "3. 투자 전략 시스템",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "4. 실시간 모니터링",
            "level": 3,
            "isMainTopic": false,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "🔄 워크플로우 상세",
            "level": 2,
            "isMainTopic": true,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "🎁 기대 효과",
            "level": 2,
            "isMainTopic": true,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "1. 운영 효율성",
            "level": 3,
            "isMainTopic": false,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "2. 리스크 관리",
            "level": 3,
            "isMainTopic": false,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "3. 투자 성과",
            "level": 3,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "🚀 향후 발전 방향",
            "level": 2,
            "isMainTopic": true,
            "position": 900
          }
        ]
      },
      "en": {
        "title": "Entasis Engine - Virtual Asset Data Analysis and AI Integration Solution",
        "description": "Integrated analysis system for spot/futures/options data with AI-based investment strategy",
        "content": "<h1 id=\"heading-0\">Financial Data Analysis and AI Integration Solution - Technology Stack Selection and System Architecture</h1>\n<h2 id=\"heading-1\">🚀 Project Overview</h2>\n<p>The importance of data-driven decision making in financial markets continues to grow. In particular, integrated analysis of spot, futures, and options market data combined with AI-based market prediction has become a core element of modern trading.</p>\n<p>This project automates the entire process from <strong>real-time data collection → high-performance data processing → AI-based analysis → real-time dashboard delivery</strong> to provide users with data-driven investment insights.</p>\n<h3 id=\"heading-2\">Core Objectives</h3>\n<ul>\n<li>Real-time financial data integration and analysis</li>\n<li>Implementation of AI-based market prediction models</li>\n<li>Expected return calculation by position</li>\n<li>Risk management metrics provision</li>\n<li>User-friendly dashboard implementation</li>\n</ul>\n<hr>\n<h2 id=\"heading-3\">🛠️ Technology Stack &amp; Architecture</h2>\n<h3 id=\"heading-4\">1. Data Pipeline</h3>\n<ul>\n<li><strong>Data Collection</strong>: CCXT, Deribit API</li>\n<li><strong>Data Processing</strong>: Java, Apache Spark</li>\n<li><strong>Storage</strong>: PostgreSQL, TimescaleDB</li>\n<li><strong>Workflow</strong>: Apache Airflow</li>\n</ul>\n<h3 id=\"heading-5\">2. Analysis Engine</h3>\n<ul>\n<li><strong>AI/ML</strong>: Python, TensorFlow, Scikit-learn</li>\n<li><strong>Financial Engineering</strong>: Pandas, NumPy</li>\n<li><strong>Analysis Models</strong>:\n<ul>\n<li>Black-Scholes Model (Option Pricing)</li>\n<li>Heston Model (Volatility Analysis)</li>\n<li>LSTM Networks (Time Series Prediction)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"heading-6\">3. Frontend</h3>\n<ul>\n<li><strong>Framework</strong>: Next.js</li>\n<li><strong>Visualization</strong>: D3.js</li>\n<li><strong>Real-time Communication</strong>: WebSocket</li>\n</ul>\n<h2 id=\"heading-7\">📊 System Architecture</h2>\n<h2 id=\"heading-8\">📊 시스템 아키텍처</h2>\n<pre><code class=\"language-plaintext\">+-------------------+       +-------------------+       +-------------------+\n|   Data Sources    |       |   Backend (AI &amp;   |       |   Frontend (User   |\n|-------------------|       | Financial Models) |       |     Interface)    |\n| Binance API       | ----&gt; | Python (Pandas,   | ----&gt; | Next.js           |\n| Bybit API         | ----&gt; | TensorFlow)       | ----&gt; | D3.js             |\n| Deribit API       | ----&gt; |                   | ----&gt; | Interactive Charts|\n+-------------------+       +-------------------+       +-------------------+\n\n+-------------------+\n| Database          |\n|-------------------|\n| PostgreSQL        |\n| TimescaleDB       |\n+-------------------+\n\n+--------------------------------------------+\n| Workflow Orchestration                     |\n|--------------------------------------------|\n| Apache Airflow                             |\n+--------------------------------------------+\n</code></pre>\n<hr>\n<h2 id=\"heading-9\">💡 Key Features &amp; Implementation</h2>\n<h3 id=\"heading-10\">1. Data Integration System</h3>\n<ul>\n<li>Multi-exchange real-time data collection</li>\n<li>Time series data optimization storage</li>\n<li>Distributed processing for large-scale data</li>\n</ul>\n<h3 id=\"heading-11\">2. AI-based Analysis Engine</h3>\n<ul>\n<li>Deep learning-based price prediction models</li>\n<li>Volatility prediction and risk analysis</li>\n<li>Portfolio optimization algorithms</li>\n</ul>\n<h3 id=\"heading-12\">3. Investment Strategy System</h3>\n<ul>\n<li>Real-time position analysis</li>\n<li>Risk-return profile generation</li>\n<li>Backtesting and scenario analysis</li>\n</ul>\n<h3 id=\"heading-13\">4. Real-time Monitoring</h3>\n<ul>\n<li>Interactive charts and indicators</li>\n<li>Real-time alert system</li>\n<li>Custom dashboard configuration</li>\n</ul>\n<hr>\n<h2 id=\"heading-14\">🔄 Detailed Workflow</h2>\n<ol>\n<li>\n<p><strong>Data Collection Phase</strong></p>\n<ul>\n<li>Exchange API integration and data collection</li>\n<li>Real-time data streaming via WebSocket</li>\n<li>Data consistency validation</li>\n</ul>\n</li>\n<li>\n<p><strong>Preprocessing &amp; Storage Phase</strong></p>\n<ul>\n<li>Large-scale data processing with Apache Spark</li>\n<li>Time series data optimization storage</li>\n<li>Derivative variable calculation (volatility, Greeks, etc.)</li>\n</ul>\n</li>\n<li>\n<p><strong>Analysis &amp; Prediction Phase</strong></p>\n<ul>\n<li>Machine learning model training and prediction</li>\n<li>Financial engineering model application</li>\n<li>Risk metric calculation</li>\n</ul>\n</li>\n<li>\n<p><strong>Visualization &amp; Delivery Phase</strong></p>\n<ul>\n<li>Real-time dashboard updates</li>\n<li>Customized report generation</li>\n<li>Alert and notification delivery</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"heading-15\">🎁 Expected Benefits</h2>\n<h3 id=\"heading-16\">1. Operational Efficiency</h3>\n<ul>\n<li>Automated data collection and analysis</li>\n<li>Real-time market monitoring</li>\n<li>Quick decision support</li>\n</ul>\n<h3 id=\"heading-17\">2. Risk Management</h3>\n<ul>\n<li>Real-time portfolio risk monitoring</li>\n<li>Scenario-based stress testing</li>\n<li>Automated loss limitation strategies</li>\n</ul>\n<h3 id=\"heading-18\">3. Investment Performance</h3>\n<ul>\n<li>Data-driven investment strategy development</li>\n<li>AI-based market prediction</li>\n<li>Systematic portfolio management</li>\n</ul>\n<hr>\n<h2 id=\"heading-19\">🚀 Future Development</h2>\n<ol>\n<li>\n<p><strong>Feature Expansion</strong></p>\n<ul>\n<li>Additional asset class support</li>\n<li>Advanced AI model integration</li>\n<li>Social trading functionality</li>\n</ul>\n</li>\n<li>\n<p><strong>Performance Enhancement</strong></p>\n<ul>\n<li>Processing speed optimization</li>\n<li>Scalability improvement</li>\n<li>Security enhancement</li>\n</ul>\n</li>\n<li>\n<p><strong>User Experience</strong></p>\n<ul>\n<li>Mobile app development</li>\n<li>Personalized notification system</li>\n<li>API service provision</li>\n</ul>\n</li>\n</ol>\n<p>This project aims to be a comprehensive solution that effectively analyzes financial market data and combines it with AI to provide practical investment insights. 🎯</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "Financial Data Analysis and AI Integration Solution - Technology Stack Selection and System Architecture",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "🚀 Project Overview",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "Core Objectives",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "🛠️ Technology Stack & Architecture",
            "level": 2,
            "isMainTopic": true,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "1. Data Pipeline",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "2. Analysis Engine",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "3. Frontend",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "📊 System Architecture",
            "level": 2,
            "isMainTopic": true,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "📊 시스템 아키텍처",
            "level": 2,
            "isMainTopic": true,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "💡 Key Features & Implementation",
            "level": 2,
            "isMainTopic": true,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "1. Data Integration System",
            "level": 3,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "2. AI-based Analysis Engine",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "3. Investment Strategy System",
            "level": 3,
            "isMainTopic": false,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "4. Real-time Monitoring",
            "level": 3,
            "isMainTopic": false,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "🔄 Detailed Workflow",
            "level": 2,
            "isMainTopic": true,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "🎁 Expected Benefits",
            "level": 2,
            "isMainTopic": true,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "1. Operational Efficiency",
            "level": 3,
            "isMainTopic": false,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "2. Risk Management",
            "level": 3,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "3. Investment Performance",
            "level": 3,
            "isMainTopic": false,
            "position": 900
          },
          {
            "id": "heading-19",
            "text": "🚀 Future Development",
            "level": 2,
            "isMainTopic": true,
            "position": 950
          }
        ]
      }
    },
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_10",
    "title": "Entasis Engine - 테스트 계획서",
    "content": "\n# 금융 데이터 분석 시스템 테스트 계획서\n\n## 🎯 테스트 전략 개요\n\n### 1. 테스트 범위\n\n```mermaid\ngraph TD\n    A[단위 테스트] --> B[통합 테스트]\n    B --> C[시스템 테스트]\n    C --> D[성능 테스트]\n    D --> E[보안 테스트]\n    E --> F[사용자 수용 테스트]\n```\n\n### 2. 테스트 환경\n\n```yaml\nenvironments:\n  development:\n    type: local\n    database: h2\n    cache: local-redis\n\n  testing:\n    type: kubernetes\n    namespace: test\n    database: test-timescaledb\n    cache: test-redis\n\n  staging:\n    type: kubernetes\n    namespace: staging\n    database: staging-timescaledb\n    cache: staging-redis\n\n  production:\n    type: kubernetes\n    namespace: production\n    database: prod-timescaledb\n    cache: prod-redis\n```\n\n## 🧪 단위 테스트\n\n### 1. 백엔드 테스트\n\n```java\n@Test\npublic void testMarketDataProcessing() {\n    // Given\n    MarketData data = new MarketData(\n        \"BTC-USDT\",\n        new BigDecimal(\"50000.00\"),\n        new BigDecimal(\"100.0\"),\n        LocalDateTime.now()\n    );\n\n    // When\n    ProcessedData result = marketDataService.process(data);\n\n    // Then\n    assertNotNull(result);\n    assertEquals(data.getSymbol(), result.getSymbol());\n    assertTrue(result.isValid());\n}\n```\n\n### 2. AI 모델 테스트\n\n```python\ndef test_price_prediction():\n    # Given\n    model = PricePredictionModel()\n    test_data = load_test_data()\n\n    # When\n    predictions = model.predict(test_data)\n\n    # Then\n    assert predictions.shape == (len(test_data), 1)\n    assert np.all(predictions > 0)  # 가격은 항상 양수\n    assert calculate_mape(test_data.y, predictions) < 0.1  # MAPE < 10%\n```\n\n## 🔄 통합 테스트\n\n### 1. API 테스트\n\n```typescript\ndescribe(\"Trading API Integration Tests\", () => {\n  it(\"should place market order successfully\", async () => {\n    // Given\n    const order = {\n      symbol: \"BTC-USDT\",\n      type: \"MARKET\",\n      side: \"BUY\",\n      quantity: \"0.1\",\n    };\n\n    // When\n    const response = await api.post(\"/v1/orders\", order);\n\n    // Then\n    expect(response.status).toBe(201);\n    expect(response.data.orderId).toBeDefined();\n    expect(response.data.status).toBe(\"FILLED\");\n  });\n});\n```\n\n### 2. 데이터 파이프라인 테스트\n\n```python\ndef test_data_pipeline_integration():\n    # Given\n    test_data = generate_test_market_data()\n\n    # When\n    pipeline.process(test_data)\n\n    # Then\n    processed_data = db.query_latest_data()\n    assert_data_integrity(test_data, processed_data)\n    assert_processing_latency() < timedelta(milliseconds=100)\n```\n\n## 📊 성능 테스트\n\n### 1. 부하 테스트\n\n```javascript\nimport { check } from \"k6\";\nimport http from \"k6/http\";\n\nexport const options = {\n  scenarios: {\n    market_data: {\n      executor: \"ramping-vus\",\n      startVUs: 0,\n      stages: [\n        { duration: \"2m\", target: 100 },\n        { duration: \"5m\", target: 100 },\n        { duration: \"2m\", target: 0 },\n      ],\n      gracefulRampDown: \"30s\",\n    },\n  },\n  thresholds: {\n    http_req_duration: [\"p(95)<500\"],\n  },\n};\n\nexport default function () {\n  const response = http.get(\"http://api.example.com/v1/market/price/BTC-USDT\");\n  check(response, {\n    \"is status 200\": (r) => r.status === 200,\n    \"response time < 500ms\": (r) => r.timings.duration < 500,\n  });\n}\n```\n\n### 2. 스트레스 테스트\n\n```yaml\nstress_test_scenarios:\n  - name: \"급격한 시장 변동 시뮬레이션\"\n    duration: \"30m\"\n    data_rate: \"10000 events/second\"\n    expectations:\n      - max_latency: 100ms\n      - error_rate: < 0.1%\n      - cpu_usage: < 80%\n      - memory_usage: < 85%\n```\n\n## 🔒 보안 테스트\n\n### 1. 취약점 스캔\n\n```yaml\nsecurity_scan:\n  tools:\n    - name: \"OWASP ZAP\"\n      target: \"https://api.example.com\"\n      rules:\n        - sql-injection\n        - xss\n        - csrf\n\n    - name: \"SonarQube\"\n      target: \"source-code\"\n      quality_gates:\n        security_rating: A\n        security_review_rating: A\n```\n\n### 2. 침투 테스트\n\n```yaml\npenetration_test:\n  scenarios:\n    - name: \"인증 우회 시도\"\n      steps:\n        - jwt_token_manipulation\n        - session_hijacking\n        - brute_force_attack\n\n    - name: \"권한 상승 시도\"\n      steps:\n        - role_manipulation\n        - horizontal_privilege_escalation\n```\n\n## 📱 사용자 수용 테스트\n\n### 1. 시나리오 테스트\n\n```typescript\ndescribe(\"Trading Workflow\", () => {\n  it(\"should complete basic trading cycle\", async () => {\n    // 1. 로그인\n    await user.login();\n\n    // 2. 시장 데이터 확인\n    const marketData = await dashboard.getMarketData();\n    expect(marketData).toBeValid();\n\n    // 3. 매매 신호 확인\n    const signal = await analysis.getTradingSignal();\n    expect(signal.confidence).toBeGreaterThan(0.7);\n\n    // 4. 주문 실행\n    const order = await trading.placeOrder(signal);\n    expect(order.status).toBe(\"SUCCESS\");\n  });\n});\n```\n\n### 2. 사용성 테스트\n\n```yaml\nusability_test_cases:\n  - scenario: \"첫 거래 실행\"\n    user_group: \"초보 트레이더\"\n    success_criteria:\n      - max_time: 5분\n      - max_clicks: 7\n      - error_rate: 0%\n\n  - scenario: \"포트폴리오 분석\"\n    user_group: \"전문 트레이더\"\n    success_criteria:\n      - data_accuracy: 100%\n      - refresh_rate: < 1초\n      - analysis_depth: 모든 지표 포함\n```\n\n## 📈 품질 메트릭\n\n### 1. 코드 품질\n\n```yaml\nquality_metrics:\n  code_coverage:\n    unit_tests: > 80%\n    integration_tests: > 70%\n\n  complexity:\n    cyclomatic: < 15\n    cognitive: < 10\n\n  duplication:\n    threshold: < 5%\n```\n\n### 2. 성능 지표\n\n```yaml\nperformance_metrics:\n  api_response_time:\n    p95: < 500ms\n    p99: < 1000ms\n\n  data_processing:\n    latency: < 100ms\n    throughput: > 5000 events/second\n\n  model_inference:\n    latency: < 200ms\n    accuracy: > 85%\n```\n\n이 문서는 금융 데이터 분석 시스템의 테스트 전략과 품질 보증 계획을 제공합니다. 시스템의 안정성과 신뢰성을 보장하기 위해 지속적으로 업데이트됩니다. 🚀\n",
    "date": "2025-02-13",
    "category": "projects",
    "tags": [
      "testing",
      "qa",
      "unit-test",
      "integration-test",
      "performance-test",
      "security-test",
      "automation"
    ],
    "thumbnail": "/images/cryptocurrency.jpg",
    "translations": {
      "ko": {
        "title": "Entasis Engine - 테스트 계획서",
        "description": "가상자산 데이터 분석 시스템의 테스트 전략 및 품질 보증 계획",
        "content": "<h1 id=\"heading-0\">금융 데이터 분석 시스템 테스트 계획서</h1>\n<h2 id=\"heading-1\">🎯 테스트 전략 개요</h2>\n<h3 id=\"heading-2\">1. 테스트 범위</h3>\n<pre><code class=\"language-mermaid\">graph TD\n    A[단위 테스트] --&gt; B[통합 테스트]\n    B --&gt; C[시스템 테스트]\n    C --&gt; D[성능 테스트]\n    D --&gt; E[보안 테스트]\n    E --&gt; F[사용자 수용 테스트]\n</code></pre>\n<h3 id=\"heading-3\">2. 테스트 환경</h3>\n<pre><code class=\"language-yaml\">environments:\n  development:\n    type: local\n    database: h2\n    cache: local-redis\n\n  testing:\n    type: kubernetes\n    namespace: test\n    database: test-timescaledb\n    cache: test-redis\n\n  staging:\n    type: kubernetes\n    namespace: staging\n    database: staging-timescaledb\n    cache: staging-redis\n\n  production:\n    type: kubernetes\n    namespace: production\n    database: prod-timescaledb\n    cache: prod-redis\n</code></pre>\n<h2 id=\"heading-4\">🧪 단위 테스트</h2>\n<h3 id=\"heading-5\">1. 백엔드 테스트</h3>\n<pre><code class=\"language-java\">@Test\npublic void testMarketDataProcessing() {\n    // Given\n    MarketData data = new MarketData(\n        \"BTC-USDT\",\n        new BigDecimal(\"50000.00\"),\n        new BigDecimal(\"100.0\"),\n        LocalDateTime.now()\n    );\n\n    // When\n    ProcessedData result = marketDataService.process(data);\n\n    // Then\n    assertNotNull(result);\n    assertEquals(data.getSymbol(), result.getSymbol());\n    assertTrue(result.isValid());\n}\n</code></pre>\n<h3 id=\"heading-6\">2. AI 모델 테스트</h3>\n<pre><code class=\"language-python\">def test_price_prediction():\n    # Given\n    model = PricePredictionModel()\n    test_data = load_test_data()\n\n    # When\n    predictions = model.predict(test_data)\n\n    # Then\n    assert predictions.shape == (len(test_data), 1)\n    assert np.all(predictions &gt; 0)  # 가격은 항상 양수\n    assert calculate_mape(test_data.y, predictions) &lt; 0.1  # MAPE &lt; 10%\n</code></pre>\n<h2 id=\"heading-7\">🔄 통합 테스트</h2>\n<h3 id=\"heading-8\">1. API 테스트</h3>\n<pre><code class=\"language-typescript\">describe(\"Trading API Integration Tests\", () =&gt; {\n  it(\"should place market order successfully\", async () =&gt; {\n    // Given\n    const order = {\n      symbol: \"BTC-USDT\",\n      type: \"MARKET\",\n      side: \"BUY\",\n      quantity: \"0.1\",\n    };\n\n    // When\n    const response = await api.post(\"/v1/orders\", order);\n\n    // Then\n    expect(response.status).toBe(201);\n    expect(response.data.orderId).toBeDefined();\n    expect(response.data.status).toBe(\"FILLED\");\n  });\n});\n</code></pre>\n<h3 id=\"heading-9\">2. 데이터 파이프라인 테스트</h3>\n<pre><code class=\"language-python\">def test_data_pipeline_integration():\n    # Given\n    test_data = generate_test_market_data()\n\n    # When\n    pipeline.process(test_data)\n\n    # Then\n    processed_data = db.query_latest_data()\n    assert_data_integrity(test_data, processed_data)\n    assert_processing_latency() &lt; timedelta(milliseconds=100)\n</code></pre>\n<h2 id=\"heading-10\">📊 성능 테스트</h2>\n<h3 id=\"heading-11\">1. 부하 테스트</h3>\n<pre><code class=\"language-javascript\">import { check } from \"k6\";\nimport http from \"k6/http\";\n\nexport const options = {\n  scenarios: {\n    market_data: {\n      executor: \"ramping-vus\",\n      startVUs: 0,\n      stages: [\n        { duration: \"2m\", target: 100 },\n        { duration: \"5m\", target: 100 },\n        { duration: \"2m\", target: 0 },\n      ],\n      gracefulRampDown: \"30s\",\n    },\n  },\n  thresholds: {\n    http_req_duration: [\"p(95)&lt;500\"],\n  },\n};\n\nexport default function () {\n  const response = http.get(\"http://api.example.com/v1/market/price/BTC-USDT\");\n  check(response, {\n    \"is status 200\": (r) =&gt; r.status === 200,\n    \"response time &lt; 500ms\": (r) =&gt; r.timings.duration &lt; 500,\n  });\n}\n</code></pre>\n<h3 id=\"heading-12\">2. 스트레스 테스트</h3>\n<pre><code class=\"language-yaml\">stress_test_scenarios:\n  - name: \"급격한 시장 변동 시뮬레이션\"\n    duration: \"30m\"\n    data_rate: \"10000 events/second\"\n    expectations:\n      - max_latency: 100ms\n      - error_rate: &lt; 0.1%\n      - cpu_usage: &lt; 80%\n      - memory_usage: &lt; 85%\n</code></pre>\n<h2 id=\"heading-13\">🔒 보안 테스트</h2>\n<h3 id=\"heading-14\">1. 취약점 스캔</h3>\n<pre><code class=\"language-yaml\">security_scan:\n  tools:\n    - name: \"OWASP ZAP\"\n      target: \"https://api.example.com\"\n      rules:\n        - sql-injection\n        - xss\n        - csrf\n\n    - name: \"SonarQube\"\n      target: \"source-code\"\n      quality_gates:\n        security_rating: A\n        security_review_rating: A\n</code></pre>\n<h3 id=\"heading-15\">2. 침투 테스트</h3>\n<pre><code class=\"language-yaml\">penetration_test:\n  scenarios:\n    - name: \"인증 우회 시도\"\n      steps:\n        - jwt_token_manipulation\n        - session_hijacking\n        - brute_force_attack\n\n    - name: \"권한 상승 시도\"\n      steps:\n        - role_manipulation\n        - horizontal_privilege_escalation\n</code></pre>\n<h2 id=\"heading-16\">📱 사용자 수용 테스트</h2>\n<h3 id=\"heading-17\">1. 시나리오 테스트</h3>\n<pre><code class=\"language-typescript\">describe(\"Trading Workflow\", () =&gt; {\n  it(\"should complete basic trading cycle\", async () =&gt; {\n    // 1. 로그인\n    await user.login();\n\n    // 2. 시장 데이터 확인\n    const marketData = await dashboard.getMarketData();\n    expect(marketData).toBeValid();\n\n    // 3. 매매 신호 확인\n    const signal = await analysis.getTradingSignal();\n    expect(signal.confidence).toBeGreaterThan(0.7);\n\n    // 4. 주문 실행\n    const order = await trading.placeOrder(signal);\n    expect(order.status).toBe(\"SUCCESS\");\n  });\n});\n</code></pre>\n<h3 id=\"heading-18\">2. 사용성 테스트</h3>\n<pre><code class=\"language-yaml\">usability_test_cases:\n  - scenario: \"첫 거래 실행\"\n    user_group: \"초보 트레이더\"\n    success_criteria:\n      - max_time: 5분\n      - max_clicks: 7\n      - error_rate: 0%\n\n  - scenario: \"포트폴리오 분석\"\n    user_group: \"전문 트레이더\"\n    success_criteria:\n      - data_accuracy: 100%\n      - refresh_rate: &lt; 1초\n      - analysis_depth: 모든 지표 포함\n</code></pre>\n<h2 id=\"heading-19\">📈 품질 메트릭</h2>\n<h3 id=\"heading-20\">1. 코드 품질</h3>\n<pre><code class=\"language-yaml\">quality_metrics:\n  code_coverage:\n    unit_tests: &gt; 80%\n    integration_tests: &gt; 70%\n\n  complexity:\n    cyclomatic: &lt; 15\n    cognitive: &lt; 10\n\n  duplication:\n    threshold: &lt; 5%\n</code></pre>\n<h3 id=\"heading-21\">2. 성능 지표</h3>\n<pre><code class=\"language-yaml\">performance_metrics:\n  api_response_time:\n    p95: &lt; 500ms\n    p99: &lt; 1000ms\n\n  data_processing:\n    latency: &lt; 100ms\n    throughput: &gt; 5000 events/second\n\n  model_inference:\n    latency: &lt; 200ms\n    accuracy: &gt; 85%\n</code></pre>\n<p>이 문서는 금융 데이터 분석 시스템의 테스트 전략과 품질 보증 계획을 제공합니다. 시스템의 안정성과 신뢰성을 보장하기 위해 지속적으로 업데이트됩니다. 🚀</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "금융 데이터 분석 시스템 테스트 계획서",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "🎯 테스트 전략 개요",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "1. 테스트 범위",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "2. 테스트 환경",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "🧪 단위 테스트",
            "level": 2,
            "isMainTopic": true,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "1. 백엔드 테스트",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "2. AI 모델 테스트",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "🔄 통합 테스트",
            "level": 2,
            "isMainTopic": true,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "1. API 테스트",
            "level": 3,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "2. 데이터 파이프라인 테스트",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "📊 성능 테스트",
            "level": 2,
            "isMainTopic": true,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "1. 부하 테스트",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "2. 스트레스 테스트",
            "level": 3,
            "isMainTopic": false,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "🔒 보안 테스트",
            "level": 2,
            "isMainTopic": true,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "1. 취약점 스캔",
            "level": 3,
            "isMainTopic": false,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "2. 침투 테스트",
            "level": 3,
            "isMainTopic": false,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "📱 사용자 수용 테스트",
            "level": 2,
            "isMainTopic": true,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "1. 시나리오 테스트",
            "level": 3,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "2. 사용성 테스트",
            "level": 3,
            "isMainTopic": false,
            "position": 900
          },
          {
            "id": "heading-19",
            "text": "📈 품질 메트릭",
            "level": 2,
            "isMainTopic": true,
            "position": 950
          },
          {
            "id": "heading-20",
            "text": "1. 코드 품질",
            "level": 3,
            "isMainTopic": false,
            "position": 1000
          },
          {
            "id": "heading-21",
            "text": "2. 성능 지표",
            "level": 3,
            "isMainTopic": false,
            "position": 1050
          }
        ]
      },
      "en": {
        "title": "Entasis Engine - Test Plan",
        "description": "Test strategy and quality assurance plan for digital asset data analysis system",
        "content": "<h1 id=\"heading-0\">Financial Data Analysis System Test Plan</h1>\n<h2 id=\"heading-1\">🎯 Test Strategy Overview</h2>\n<h3 id=\"heading-2\">1. Test Scope</h3>\n<pre><code class=\"language-mermaid\">graph TD\n    A[Unit Test] --&gt; B[Integration Test]\n    B --&gt; C[System Test]\n    C --&gt; D[Performance Test]\n    D --&gt; E[Security Test]\n    E --&gt; F[User Acceptance Test]\n</code></pre>\n<h3 id=\"heading-3\">2. Test Environment</h3>\n<pre><code class=\"language-yaml\">environments:\n  development:\n    type: local\n    database: h2\n    cache: local-redis\n\n  testing:\n    type: kubernetes\n    namespace: test\n    database: test-timescaledb\n    cache: test-redis\n\n  staging:\n    type: kubernetes\n    namespace: staging\n    database: staging-timescaledb\n    cache: staging-redis\n\n  production:\n    type: kubernetes\n    namespace: production\n    database: prod-timescaledb\n    cache: prod-redis\n</code></pre>\n<h2 id=\"heading-4\">🧪 Unit Test</h2>\n<h3 id=\"heading-5\">1. Backend Test</h3>\n<pre><code class=\"language-java\">@Test\npublic void testMarketDataProcessing() {\n    // Given\n    MarketData data = new MarketData(\n        \"BTC-USDT\",\n        new BigDecimal(\"50000.00\"),\n        new BigDecimal(\"100.0\"),\n        LocalDateTime.now()\n    );\n\n    // When\n    ProcessedData result = marketDataService.process(data);\n\n    // Then\n    assertNotNull(result);\n    assertEquals(data.getSymbol(), result.getSymbol());\n    assertTrue(result.isValid());\n}\n</code></pre>\n<h3 id=\"heading-6\">2. AI Model Test</h3>\n<pre><code class=\"language-python\">def test_price_prediction():\n    # Given\n    model = PricePredictionModel()\n    test_data = load_test_data()\n\n    # When\n    predictions = model.predict(test_data)\n\n    # Then\n    assert predictions.shape == (len(test_data), 1)\n    assert np.all(predictions &gt; 0)  # Price is always positive\n    assert calculate_mape(test_data.y, predictions) &lt; 0.1  # MAPE &lt; 10%\n</code></pre>\n<h2 id=\"heading-7\">🔄 Integration Test</h2>\n<h3 id=\"heading-8\">1. API Test</h3>\n<pre><code class=\"language-typescript\">describe(\"Trading API Integration Tests\", () =&gt; {\n  it(\"should place market order successfully\", async () =&gt; {\n    // Given\n    const order = {\n      symbol: \"BTC-USDT\",\n      type: \"MARKET\",\n      side: \"BUY\",\n      quantity: \"0.1\",\n    };\n\n    // When\n    const response = await api.post(\"/v1/orders\", order);\n\n    // Then\n    expect(response.status).toBe(201);\n    expect(response.data.orderId).toBeDefined();\n    expect(response.data.status).toBe(\"FILLED\");\n  });\n});\n</code></pre>\n<h3 id=\"heading-9\">2. Data Pipeline Test</h3>\n<pre><code class=\"language-python\">def test_data_pipeline_integration():\n    # Given\n    test_data = generate_test_market_data()\n\n    # When\n    pipeline.process(test_data)\n\n    # Then\n    processed_data = db.query_latest_data()\n    assert_data_integrity(test_data, processed_data)\n    assert_processing_latency() &lt; timedelta(milliseconds=100)\n</code></pre>\n<h2 id=\"heading-10\">📊 Performance Test</h2>\n<h3 id=\"heading-11\">1. Load Test</h3>\n<pre><code class=\"language-javascript\">import { check } from \"k6\";\nimport http from \"k6/http\";\n\nexport const options = {\n  scenarios: {\n    market_data: {\n      executor: \"ramping-vus\",\n      startVUs: 0,\n      stages: [\n        { duration: \"2m\", target: 100 },\n        { duration: \"5m\", target: 100 },\n        { duration: \"2m\", target: 0 },\n      ],\n      gracefulRampDown: \"30s\",\n    },\n  },\n  thresholds: {\n    http_req_duration: [\"p(95)&lt;500\"],\n  },\n};\n\nexport default function () {\n  const response = http.get(\"http://api.example.com/v1/market/price/BTC-USDT\");\n  check(response, {\n    \"is status 200\": (r) =&gt; r.status === 200,\n    \"response time &lt; 500ms\": (r) =&gt; r.timings.duration &lt; 500,\n  });\n}\n</code></pre>\n<h3 id=\"heading-12\">2. Stress Test</h3>\n<pre><code class=\"language-yaml\">stress_test_scenarios:\n  - name: \"급격한 시장 변동 시뮬레이션\"\n    duration: \"30m\"\n    data_rate: \"10000 events/second\"\n    expectations:\n      - max_latency: 100ms\n      - error_rate: &lt; 0.1%\n      - cpu_usage: &lt; 80%\n      - memory_usage: &lt; 85%\n</code></pre>\n<h2 id=\"heading-13\">🔒 Security Test</h2>\n<h3 id=\"heading-14\">1. Vulnerability Scan</h3>\n<pre><code class=\"language-yaml\">security_scan:\n  tools:\n    - name: \"OWASP ZAP\"\n      target: \"https://api.example.com\"\n      rules:\n        - sql-injection\n        - xss\n        - csrf\n\n    - name: \"SonarQube\"\n      target: \"source-code\"\n      quality_gates:\n        security_rating: A\n        security_review_rating: A\n</code></pre>\n<h3 id=\"heading-15\">2. Penetration Test</h3>\n<pre><code class=\"language-yaml\">penetration_test:\n  scenarios:\n    - name: \"인증 우회 시도\"\n      steps:\n        - jwt_token_manipulation\n        - session_hijacking\n        - brute_force_attack\n\n    - name: \"권한 상승 시도\"\n      steps:\n        - role_manipulation\n        - horizontal_privilege_escalation\n</code></pre>\n<h2 id=\"heading-16\">📱 User Acceptance Test</h2>\n<h3 id=\"heading-17\">1. Scenario Test</h3>\n<pre><code class=\"language-typescript\">describe(\"Trading Workflow\", () =&gt; {\n  it(\"should complete basic trading cycle\", async () =&gt; {\n    // 1. Login\n    await user.login();\n\n    // 2. Check market data\n    const marketData = await dashboard.getMarketData();\n    expect(marketData).toBeValid();\n\n    // 3. Check trading signal\n    const signal = await analysis.getTradingSignal();\n    expect(signal.confidence).toBeGreaterThan(0.7);\n\n    // 4. Execute order\n    const order = await trading.placeOrder(signal);\n    expect(order.status).toBe(\"SUCCESS\");\n  });\n});\n</code></pre>\n<h3 id=\"heading-18\">2. Usability Test</h3>\n<pre><code class=\"language-yaml\">usability_test_cases:\n  - scenario: \"First trading execution\"\n    user_group: \"Beginner trader\"\n    success_criteria:\n      - max_time: 5 minutes\n      - max_clicks: 7\n      - error_rate: 0%\n\n  - scenario: \"Portfolio analysis\"\n    user_group: \"Expert trader\"\n    success_criteria:\n      - data_accuracy: 100%\n      - refresh_rate: &lt; 1 second\n      - analysis_depth: All indicators included\n</code></pre>\n<h2 id=\"heading-19\">📈 Quality Metrics</h2>\n<h3 id=\"heading-20\">1. Code Quality</h3>\n<pre><code class=\"language-yaml\">quality_metrics:\n  code_coverage:\n    unit_tests: &gt; 80%\n    integration_tests: &gt; 70%\n\n  complexity:\n    cyclomatic: &lt; 15\n    cognitive: &lt; 10\n\n  duplication:\n    threshold: &lt; 5%\n</code></pre>\n<h3 id=\"heading-21\">2. Performance Metrics</h3>\n<pre><code class=\"language-yaml\">performance_metrics:\n  api_response_time:\n    p95: &lt; 500ms\n    p99: &lt; 1000ms\n\n  data_processing:\n    latency: &lt; 100ms\n    throughput: &gt; 5000 events/second\n\n  model_inference:\n    latency: &lt; 200ms\n    accuracy: &gt; 85%\n</code></pre>\n<p>This document provides the test strategy and quality assurance plan for the financial data analysis system. It will be updated continuously to ensure the stability and reliability of the system. 🚀</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "Financial Data Analysis System Test Plan",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "🎯 Test Strategy Overview",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "1. Test Scope",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "2. Test Environment",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "🧪 Unit Test",
            "level": 2,
            "isMainTopic": true,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "1. Backend Test",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "2. AI Model Test",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "🔄 Integration Test",
            "level": 2,
            "isMainTopic": true,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "1. API Test",
            "level": 3,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "2. Data Pipeline Test",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "📊 Performance Test",
            "level": 2,
            "isMainTopic": true,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "1. Load Test",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "2. Stress Test",
            "level": 3,
            "isMainTopic": false,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "🔒 Security Test",
            "level": 2,
            "isMainTopic": true,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "1. Vulnerability Scan",
            "level": 3,
            "isMainTopic": false,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "2. Penetration Test",
            "level": 3,
            "isMainTopic": false,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "📱 User Acceptance Test",
            "level": 2,
            "isMainTopic": true,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "1. Scenario Test",
            "level": 3,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "2. Usability Test",
            "level": 3,
            "isMainTopic": false,
            "position": 900
          },
          {
            "id": "heading-19",
            "text": "📈 Quality Metrics",
            "level": 2,
            "isMainTopic": true,
            "position": 950
          },
          {
            "id": "heading-20",
            "text": "1. Code Quality",
            "level": 3,
            "isMainTopic": false,
            "position": 1000
          },
          {
            "id": "heading-21",
            "text": "2. Performance Metrics",
            "level": 3,
            "isMainTopic": false,
            "position": 1050
          }
        ]
      }
    },
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_11",
    "title": "Entasis Engine - 운영 매뉴얼",
    "content": "\n# 금융 데이터 분석 시스템 운영 매뉴얼\n\n## 📊 시스템 모니터링\n\n### 1. 핵심 메트릭 모니터링\n\n```yaml\nmonitoring_metrics:\n  system_health:\n    - cpu_usage:\n        warning: 70%\n        critical: 85%\n    - memory_usage:\n        warning: 75%\n        critical: 90%\n    - disk_usage:\n        warning: 80%\n        critical: 90%\n\n  application_metrics:\n    - api_latency:\n        p95_threshold: 500ms\n        p99_threshold: 1000ms\n    - error_rate:\n        threshold: 0.1%\n    - request_rate:\n        min: 100/s\n        max: 10000/s\n```\n\n### 2. 알림 설정\n\n```yaml\nalert_rules:\n  high_priority:\n    - condition: \"error_rate > 1%\"\n      duration: \"5m\"\n      channels:\n        - slack: \"#alerts-critical\"\n        - pagerduty: \"trading-team\"\n\n  medium_priority:\n    - condition: \"api_latency_p95 > 500ms\"\n      duration: \"10m\"\n      channels:\n        - slack: \"#alerts-warning\"\n\n  low_priority:\n    - condition: \"cpu_usage > 70%\"\n      duration: \"15m\"\n      channels:\n        - slack: \"#alerts-info\"\n```\n\n## 🔄 일상 운영 작업\n\n### 1. 데이터베이스 관리\n\n```sql\n-- 일일 유지보수 쿼리\n-- 1. 인덱스 재구축\nREINDEX DATABASE trading_db;\n\n-- 2. 통계 업데이트\nANALYZE VERBOSE;\n\n-- 3. 오래된 데이터 아카이빙\nINSERT INTO market_data_archive\nSELECT * FROM market_data\nWHERE timestamp < NOW() - INTERVAL '3 months';\n\nDELETE FROM market_data\nWHERE timestamp < NOW() - INTERVAL '3 months';\n```\n\n### 2. 로그 관리\n\n```yaml\nlog_rotation:\n  application_logs:\n    retention: 30d\n    max_size: 10GB\n    compression: true\n\n  system_logs:\n    retention: 90d\n    max_size: 50GB\n    compression: true\n\n  audit_logs:\n    retention: 365d\n    max_size: 100GB\n    compression: true\n    encryption: true\n```\n\n## 🚨 장애 대응\n\n### 1. 장애 레벨 정의\n\n```yaml\nincident_levels:\n  p1_critical:\n    description: \"서비스 완전 중단\"\n    response_time: \"15분 이내\"\n    resolution_time: \"2시간 이내\"\n    escalation:\n      - devops_lead\n      - system_architect\n      - cto\n\n  p2_major:\n    description: \"주요 기능 장애\"\n    response_time: \"30분 이내\"\n    resolution_time: \"4시간 이내\"\n    escalation:\n      - devops_engineer\n      - team_lead\n\n  p3_minor:\n    description: \"부분 기능 장애\"\n    response_time: \"2시간 이내\"\n    resolution_time: \"8시간 이내\"\n    escalation:\n      - on_call_engineer\n```\n\n### 2. 장애 대응 절차\n\n```mermaid\ngraph TD\n    A[장애 감지] --> B{심각도 판단}\n    B -->|P1| C[긴급 대응팀 소집]\n    B -->|P2| D[담당자 할당]\n    B -->|P3| E[일반 처리]\n    C --> F[상황 보고]\n    D --> F\n    E --> F\n    F --> G[원인 분석]\n    G --> H[해결 방안 실행]\n    H --> I[복구 확인]\n    I --> J[사후 분석]\n```\n\n## 💾 백업 및 복구\n\n### 1. 백업 정책\n\n```yaml\nbackup_policy:\n  full_backup:\n    schedule: \"매주 일요일 01:00\"\n    retention: \"4주\"\n    type: \"스냅샷\"\n\n  incremental_backup:\n    schedule: \"매일 01:00\"\n    retention: \"7일\"\n    type: \"WAL\"\n\n  transaction_logs:\n    archive: true\n    retention: \"30일\"\n```\n\n### 2. 복구 절차\n\n```bash\n#!/bin/bash\n\n# 1. 서비스 중지\nkubectl scale deployment trading-api --replicas=0\n\n# 2. 데이터베이스 복구\npg_restore -h $DB_HOST -U $DB_USER -d trading_db backup.dump\n\n# 3. 데이터 정합성 검증\npython verify_data_integrity.py\n\n# 4. 서비스 재시작\nkubectl scale deployment trading-api --replicas=3\n\n# 5. 상태 확인\nkubectl get pods -l app=trading-api\n```\n\n## 🔒 보안 관리\n\n### 1. 접근 제어\n\n```yaml\naccess_control:\n  production:\n    ssh_access:\n      - role: admin\n        auth: public_key + 2FA\n      - role: developer\n        auth: public_key + 2FA\n        restrictions:\n          - read_only\n          - audit_logging\n\n    kubernetes:\n      - role: cluster-admin\n        users: [\"devops-lead\"]\n      - role: developer\n        users: [\"dev-team\"]\n        namespace: [\"dev\", \"staging\"]\n```\n\n### 2. 보안 점검\n\n```yaml\nsecurity_checks:\n  daily:\n    - vulnerability_scan\n    - auth_log_review\n    - failed_login_attempts\n\n  weekly:\n    - dependency_updates\n    - ssl_cert_check\n    - firewall_rule_review\n\n  monthly:\n    - penetration_test\n    - security_policy_review\n    - access_right_audit\n```\n\n## 📈 성능 최적화\n\n### 1. 캐시 관리\n\n```yaml\ncache_strategy:\n  market_data:\n    ttl: 60s\n    max_size: 1GB\n    eviction: LRU\n\n  user_portfolio:\n    ttl: 300s\n    max_size: 500MB\n    eviction: LFU\n\n  trading_signals:\n    ttl: 30s\n    max_size: 200MB\n    eviction: FIFO\n```\n\n### 2. 리소스 최적화\n\n```yaml\nresource_optimization:\n  autoscaling:\n    cpu_target: 70%\n    memory_target: 75%\n    min_replicas: 3\n    max_replicas: 10\n\n  pod_resources:\n    requests:\n      cpu: 1\n      memory: 2Gi\n    limits:\n      cpu: 2\n      memory: 4Gi\n```\n\n이 문서는 금융 데이터 분석 시스템의 운영 및 유지보수 가이드를 제공합니다. 시스템의 안정적인 운영을 위해 지속적으로 업데이트됩니다. 🚀\n",
    "date": "2025-02-13",
    "category": "projects",
    "tags": [
      "operation",
      "maintenance",
      "monitoring",
      "troubleshooting",
      "backup",
      "recovery",
      "sre"
    ],
    "thumbnail": "/images/cryptocurrency.jpg",
    "translations": {
      "ko": {
        "title": "Entasis Engine - 운영 매뉴얼",
        "description": "가상자산 데이터 분석 시스템의 운영 및 유지보수 가이드",
        "content": "<h1 id=\"heading-0\">금융 데이터 분석 시스템 운영 매뉴얼</h1>\n<h2 id=\"heading-1\">📊 시스템 모니터링</h2>\n<h3 id=\"heading-2\">1. 핵심 메트릭 모니터링</h3>\n<pre><code class=\"language-yaml\">monitoring_metrics:\n  system_health:\n    - cpu_usage:\n        warning: 70%\n        critical: 85%\n    - memory_usage:\n        warning: 75%\n        critical: 90%\n    - disk_usage:\n        warning: 80%\n        critical: 90%\n\n  application_metrics:\n    - api_latency:\n        p95_threshold: 500ms\n        p99_threshold: 1000ms\n    - error_rate:\n        threshold: 0.1%\n    - request_rate:\n        min: 100/s\n        max: 10000/s\n</code></pre>\n<h3 id=\"heading-3\">2. 알림 설정</h3>\n<pre><code class=\"language-yaml\">alert_rules:\n  high_priority:\n    - condition: \"error_rate &gt; 1%\"\n      duration: \"5m\"\n      channels:\n        - slack: \"#alerts-critical\"\n        - pagerduty: \"trading-team\"\n\n  medium_priority:\n    - condition: \"api_latency_p95 &gt; 500ms\"\n      duration: \"10m\"\n      channels:\n        - slack: \"#alerts-warning\"\n\n  low_priority:\n    - condition: \"cpu_usage &gt; 70%\"\n      duration: \"15m\"\n      channels:\n        - slack: \"#alerts-info\"\n</code></pre>\n<h2 id=\"heading-4\">🔄 일상 운영 작업</h2>\n<h3 id=\"heading-5\">1. 데이터베이스 관리</h3>\n<pre><code class=\"language-sql\">-- 일일 유지보수 쿼리\n-- 1. 인덱스 재구축\nREINDEX DATABASE trading_db;\n\n-- 2. 통계 업데이트\nANALYZE VERBOSE;\n\n-- 3. 오래된 데이터 아카이빙\nINSERT INTO market_data_archive\nSELECT * FROM market_data\nWHERE timestamp &lt; NOW() - INTERVAL '3 months';\n\nDELETE FROM market_data\nWHERE timestamp &lt; NOW() - INTERVAL '3 months';\n</code></pre>\n<h3 id=\"heading-6\">2. 로그 관리</h3>\n<pre><code class=\"language-yaml\">log_rotation:\n  application_logs:\n    retention: 30d\n    max_size: 10GB\n    compression: true\n\n  system_logs:\n    retention: 90d\n    max_size: 50GB\n    compression: true\n\n  audit_logs:\n    retention: 365d\n    max_size: 100GB\n    compression: true\n    encryption: true\n</code></pre>\n<h2 id=\"heading-7\">🚨 장애 대응</h2>\n<h3 id=\"heading-8\">1. 장애 레벨 정의</h3>\n<pre><code class=\"language-yaml\">incident_levels:\n  p1_critical:\n    description: \"서비스 완전 중단\"\n    response_time: \"15분 이내\"\n    resolution_time: \"2시간 이내\"\n    escalation:\n      - devops_lead\n      - system_architect\n      - cto\n\n  p2_major:\n    description: \"주요 기능 장애\"\n    response_time: \"30분 이내\"\n    resolution_time: \"4시간 이내\"\n    escalation:\n      - devops_engineer\n      - team_lead\n\n  p3_minor:\n    description: \"부분 기능 장애\"\n    response_time: \"2시간 이내\"\n    resolution_time: \"8시간 이내\"\n    escalation:\n      - on_call_engineer\n</code></pre>\n<h3 id=\"heading-9\">2. 장애 대응 절차</h3>\n<pre><code class=\"language-mermaid\">graph TD\n    A[장애 감지] --&gt; B{심각도 판단}\n    B --&gt;|P1| C[긴급 대응팀 소집]\n    B --&gt;|P2| D[담당자 할당]\n    B --&gt;|P3| E[일반 처리]\n    C --&gt; F[상황 보고]\n    D --&gt; F\n    E --&gt; F\n    F --&gt; G[원인 분석]\n    G --&gt; H[해결 방안 실행]\n    H --&gt; I[복구 확인]\n    I --&gt; J[사후 분석]\n</code></pre>\n<h2 id=\"heading-10\">💾 백업 및 복구</h2>\n<h3 id=\"heading-11\">1. 백업 정책</h3>\n<pre><code class=\"language-yaml\">backup_policy:\n  full_backup:\n    schedule: \"매주 일요일 01:00\"\n    retention: \"4주\"\n    type: \"스냅샷\"\n\n  incremental_backup:\n    schedule: \"매일 01:00\"\n    retention: \"7일\"\n    type: \"WAL\"\n\n  transaction_logs:\n    archive: true\n    retention: \"30일\"\n</code></pre>\n<h3 id=\"heading-12\">2. 복구 절차</h3>\n<pre><code class=\"language-bash\">#!/bin/bash\n\n# 1. 서비스 중지\nkubectl scale deployment trading-api --replicas=0\n\n# 2. 데이터베이스 복구\npg_restore -h $DB_HOST -U $DB_USER -d trading_db backup.dump\n\n# 3. 데이터 정합성 검증\npython verify_data_integrity.py\n\n# 4. 서비스 재시작\nkubectl scale deployment trading-api --replicas=3\n\n# 5. 상태 확인\nkubectl get pods -l app=trading-api\n</code></pre>\n<h2 id=\"heading-13\">🔒 보안 관리</h2>\n<h3 id=\"heading-14\">1. 접근 제어</h3>\n<pre><code class=\"language-yaml\">access_control:\n  production:\n    ssh_access:\n      - role: admin\n        auth: public_key + 2FA\n      - role: developer\n        auth: public_key + 2FA\n        restrictions:\n          - read_only\n          - audit_logging\n\n    kubernetes:\n      - role: cluster-admin\n        users: [\"devops-lead\"]\n      - role: developer\n        users: [\"dev-team\"]\n        namespace: [\"dev\", \"staging\"]\n</code></pre>\n<h3 id=\"heading-15\">2. 보안 점검</h3>\n<pre><code class=\"language-yaml\">security_checks:\n  daily:\n    - vulnerability_scan\n    - auth_log_review\n    - failed_login_attempts\n\n  weekly:\n    - dependency_updates\n    - ssl_cert_check\n    - firewall_rule_review\n\n  monthly:\n    - penetration_test\n    - security_policy_review\n    - access_right_audit\n</code></pre>\n<h2 id=\"heading-16\">📈 성능 최적화</h2>\n<h3 id=\"heading-17\">1. 캐시 관리</h3>\n<pre><code class=\"language-yaml\">cache_strategy:\n  market_data:\n    ttl: 60s\n    max_size: 1GB\n    eviction: LRU\n\n  user_portfolio:\n    ttl: 300s\n    max_size: 500MB\n    eviction: LFU\n\n  trading_signals:\n    ttl: 30s\n    max_size: 200MB\n    eviction: FIFO\n</code></pre>\n<h3 id=\"heading-18\">2. 리소스 최적화</h3>\n<pre><code class=\"language-yaml\">resource_optimization:\n  autoscaling:\n    cpu_target: 70%\n    memory_target: 75%\n    min_replicas: 3\n    max_replicas: 10\n\n  pod_resources:\n    requests:\n      cpu: 1\n      memory: 2Gi\n    limits:\n      cpu: 2\n      memory: 4Gi\n</code></pre>\n<p>이 문서는 금융 데이터 분석 시스템의 운영 및 유지보수 가이드를 제공합니다. 시스템의 안정적인 운영을 위해 지속적으로 업데이트됩니다. 🚀</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "금융 데이터 분석 시스템 운영 매뉴얼",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "📊 시스템 모니터링",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "1. 핵심 메트릭 모니터링",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "2. 알림 설정",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "🔄 일상 운영 작업",
            "level": 2,
            "isMainTopic": true,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "1. 데이터베이스 관리",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "2. 로그 관리",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "🚨 장애 대응",
            "level": 2,
            "isMainTopic": true,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "1. 장애 레벨 정의",
            "level": 3,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "2. 장애 대응 절차",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "💾 백업 및 복구",
            "level": 2,
            "isMainTopic": true,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "1. 백업 정책",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "2. 복구 절차",
            "level": 3,
            "isMainTopic": false,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "🔒 보안 관리",
            "level": 2,
            "isMainTopic": true,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "1. 접근 제어",
            "level": 3,
            "isMainTopic": false,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "2. 보안 점검",
            "level": 3,
            "isMainTopic": false,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "📈 성능 최적화",
            "level": 2,
            "isMainTopic": true,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "1. 캐시 관리",
            "level": 3,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "2. 리소스 최적화",
            "level": 3,
            "isMainTopic": false,
            "position": 900
          }
        ]
      },
      "en": {
        "title": "Entasis Engine - Operations Manual",
        "description": "Operations and maintenance guide for digital asset data analysis system",
        "content": "<h1 id=\"heading-0\">Financial Data Analysis System Operations Manual</h1>\n<h2 id=\"heading-1\">📊 System Monitoring</h2>\n<h3 id=\"heading-2\">1. Core Metrics Monitoring</h3>\n<pre><code class=\"language-yaml\">monitoring_metrics:\n  system_health:\n    - cpu_usage:\n        warning: 70%\n        critical: 85%\n    - memory_usage:\n        warning: 75%\n        critical: 90%\n    - disk_usage:\n        warning: 80%\n        critical: 90%\n\n  application_metrics:\n    - api_latency:\n        p95_threshold: 500ms\n        p99_threshold: 1000ms\n    - error_rate:\n        threshold: 0.1%\n    - request_rate:\n        min: 100/s\n        max: 10000/s\n</code></pre>\n<h3 id=\"heading-3\">2. Alert Configuration</h3>\n<pre><code class=\"language-yaml\">alert_rules:\n  high_priority:\n    - condition: \"error_rate &gt; 1%\"\n      duration: \"5m\"\n      channels:\n        - slack: \"#alerts-critical\"\n        - pagerduty: \"trading-team\"\n\n  medium_priority:\n    - condition: \"api_latency_p95 &gt; 500ms\"\n      duration: \"10m\"\n      channels:\n        - slack: \"#alerts-warning\"\n\n  low_priority:\n    - condition: \"cpu_usage &gt; 70%\"\n      duration: \"15m\"\n      channels:\n        - slack: \"#alerts-info\"\n</code></pre>\n<h2 id=\"heading-4\">🔄 Daily Operations</h2>\n<h3 id=\"heading-5\">1. Database Management</h3>\n<pre><code class=\"language-sql\">-- Daily maintenance queries\n-- 1. Rebuild indexes\nREINDEX DATABASE trading_db;\n\n-- 2. Update statistics\nANALYZE VERBOSE;\n\n-- 3. Archive old data\nINSERT INTO market_data_archive\nSELECT * FROM market_data\nWHERE timestamp &lt; NOW() - INTERVAL '3 months';\n\nDELETE FROM market_data\nWHERE timestamp &lt; NOW() - INTERVAL '3 months';\n</code></pre>\n<h3 id=\"heading-6\">2. Log Management</h3>\n<pre><code class=\"language-yaml\">log_rotation:\n  application_logs:\n    retention: 30d\n    max_size: 10GB\n    compression: true\n\n  system_logs:\n    retention: 90d\n    max_size: 50GB\n    compression: true\n\n  audit_logs:\n    retention: 365d\n    max_size: 100GB\n    compression: true\n    encryption: true\n</code></pre>\n<h2 id=\"heading-7\">🚨 Incident Response</h2>\n<h3 id=\"heading-8\">1. Incident Level Definition</h3>\n<pre><code class=\"language-yaml\">incident_levels:\n  p1_critical:\n    description: \"Service complete outage\"\n    response_time: \"15 minutes\"\n    resolution_time: \"2 hours\"\n    escalation:\n      - devops_lead\n      - system_architect\n      - cto\n\n  p2_major:\n    description: \"Major feature outage\"\n    response_time: \"30 minutes\"\n    resolution_time: \"4 hours\"\n    escalation:\n      - devops_engineer\n      - team_lead\n\n  p3_minor:\n    description: \"Partial feature outage\"\n    response_time: \"2 hours\"\n    resolution_time: \"8 hours\"\n    escalation:\n      - on_call_engineer\n</code></pre>\n<h3 id=\"heading-9\">2. Incident Response Procedure</h3>\n<pre><code class=\"language-mermaid\">graph TD\n    A[Incident Detection] --&gt; B{Severity Assessment}\n    B --&gt;|P1| C[Emergency Response Team]\n    B --&gt;|P2| D[Responsible Assignments]\n    B --&gt;|P3| E[General Handling]\n    C --&gt; F[Status Report]\n    D --&gt; F\n    E --&gt; F\n    F --&gt; G[Root Cause Analysis]\n    G --&gt; H[Resolution Implementation]\n    H --&gt; I[Recovery Verification]\n    I --&gt; J[Post-mortem Analysis]\n</code></pre>\n<h2 id=\"heading-10\">💾 Backup and Recovery</h2>\n<h3 id=\"heading-11\">1. Backup Policy</h3>\n<pre><code class=\"language-yaml\">backup_policy:\n  full_backup:\n    schedule: \"Every Sunday at 01:00\"\n    retention: \"4 weeks\"\n    type: \"snapshot\"\n\n  incremental_backup:\n    schedule: \"Every day at 01:00\"\n    retention: \"7 days\"\n    type: \"WAL\"\n\n  transaction_logs:\n    archive: true\n    retention: \"30 days\"\n</code></pre>\n<h3 id=\"heading-12\">2. Recovery Procedure</h3>\n<pre><code class=\"language-bash\">#!/bin/bash\n\n# 1. Service Stop\nkubectl scale deployment trading-api --replicas=0\n\n# 2. Database Recovery\npg_restore -h $DB_HOST -U $DB_USER -d trading_db backup.dump\n\n# 3. Data Integrity Verification\npython verify_data_integrity.py\n\n# 4. Service Restart\nkubectl scale deployment trading-api --replicas=3\n\n# 5. Status Check\nkubectl get pods -l app=trading-api\n</code></pre>\n<h2 id=\"heading-13\">🔒 Security Management</h2>\n<h3 id=\"heading-14\">1. Access Control</h3>\n<pre><code class=\"language-yaml\">access_control:\n  production:\n    ssh_access:\n      - role: admin\n        auth: public_key + 2FA\n      - role: developer\n        auth: public_key + 2FA\n        restrictions:\n          - read_only\n          - audit_logging\n\n    kubernetes:\n      - role: cluster-admin\n        users: [\"devops-lead\"]\n      - role: developer\n        users: [\"dev-team\"]\n        namespace: [\"dev\", \"staging\"]\n</code></pre>\n<h3 id=\"heading-15\">2. Security Checks</h3>\n<pre><code class=\"language-yaml\">security_checks:\n  daily:\n    - vulnerability_scan\n    - auth_log_review\n    - failed_login_attempts\n\n  weekly:\n    - dependency_updates\n    - ssl_cert_check\n    - firewall_rule_review\n\n  monthly:\n    - penetration_test\n    - security_policy_review\n    - access_right_audit\n</code></pre>\n<h2 id=\"heading-16\">📈 Performance Optimization</h2>\n<h3 id=\"heading-17\">1. Cache Management</h3>\n<pre><code class=\"language-yaml\">cache_strategy:\n  market_data:\n    ttl: 60s\n    max_size: 1GB\n    eviction: LRU\n\n  user_portfolio:\n    ttl: 300s\n    max_size: 500MB\n    eviction: LFU\n\n  trading_signals:\n    ttl: 30s\n    max_size: 200MB\n    eviction: FIFO\n</code></pre>\n<h3 id=\"heading-18\">2. Resource Optimization</h3>\n<pre><code class=\"language-yaml\">resource_optimization:\n  autoscaling:\n    cpu_target: 70%\n    memory_target: 75%\n    min_replicas: 3\n    max_replicas: 10\n\n  pod_resources:\n    requests:\n      cpu: 1\n      memory: 2Gi\n    limits:\n      cpu: 2\n      memory: 4Gi\n</code></pre>\n<p>This document provides the operations and maintenance guide for the financial data analysis system. It will be updated continuously to ensure the stability and reliability of the system. 🚀</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "Financial Data Analysis System Operations Manual",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "📊 System Monitoring",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "1. Core Metrics Monitoring",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "2. Alert Configuration",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "🔄 Daily Operations",
            "level": 2,
            "isMainTopic": true,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "1. Database Management",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "2. Log Management",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "🚨 Incident Response",
            "level": 2,
            "isMainTopic": true,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "1. Incident Level Definition",
            "level": 3,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "2. Incident Response Procedure",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "💾 Backup and Recovery",
            "level": 2,
            "isMainTopic": true,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "1. Backup Policy",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "2. Recovery Procedure",
            "level": 3,
            "isMainTopic": false,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "🔒 Security Management",
            "level": 2,
            "isMainTopic": true,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "1. Access Control",
            "level": 3,
            "isMainTopic": false,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "2. Security Checks",
            "level": 3,
            "isMainTopic": false,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "📈 Performance Optimization",
            "level": 2,
            "isMainTopic": true,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "1. Cache Management",
            "level": 3,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "2. Resource Optimization",
            "level": 3,
            "isMainTopic": false,
            "position": 900
          }
        ]
      }
    },
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_12",
    "title": "Entasis Engine - 데이터베이스 구축",
    "content": "\n# PostgreSQL + TimescaleDB를 활용한 금융 데이터베이스 구축\n\n안녕하세요! 이번 포스트에서는 **PostgreSQL과 TimescaleDB**를 활용해 금융 데이터베이스를 구축한 과정을 공유하려고 합니다. 최근 금융 데이터를 효율적으로 저장하고 조회하는 것이 점점 더 중요해지고 있는데요. 특히 실시간 시장 데이터를 다룰 때는 **TimescaleDB의 하이퍼테이블 기능**이 큰 도움이 됩니다. 그럼 하나씩 살펴보겠습니다! 🚀\n\n---\n\n## 📌 1. 기본 테이블 구조 설정 (V1init_tables.sql)\n\n우선, 금융 데이터를 체계적으로 저장하기 위해 **거래소 정보와 거래 심볼 정보를 저장할 테이블**을 만들었습니다.\n\n### 🔹 exchanges 테이블 (거래소 정보)\n\n거래소마다 고유한 정보를 저장하는 테이블입니다. 기본적인 거래소 ID, 이름, API URL 등을 포함합니다.\n\n```sql\nCREATE TABLE exchanges (\n    id SERIAL PRIMARY KEY,\n    name TEXT NOT NULL,\n    api_url TEXT NOT NULL,\n    created_at TIMESTAMP DEFAULT now()\n);\n```\n\n### 🔹 symbols 테이블 (거래 심볼 정보)\n\n거래소마다 지원하는 심볼(예: BTC/USDT, ETH/USDT 등)을 저장하는 테이블입니다.\n\n```sql\nCREATE TABLE symbols (\n    id SERIAL PRIMARY KEY,\n    exchange_id INTEGER REFERENCES exchanges(id) ON DELETE CASCADE,\n    symbol TEXT NOT NULL,\n    base_currency TEXT NOT NULL,\n    quote_currency TEXT NOT NULL,\n    created_at TIMESTAMP DEFAULT now()\n);\n```\n\n---\n\n## 📌 2. 현물 시장 데이터 테이블 생성 (V2create_market_tables.sql)\n\n현물 시장 데이터를 저장하기 위해 **spot_market_data** 테이블을 생성하고, 이를 TimescaleDB 하이퍼테이블로 변환했습니다.\n\n### 🔹 spot_market_data 테이블\n\n이 테이블은 실시간 가격 변동을 저장하는 역할을 합니다.\n\n```sql\nCREATE TABLE spot_market_data (\n    time TIMESTAMPTZ NOT NULL,\n    symbol_id INTEGER REFERENCES symbols(id) ON DELETE CASCADE,\n    price DECIMAL(18, 8) NOT NULL,\n    volume DECIMAL(18, 8) NOT NULL,\n    created_at TIMESTAMP DEFAULT now(),\n    PRIMARY KEY (time, symbol_id)\n);\n```\n\n### 🔹 TimescaleDB 하이퍼테이블 변환\n\n하이퍼테이블을 생성하면, 시계열 데이터에 최적화된 성능을 제공할 수 있습니다.\n\n```sql\nSELECT create_hypertable('spot_market_data', 'time');\n```\n\n### 🔹 인덱스 생성\n\n데이터 조회 속도를 높이기 위해 필요한 인덱스를 추가했습니다.\n\n```sql\nCREATE INDEX ON spot_market_data (symbol_id, time DESC);\n```\n\n---\n\n## 📌 3. 선물 시장 데이터 테이블 생성 (V3create_futures_tables.sql)\n\n선물 시장 데이터는 현물보다 저장해야 할 정보가 많습니다. 특히 **미결제약정(open_interest), 펀딩 비율(funding_rate), 마크 가격(mark_price), 지수 가격(index_price)** 같은 추가적인 정보가 포함됩니다.\n\n### 🔹 futures_market_data 테이블\n\n```sql\nCREATE TABLE futures_market_data (\n    time TIMESTAMPTZ NOT NULL,\n    symbol_id INTEGER REFERENCES symbols(id) ON DELETE CASCADE,\n    price DECIMAL(18, 8) NOT NULL,\n    volume DECIMAL(18, 8) NOT NULL,\n    open_interest DECIMAL(18, 8),\n    funding_rate DECIMAL(18, 8),\n    mark_price DECIMAL(18, 8),\n    index_price DECIMAL(18, 8),\n    created_at TIMESTAMP DEFAULT now(),\n    PRIMARY KEY (time, symbol_id)\n);\n```\n\n### 🔹 TimescaleDB 하이퍼테이블 변환\n\n```sql\nSELECT create_hypertable('futures_market_data', 'time');\n```\n\n### 🔹 인덱스 생성\n\n```sql\nCREATE INDEX ON futures_market_data (symbol_id, time DESC);\n```\n\n---\n\n## 📌 마무리하며\n\n이렇게 해서 **현물 및 선물 시장 데이터를 저장하는 기본 데이터베이스 구조를 구축**했습니다. PostgreSQL의 안정성과 TimescaleDB의 강력한 시계열 데이터 처리 기능을 활용하면 **빠른 조회와 확장성을 동시에 확보할 수 있습니다.** 💡\n\n다음 포스트에서는 **실제 데이터를 수집하고 저장하는 과정**을 다룰 예정이니 기대해주세요! 🤗\n",
    "date": "2025-02-13",
    "category": "projects",
    "tags": [
      "database",
      "postgresql",
      "timescaledb",
      "schema",
      "sql",
      "data-modeling",
      "optimization"
    ],
    "thumbnail": "/images/cryptocurrency.jpg",
    "translations": {
      "ko": {
        "title": "Entasis Engine - 데이터베이스 구축",
        "description": "가상자산 데이터베이스 구축 및 TimescaleDB 활용 가이드",
        "content": "<h1 id=\"heading-0\">PostgreSQL + TimescaleDB를 활용한 금융 데이터베이스 구축</h1>\n<p>안녕하세요! 이번 포스트에서는 <strong>PostgreSQL과 TimescaleDB</strong>를 활용해 금융 데이터베이스를 구축한 과정을 공유하려고 합니다. 최근 금융 데이터를 효율적으로 저장하고 조회하는 것이 점점 더 중요해지고 있는데요. 특히 실시간 시장 데이터를 다룰 때는 <strong>TimescaleDB의 하이퍼테이블 기능</strong>이 큰 도움이 됩니다. 그럼 하나씩 살펴보겠습니다! 🚀</p>\n<hr>\n<h2 id=\"heading-1\">📌 1. 기본 테이블 구조 설정 (V1init_tables.sql)</h2>\n<p>우선, 금융 데이터를 체계적으로 저장하기 위해 <strong>거래소 정보와 거래 심볼 정보를 저장할 테이블</strong>을 만들었습니다.</p>\n<h3 id=\"heading-2\">🔹 exchanges 테이블 (거래소 정보)</h3>\n<p>거래소마다 고유한 정보를 저장하는 테이블입니다. 기본적인 거래소 ID, 이름, API URL 등을 포함합니다.</p>\n<pre><code class=\"language-sql\">CREATE TABLE exchanges (\n    id SERIAL PRIMARY KEY,\n    name TEXT NOT NULL,\n    api_url TEXT NOT NULL,\n    created_at TIMESTAMP DEFAULT now()\n);\n</code></pre>\n<h3 id=\"heading-3\">🔹 symbols 테이블 (거래 심볼 정보)</h3>\n<p>거래소마다 지원하는 심볼(예: BTC/USDT, ETH/USDT 등)을 저장하는 테이블입니다.</p>\n<pre><code class=\"language-sql\">CREATE TABLE symbols (\n    id SERIAL PRIMARY KEY,\n    exchange_id INTEGER REFERENCES exchanges(id) ON DELETE CASCADE,\n    symbol TEXT NOT NULL,\n    base_currency TEXT NOT NULL,\n    quote_currency TEXT NOT NULL,\n    created_at TIMESTAMP DEFAULT now()\n);\n</code></pre>\n<hr>\n<h2 id=\"heading-4\">📌 2. 현물 시장 데이터 테이블 생성 (V2create_market_tables.sql)</h2>\n<p>현물 시장 데이터를 저장하기 위해 <strong>spot_market_data</strong> 테이블을 생성하고, 이를 TimescaleDB 하이퍼테이블로 변환했습니다.</p>\n<h3 id=\"heading-5\">🔹 spot_market_data 테이블</h3>\n<p>이 테이블은 실시간 가격 변동을 저장하는 역할을 합니다.</p>\n<pre><code class=\"language-sql\">CREATE TABLE spot_market_data (\n    time TIMESTAMPTZ NOT NULL,\n    symbol_id INTEGER REFERENCES symbols(id) ON DELETE CASCADE,\n    price DECIMAL(18, 8) NOT NULL,\n    volume DECIMAL(18, 8) NOT NULL,\n    created_at TIMESTAMP DEFAULT now(),\n    PRIMARY KEY (time, symbol_id)\n);\n</code></pre>\n<h3 id=\"heading-6\">🔹 TimescaleDB 하이퍼테이블 변환</h3>\n<p>하이퍼테이블을 생성하면, 시계열 데이터에 최적화된 성능을 제공할 수 있습니다.</p>\n<pre><code class=\"language-sql\">SELECT create_hypertable('spot_market_data', 'time');\n</code></pre>\n<h3 id=\"heading-7\">🔹 인덱스 생성</h3>\n<p>데이터 조회 속도를 높이기 위해 필요한 인덱스를 추가했습니다.</p>\n<pre><code class=\"language-sql\">CREATE INDEX ON spot_market_data (symbol_id, time DESC);\n</code></pre>\n<hr>\n<h2 id=\"heading-8\">📌 3. 선물 시장 데이터 테이블 생성 (V3create_futures_tables.sql)</h2>\n<p>선물 시장 데이터는 현물보다 저장해야 할 정보가 많습니다. 특히 <strong>미결제약정(open_interest), 펀딩 비율(funding_rate), 마크 가격(mark_price), 지수 가격(index_price)</strong> 같은 추가적인 정보가 포함됩니다.</p>\n<h3 id=\"heading-9\">🔹 futures_market_data 테이블</h3>\n<pre><code class=\"language-sql\">CREATE TABLE futures_market_data (\n    time TIMESTAMPTZ NOT NULL,\n    symbol_id INTEGER REFERENCES symbols(id) ON DELETE CASCADE,\n    price DECIMAL(18, 8) NOT NULL,\n    volume DECIMAL(18, 8) NOT NULL,\n    open_interest DECIMAL(18, 8),\n    funding_rate DECIMAL(18, 8),\n    mark_price DECIMAL(18, 8),\n    index_price DECIMAL(18, 8),\n    created_at TIMESTAMP DEFAULT now(),\n    PRIMARY KEY (time, symbol_id)\n);\n</code></pre>\n<h3 id=\"heading-10\">🔹 TimescaleDB 하이퍼테이블 변환</h3>\n<pre><code class=\"language-sql\">SELECT create_hypertable('futures_market_data', 'time');\n</code></pre>\n<h3 id=\"heading-11\">🔹 인덱스 생성</h3>\n<pre><code class=\"language-sql\">CREATE INDEX ON futures_market_data (symbol_id, time DESC);\n</code></pre>\n<hr>\n<h2 id=\"heading-12\">📌 마무리하며</h2>\n<p>이렇게 해서 <strong>현물 및 선물 시장 데이터를 저장하는 기본 데이터베이스 구조를 구축</strong>했습니다. PostgreSQL의 안정성과 TimescaleDB의 강력한 시계열 데이터 처리 기능을 활용하면 <strong>빠른 조회와 확장성을 동시에 확보할 수 있습니다.</strong> 💡</p>\n<p>다음 포스트에서는 <strong>실제 데이터를 수집하고 저장하는 과정</strong>을 다룰 예정이니 기대해주세요! 🤗</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "PostgreSQL + TimescaleDB를 활용한 금융 데이터베이스 구축",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "📌 1. 기본 테이블 구조 설정 (V1init_tables.sql)",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "🔹 exchanges 테이블 (거래소 정보)",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "🔹 symbols 테이블 (거래 심볼 정보)",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "📌 2. 현물 시장 데이터 테이블 생성 (V2create_market_tables.sql)",
            "level": 2,
            "isMainTopic": true,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "🔹 spot_market_data 테이블",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "🔹 TimescaleDB 하이퍼테이블 변환",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "🔹 인덱스 생성",
            "level": 3,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "📌 3. 선물 시장 데이터 테이블 생성 (V3create_futures_tables.sql)",
            "level": 2,
            "isMainTopic": true,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "🔹 futures_market_data 테이블",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "🔹 TimescaleDB 하이퍼테이블 변환",
            "level": 3,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "🔹 인덱스 생성",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "📌 마무리하며",
            "level": 2,
            "isMainTopic": true,
            "position": 600
          }
        ]
      },
      "en": {
        "title": "Entasis Engine - Database Setup",
        "description": "Guide for setting up digital asset database and utilizing TimescaleDB",
        "content": "<h1 id=\"heading-0\">Building Financial Database with PostgreSQL + TimescaleDB</h1>\n<p>Hello! In this post, I'll share how we built a financial database using <strong>PostgreSQL and TimescaleDB</strong>. Efficiently storing and querying financial data is becoming increasingly important. Particularly when dealing with real-time market data, <strong>TimescaleDB's hypertable functionality</strong> is incredibly helpful. Let's dive in! 🚀</p>\n<hr>\n<h2 id=\"heading-1\">📌 1. Setting Up Basic Table Structure (V1init_tables.sql)</h2>\n<p>First, we created tables to systematically store <strong>exchange information and trading symbol data</strong>.</p>\n<h3 id=\"heading-2\">🔹 exchanges Table (Exchange Information)</h3>\n<p>This table stores unique information for each exchange, including basic exchange ID, name, API URL, etc.</p>\n<pre><code class=\"language-sql\">CREATE TABLE exchanges (\n    id SERIAL PRIMARY KEY,\n    name TEXT NOT NULL,\n    api_url TEXT NOT NULL,\n    created_at TIMESTAMP DEFAULT now()\n);\n</code></pre>\n<h3 id=\"heading-3\">🔹 symbols table (Trading Symbol Information)</h3>\n<p>This table stores the trading symbols supported by each exchange (e.g., BTC/USDT, ETH/USDT, etc.).</p>\n<pre><code class=\"language-sql\">CREATE TABLE symbols (\n    id SERIAL PRIMARY KEY,\n    exchange_id INTEGER REFERENCES exchanges(id) ON DELETE CASCADE,\n    symbol TEXT NOT NULL,\n    base_currency TEXT NOT NULL,\n    quote_currency TEXT NOT NULL,\n    created_at TIMESTAMP DEFAULT now()\n);\n</code></pre>\n<hr>\n<h2 id=\"heading-4\">📌 2. Create Market Data Tables (V2create_market_tables.sql)</h2>\n<p>To store spot market data, we created the <strong>spot_market_data</strong> table and converted it to a TimescaleDB hypertable.</p>\n<h3 id=\"heading-5\">🔹 spot_market_data table</h3>\n<p>This table stores real-time price fluctuations.</p>\n<pre><code class=\"language-sql\">CREATE TABLE spot_market_data (\n    time TIMESTAMPTZ NOT NULL,\n    symbol_id INTEGER REFERENCES symbols(id) ON DELETE CASCADE,\n    price DECIMAL(18, 8) NOT NULL,\n    volume DECIMAL(18, 8) NOT NULL,\n    created_at TIMESTAMP DEFAULT now(),\n    PRIMARY KEY (time, symbol_id)\n);\n</code></pre>\n<h3 id=\"heading-6\">🔹 TimescaleDB Hypertable Conversion</h3>\n<p>Creating a hypertable will provide optimized performance for time-series data.</p>\n<pre><code class=\"language-sql\">SELECT create_hypertable('spot_market_data', 'time');\n</code></pre>\n<h3 id=\"heading-7\">🔹 Create Index</h3>\n<p>To increase data retrieval speed, we added the necessary indexes.</p>\n<pre><code class=\"language-sql\">CREATE INDEX ON spot_market_data (symbol_id, time DESC);\n</code></pre>\n<hr>\n<h2 id=\"heading-8\">📌 3. Create Futures Market Data Tables (V3create_futures_tables.sql)</h2>\n<p>Futures market data requires storing more information than spot market data. Particularly, it includes additional information such as <strong>unsettled contracts (open_interest), funding rate (funding_rate), mark price (mark_price), and index price (index_price).</strong></p>\n<h3 id=\"heading-9\">🔹 futures_market_data table</h3>\n<pre><code class=\"language-sql\">CREATE TABLE futures_market_data (\n    time TIMESTAMPTZ NOT NULL,\n    symbol_id INTEGER REFERENCES symbols(id) ON DELETE CASCADE,\n    price DECIMAL(18, 8) NOT NULL,\n    volume DECIMAL(18, 8) NOT NULL,\n    open_interest DECIMAL(18, 8),\n    funding_rate DECIMAL(18, 8),\n    mark_price DECIMAL(18, 8),\n    index_price DECIMAL(18, 8),\n    created_at TIMESTAMP DEFAULT now(),\n    PRIMARY KEY (time, symbol_id)\n);\n</code></pre>\n<h3 id=\"heading-10\">🔹 TimescaleDB Hypertable Conversion</h3>\n<pre><code class=\"language-sql\">SELECT create_hypertable('futures_market_data', 'time');\n</code></pre>\n<h3 id=\"heading-11\">🔹 Create Index</h3>\n<pre><code class=\"language-sql\">CREATE INDEX ON futures_market_data (symbol_id, time DESC);\n</code></pre>\n<hr>\n<h2 id=\"heading-12\">📌 4. Conclusion</h2>\n<p>We successfully built the basic database structure to store spot and futures market data. By leveraging the stability of PostgreSQL and the powerful time-series data processing capabilities of TimescaleDB, we can achieve both fast retrieval and scalability. 💡</p>\n<p>Next post will cover the process of collecting and storing actual data. Stay tuned! 🤗</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "Building Financial Database with PostgreSQL + TimescaleDB",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "📌 1. Setting Up Basic Table Structure (V1init_tables.sql)",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "🔹 exchanges Table (Exchange Information)",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "🔹 symbols table (Trading Symbol Information)",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "📌 2. Create Market Data Tables (V2create_market_tables.sql)",
            "level": 2,
            "isMainTopic": true,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "🔹 spot_market_data table",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "🔹 TimescaleDB Hypertable Conversion",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "🔹 Create Index",
            "level": 3,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "📌 3. Create Futures Market Data Tables (V3create_futures_tables.sql)",
            "level": 2,
            "isMainTopic": true,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "🔹 futures_market_data table",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "🔹 TimescaleDB Hypertable Conversion",
            "level": 3,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "🔹 Create Index",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "📌 4. Conclusion",
            "level": 2,
            "isMainTopic": true,
            "position": 600
          }
        ]
      }
    },
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_13",
    "title": "Entasis Engine - 데이터 수집기 구현",
    "content": "\n안녕하세요, 여러분! 😊\n\n오늘은 **Spring Boot** 기반으로 바이낸스의 현물과 선물 시장 데이터를 실시간으로 수집하여 **TimescaleDB**에 저장하는 데이터 수집기를 어떻게 구현했는지 공유해보려고 해요. 이 글에서는 시스템 아키텍처, API 호출 방법, 서비스 레이어 구성, 에러 처리 등 다양한 구현 포인트를 풀어볼게요!\n\n---\n\n## 시스템 개요\n\n우리 시스템은 아래와 같은 역할을 수행합니다:\n\n- **데이터 수집기**\n  - **BinanceExchange**: 바이낸스의 **현물 시장** 데이터(BTC/USDT, ETH/USDT) 수집\n  - **BinanceFuturesExchange**: 바이낸스의 **선물 시장** 데이터(BTCUSDT, ETHUSDT) 수집\n- **API 호출**: `WebClient`를 사용해 바이낸스 API를 호출합니다.\n- **서비스 레이어**\n  - `SpotMarketDataServiceImpl`: 현물 시장 데이터 처리\n  - `FuturesMarketDataServiceImpl`: 선물 시장 데이터 처리\n  - `ExchangeRepository`: 거래소 정보 관리 및 TimescaleDB 저장\n- **데이터 수집 주기**: 1초 간격으로 데이터 수집 및 저장\n- **에러 처리**: API 응답 null 체크, 예외 처리 및 로깅, 데이터베이스 제약조건 관련 오류 처리\n\n---\n\n## 주요 구현 포인트\n\n### 1. WebClient를 활용한 API 호출\n\n비동기 방식의 **WebClient**를 이용하여 바이낸스 API로부터 데이터를 호출합니다. 아래는 `BinanceExchange` 클래스의 예시입니다:\n\n```java\n@Service\npublic class BinanceExchange {\n\n    private static final Logger log = LoggerFactory.getLogger(BinanceExchange.class);\n    private final WebClient webClient = WebClient.create(\"https://api.binance.com\");\n\n    public Mono<JsonNode> getSpotMarketData(String symbol) {\n        return webClient.get()\n            .uri(uriBuilder -> uriBuilder\n                .path(\"/api/v3/ticker/price\")\n                .queryParam(\"symbol\", symbol)\n                .build())\n            .retrieve()\n            .bodyToMono(JsonNode.class)\n            .doOnError(e -> log.error(\"API 호출 중 에러 발생: {}\", e.getMessage()))\n            .onErrorReturn(null);\n    }\n}\n```\n\n> **Tip:** 에러 발생 시 로깅을 통해 문제를 쉽게 파악할 수 있고, `onErrorReturn(null)`을 사용해 null 체크로 이어지는 처리를 간편하게 했어요. 😉\n\n---\n\n### 2. 서비스 레이어 구현\n\n각 시장별 데이터를 처리하는 서비스 레이어에서는 API로부터 받은 데이터를 가공 후 저장하는 역할을 합니다. 예를 들어, `SpotMarketDataServiceImpl` 클래스는 다음과 같이 구성됩니다:\n\n```java\n@Service\npublic class SpotMarketDataServiceImpl implements SpotMarketDataService {\n\n    private static final Logger log = LoggerFactory.getLogger(SpotMarketDataServiceImpl.class);\n    private final BinanceExchange binanceExchange;\n    private final ExchangeRepository exchangeRepository;\n\n    public SpotMarketDataServiceImpl(BinanceExchange binanceExchange,\n                                     ExchangeRepository exchangeRepository) {\n        this.binanceExchange = binanceExchange;\n        this.exchangeRepository = exchangeRepository;\n    }\n\n    @Override\n    public void collectData() {\n        // 현물 시장: BTC/USDT, ETH/USDT 데이터를 수집합니다.\n        List<String> symbols = Arrays.asList(\"BTCUSDT\", \"ETHUSDT\");\n        for (String symbol : symbols) {\n            try {\n                JsonNode response = binanceExchange.getSpotMarketData(symbol).block();\n                if (response != null) {\n                    String price = response.get(\"price\").asText();\n                    ExchangeData data = new ExchangeData(symbol, price, LocalDateTime.now());\n                    exchangeRepository.save(data);\n                    log.info(\"데이터 저장 성공 - {}: {}\", symbol, price);\n                } else {\n                    log.warn(\"API 응답이 null입니다. symbol: {}\", symbol);\n                }\n            } catch (Exception e) {\n                log.error(\"데이터 수집 중 예외 발생: {}\", e.getMessage());\n            }\n        }\n    }\n}\n```\n\n> **참고:** 선물 시장 데이터 처리는 `FuturesMarketDataServiceImpl`에서 비슷한 로직으로 구현되며, 바이낸스의 선물 API 엔드포인트를 호출하도록 구성되어 있어요.\n\n---\n\n### 3. 스케줄러를 통한 주기적 데이터 수집\n\n데이터를 1초 간격으로 수집하기 위해 Spring의 `@Scheduled` 애노테이션을 활용했습니다:\n\n```java\n@Component\npublic class MarketDataScheduler {\n\n    private final SpotMarketDataService spotMarketDataService;\n    private final FuturesMarketDataService futuresMarketDataService;\n\n    public MarketDataScheduler(SpotMarketDataService spotMarketDataService,\n                               FuturesMarketDataService futuresMarketDataService) {\n        this.spotMarketDataService = spotMarketDataService;\n        this.futuresMarketDataService = futuresMarketDataService;\n    }\n\n    @Scheduled(fixedRate = 1000)\n    public void collectMarketData() {\n        spotMarketDataService.collectData();\n        futuresMarketDataService.collectData();\n    }\n}\n```\n\n> **노하우:** 주기적 데이터 수집 시, 반드시 예외 처리를 통해 스케줄러가 중단되지 않도록 하는 것이 중요해요. 😊\n\n---\n\n## 에러 처리 및 로깅\n\n- **API 응답 null 체크:** 응답이 null인 경우 적절한 경고 로깅을 수행하여 문제를 파악합니다.\n- **예외 처리:** try-catch 블록을 통해 예외 발생 시 로깅하고, 시스템 전체에 영향이 없도록 합니다.\n- **데이터베이스 제약조건 오류:** 저장 시 발생할 수 있는 제약조건 오류를 사전에 확인하고, 필요한 경우 트랜잭션 처리를 통해 안정성을 보장합니다.\n\n---\n\n## 마치며\n\n이와 같이 구현함으로써 **바이낸스**의 현물 및 선물 시장 데이터를 실시간으로 안정적으로 수집하고 **TimescaleDB**에 저장할 수 있게 되었어요. 이 과정에서 `WebClient`, 스케줄링, 에러 처리, 로깅 등 다양한 Spring Boot의 기능들을 활용하였는데요, 여러분의 프로젝트에도 도움이 되길 바랍니다! 🚀\n\n궁금한 점이나 의견이 있으시면 언제든지 편하게 이야기해 주세요! 좋은 하루 보내세요! 😄\n\nHappy Coding!\n",
    "date": "2025-02-14",
    "category": "projects",
    "tags": [
      "spring-boot",
      "binance-api",
      "webclient",
      "scheduler",
      "timescaledb",
      "data-collection",
      "error-handling"
    ],
    "thumbnail": "/images/cryptocurrency.jpg",
    "translations": {
      "ko": {
        "title": "Entasis Engine - 데이터 수집기 구현",
        "description": "가상자산 거래소 데이터 수집 및 저장 시스템 구현 가이드",
        "content": "<p>안녕하세요, 여러분! 😊</p>\n<p>오늘은 <strong>Spring Boot</strong> 기반으로 바이낸스의 현물과 선물 시장 데이터를 실시간으로 수집하여 <strong>TimescaleDB</strong>에 저장하는 데이터 수집기를 어떻게 구현했는지 공유해보려고 해요. 이 글에서는 시스템 아키텍처, API 호출 방법, 서비스 레이어 구성, 에러 처리 등 다양한 구현 포인트를 풀어볼게요!</p>\n<hr>\n<h2 id=\"heading-0\">시스템 개요</h2>\n<p>우리 시스템은 아래와 같은 역할을 수행합니다:</p>\n<ul>\n<li><strong>데이터 수집기</strong>\n<ul>\n<li><strong>BinanceExchange</strong>: 바이낸스의 <strong>현물 시장</strong> 데이터(BTC/USDT, ETH/USDT) 수집</li>\n<li><strong>BinanceFuturesExchange</strong>: 바이낸스의 <strong>선물 시장</strong> 데이터(BTCUSDT, ETHUSDT) 수집</li>\n</ul>\n</li>\n<li><strong>API 호출</strong>: <code>WebClient</code>를 사용해 바이낸스 API를 호출합니다.</li>\n<li><strong>서비스 레이어</strong>\n<ul>\n<li><code>SpotMarketDataServiceImpl</code>: 현물 시장 데이터 처리</li>\n<li><code>FuturesMarketDataServiceImpl</code>: 선물 시장 데이터 처리</li>\n<li><code>ExchangeRepository</code>: 거래소 정보 관리 및 TimescaleDB 저장</li>\n</ul>\n</li>\n<li><strong>데이터 수집 주기</strong>: 1초 간격으로 데이터 수집 및 저장</li>\n<li><strong>에러 처리</strong>: API 응답 null 체크, 예외 처리 및 로깅, 데이터베이스 제약조건 관련 오류 처리</li>\n</ul>\n<hr>\n<h2 id=\"heading-1\">주요 구현 포인트</h2>\n<h3 id=\"heading-2\">1. WebClient를 활용한 API 호출</h3>\n<p>비동기 방식의 <strong>WebClient</strong>를 이용하여 바이낸스 API로부터 데이터를 호출합니다. 아래는 <code>BinanceExchange</code> 클래스의 예시입니다:</p>\n<pre><code class=\"language-java\">@Service\npublic class BinanceExchange {\n\n    private static final Logger log = LoggerFactory.getLogger(BinanceExchange.class);\n    private final WebClient webClient = WebClient.create(\"https://api.binance.com\");\n\n    public Mono&lt;JsonNode&gt; getSpotMarketData(String symbol) {\n        return webClient.get()\n            .uri(uriBuilder -&gt; uriBuilder\n                .path(\"/api/v3/ticker/price\")\n                .queryParam(\"symbol\", symbol)\n                .build())\n            .retrieve()\n            .bodyToMono(JsonNode.class)\n            .doOnError(e -&gt; log.error(\"API 호출 중 에러 발생: {}\", e.getMessage()))\n            .onErrorReturn(null);\n    }\n}\n</code></pre>\n<blockquote>\n<p><strong>Tip:</strong> 에러 발생 시 로깅을 통해 문제를 쉽게 파악할 수 있고, <code>onErrorReturn(null)</code>을 사용해 null 체크로 이어지는 처리를 간편하게 했어요. 😉</p>\n</blockquote>\n<hr>\n<h3 id=\"heading-3\">2. 서비스 레이어 구현</h3>\n<p>각 시장별 데이터를 처리하는 서비스 레이어에서는 API로부터 받은 데이터를 가공 후 저장하는 역할을 합니다. 예를 들어, <code>SpotMarketDataServiceImpl</code> 클래스는 다음과 같이 구성됩니다:</p>\n<pre><code class=\"language-java\">@Service\npublic class SpotMarketDataServiceImpl implements SpotMarketDataService {\n\n    private static final Logger log = LoggerFactory.getLogger(SpotMarketDataServiceImpl.class);\n    private final BinanceExchange binanceExchange;\n    private final ExchangeRepository exchangeRepository;\n\n    public SpotMarketDataServiceImpl(BinanceExchange binanceExchange,\n                                     ExchangeRepository exchangeRepository) {\n        this.binanceExchange = binanceExchange;\n        this.exchangeRepository = exchangeRepository;\n    }\n\n    @Override\n    public void collectData() {\n        // 현물 시장: BTC/USDT, ETH/USDT 데이터를 수집합니다.\n        List&lt;String&gt; symbols = Arrays.asList(\"BTCUSDT\", \"ETHUSDT\");\n        for (String symbol : symbols) {\n            try {\n                JsonNode response = binanceExchange.getSpotMarketData(symbol).block();\n                if (response != null) {\n                    String price = response.get(\"price\").asText();\n                    ExchangeData data = new ExchangeData(symbol, price, LocalDateTime.now());\n                    exchangeRepository.save(data);\n                    log.info(\"데이터 저장 성공 - {}: {}\", symbol, price);\n                } else {\n                    log.warn(\"API 응답이 null입니다. symbol: {}\", symbol);\n                }\n            } catch (Exception e) {\n                log.error(\"데이터 수집 중 예외 발생: {}\", e.getMessage());\n            }\n        }\n    }\n}\n</code></pre>\n<blockquote>\n<p><strong>참고:</strong> 선물 시장 데이터 처리는 <code>FuturesMarketDataServiceImpl</code>에서 비슷한 로직으로 구현되며, 바이낸스의 선물 API 엔드포인트를 호출하도록 구성되어 있어요.</p>\n</blockquote>\n<hr>\n<h3 id=\"heading-4\">3. 스케줄러를 통한 주기적 데이터 수집</h3>\n<p>데이터를 1초 간격으로 수집하기 위해 Spring의 <code>@Scheduled</code> 애노테이션을 활용했습니다:</p>\n<pre><code class=\"language-java\">@Component\npublic class MarketDataScheduler {\n\n    private final SpotMarketDataService spotMarketDataService;\n    private final FuturesMarketDataService futuresMarketDataService;\n\n    public MarketDataScheduler(SpotMarketDataService spotMarketDataService,\n                               FuturesMarketDataService futuresMarketDataService) {\n        this.spotMarketDataService = spotMarketDataService;\n        this.futuresMarketDataService = futuresMarketDataService;\n    }\n\n    @Scheduled(fixedRate = 1000)\n    public void collectMarketData() {\n        spotMarketDataService.collectData();\n        futuresMarketDataService.collectData();\n    }\n}\n</code></pre>\n<blockquote>\n<p><strong>노하우:</strong> 주기적 데이터 수집 시, 반드시 예외 처리를 통해 스케줄러가 중단되지 않도록 하는 것이 중요해요. 😊</p>\n</blockquote>\n<hr>\n<h2 id=\"heading-5\">에러 처리 및 로깅</h2>\n<ul>\n<li><strong>API 응답 null 체크:</strong> 응답이 null인 경우 적절한 경고 로깅을 수행하여 문제를 파악합니다.</li>\n<li><strong>예외 처리:</strong> try-catch 블록을 통해 예외 발생 시 로깅하고, 시스템 전체에 영향이 없도록 합니다.</li>\n<li><strong>데이터베이스 제약조건 오류:</strong> 저장 시 발생할 수 있는 제약조건 오류를 사전에 확인하고, 필요한 경우 트랜잭션 처리를 통해 안정성을 보장합니다.</li>\n</ul>\n<hr>\n<h2 id=\"heading-6\">마치며</h2>\n<p>이와 같이 구현함으로써 <strong>바이낸스</strong>의 현물 및 선물 시장 데이터를 실시간으로 안정적으로 수집하고 <strong>TimescaleDB</strong>에 저장할 수 있게 되었어요. 이 과정에서 <code>WebClient</code>, 스케줄링, 에러 처리, 로깅 등 다양한 Spring Boot의 기능들을 활용하였는데요, 여러분의 프로젝트에도 도움이 되길 바랍니다! 🚀</p>\n<p>궁금한 점이나 의견이 있으시면 언제든지 편하게 이야기해 주세요! 좋은 하루 보내세요! 😄</p>\n<p>Happy Coding!</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "시스템 개요",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "주요 구현 포인트",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "1. WebClient를 활용한 API 호출",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "2. 서비스 레이어 구현",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "3. 스케줄러를 통한 주기적 데이터 수집",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "에러 처리 및 로깅",
            "level": 2,
            "isMainTopic": true,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "마치며",
            "level": 2,
            "isMainTopic": true,
            "position": 300
          }
        ]
      },
      "en": {
        "title": "Entasis Engine - Data Collector Implementation",
        "description": "Guide for implementing cryptocurrency exchange data collection and storage system",
        "content": "<p>Hello everyone! 😊</p>\n<p>Today, I'd like to share how we implemented a data collector based on <strong>Spring Boot</strong> that collects real-time spot and futures market data from Binance and stores it in <strong>TimescaleDB</strong>. In this post, I'll walk you through various implementation points including system architecture, API calls, service layer configuration, and error handling in a friendly way!</p>\n<hr>\n<h2 id=\"heading-0\">System Overview</h2>\n<p>Our system performs the following roles:</p>\n<ul>\n<li><strong>Data Collector</strong>\n<ul>\n<li><strong>BinanceExchange</strong>: Collects <strong>spot market</strong> data (BTC/USDT, ETH/USDT) from Binance</li>\n<li><strong>BinanceFuturesExchange</strong>: Collects <strong>futures market</strong> data (BTCUSDT, ETHUSDT) from Binance</li>\n</ul>\n</li>\n<li><strong>API Calls</strong>: Uses <code>WebClient</code> to call Binance APIs</li>\n<li><strong>Service Layer</strong>\n<ul>\n<li><code>SpotMarketDataServiceImpl</code>: Processes spot market data</li>\n<li><code>FuturesMarketDataServiceImpl</code>: Processes futures market data</li>\n<li><code>ExchangeRepository</code>: Manages exchange information and TimescaleDB storage</li>\n</ul>\n</li>\n<li><strong>Data Collection Interval</strong>: Collects and stores data at 1-second intervals</li>\n<li><strong>Error Handling</strong>: API response null checks, exception handling and logging, database constraint error handling</li>\n</ul>\n<hr>\n<h2 id=\"heading-1\">Key Implementation Points</h2>\n<h3 id=\"heading-2\">1. API Calls Using WebClient</h3>\n<p>We use the asynchronous <strong>WebClient</strong> to call data from the Binance API. Here's an example from the <code>BinanceExchange</code> class:</p>\n<pre><code class=\"language-java\">@Service\npublic class BinanceExchange {\n\n    private static final Logger log = LoggerFactory.getLogger(BinanceExchange.class);\n    private final WebClient webClient = WebClient.create(\"https://api.binance.com\");\n\n    public Mono&lt;JsonNode&gt; getSpotMarketData(String symbol) {\n        return webClient.get()\n            .uri(uriBuilder -&gt; uriBuilder\n                .path(\"/api/v3/ticker/price\")\n                .queryParam(\"symbol\", symbol)\n                .build())\n            .retrieve()\n            .bodyToMono(JsonNode.class)\n            .doOnError(e -&gt; log.error(\"Error occurred while calling API: {}\", e.getMessage()))\n            .onErrorReturn(null);\n    }\n}\n</code></pre>\n<blockquote>\n<p><strong>Tip:</strong> When an error occurs, logging helps easily identify the problem, and using <code>onErrorReturn(null)</code> makes it easy to continue with null checks. 😉</p>\n</blockquote>\n<hr>\n<h3 id=\"heading-3\">2. Service Layer Implementation</h3>\n<p>The service layer responsible for processing data for each market processes the data received from the API and stores it. For example, the <code>SpotMarketDataServiceImpl</code> class is configured as follows:</p>\n<pre><code class=\"language-java\">@Service\npublic class SpotMarketDataServiceImpl implements SpotMarketDataService {\n\n    private static final Logger log = LoggerFactory.getLogger(SpotMarketDataServiceImpl.class);\n    private final BinanceExchange binanceExchange;\n    private final ExchangeRepository exchangeRepository;\n\n    public SpotMarketDataServiceImpl(BinanceExchange binanceExchange,\n                                     ExchangeRepository exchangeRepository) {\n        this.binanceExchange = binanceExchange;\n        this.exchangeRepository = exchangeRepository;\n    }\n\n    @Override\n    public void collectData() {\n        // Spot market: Collect BTC/USDT, ETH/USDT data\n        List&lt;String&gt; symbols = Arrays.asList(\"BTCUSDT\", \"ETHUSDT\");\n        for (String symbol : symbols) {\n            try {\n                JsonNode response = binanceExchange.getSpotMarketData(symbol).block();\n                if (response != null) {\n                    String price = response.get(\"price\").asText();\n                    ExchangeData data = new ExchangeData(symbol, price, LocalDateTime.now());\n                    exchangeRepository.save(data);\n                    log.info(\"Data saved successfully - {}: {}\", symbol, price);\n                } else {\n                    log.warn(\"API response is null. symbol: {}\", symbol);\n                }\n            } catch (Exception e) {\n                log.error(\"Exception occurred while collecting data: {}\", e.getMessage());\n            }\n        }\n    }\n}\n</code></pre>\n<blockquote>\n<p><strong>Note:</strong> Futures market data processing is implemented in the <code>FuturesMarketDataServiceImpl</code> with similar logic, and it is configured to call the Binance futures API endpoints.</p>\n</blockquote>\n<hr>\n<h3 id=\"heading-4\">3. Data Collection with Scheduler</h3>\n<p>To collect data at 1-second intervals, we used Spring's <code>@Scheduled</code> annotation:</p>\n<pre><code class=\"language-java\">@Component\npublic class MarketDataScheduler {\n\n    private final SpotMarketDataService spotMarketDataService;\n    private final FuturesMarketDataService futuresMarketDataService;\n\n    public MarketDataScheduler(SpotMarketDataService spotMarketDataService,\n                               FuturesMarketDataService futuresMarketDataService) {\n        this.spotMarketDataService = spotMarketDataService;\n        this.futuresMarketDataService = futuresMarketDataService;\n    }\n\n    @Scheduled(fixedRate = 1000)\n    public void collectMarketData() {\n        spotMarketDataService.collectData();\n        futuresMarketDataService.collectData();\n    }\n}\n</code></pre>\n<blockquote>\n<p><strong>Tip:</strong> When collecting periodic data, it is important to ensure that the scheduler does not stop through exception handling. 😊</p>\n</blockquote>\n<hr>\n<h2 id=\"heading-5\">Error Handling and Logging</h2>\n<ul>\n<li><strong>API response null check:</strong> If the response is null, perform appropriate warning logging to identify the problem.</li>\n<li><strong>Exception handling:</strong> Use try-catch blocks to log exceptions and ensure that the system as a whole is not affected.</li>\n<li><strong>Database constraint error:</strong> Check for possible constraint errors before saving and ensure stability through transaction processing if necessary.</li>\n</ul>\n<hr>\n<h2 id=\"heading-6\">Conclusion</h2>\n<p>In this way, we were able to collect and store the spot and futures market data from Binance in real-time and stably in <strong>TimescaleDB</strong>. During this process, we used various features of Spring Boot such as <code>WebClient</code>, scheduling, error handling, and logging, and we hope this will be helpful for your project! 🚀</p>\n<p>If you have any questions or comments, please feel free to contact me anytime! Have a good day! 😄</p>\n<p>Happy Coding!</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "System Overview",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "Key Implementation Points",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "1. API Calls Using WebClient",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "2. Service Layer Implementation",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "3. Data Collection with Scheduler",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "Error Handling and Logging",
            "level": 2,
            "isMainTopic": true,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "Conclusion",
            "level": 2,
            "isMainTopic": true,
            "position": 300
          }
        ]
      }
    },
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_2",
    "title": "Entasis Engine - 개발 계획서",
    "content": "\n# 금융 데이터 분석 및 AI 연동 솔루션 개발 계획서\n\n## 📋 개발 단계 개요\n\n### Phase 1: 기반 시스템 구축 (1-2개월)\n\n1. **데이터 파이프라인 구축**\n\n   - PostgreSQL + TimescaleDB 설정\n   - 기본 데이터 스키마 설계\n   - CCXT 연동 및 데이터 수집 구현\n\n2. **백엔드 기초 시스템**\n\n   - Java + Spring Boot 기반 서버 구축\n   - RESTful API 설계\n   - 기본 인증/인가 시스템 구현\n\n3. **프론트엔드 기초 작업**\n   - Next.js 프로젝트 설정\n   - 기본 UI/UX 디자인\n   - 컴포넌트 구조 설계\n\n### Phase 2: 핵심 기능 개발 (2-3개월)\n\n1. **데이터 처리 시스템**\n\n   - Apache Spark 기반 데이터 처리\n   - 실시간 데이터 스트리밍\n   - 데이터 정제 및 가공\n\n2. **AI 모델 개발**\n\n   - 기본 예측 모델 구현\n   - 백테스팅 시스템 구축\n   - 모델 평가 및 최적화\n\n3. **시각화 구현**\n   - D3.js 차트 구현\n   - 실시간 데이터 업데이트\n   - 대시보드 레이아웃 구성\n\n### Phase 3: 고도화 및 최적화 (2-3개월)\n\n1. **AI 모델 고도화**\n\n   - 고급 예측 모델 추가\n   - 앙상블 모델 구현\n   - 실시간 학습 시스템\n\n2. **성능 최적화**\n\n   - 데이터베이스 쿼리 최적화\n   - 캐싱 시스템 구현\n   - 분산 처리 시스템 보완\n\n3. **사용자 경험 개선**\n   - 반응형 UI 개선\n   - 성능 모니터링 추가\n   - 에러 처리 강화\n\n## 🎯 스프린트 계획\n\n### Sprint 1-2: 기반 시스템 (4주)\n\n- 데이터베이스 설계 및 구축\n- 기본 API 서버 구현\n- 프론트엔드 프로젝트 셋업\n\n### Sprint 3-4: 데이터 파이프라인 (4주)\n\n- CCXT 연동 구현\n- 실시간 데이터 수집\n- 기본 데이터 처리 로직\n\n### Sprint 5-6: AI 모델 기초 (4주)\n\n- 기본 예측 모델 개발\n- 백테스팅 시스템\n- 모델 평가 지표\n\n### Sprint 7-8: 시각화 (4주)\n\n- 차트 컴포넌트 개발\n- 대시보드 구현\n- 실시간 업데이트\n\n### Sprint 9-10: 고도화 (4주)\n\n- AI 모델 개선\n- 성능 최적화\n- UI/UX 개선\n\n## 📊 마일스톤\n\n### Milestone 1: MVP 출시 (2개월)\n\n- [x] 기본 데이터 수집\n- [x] 단순 예측 모델\n- [x] 기본 대시보드\n\n### Milestone 2: 베타 버전 (4개월)\n\n- [ ] 실시간 데이터 처리\n- [ ] 고급 AI 모델\n- [ ] 완성된 대시보드\n\n### Milestone 3: 정식 버전 (6개월)\n\n- [ ] 전체 기능 구현\n- [ ] 성능 최적화\n- [ ] 안정성 확보\n\n## 🛠 개발 환경 및 도구\n\n### 개발 환경\n\n- IDE: IntelliJ IDEA, VSCode\n- 버전 관리: Git, GitHub\n- CI/CD: Jenkins, GitHub Actions\n\n### 모니터링 도구\n\n- 서버 모니터링: Prometheus, Grafana\n- 로그 관리: ELK Stack\n- 성능 분석: JProfiler\n\n## 📈 품질 관리\n\n### 테스트 전략\n\n1. 단위 테스트\n\n   - JUnit, Jest\n   - 코드 커버리지 80% 이상\n\n2. 통합 테스트\n\n   - API 테스트\n   - E2E 테스트\n\n3. 성능 테스트\n   - 부하 테스트\n   - 스트레스 테스트\n\n### 코드 품질\n\n- ESLint, Prettier\n- SonarQube\n- 코드 리뷰 프로세스\n\n## 🔄 배포 전략\n\n### 개발 환경\n\n- 로컬 개발 환경\n- 개발 서버\n- 스테이징 서버\n- 프로덕션 서버\n\n### 배포 프로세스\n\n1. 개발 환경 테스트\n2. 스테이징 환경 검증\n3. 프로덕션 배포\n4. 모니터링 및 롤백 계획\n\n## ⚠️ 리스크 관리\n\n### 예상 리스크\n\n1. 데이터 처리 지연\n2. AI 모델 정확도\n3. 시스템 확장성\n\n### 대응 전략\n\n1. 캐싱 및 최적화\n2. 모델 평가 및 개선\n3. 확장 가능한 아키텍처\n\n## 📝 문서화\n\n### 개발 문서\n\n- API 문서 (Swagger)\n- 시스템 아키텍처 문서\n- 데이터베이스 스키마\n\n### 사용자 문서\n\n- 사용자 가이드\n- API 사용 설명서\n- 트러블슈팅 가이드\n\n이 프로젝트는 6개월간의 개발 기간을 통해 완성도 높은 금융 데이터 분석 시스템을 구축하는 것을 목표로 합니다. 각 단계별 세부 계획을 통해 체계적인 개발을 진행하겠습니다. 🚀\n",
    "date": "2025-02-11",
    "category": "projects",
    "tags": [
      "Project Management",
      "Development Planning",
      "System Design",
      "Roadmap",
      "Agile",
      "Sprint",
      "Milestone"
    ],
    "thumbnail": "/images/cryptocurrency.jpg",
    "translations": {
      "ko": {
        "title": "Entasis Engine - 개발 계획서",
        "description": "현물/선물/옵션 데이터 통합 분석 시스템 개발 로드맵",
        "content": "<h1 id=\"heading-0\">금융 데이터 분석 및 AI 연동 솔루션 개발 계획서</h1>\n<h2 id=\"heading-1\">📋 개발 단계 개요</h2>\n<h3 id=\"heading-2\">Phase 1: 기반 시스템 구축 (1-2개월)</h3>\n<ol>\n<li>\n<p><strong>데이터 파이프라인 구축</strong></p>\n<ul>\n<li>PostgreSQL + TimescaleDB 설정</li>\n<li>기본 데이터 스키마 설계</li>\n<li>CCXT 연동 및 데이터 수집 구현</li>\n</ul>\n</li>\n<li>\n<p><strong>백엔드 기초 시스템</strong></p>\n<ul>\n<li>Java + Spring Boot 기반 서버 구축</li>\n<li>RESTful API 설계</li>\n<li>기본 인증/인가 시스템 구현</li>\n</ul>\n</li>\n<li>\n<p><strong>프론트엔드 기초 작업</strong></p>\n<ul>\n<li>Next.js 프로젝트 설정</li>\n<li>기본 UI/UX 디자인</li>\n<li>컴포넌트 구조 설계</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"heading-3\">Phase 2: 핵심 기능 개발 (2-3개월)</h3>\n<ol>\n<li>\n<p><strong>데이터 처리 시스템</strong></p>\n<ul>\n<li>Apache Spark 기반 데이터 처리</li>\n<li>실시간 데이터 스트리밍</li>\n<li>데이터 정제 및 가공</li>\n</ul>\n</li>\n<li>\n<p><strong>AI 모델 개발</strong></p>\n<ul>\n<li>기본 예측 모델 구현</li>\n<li>백테스팅 시스템 구축</li>\n<li>모델 평가 및 최적화</li>\n</ul>\n</li>\n<li>\n<p><strong>시각화 구현</strong></p>\n<ul>\n<li>D3.js 차트 구현</li>\n<li>실시간 데이터 업데이트</li>\n<li>대시보드 레이아웃 구성</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"heading-4\">Phase 3: 고도화 및 최적화 (2-3개월)</h3>\n<ol>\n<li>\n<p><strong>AI 모델 고도화</strong></p>\n<ul>\n<li>고급 예측 모델 추가</li>\n<li>앙상블 모델 구현</li>\n<li>실시간 학습 시스템</li>\n</ul>\n</li>\n<li>\n<p><strong>성능 최적화</strong></p>\n<ul>\n<li>데이터베이스 쿼리 최적화</li>\n<li>캐싱 시스템 구현</li>\n<li>분산 처리 시스템 보완</li>\n</ul>\n</li>\n<li>\n<p><strong>사용자 경험 개선</strong></p>\n<ul>\n<li>반응형 UI 개선</li>\n<li>성능 모니터링 추가</li>\n<li>에러 처리 강화</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"heading-5\">🎯 스프린트 계획</h2>\n<h3 id=\"heading-6\">Sprint 1-2: 기반 시스템 (4주)</h3>\n<ul>\n<li>데이터베이스 설계 및 구축</li>\n<li>기본 API 서버 구현</li>\n<li>프론트엔드 프로젝트 셋업</li>\n</ul>\n<h3 id=\"heading-7\">Sprint 3-4: 데이터 파이프라인 (4주)</h3>\n<ul>\n<li>CCXT 연동 구현</li>\n<li>실시간 데이터 수집</li>\n<li>기본 데이터 처리 로직</li>\n</ul>\n<h3 id=\"heading-8\">Sprint 5-6: AI 모델 기초 (4주)</h3>\n<ul>\n<li>기본 예측 모델 개발</li>\n<li>백테스팅 시스템</li>\n<li>모델 평가 지표</li>\n</ul>\n<h3 id=\"heading-9\">Sprint 7-8: 시각화 (4주)</h3>\n<ul>\n<li>차트 컴포넌트 개발</li>\n<li>대시보드 구현</li>\n<li>실시간 업데이트</li>\n</ul>\n<h3 id=\"heading-10\">Sprint 9-10: 고도화 (4주)</h3>\n<ul>\n<li>AI 모델 개선</li>\n<li>성능 최적화</li>\n<li>UI/UX 개선</li>\n</ul>\n<h2 id=\"heading-11\">📊 마일스톤</h2>\n<h3 id=\"heading-12\">Milestone 1: MVP 출시 (2개월)</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked=\"\" disabled=\"\"> 기본 데이터 수집</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked=\"\" disabled=\"\"> 단순 예측 모델</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked=\"\" disabled=\"\"> 기본 대시보드</li>\n</ul>\n<h3 id=\"heading-13\">Milestone 2: 베타 버전 (4개월)</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 실시간 데이터 처리</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 고급 AI 모델</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 완성된 대시보드</li>\n</ul>\n<h3 id=\"heading-14\">Milestone 3: 정식 버전 (6개월)</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 전체 기능 구현</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 성능 최적화</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 안정성 확보</li>\n</ul>\n<h2 id=\"heading-15\">🛠 개발 환경 및 도구</h2>\n<h3 id=\"heading-16\">개발 환경</h3>\n<ul>\n<li>IDE: IntelliJ IDEA, VSCode</li>\n<li>버전 관리: Git, GitHub</li>\n<li>CI/CD: Jenkins, GitHub Actions</li>\n</ul>\n<h3 id=\"heading-17\">모니터링 도구</h3>\n<ul>\n<li>서버 모니터링: Prometheus, Grafana</li>\n<li>로그 관리: ELK Stack</li>\n<li>성능 분석: JProfiler</li>\n</ul>\n<h2 id=\"heading-18\">📈 품질 관리</h2>\n<h3 id=\"heading-19\">테스트 전략</h3>\n<ol>\n<li>\n<p>단위 테스트</p>\n<ul>\n<li>JUnit, Jest</li>\n<li>코드 커버리지 80% 이상</li>\n</ul>\n</li>\n<li>\n<p>통합 테스트</p>\n<ul>\n<li>API 테스트</li>\n<li>E2E 테스트</li>\n</ul>\n</li>\n<li>\n<p>성능 테스트</p>\n<ul>\n<li>부하 테스트</li>\n<li>스트레스 테스트</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"heading-20\">코드 품질</h3>\n<ul>\n<li>ESLint, Prettier</li>\n<li>SonarQube</li>\n<li>코드 리뷰 프로세스</li>\n</ul>\n<h2 id=\"heading-21\">🔄 배포 전략</h2>\n<h3 id=\"heading-22\">개발 환경</h3>\n<ul>\n<li>로컬 개발 환경</li>\n<li>개발 서버</li>\n<li>스테이징 서버</li>\n<li>프로덕션 서버</li>\n</ul>\n<h3 id=\"heading-23\">배포 프로세스</h3>\n<ol>\n<li>개발 환경 테스트</li>\n<li>스테이징 환경 검증</li>\n<li>프로덕션 배포</li>\n<li>모니터링 및 롤백 계획</li>\n</ol>\n<h2 id=\"heading-24\">⚠️ 리스크 관리</h2>\n<h3 id=\"heading-25\">예상 리스크</h3>\n<ol>\n<li>데이터 처리 지연</li>\n<li>AI 모델 정확도</li>\n<li>시스템 확장성</li>\n</ol>\n<h3 id=\"heading-26\">대응 전략</h3>\n<ol>\n<li>캐싱 및 최적화</li>\n<li>모델 평가 및 개선</li>\n<li>확장 가능한 아키텍처</li>\n</ol>\n<h2 id=\"heading-27\">📝 문서화</h2>\n<h3 id=\"heading-28\">개발 문서</h3>\n<ul>\n<li>API 문서 (Swagger)</li>\n<li>시스템 아키텍처 문서</li>\n<li>데이터베이스 스키마</li>\n</ul>\n<h3 id=\"heading-29\">사용자 문서</h3>\n<ul>\n<li>사용자 가이드</li>\n<li>API 사용 설명서</li>\n<li>트러블슈팅 가이드</li>\n</ul>\n<p>이 프로젝트는 6개월간의 개발 기간을 통해 완성도 높은 금융 데이터 분석 시스템을 구축하는 것을 목표로 합니다. 각 단계별 세부 계획을 통해 체계적인 개발을 진행하겠습니다. 🚀</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "금융 데이터 분석 및 AI 연동 솔루션 개발 계획서",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "📋 개발 단계 개요",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "Phase 1: 기반 시스템 구축 (1-2개월)",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "Phase 2: 핵심 기능 개발 (2-3개월)",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "Phase 3: 고도화 및 최적화 (2-3개월)",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "🎯 스프린트 계획",
            "level": 2,
            "isMainTopic": true,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "Sprint 1-2: 기반 시스템 (4주)",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "Sprint 3-4: 데이터 파이프라인 (4주)",
            "level": 3,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "Sprint 5-6: AI 모델 기초 (4주)",
            "level": 3,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "Sprint 7-8: 시각화 (4주)",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "Sprint 9-10: 고도화 (4주)",
            "level": 3,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "📊 마일스톤",
            "level": 2,
            "isMainTopic": true,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "Milestone 1: MVP 출시 (2개월)",
            "level": 3,
            "isMainTopic": false,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "Milestone 2: 베타 버전 (4개월)",
            "level": 3,
            "isMainTopic": false,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "Milestone 3: 정식 버전 (6개월)",
            "level": 3,
            "isMainTopic": false,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "🛠 개발 환경 및 도구",
            "level": 2,
            "isMainTopic": true,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "개발 환경",
            "level": 3,
            "isMainTopic": false,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "모니터링 도구",
            "level": 3,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "📈 품질 관리",
            "level": 2,
            "isMainTopic": true,
            "position": 900
          },
          {
            "id": "heading-19",
            "text": "테스트 전략",
            "level": 3,
            "isMainTopic": false,
            "position": 950
          },
          {
            "id": "heading-20",
            "text": "코드 품질",
            "level": 3,
            "isMainTopic": false,
            "position": 1000
          },
          {
            "id": "heading-21",
            "text": "🔄 배포 전략",
            "level": 2,
            "isMainTopic": true,
            "position": 1050
          },
          {
            "id": "heading-22",
            "text": "개발 환경",
            "level": 3,
            "isMainTopic": false,
            "position": 1100
          },
          {
            "id": "heading-23",
            "text": "배포 프로세스",
            "level": 3,
            "isMainTopic": false,
            "position": 1150
          },
          {
            "id": "heading-24",
            "text": "⚠️ 리스크 관리",
            "level": 2,
            "isMainTopic": true,
            "position": 1200
          },
          {
            "id": "heading-25",
            "text": "예상 리스크",
            "level": 3,
            "isMainTopic": false,
            "position": 1250
          },
          {
            "id": "heading-26",
            "text": "대응 전략",
            "level": 3,
            "isMainTopic": false,
            "position": 1300
          },
          {
            "id": "heading-27",
            "text": "📝 문서화",
            "level": 2,
            "isMainTopic": true,
            "position": 1350
          },
          {
            "id": "heading-28",
            "text": "개발 문서",
            "level": 3,
            "isMainTopic": false,
            "position": 1400
          },
          {
            "id": "heading-29",
            "text": "사용자 문서",
            "level": 3,
            "isMainTopic": false,
            "position": 1450
          }
        ]
      },
      "en": {
        "title": "Entasis Engine - Development Plan",
        "description": "Development roadmap for integrated spot/futures/options data analysis system",
        "content": "<h1 id=\"heading-0\">Financial Data Analysis and AI Integration Solution Development Plan</h1>\n<h2 id=\"heading-1\">📋 Development Phase Overview</h2>\n<h3 id=\"heading-2\">Phase 1: Foundation System Setup (1-2 months)</h3>\n<ol>\n<li>\n<p><strong>Data Pipeline Setup</strong></p>\n<ul>\n<li>PostgreSQL + TimescaleDB configuration</li>\n<li>Basic data schema design</li>\n<li>CCXT integration and data collection implementation</li>\n</ul>\n</li>\n<li>\n<p><strong>Backend Basic System</strong></p>\n<ul>\n<li>Java + Spring Boot server setup</li>\n<li>RESTful API design</li>\n<li>Basic authentication/authorization system implementation</li>\n</ul>\n</li>\n<li>\n<p><strong>Frontend Basic Work</strong></p>\n<ul>\n<li>Next.js project setup</li>\n<li>Basic UI/UX design</li>\n<li>Component structure design</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"heading-3\">Phase 2: Core Feature Development (2-3 months)</h3>\n<ol>\n<li>\n<p><strong>Data Processing System</strong></p>\n<ul>\n<li>Apache Spark based data processing</li>\n<li>Real-time data streaming</li>\n<li>Data cleansing and processing</li>\n</ul>\n</li>\n<li>\n<p><strong>AI Model Development</strong></p>\n<ul>\n<li>Basic prediction model implementation</li>\n<li>Backtesting system setup</li>\n<li>Model evaluation and optimization</li>\n</ul>\n</li>\n<li>\n<p><strong>Visualization Implementation</strong></p>\n<ul>\n<li>D3.js chart implementation</li>\n<li>Real-time data updates</li>\n<li>Dashboard layout configuration</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"heading-4\">Phase 3: Advanced Development and Optimization (2-3 months)</h3>\n<ol>\n<li>\n<p><strong>AI Model Enhancement</strong></p>\n<ul>\n<li>Advanced prediction models addition</li>\n<li>Ensemble model implementation</li>\n<li>Real-time learning system</li>\n</ul>\n</li>\n<li>\n<p><strong>Performance Optimization</strong></p>\n<ul>\n<li>Database query optimization</li>\n<li>Caching system implementation</li>\n<li>Distributed processing system enhancement</li>\n</ul>\n</li>\n<li>\n<p><strong>User Experience Improvement</strong></p>\n<ul>\n<li>Responsive UI enhancement</li>\n<li>Performance monitoring addition</li>\n<li>Error handling enhancement</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"heading-5\">🎯 Sprint Plan</h2>\n<h3 id=\"heading-6\">Sprint 1-2: Foundation System (4 weeks)</h3>\n<ul>\n<li>Database design and setup</li>\n<li>Basic API server implementation</li>\n<li>Frontend project setup</li>\n</ul>\n<h3 id=\"heading-7\">Sprint 3-4: Data Pipeline (4 weeks)</h3>\n<ul>\n<li>CCXT integration implementation</li>\n<li>Real-time data collection</li>\n<li>Basic data processing logic</li>\n</ul>\n<h3 id=\"heading-8\">Sprint 5-6: AI Model Basics (4 weeks)</h3>\n<ul>\n<li>Basic prediction model development</li>\n<li>Backtesting system</li>\n<li>Model evaluation metrics</li>\n</ul>\n<h3 id=\"heading-9\">Sprint 7-8: Visualization (4 weeks)</h3>\n<ul>\n<li>Chart component development</li>\n<li>Dashboard implementation</li>\n<li>Real-time updates</li>\n</ul>\n<h3 id=\"heading-10\">Sprint 9-10: Enhancement (4 weeks)</h3>\n<ul>\n<li>AI model improvement</li>\n<li>Performance optimization</li>\n<li>UI/UX enhancement</li>\n</ul>\n<h2 id=\"heading-11\">📊 Milestones</h2>\n<h3 id=\"heading-12\">Milestone 1: MVP Release (2 months)</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked=\"\" disabled=\"\"> Basic data collection</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked=\"\" disabled=\"\"> Simple prediction model</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked=\"\" disabled=\"\"> Basic dashboard</li>\n</ul>\n<h3 id=\"heading-13\">Milestone 2: Beta Version (4 months)</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Real-time data processing</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Advanced AI models</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Complete dashboard</li>\n</ul>\n<h3 id=\"heading-14\">Milestone 3: Official Version (6 months)</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Full feature implementation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Performance optimization</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Stability assurance</li>\n</ul>\n<h2 id=\"heading-15\">🛠 Development Environment and Tools</h2>\n<h3 id=\"heading-16\">Development Environment</h3>\n<ul>\n<li>IDE: IntelliJ IDEA, VSCode</li>\n<li>Version Control: Git, GitHub</li>\n<li>CI/CD: Jenkins, GitHub Actions</li>\n</ul>\n<h3 id=\"heading-17\">Monitoring Tools</h3>\n<ul>\n<li>Server Monitoring: Prometheus, Grafana</li>\n<li>Log Management: ELK Stack</li>\n<li>Performance Analysis: JProfiler</li>\n</ul>\n<h2 id=\"heading-18\">📈 Quality Management</h2>\n<h3 id=\"heading-19\">Testing Strategy</h3>\n<ol>\n<li>\n<p>Unit Testing</p>\n<ul>\n<li>JUnit, Jest</li>\n<li>Code coverage over 80%</li>\n</ul>\n</li>\n<li>\n<p>Integration Testing</p>\n<ul>\n<li>API testing</li>\n<li>E2E testing</li>\n</ul>\n</li>\n<li>\n<p>Performance Testing</p>\n<ul>\n<li>Load testing</li>\n<li>Stress testing</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"heading-20\">Code Quality</h3>\n<ul>\n<li>ESLint, Prettier</li>\n<li>SonarQube</li>\n<li>Code review process</li>\n</ul>\n<h2 id=\"heading-21\">🔄 Deployment Strategy</h2>\n<h3 id=\"heading-22\">Development Environment</h3>\n<ul>\n<li>Local development environment</li>\n<li>Development server</li>\n<li>Staging server</li>\n<li>Production server</li>\n</ul>\n<h3 id=\"heading-23\">Deployment Process</h3>\n<ol>\n<li>Development environment testing</li>\n<li>Staging environment validation</li>\n<li>Production deployment</li>\n<li>Monitoring and rollback plan</li>\n</ol>\n<h2 id=\"heading-24\">⚠️ Risk Management</h2>\n<h3 id=\"heading-25\">Anticipated Risks</h3>\n<ol>\n<li>Data processing delays</li>\n<li>AI model accuracy</li>\n<li>System scalability</li>\n</ol>\n<h3 id=\"heading-26\">Response Strategy</h3>\n<ol>\n<li>Caching and optimization</li>\n<li>Model evaluation and improvement</li>\n<li>Scalable architecture</li>\n</ol>\n<h2 id=\"heading-27\">📝 Documentation</h2>\n<h3 id=\"heading-28\">Development Documentation</h3>\n<ul>\n<li>API documentation (Swagger)</li>\n<li>System architecture documentation</li>\n<li>Database schema</li>\n</ul>\n<h3 id=\"heading-29\">User Documentation</h3>\n<ul>\n<li>User guide</li>\n<li>API usage manual</li>\n<li>Troubleshooting guide</li>\n</ul>\n<p>This project aims to build a high-quality financial data analysis system over a 6-month development period. We will proceed with systematic development through detailed plans for each phase. 🚀</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "Financial Data Analysis and AI Integration Solution Development Plan",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "📋 Development Phase Overview",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "Phase 1: Foundation System Setup (1-2 months)",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "Phase 2: Core Feature Development (2-3 months)",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "Phase 3: Advanced Development and Optimization (2-3 months)",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "🎯 Sprint Plan",
            "level": 2,
            "isMainTopic": true,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "Sprint 1-2: Foundation System (4 weeks)",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "Sprint 3-4: Data Pipeline (4 weeks)",
            "level": 3,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "Sprint 5-6: AI Model Basics (4 weeks)",
            "level": 3,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "Sprint 7-8: Visualization (4 weeks)",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "Sprint 9-10: Enhancement (4 weeks)",
            "level": 3,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "📊 Milestones",
            "level": 2,
            "isMainTopic": true,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "Milestone 1: MVP Release (2 months)",
            "level": 3,
            "isMainTopic": false,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "Milestone 2: Beta Version (4 months)",
            "level": 3,
            "isMainTopic": false,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "Milestone 3: Official Version (6 months)",
            "level": 3,
            "isMainTopic": false,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "🛠 Development Environment and Tools",
            "level": 2,
            "isMainTopic": true,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "Development Environment",
            "level": 3,
            "isMainTopic": false,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "Monitoring Tools",
            "level": 3,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "📈 Quality Management",
            "level": 2,
            "isMainTopic": true,
            "position": 900
          },
          {
            "id": "heading-19",
            "text": "Testing Strategy",
            "level": 3,
            "isMainTopic": false,
            "position": 950
          },
          {
            "id": "heading-20",
            "text": "Code Quality",
            "level": 3,
            "isMainTopic": false,
            "position": 1000
          },
          {
            "id": "heading-21",
            "text": "🔄 Deployment Strategy",
            "level": 2,
            "isMainTopic": true,
            "position": 1050
          },
          {
            "id": "heading-22",
            "text": "Development Environment",
            "level": 3,
            "isMainTopic": false,
            "position": 1100
          },
          {
            "id": "heading-23",
            "text": "Deployment Process",
            "level": 3,
            "isMainTopic": false,
            "position": 1150
          },
          {
            "id": "heading-24",
            "text": "⚠️ Risk Management",
            "level": 2,
            "isMainTopic": true,
            "position": 1200
          },
          {
            "id": "heading-25",
            "text": "Anticipated Risks",
            "level": 3,
            "isMainTopic": false,
            "position": 1250
          },
          {
            "id": "heading-26",
            "text": "Response Strategy",
            "level": 3,
            "isMainTopic": false,
            "position": 1300
          },
          {
            "id": "heading-27",
            "text": "📝 Documentation",
            "level": 2,
            "isMainTopic": true,
            "position": 1350
          },
          {
            "id": "heading-28",
            "text": "Development Documentation",
            "level": 3,
            "isMainTopic": false,
            "position": 1400
          },
          {
            "id": "heading-29",
            "text": "User Documentation",
            "level": 3,
            "isMainTopic": false,
            "position": 1450
          }
        ]
      }
    },
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_3",
    "title": "Entasis Engine - 세부 기능 정의",
    "content": "\n# 금융 데이터 분석 시스템 세부 기능 정의\n\n## 📊 핵심 기능 상세\n\n### 1. 데이터 수집 시스템\n\n#### 1.1 거래소 연동\n\n- [ ] Binance API 연동 구현\n  - WebSocket 실시간 데이터 수신\n  - REST API 히스토리 데이터 수집\n- [ ] Bybit API 연동 구현\n  - 선물 거래 데이터 수집\n  - 레버리지 정보 수집\n- [ ] Deribit API 연동 구현\n  - 옵션 데이터 수집\n  - 그리스 지표 계산\n\n#### 1.2 데이터 정제\n\n- [ ] 실시간 데이터 정규화\n- [ ] 이상치 탐지 및 제거\n- [ ] 누락 데이터 처리\n\n### 2. AI 분석 엔진\n\n#### 2.1 시계열 예측\n\n- [ ] LSTM 모델 구현\n  - 가격 예측 모델\n  - 변동성 예측 모델\n- [ ] 앙상블 모델 구현\n  - Random Forest\n  - XGBoost\n  - LightGBM\n\n#### 2.2 포트폴리오 최적화\n\n- [ ] Modern Portfolio Theory 구현\n- [ ] Risk Parity 전략 구현\n- [ ] 동적 자산 배분 알고리즘\n\n### 3. 리스크 관리 시스템\n\n#### 3.1 리스크 지표 계산\n\n- [ ] Value at Risk (VaR) 계산\n- [ ] Expected Shortfall 계산\n- [ ] 변동성 지표 모니터링\n\n#### 3.2 포지션 관리\n\n- [ ] 레버리지 최적화\n- [ ] 스탑로스 자동화\n- [ ] 마진 콜 알림\n\n### 4. 대시보드 UI\n\n#### 4.1 차트 시스템\n\n- [ ] 캔들스틱 차트 구현\n- [ ] 기술적 지표 표시\n- [ ] 실시간 업데이트\n\n#### 4.2 포트폴리오 뷰\n\n- [ ] 자산 배분 현황\n- [ ] 수익률 트래킹\n- [ ] 리스크 지표 시각화\n\n---\n\n## 📋 칸반보드 구성\n\n### 🎯 백로그 (Backlog)\n\n#### 우선순위: 높음\n\n- [ ] 데이터베이스 스키마 설계\n- [ ] API 서버 기본 구조 구축\n- [ ] 사용자 인증 시스템 구현\n- [ ] 기본 대시보드 레이아웃\n\n#### 우선순위: 중간\n\n- [ ] 백테스팅 엔진 구현\n- [ ] 알림 시스템 구축\n- [ ] 포트폴리오 분석 도구\n- [ ] 리포트 생성 시스템\n\n#### 우선순위: 낮음\n\n- [ ] 소셜 트레이딩 기능\n- [ ] 모바일 앱 개발\n- [ ] API 문서화\n- [ ] 튜토리얼 시스템\n\n### 🏃 진행 중 (In Progress)\n\n#### Sprint 1: 기반 시스템\n\n- [ ] PostgreSQL 데이터베이스 설정\n- [ ] Spring Boot 프로젝트 셋업\n- [ ] Next.js 프로젝트 초기화\n\n#### Sprint 2: 데이터 파이프라인\n\n- [ ] CCXT 라이브러리 연동\n- [ ] 실시간 데이터 수집 구현\n- [ ] 데이터 정제 파이프라인\n\n### ✅ 완료 (Done)\n\n#### 초기 설정\n\n- [x] 프로젝트 요구사항 정의\n- [x] 기술 스택 선정\n- [x] 개발 환경 구성\n\n---\n\n## 📅 스프린트별 작업 항목\n\n### Sprint 1 (1-2주차)\n\n```plaintext\n+------------------+     +------------------+     +------------------+\n|      To Do       |     |   In Progress    |     |      Done        |\n+------------------+     +------------------+     +------------------+\n| - DB 스키마 설계 |     | - 개발환경 설정  |     | - 요구사항 정의  |\n| - API 구조 설계  |     | - Git 저장소     |     | - 팀 구성        |\n+------------------+     +------------------+     +------------------+\n```\n\n### Sprint 2 (3-4주차)\n\n```plaintext\n+------------------+     +------------------+     +------------------+\n|      To Do       |     |   In Progress    |     |      Done        |\n+------------------+     +------------------+     +------------------+\n| - 데이터 정제    |     | - DB 구축        |     | - 스키마 설계    |\n| - API 구현       |     | - 기본 API 개발  |     | - 환경 설정      |\n+------------------+     +------------------+     +------------------+\n```\n\n---\n\n## 🔄 작업 추적\n\n### 현재 진행상황\n\n- 전체 진행률: 15%\n- 주요 마일스톤: MVP 개발 단계\n- 예상 완료일: 2024년 9월\n\n### 다음 단계 준비사항\n\n1. 스프린트 1 회고\n2. 스프린트 2 계획 수립\n3. 리스크 요소 점검\n\n이 문서는 프로젝트의 진행 상황을 추적하고 관리하기 위한 기준으로 사용됩니다. 각 기능과 작업은 우선순위와 의존성을 고려하여 순차적으로 구현될 예정입니다. 🚀\n",
    "date": "2025-02-11",
    "category": "projects",
    "tags": [
      "기능 정의",
      "칸반보드",
      "태스크 관리",
      "백로그",
      "스프린트",
      "작업 추적"
    ],
    "thumbnail": "/images/cryptocurrency.jpg",
    "translations": {
      "ko": {
        "title": "Entasis Engine - 세부 기능 정의",
        "description": "금융 데이터 분석 시스템의 세부 기능 정의 및 칸반보드",
        "content": "<h1 id=\"heading-0\">금융 데이터 분석 시스템 세부 기능 정의</h1>\n<h2 id=\"heading-1\">📊 핵심 기능 상세</h2>\n<h3 id=\"heading-2\">1. 데이터 수집 시스템</h3>\n<h4 id=\"heading-3\">1.1 거래소 연동</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Binance API 연동 구현\n<ul>\n<li>WebSocket 실시간 데이터 수신</li>\n<li>REST API 히스토리 데이터 수집</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Bybit API 연동 구현\n<ul>\n<li>선물 거래 데이터 수집</li>\n<li>레버리지 정보 수집</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Deribit API 연동 구현\n<ul>\n<li>옵션 데이터 수집</li>\n<li>그리스 지표 계산</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"heading-4\">1.2 데이터 정제</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 실시간 데이터 정규화</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 이상치 탐지 및 제거</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 누락 데이터 처리</li>\n</ul>\n<h3 id=\"heading-5\">2. AI 분석 엔진</h3>\n<h4 id=\"heading-6\">2.1 시계열 예측</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> LSTM 모델 구현\n<ul>\n<li>가격 예측 모델</li>\n<li>변동성 예측 모델</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 앙상블 모델 구현\n<ul>\n<li>Random Forest</li>\n<li>XGBoost</li>\n<li>LightGBM</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"heading-7\">2.2 포트폴리오 최적화</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Modern Portfolio Theory 구현</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Risk Parity 전략 구현</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 동적 자산 배분 알고리즘</li>\n</ul>\n<h3 id=\"heading-8\">3. 리스크 관리 시스템</h3>\n<h4 id=\"heading-9\">3.1 리스크 지표 계산</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Value at Risk (VaR) 계산</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Expected Shortfall 계산</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 변동성 지표 모니터링</li>\n</ul>\n<h4 id=\"heading-10\">3.2 포지션 관리</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 레버리지 최적화</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 스탑로스 자동화</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 마진 콜 알림</li>\n</ul>\n<h3 id=\"heading-11\">4. 대시보드 UI</h3>\n<h4 id=\"heading-12\">4.1 차트 시스템</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 캔들스틱 차트 구현</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 기술적 지표 표시</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 실시간 업데이트</li>\n</ul>\n<h4 id=\"heading-13\">4.2 포트폴리오 뷰</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 자산 배분 현황</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 수익률 트래킹</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 리스크 지표 시각화</li>\n</ul>\n<hr>\n<h2 id=\"heading-14\">📋 칸반보드 구성</h2>\n<h3 id=\"heading-15\">🎯 백로그 (Backlog)</h3>\n<h4 id=\"heading-16\">우선순위: 높음</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 데이터베이스 스키마 설계</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> API 서버 기본 구조 구축</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 사용자 인증 시스템 구현</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 기본 대시보드 레이아웃</li>\n</ul>\n<h4 id=\"heading-17\">우선순위: 중간</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 백테스팅 엔진 구현</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 알림 시스템 구축</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 포트폴리오 분석 도구</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 리포트 생성 시스템</li>\n</ul>\n<h4 id=\"heading-18\">우선순위: 낮음</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 소셜 트레이딩 기능</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 모바일 앱 개발</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> API 문서화</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 튜토리얼 시스템</li>\n</ul>\n<h3 id=\"heading-19\">🏃 진행 중 (In Progress)</h3>\n<h4 id=\"heading-20\">Sprint 1: 기반 시스템</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> PostgreSQL 데이터베이스 설정</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Spring Boot 프로젝트 셋업</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Next.js 프로젝트 초기화</li>\n</ul>\n<h4 id=\"heading-21\">Sprint 2: 데이터 파이프라인</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> CCXT 라이브러리 연동</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 실시간 데이터 수집 구현</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 데이터 정제 파이프라인</li>\n</ul>\n<h3 id=\"heading-22\">✅ 완료 (Done)</h3>\n<h4 id=\"heading-23\">초기 설정</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked=\"\" disabled=\"\"> 프로젝트 요구사항 정의</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked=\"\" disabled=\"\"> 기술 스택 선정</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked=\"\" disabled=\"\"> 개발 환경 구성</li>\n</ul>\n<hr>\n<h2 id=\"heading-24\">📅 스프린트별 작업 항목</h2>\n<h3 id=\"heading-25\">Sprint 1 (1-2주차)</h3>\n<pre><code class=\"language-plaintext\">+------------------+     +------------------+     +------------------+\n|      To Do       |     |   In Progress    |     |      Done        |\n+------------------+     +------------------+     +------------------+\n| - DB 스키마 설계 |     | - 개발환경 설정  |     | - 요구사항 정의  |\n| - API 구조 설계  |     | - Git 저장소     |     | - 팀 구성        |\n+------------------+     +------------------+     +------------------+\n</code></pre>\n<h3 id=\"heading-26\">Sprint 2 (3-4주차)</h3>\n<pre><code class=\"language-plaintext\">+------------------+     +------------------+     +------------------+\n|      To Do       |     |   In Progress    |     |      Done        |\n+------------------+     +------------------+     +------------------+\n| - 데이터 정제    |     | - DB 구축        |     | - 스키마 설계    |\n| - API 구현       |     | - 기본 API 개발  |     | - 환경 설정      |\n+------------------+     +------------------+     +------------------+\n</code></pre>\n<hr>\n<h2 id=\"heading-27\">🔄 작업 추적</h2>\n<h3 id=\"heading-28\">현재 진행상황</h3>\n<ul>\n<li>전체 진행률: 15%</li>\n<li>주요 마일스톤: MVP 개발 단계</li>\n<li>예상 완료일: 2024년 9월</li>\n</ul>\n<h3 id=\"heading-29\">다음 단계 준비사항</h3>\n<ol>\n<li>스프린트 1 회고</li>\n<li>스프린트 2 계획 수립</li>\n<li>리스크 요소 점검</li>\n</ol>\n<p>이 문서는 프로젝트의 진행 상황을 추적하고 관리하기 위한 기준으로 사용됩니다. 각 기능과 작업은 우선순위와 의존성을 고려하여 순차적으로 구현될 예정입니다. 🚀</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "금융 데이터 분석 시스템 세부 기능 정의",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "📊 핵심 기능 상세",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "1. 데이터 수집 시스템",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "1.1 거래소 연동",
            "level": 4,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "1.2 데이터 정제",
            "level": 4,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "2. AI 분석 엔진",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "2.1 시계열 예측",
            "level": 4,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "2.2 포트폴리오 최적화",
            "level": 4,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "3. 리스크 관리 시스템",
            "level": 3,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "3.1 리스크 지표 계산",
            "level": 4,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "3.2 포지션 관리",
            "level": 4,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "4. 대시보드 UI",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "4.1 차트 시스템",
            "level": 4,
            "isMainTopic": false,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "4.2 포트폴리오 뷰",
            "level": 4,
            "isMainTopic": false,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "📋 칸반보드 구성",
            "level": 2,
            "isMainTopic": true,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "🎯 백로그 (Backlog)",
            "level": 3,
            "isMainTopic": false,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "우선순위: 높음",
            "level": 4,
            "isMainTopic": false,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "우선순위: 중간",
            "level": 4,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "우선순위: 낮음",
            "level": 4,
            "isMainTopic": false,
            "position": 900
          },
          {
            "id": "heading-19",
            "text": "🏃 진행 중 (In Progress)",
            "level": 3,
            "isMainTopic": false,
            "position": 950
          },
          {
            "id": "heading-20",
            "text": "Sprint 1: 기반 시스템",
            "level": 4,
            "isMainTopic": false,
            "position": 1000
          },
          {
            "id": "heading-21",
            "text": "Sprint 2: 데이터 파이프라인",
            "level": 4,
            "isMainTopic": false,
            "position": 1050
          },
          {
            "id": "heading-22",
            "text": "✅ 완료 (Done)",
            "level": 3,
            "isMainTopic": false,
            "position": 1100
          },
          {
            "id": "heading-23",
            "text": "초기 설정",
            "level": 4,
            "isMainTopic": false,
            "position": 1150
          },
          {
            "id": "heading-24",
            "text": "📅 스프린트별 작업 항목",
            "level": 2,
            "isMainTopic": true,
            "position": 1200
          },
          {
            "id": "heading-25",
            "text": "Sprint 1 (1-2주차)",
            "level": 3,
            "isMainTopic": false,
            "position": 1250
          },
          {
            "id": "heading-26",
            "text": "Sprint 2 (3-4주차)",
            "level": 3,
            "isMainTopic": false,
            "position": 1300
          },
          {
            "id": "heading-27",
            "text": "🔄 작업 추적",
            "level": 2,
            "isMainTopic": true,
            "position": 1350
          },
          {
            "id": "heading-28",
            "text": "현재 진행상황",
            "level": 3,
            "isMainTopic": false,
            "position": 1400
          },
          {
            "id": "heading-29",
            "text": "다음 단계 준비사항",
            "level": 3,
            "isMainTopic": false,
            "position": 1450
          }
        ]
      },
      "en": {
        "title": "Entasis Engine - Detailed Feature Definition",
        "description": "Detailed feature definition and kanban board for financial data analysis system",
        "content": "<h1 id=\"heading-0\">Financial Data Analysis System Detailed Feature Definition</h1>\n<h2 id=\"heading-1\">📊 Core Features Detail</h2>\n<h3 id=\"heading-2\">1. Data Collection System</h3>\n<h4 id=\"heading-3\">1.1 Exchange Integration</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Implement Binance API Integration\n<ul>\n<li>WebSocket real-time data reception</li>\n<li>REST API historical data collection</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Implement Bybit API Integration\n<ul>\n<li>Futures trading data collection</li>\n<li>Leverage information collection</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Implement Deribit API Integration\n<ul>\n<li>Options data collection</li>\n<li>Greeks indicator calculation</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"heading-4\">1.2 Data Cleansing</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Real-time data normalization</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Anomaly detection and removal</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Missing data handling</li>\n</ul>\n<h3 id=\"heading-5\">2. AI Analysis Engine</h3>\n<h4 id=\"heading-6\">2.1 Time Series Prediction</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> LSTM Model Implementation\n<ul>\n<li>Price prediction model</li>\n<li>Volatility prediction model</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Ensemble Model Implementation\n<ul>\n<li>Random Forest</li>\n<li>XGBoost</li>\n<li>LightGBM</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"heading-7\">2.2 Portfolio Optimization</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Modern Portfolio Theory Implementation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Risk Parity Strategy Implementation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Dynamic Asset Allocation Algorithm</li>\n</ul>\n<h3 id=\"heading-8\">3. Risk Management System</h3>\n<h4 id=\"heading-9\">3.1 Risk Metrics Calculation</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Value at Risk (VaR) Calculation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Expected Shortfall Calculation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Volatility Metrics Monitoring</li>\n</ul>\n<h4 id=\"heading-10\">3.2 Position Management</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Leverage Optimization</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Stop Loss Automation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Margin Call Alerts</li>\n</ul>\n<h3 id=\"heading-11\">4. Dashboard UI</h3>\n<h4 id=\"heading-12\">4.1 Chart System</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Candlestick Chart Implementation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Technical Indicator Display</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Real-time Updates</li>\n</ul>\n<h4 id=\"heading-13\">4.2 Portfolio View</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Asset Allocation Status</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Return Tracking</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Risk Metrics Visualization</li>\n</ul>\n<hr>\n<h2 id=\"heading-14\">📋 Kanban Board Structure</h2>\n<h3 id=\"heading-15\">🎯 Backlog</h3>\n<h4 id=\"heading-16\">High Priority</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Database Schema Design</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> API Server Basic Structure Setup</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> User Authentication System Implementation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Basic Dashboard Layout</li>\n</ul>\n<h4 id=\"heading-17\">Medium Priority</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Backtesting Engine Implementation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Alert System Setup</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Portfolio Analysis Tools</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Report Generation System</li>\n</ul>\n<h4 id=\"heading-18\">Low Priority</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Social Trading Features</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Mobile App Development</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> API Documentation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Tutorial System</li>\n</ul>\n<h3 id=\"heading-19\">🏃 In Progress</h3>\n<h4 id=\"heading-20\">Sprint 1: Foundation System</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> PostgreSQL Database Configuration</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Spring Boot Project Setup</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Next.js Project Initialization</li>\n</ul>\n<h4 id=\"heading-21\">Sprint 2: Data Pipeline</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> CCXT Library Integration</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Real-time Data Collection Implementation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Data Cleansing Pipeline</li>\n</ul>\n<h3 id=\"heading-22\">✅ Done</h3>\n<h4 id=\"heading-23\">Initial Setup</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked=\"\" disabled=\"\"> Project Requirements Definition</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked=\"\" disabled=\"\"> Technology Stack Selection</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked=\"\" disabled=\"\"> Development Environment Setup</li>\n</ul>\n<hr>\n<h2 id=\"heading-24\">📅 Sprint Work Items</h2>\n<h3 id=\"heading-25\">Sprint 1 (Weeks 1-2)</h3>\n<pre><code class=\"language-plaintext\">+------------------+     +------------------+     +------------------+\n|      To Do       |     |   In Progress    |     |      Done        |\n+------------------+     +------------------+     +------------------+\n| - DB Schema Design |     | - Dev Env Setup   |     | - Requirements Def |\n| - API Design      |     | - Git Repository  |     | - Team Formation   |\n+------------------+     +------------------+     +------------------+\n</code></pre>\n<h3 id=\"heading-26\">Sprint 2 (3-4주차)</h3>\n<pre><code class=\"language-plaintext\">+------------------+     +------------------+     +------------------+\n|      To Do       |     |   In Progress    |     |      Done        |\n+------------------+     +------------------+     +------------------+\n| - Data Cleansing |     | - DB Setup       |     | - Schema Design  |\n| - API Implementation |  | - Basic API Dev  |     | - Env Setup     |\n+------------------+     +------------------+     +------------------+\n</code></pre>\n<hr>\n<h2 id=\"heading-27\">🔄 Progress Tracking</h2>\n<h3 id=\"heading-28\">Current Status</h3>\n<ul>\n<li>Overall Progress: 15%</li>\n<li>Major Milestone: MVP Development Phase</li>\n<li>Expected Completion: September 2024</li>\n</ul>\n<h3 id=\"heading-29\">Next Steps Preparation</h3>\n<ol>\n<li>Sprint 1 Retrospective</li>\n<li>Sprint 2 Planning</li>\n<li>Risk Factor Review</li>\n</ol>\n<p>This document serves as a baseline for tracking and managing project progress. Each feature and task will be implemented sequentially, considering priorities and dependencies. 🚀</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "Financial Data Analysis System Detailed Feature Definition",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "📊 Core Features Detail",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "1. Data Collection System",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "1.1 Exchange Integration",
            "level": 4,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "1.2 Data Cleansing",
            "level": 4,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "2. AI Analysis Engine",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "2.1 Time Series Prediction",
            "level": 4,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "2.2 Portfolio Optimization",
            "level": 4,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "3. Risk Management System",
            "level": 3,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "3.1 Risk Metrics Calculation",
            "level": 4,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "3.2 Position Management",
            "level": 4,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "4. Dashboard UI",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "4.1 Chart System",
            "level": 4,
            "isMainTopic": false,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "4.2 Portfolio View",
            "level": 4,
            "isMainTopic": false,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "📋 Kanban Board Structure",
            "level": 2,
            "isMainTopic": true,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "🎯 Backlog",
            "level": 3,
            "isMainTopic": false,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "High Priority",
            "level": 4,
            "isMainTopic": false,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "Medium Priority",
            "level": 4,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "Low Priority",
            "level": 4,
            "isMainTopic": false,
            "position": 900
          },
          {
            "id": "heading-19",
            "text": "🏃 In Progress",
            "level": 3,
            "isMainTopic": false,
            "position": 950
          },
          {
            "id": "heading-20",
            "text": "Sprint 1: Foundation System",
            "level": 4,
            "isMainTopic": false,
            "position": 1000
          },
          {
            "id": "heading-21",
            "text": "Sprint 2: Data Pipeline",
            "level": 4,
            "isMainTopic": false,
            "position": 1050
          },
          {
            "id": "heading-22",
            "text": "✅ Done",
            "level": 3,
            "isMainTopic": false,
            "position": 1100
          },
          {
            "id": "heading-23",
            "text": "Initial Setup",
            "level": 4,
            "isMainTopic": false,
            "position": 1150
          },
          {
            "id": "heading-24",
            "text": "📅 Sprint Work Items",
            "level": 2,
            "isMainTopic": true,
            "position": 1200
          },
          {
            "id": "heading-25",
            "text": "Sprint 1 (Weeks 1-2)",
            "level": 3,
            "isMainTopic": false,
            "position": 1250
          },
          {
            "id": "heading-26",
            "text": "Sprint 2 (3-4주차)",
            "level": 3,
            "isMainTopic": false,
            "position": 1300
          },
          {
            "id": "heading-27",
            "text": "🔄 Progress Tracking",
            "level": 2,
            "isMainTopic": true,
            "position": 1350
          },
          {
            "id": "heading-28",
            "text": "Current Status",
            "level": 3,
            "isMainTopic": false,
            "position": 1400
          },
          {
            "id": "heading-29",
            "text": "Next Steps Preparation",
            "level": 3,
            "isMainTopic": false,
            "position": 1450
          }
        ]
      }
    },
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_4",
    "title": "Entasis Engine - 세부 기능 정의",
    "content": "\n# 금융 데이터 분석 시스템 세부 기능 정의\n\n## 📊 핵심 기능 상세\n\n### 1. 데이터 수집 시스템\n\n#### 1.1 거래소 연동\n\n- [ ] Binance API 연동 구현\n  - WebSocket 실시간 데이터 수신\n  - REST API 히스토리 데이터 수집\n- [ ] Bybit API 연동 구현\n  - 선물 거래 데이터 수집\n  - 레버리지 정보 수집\n- [ ] Deribit API 연동 구현\n  - 옵션 데이터 수집\n  - 그리스 지표 계산\n\n#### 1.2 데이터 정제\n\n- [ ] 실시간 데이터 정규화\n- [ ] 이상치 탐지 및 제거\n- [ ] 누락 데이터 처리\n\n### 2. AI 분석 엔진\n\n#### 2.1 시계열 예측\n\n- [ ] LSTM 모델 구현\n  - 가격 예측 모델\n  - 변동성 예측 모델\n- [ ] 앙상블 모델 구현\n  - Random Forest\n  - XGBoost\n  - LightGBM\n\n#### 2.2 포트폴리오 최적화\n\n- [ ] Modern Portfolio Theory 구현\n- [ ] Risk Parity 전략 구현\n- [ ] 동적 자산 배분 알고리즘\n\n### 3. 리스크 관리 시스템\n\n#### 3.1 리스크 지표 계산\n\n- [ ] Value at Risk (VaR) 계산\n- [ ] Expected Shortfall 계산\n- [ ] 변동성 지표 모니터링\n\n#### 3.2 포지션 관리\n\n- [ ] 레버리지 최적화\n- [ ] 스탑로스 자동화\n- [ ] 마진 콜 알림\n\n### 4. 대시보드 UI\n\n#### 4.1 차트 시스템\n\n- [ ] 캔들스틱 차트 구현\n- [ ] 기술적 지표 표시\n- [ ] 실시간 업데이트\n\n#### 4.2 포트폴리오 뷰\n\n- [ ] 자산 배분 현황\n- [ ] 수익률 트래킹\n- [ ] 리스크 지표 시각화\n\n---\n\n## 📋 칸반보드 구성\n\n### 🎯 백로그 (Backlog)\n\n#### 우선순위: 높음\n\n- [ ] 데이터베이스 스키마 설계\n- [ ] API 서버 기본 구조 구축\n- [ ] 사용자 인증 시스템 구현\n- [ ] 기본 대시보드 레이아웃\n\n#### 우선순위: 중간\n\n- [ ] 백테스팅 엔진 구현\n- [ ] 알림 시스템 구축\n- [ ] 포트폴리오 분석 도구\n- [ ] 리포트 생성 시스템\n\n#### 우선순위: 낮음\n\n- [ ] 소셜 트레이딩 기능\n- [ ] 모바일 앱 개발\n- [ ] API 문서화\n- [ ] 튜토리얼 시스템\n\n### 🏃 진행 중 (In Progress)\n\n#### Sprint 1: 기반 시스템\n\n- [ ] PostgreSQL 데이터베이스 설정\n- [ ] Spring Boot 프로젝트 셋업\n- [ ] Next.js 프로젝트 초기화\n\n#### Sprint 2: 데이터 파이프라인\n\n- [ ] CCXT 라이브러리 연동\n- [ ] 실시간 데이터 수집 구현\n- [ ] 데이터 정제 파이프라인\n\n### ✅ 완료 (Done)\n\n#### 초기 설정\n\n- [x] 프로젝트 요구사항 정의\n- [x] 기술 스택 선정\n- [x] 개발 환경 구성\n\n---\n\n## 📅 스프린트별 작업 항목\n\n### Sprint 1 (1-2주차)\n\n```plaintext\n+------------------+     +------------------+     +------------------+\n|      To Do       |     |   In Progress    |     |      Done        |\n+------------------+     +------------------+     +------------------+\n| - DB 스키마 설계    |     | - 개발환경 설정     |     | - 요구사항 정의      |\n| - API 구조 설계     |     | - Git 저장소      |     | - 팀 구성          |\n+------------------+     +------------------+     +------------------+\n```\n\n### Sprint 2 (3-4주차)\n\n```plaintext\n+------------------+     +------------------+     +------------------+\n|      To Do       |     |   In Progress    |     |      Done        |\n+------------------+     +------------------+     +------------------+\n| - 데이터 정제       |     | - DB 구축         |     | - 스키마 설계       |\n| - API 구현        |     | - 기본 API 개발    |     | - 환경 설정         |\n+------------------+     +------------------+     +------------------+\n```\n\n---\n\n## 🔄 작업 추적\n\n### 현재 진행상황\n\n- 전체 진행률: 15%\n- 주요 마일스톤: MVP 개발 단계\n- 예상 완료일: 2024년 9월\n\n### 다음 단계 준비사항\n\n1. 스프린트 1 회고\n2. 스프린트 2 계획 수립\n3. 리스크 요소 점검\n\n이 문서는 프로젝트의 진행 상황을 추적하고 관리하기 위한 기준으로 사용됩니다. 각 기능과 작업은 우선순위와 의존성을 고려하여 순차적으로 구현될 예정입니다. 🚀\n",
    "date": "2025-02-12",
    "category": "projects",
    "tags": [
      "definition",
      "kanban",
      "task",
      "backlog",
      "sprint",
      "tracking"
    ],
    "thumbnail": "/images/cryptocurrency.jpg",
    "translations": {
      "ko": {
        "title": "Entasis Engine - 세부 기능 정의",
        "description": "가상자산 데이터 분석 시스템의 세부 기능 정의 및 칸반보드",
        "content": "<h1 id=\"heading-0\">금융 데이터 분석 시스템 세부 기능 정의</h1>\n<h2 id=\"heading-1\">📊 핵심 기능 상세</h2>\n<h3 id=\"heading-2\">1. 데이터 수집 시스템</h3>\n<h4 id=\"heading-3\">1.1 거래소 연동</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Binance API 연동 구현\n<ul>\n<li>WebSocket 실시간 데이터 수신</li>\n<li>REST API 히스토리 데이터 수집</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Bybit API 연동 구현\n<ul>\n<li>선물 거래 데이터 수집</li>\n<li>레버리지 정보 수집</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Deribit API 연동 구현\n<ul>\n<li>옵션 데이터 수집</li>\n<li>그리스 지표 계산</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"heading-4\">1.2 데이터 정제</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 실시간 데이터 정규화</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 이상치 탐지 및 제거</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 누락 데이터 처리</li>\n</ul>\n<h3 id=\"heading-5\">2. AI 분석 엔진</h3>\n<h4 id=\"heading-6\">2.1 시계열 예측</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> LSTM 모델 구현\n<ul>\n<li>가격 예측 모델</li>\n<li>변동성 예측 모델</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 앙상블 모델 구현\n<ul>\n<li>Random Forest</li>\n<li>XGBoost</li>\n<li>LightGBM</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"heading-7\">2.2 포트폴리오 최적화</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Modern Portfolio Theory 구현</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Risk Parity 전략 구현</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 동적 자산 배분 알고리즘</li>\n</ul>\n<h3 id=\"heading-8\">3. 리스크 관리 시스템</h3>\n<h4 id=\"heading-9\">3.1 리스크 지표 계산</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Value at Risk (VaR) 계산</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Expected Shortfall 계산</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 변동성 지표 모니터링</li>\n</ul>\n<h4 id=\"heading-10\">3.2 포지션 관리</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 레버리지 최적화</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 스탑로스 자동화</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 마진 콜 알림</li>\n</ul>\n<h3 id=\"heading-11\">4. 대시보드 UI</h3>\n<h4 id=\"heading-12\">4.1 차트 시스템</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 캔들스틱 차트 구현</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 기술적 지표 표시</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 실시간 업데이트</li>\n</ul>\n<h4 id=\"heading-13\">4.2 포트폴리오 뷰</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 자산 배분 현황</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 수익률 트래킹</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 리스크 지표 시각화</li>\n</ul>\n<hr>\n<h2 id=\"heading-14\">📋 칸반보드 구성</h2>\n<h3 id=\"heading-15\">🎯 백로그 (Backlog)</h3>\n<h4 id=\"heading-16\">우선순위: 높음</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 데이터베이스 스키마 설계</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> API 서버 기본 구조 구축</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 사용자 인증 시스템 구현</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 기본 대시보드 레이아웃</li>\n</ul>\n<h4 id=\"heading-17\">우선순위: 중간</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 백테스팅 엔진 구현</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 알림 시스템 구축</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 포트폴리오 분석 도구</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 리포트 생성 시스템</li>\n</ul>\n<h4 id=\"heading-18\">우선순위: 낮음</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 소셜 트레이딩 기능</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 모바일 앱 개발</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> API 문서화</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 튜토리얼 시스템</li>\n</ul>\n<h3 id=\"heading-19\">🏃 진행 중 (In Progress)</h3>\n<h4 id=\"heading-20\">Sprint 1: 기반 시스템</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> PostgreSQL 데이터베이스 설정</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Spring Boot 프로젝트 셋업</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Next.js 프로젝트 초기화</li>\n</ul>\n<h4 id=\"heading-21\">Sprint 2: 데이터 파이프라인</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> CCXT 라이브러리 연동</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 실시간 데이터 수집 구현</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> 데이터 정제 파이프라인</li>\n</ul>\n<h3 id=\"heading-22\">✅ 완료 (Done)</h3>\n<h4 id=\"heading-23\">초기 설정</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked=\"\" disabled=\"\"> 프로젝트 요구사항 정의</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked=\"\" disabled=\"\"> 기술 스택 선정</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked=\"\" disabled=\"\"> 개발 환경 구성</li>\n</ul>\n<hr>\n<h2 id=\"heading-24\">📅 스프린트별 작업 항목</h2>\n<h3 id=\"heading-25\">Sprint 1 (1-2주차)</h3>\n<pre><code class=\"language-plaintext\">+------------------+     +------------------+     +------------------+\n|      To Do       |     |   In Progress    |     |      Done        |\n+------------------+     +------------------+     +------------------+\n| - DB 스키마 설계    |     | - 개발환경 설정     |     | - 요구사항 정의      |\n| - API 구조 설계     |     | - Git 저장소      |     | - 팀 구성          |\n+------------------+     +------------------+     +------------------+\n</code></pre>\n<h3 id=\"heading-26\">Sprint 2 (3-4주차)</h3>\n<pre><code class=\"language-plaintext\">+------------------+     +------------------+     +------------------+\n|      To Do       |     |   In Progress    |     |      Done        |\n+------------------+     +------------------+     +------------------+\n| - 데이터 정제       |     | - DB 구축         |     | - 스키마 설계       |\n| - API 구현        |     | - 기본 API 개발    |     | - 환경 설정         |\n+------------------+     +------------------+     +------------------+\n</code></pre>\n<hr>\n<h2 id=\"heading-27\">🔄 작업 추적</h2>\n<h3 id=\"heading-28\">현재 진행상황</h3>\n<ul>\n<li>전체 진행률: 15%</li>\n<li>주요 마일스톤: MVP 개발 단계</li>\n<li>예상 완료일: 2024년 9월</li>\n</ul>\n<h3 id=\"heading-29\">다음 단계 준비사항</h3>\n<ol>\n<li>스프린트 1 회고</li>\n<li>스프린트 2 계획 수립</li>\n<li>리스크 요소 점검</li>\n</ol>\n<p>이 문서는 프로젝트의 진행 상황을 추적하고 관리하기 위한 기준으로 사용됩니다. 각 기능과 작업은 우선순위와 의존성을 고려하여 순차적으로 구현될 예정입니다. 🚀</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "금융 데이터 분석 시스템 세부 기능 정의",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "📊 핵심 기능 상세",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "1. 데이터 수집 시스템",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "1.1 거래소 연동",
            "level": 4,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "1.2 데이터 정제",
            "level": 4,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "2. AI 분석 엔진",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "2.1 시계열 예측",
            "level": 4,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "2.2 포트폴리오 최적화",
            "level": 4,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "3. 리스크 관리 시스템",
            "level": 3,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "3.1 리스크 지표 계산",
            "level": 4,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "3.2 포지션 관리",
            "level": 4,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "4. 대시보드 UI",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "4.1 차트 시스템",
            "level": 4,
            "isMainTopic": false,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "4.2 포트폴리오 뷰",
            "level": 4,
            "isMainTopic": false,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "📋 칸반보드 구성",
            "level": 2,
            "isMainTopic": true,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "🎯 백로그 (Backlog)",
            "level": 3,
            "isMainTopic": false,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "우선순위: 높음",
            "level": 4,
            "isMainTopic": false,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "우선순위: 중간",
            "level": 4,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "우선순위: 낮음",
            "level": 4,
            "isMainTopic": false,
            "position": 900
          },
          {
            "id": "heading-19",
            "text": "🏃 진행 중 (In Progress)",
            "level": 3,
            "isMainTopic": false,
            "position": 950
          },
          {
            "id": "heading-20",
            "text": "Sprint 1: 기반 시스템",
            "level": 4,
            "isMainTopic": false,
            "position": 1000
          },
          {
            "id": "heading-21",
            "text": "Sprint 2: 데이터 파이프라인",
            "level": 4,
            "isMainTopic": false,
            "position": 1050
          },
          {
            "id": "heading-22",
            "text": "✅ 완료 (Done)",
            "level": 3,
            "isMainTopic": false,
            "position": 1100
          },
          {
            "id": "heading-23",
            "text": "초기 설정",
            "level": 4,
            "isMainTopic": false,
            "position": 1150
          },
          {
            "id": "heading-24",
            "text": "📅 스프린트별 작업 항목",
            "level": 2,
            "isMainTopic": true,
            "position": 1200
          },
          {
            "id": "heading-25",
            "text": "Sprint 1 (1-2주차)",
            "level": 3,
            "isMainTopic": false,
            "position": 1250
          },
          {
            "id": "heading-26",
            "text": "Sprint 2 (3-4주차)",
            "level": 3,
            "isMainTopic": false,
            "position": 1300
          },
          {
            "id": "heading-27",
            "text": "🔄 작업 추적",
            "level": 2,
            "isMainTopic": true,
            "position": 1350
          },
          {
            "id": "heading-28",
            "text": "현재 진행상황",
            "level": 3,
            "isMainTopic": false,
            "position": 1400
          },
          {
            "id": "heading-29",
            "text": "다음 단계 준비사항",
            "level": 3,
            "isMainTopic": false,
            "position": 1450
          }
        ]
      },
      "en": {
        "title": "Entasis Engine - Detailed Feature Definition",
        "description": "Detailed feature definition and kanban board for virtual asset data analysis system",
        "content": "<h1 id=\"heading-0\">Financial Data Analysis System Detailed Feature Definition</h1>\n<h2 id=\"heading-1\">📊 Core Features Detail</h2>\n<h3 id=\"heading-2\">1. Data Collection System</h3>\n<h4 id=\"heading-3\">1.1 Exchange Integration</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Binance API Integration Implementation\n<ul>\n<li>WebSocket Real-time Data Reception</li>\n<li>REST API Historical Data Collection</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Bybit API Integration Implementation\n<ul>\n<li>Futures Trading Data Collection</li>\n<li>Leverage Information Collection</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Deribit API Integration Implementation\n<ul>\n<li>Options Data Collection</li>\n<li>Greeks Indicator Calculation</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"heading-4\">1.2 Data Cleansing</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Real-time Data Normalization</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Anomaly Detection and Removal</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Missing Data Handling</li>\n</ul>\n<h3 id=\"heading-5\">2. AI Analysis Engine</h3>\n<h4 id=\"heading-6\">2.1 Time Series Prediction</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> LSTM Model Implementation\n<ul>\n<li>Price Prediction Model</li>\n<li>Volatility Prediction Model</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Ensemble Model Implementation\n<ul>\n<li>Random Forest</li>\n<li>XGBoost</li>\n<li>LightGBM</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"heading-7\">2.2 Portfolio Optimization</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Modern Portfolio Theory Implementation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Risk Parity Strategy Implementation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Dynamic Asset Allocation Algorithm</li>\n</ul>\n<h3 id=\"heading-8\">3. Risk Management System</h3>\n<h4 id=\"heading-9\">3.1 Risk Metrics Calculation</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Value at Risk (VaR) Calculation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Expected Shortfall Calculation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Volatility Metrics Monitoring</li>\n</ul>\n<h4 id=\"heading-10\">3.2 Position Management</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Leverage Optimization</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Stop Loss Automation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Margin Call Alerts</li>\n</ul>\n<h3 id=\"heading-11\">4. Dashboard UI</h3>\n<h4 id=\"heading-12\">4.1 Chart System</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Candlestick Chart Implementation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Technical Indicator Display</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Real-time Updates</li>\n</ul>\n<h4 id=\"heading-13\">4.2 Portfolio View</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Asset Allocation Status</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Return Tracking</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Risk Metrics Visualization</li>\n</ul>\n<hr>\n<h2 id=\"heading-14\">📋 Kanban Board Structure</h2>\n<h3 id=\"heading-15\">🎯 Backlog</h3>\n<h4 id=\"heading-16\">High Priority</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Database Schema Design</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> API Server Basic Structure Setup</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> User Authentication System Implementation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Basic Dashboard Layout</li>\n</ul>\n<h4 id=\"heading-17\">Medium Priority</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Backtesting Engine Implementation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Alert System Setup</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Portfolio Analysis Tools</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Report Generation System</li>\n</ul>\n<h4 id=\"heading-18\">Low Priority</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Social Trading Features</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Mobile App Development</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> API Documentation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Tutorial System</li>\n</ul>\n<h3 id=\"heading-19\">🏃 In Progress</h3>\n<h4 id=\"heading-20\">Sprint 1: Foundation System</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> PostgreSQL Database Configuration</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Spring Boot Project Setup</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Next.js Project Initialization</li>\n</ul>\n<h4 id=\"heading-21\">Sprint 2: Data Pipeline</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> CCXT Library Integration</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Real-time Data Collection Implementation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> Data Cleansing Pipeline</li>\n</ul>\n<h3 id=\"heading-22\">✅ Done</h3>\n<h4 id=\"heading-23\">Initial Setup</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked=\"\" disabled=\"\"> Project Requirements Definition</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked=\"\" disabled=\"\"> Technology Stack Selection</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked=\"\" disabled=\"\"> Development Environment Setup</li>\n</ul>\n<hr>\n<h2 id=\"heading-24\">📅 Sprint Work Items</h2>\n<h3 id=\"heading-25\">Sprint 1 (Weeks 1-2)</h3>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "Financial Data Analysis System Detailed Feature Definition",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "📊 Core Features Detail",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "1. Data Collection System",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "1.1 Exchange Integration",
            "level": 4,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "1.2 Data Cleansing",
            "level": 4,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "2. AI Analysis Engine",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "2.1 Time Series Prediction",
            "level": 4,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "2.2 Portfolio Optimization",
            "level": 4,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "3. Risk Management System",
            "level": 3,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "3.1 Risk Metrics Calculation",
            "level": 4,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "3.2 Position Management",
            "level": 4,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "4. Dashboard UI",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "4.1 Chart System",
            "level": 4,
            "isMainTopic": false,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "4.2 Portfolio View",
            "level": 4,
            "isMainTopic": false,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "📋 Kanban Board Structure",
            "level": 2,
            "isMainTopic": true,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "🎯 Backlog",
            "level": 3,
            "isMainTopic": false,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "High Priority",
            "level": 4,
            "isMainTopic": false,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "Medium Priority",
            "level": 4,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "Low Priority",
            "level": 4,
            "isMainTopic": false,
            "position": 900
          },
          {
            "id": "heading-19",
            "text": "🏃 In Progress",
            "level": 3,
            "isMainTopic": false,
            "position": 950
          },
          {
            "id": "heading-20",
            "text": "Sprint 1: Foundation System",
            "level": 4,
            "isMainTopic": false,
            "position": 1000
          },
          {
            "id": "heading-21",
            "text": "Sprint 2: Data Pipeline",
            "level": 4,
            "isMainTopic": false,
            "position": 1050
          },
          {
            "id": "heading-22",
            "text": "✅ Done",
            "level": 3,
            "isMainTopic": false,
            "position": 1100
          },
          {
            "id": "heading-23",
            "text": "Initial Setup",
            "level": 4,
            "isMainTopic": false,
            "position": 1150
          },
          {
            "id": "heading-24",
            "text": "📅 Sprint Work Items",
            "level": 2,
            "isMainTopic": true,
            "position": 1200
          },
          {
            "id": "heading-25",
            "text": "Sprint 1 (Weeks 1-2)",
            "level": 3,
            "isMainTopic": false,
            "position": 1250
          }
        ]
      }
    },
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_5",
    "title": "Entasis Engine - 데이터베이스 설계",
    "content": "\n# 금융 데이터 분석 시스템 데이터베이스 설계\n\n## 📊 데이터베이스 아키텍처\n\n### 1. 데이터베이스 선정 이유\n\n- **PostgreSQL**: 안정성과 확장성이 검증된 RDBMS\n- **TimescaleDB**: 시계열 데이터 처리에 최적화된 확장\n- **파티셔닝**: 대용량 데이터의 효율적 관리\n\n### 2. 핵심 테이블 구조\n\n#### 2.1 Market Data Tables\n\n```sql\n-- 실시간 시장 데이터\nCREATE TABLE market_data (\n    id BIGSERIAL PRIMARY KEY,\n    symbol VARCHAR(20) NOT NULL,\n    exchange VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMPTZ NOT NULL,\n    price DECIMAL(20,8) NOT NULL,\n    volume DECIMAL(20,8) NOT NULL,\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\n) PARTITION BY RANGE (timestamp);\n\n-- 옵션 데이터\nCREATE TABLE option_data (\n    id BIGSERIAL PRIMARY KEY,\n    underlying VARCHAR(20) NOT NULL,\n    strike_price DECIMAL(20,8) NOT NULL,\n    expiry_date TIMESTAMPTZ NOT NULL,\n    option_type VARCHAR(4) NOT NULL,\n    iv DECIMAL(10,4),\n    delta DECIMAL(10,4),\n    gamma DECIMAL(10,4),\n    theta DECIMAL(10,4),\n    vega DECIMAL(10,4),\n    timestamp TIMESTAMPTZ NOT NULL\n) PARTITION BY RANGE (timestamp);\n```\n\n#### 2.2 분석 데이터 테이블\n\n```sql\n-- AI 모델 예측 결과\nCREATE TABLE predictions (\n    id BIGSERIAL PRIMARY KEY,\n    model_id VARCHAR(50) NOT NULL,\n    symbol VARCHAR(20) NOT NULL,\n    prediction_type VARCHAR(20) NOT NULL,\n    predicted_value DECIMAL(20,8) NOT NULL,\n    confidence DECIMAL(5,4) NOT NULL,\n    timestamp TIMESTAMPTZ NOT NULL\n);\n\n-- 포트폴리오 상태\nCREATE TABLE portfolio_status (\n    id BIGSERIAL PRIMARY KEY,\n    user_id UUID NOT NULL,\n    asset_type VARCHAR(20) NOT NULL,\n    position_size DECIMAL(20,8) NOT NULL,\n    entry_price DECIMAL(20,8) NOT NULL,\n    current_price DECIMAL(20,8) NOT NULL,\n    pnl DECIMAL(20,8) NOT NULL,\n    timestamp TIMESTAMPTZ NOT NULL\n);\n```\n\n### 3. 인덱싱 전략\n\n#### 3.1 시장 데이터 인덱스\n\n```sql\n-- 시장 데이터 조회 최적화\nCREATE INDEX idx_market_data_symbol_timestamp ON market_data (symbol, timestamp DESC);\nCREATE INDEX idx_market_data_exchange_timestamp ON market_data (exchange, timestamp DESC);\n\n-- 옵션 데이터 조회 최적화\nCREATE INDEX idx_option_data_underlying_expiry ON option_data (underlying, expiry_date);\nCREATE INDEX idx_option_data_strike_type ON option_data (strike_price, option_type);\n```\n\n#### 3.2 분석 데이터 인덱스\n\n```sql\n-- 예측 데이터 조회 최적화\nCREATE INDEX idx_predictions_model_symbol ON predictions (model_id, symbol);\nCREATE INDEX idx_predictions_timestamp ON predictions (timestamp DESC);\n\n-- 포트폴리오 조회 최적화\nCREATE INDEX idx_portfolio_user_timestamp ON portfolio_status (user_id, timestamp DESC);\n```\n\n### 4. 파티셔닝 전략\n\n#### 4.1 시계열 데이터 파티셔닝\n\n```sql\n-- 월별 파티션 생성\nCREATE TABLE market_data_y2024m01 PARTITION OF market_data\n    FOR VALUES FROM ('2024-01-01') TO ('2024-02-01');\nCREATE TABLE market_data_y2024m02 PARTITION OF market_data\n    FOR VALUES FROM ('2024-02-01') TO ('2024-03-01');\n```\n\n#### 4.2 보관 정책\n\n- 실시간 데이터: 최근 3개월\n- 집계 데이터: 최근 1년\n- 히스토리 데이터: S3 아카이브\n\n## 📈 성능 최적화\n\n### 1. 쿼리 최적화\n\n#### 1.1 자주 사용되는 쿼리\n\n```sql\n-- 특정 기간의 OHLCV 데이터 조회\nCREATE MATERIALIZED VIEW mv_ohlcv_1h AS\nSELECT\n    symbol,\n    date_trunc('hour', timestamp) as timeframe,\n    first(price) as open,\n    max(price) as high,\n    min(price) as low,\n    last(price) as close,\n    sum(volume) as volume\nFROM market_data\nGROUP BY symbol, timeframe;\n```\n\n#### 1.2 캐싱 전략\n\n- Redis 캐싱 레이어 구현\n- 실시간 데이터 메모리 캐싱\n- 집계 데이터 캐시 갱신 주기 설정\n\n### 2. 백업 전략\n\n#### 2.1 정기 백업\n\n- 일일 증분 백업\n- 주간 전체 백업\n- 월간 아카이브\n\n#### 2.2 복구 계획\n\n- Point-in-Time Recovery 설정\n- 장애 복구 시나리오 문서화\n- 복구 테스트 계획\n\n## 🔄 데이터 흐름\n\n### 1. 데이터 수집\n\n```mermaid\ngraph LR\n    A[거래소 API] --> B[데이터 수집기]\n    B --> C[데이터 정제]\n    C --> D[TimescaleDB]\n    D --> E[분석 엔진]\n```\n\n### 2. 데이터 처리\n\n- 실시간 스트림 처리\n- 배치 처리\n- 이상치 탐지 및 처리\n\n## ⚡ 확장성 고려사항\n\n### 1. 수평적 확장\n\n- 읽기 전용 복제본 구성\n- 샤딩 전략 수립\n- 로드 밸런싱 설정\n\n### 2. 수직적 확장\n\n- 리소스 모니터링\n- 성능 지표 설정\n- 스케일 업 임계값 정의\n\n이 문서는 금융 데이터 분석 시스템의 데이터베이스 설계 기준을 제공합니다. 시스템의 요구사항과 성능을 고려하여 지속적으로 업데이트될 예정입니다. 🚀\n",
    "date": "2025-02-12",
    "category": "projects",
    "tags": [
      "database",
      "schema",
      "postgresql",
      "timescaledb",
      "erd",
      "indexing",
      "partitioning"
    ],
    "thumbnail": "/images/cryptocurrency.jpg",
    "translations": {
      "ko": {
        "title": "Entasis Engine - 데이터베이스 설계",
        "description": "가상자산 데이터 분석 시스템의 데이터베이스 스키마 및 설계 문서",
        "content": "<h1 id=\"heading-0\">금융 데이터 분석 시스템 데이터베이스 설계</h1>\n<h2 id=\"heading-1\">📊 데이터베이스 아키텍처</h2>\n<h3 id=\"heading-2\">1. 데이터베이스 선정 이유</h3>\n<ul>\n<li><strong>PostgreSQL</strong>: 안정성과 확장성이 검증된 RDBMS</li>\n<li><strong>TimescaleDB</strong>: 시계열 데이터 처리에 최적화된 확장</li>\n<li><strong>파티셔닝</strong>: 대용량 데이터의 효율적 관리</li>\n</ul>\n<h3 id=\"heading-3\">2. 핵심 테이블 구조</h3>\n<h4 id=\"heading-4\">2.1 Market Data Tables</h4>\n<pre><code class=\"language-sql\">-- 실시간 시장 데이터\nCREATE TABLE market_data (\n    id BIGSERIAL PRIMARY KEY,\n    symbol VARCHAR(20) NOT NULL,\n    exchange VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMPTZ NOT NULL,\n    price DECIMAL(20,8) NOT NULL,\n    volume DECIMAL(20,8) NOT NULL,\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\n) PARTITION BY RANGE (timestamp);\n\n-- 옵션 데이터\nCREATE TABLE option_data (\n    id BIGSERIAL PRIMARY KEY,\n    underlying VARCHAR(20) NOT NULL,\n    strike_price DECIMAL(20,8) NOT NULL,\n    expiry_date TIMESTAMPTZ NOT NULL,\n    option_type VARCHAR(4) NOT NULL,\n    iv DECIMAL(10,4),\n    delta DECIMAL(10,4),\n    gamma DECIMAL(10,4),\n    theta DECIMAL(10,4),\n    vega DECIMAL(10,4),\n    timestamp TIMESTAMPTZ NOT NULL\n) PARTITION BY RANGE (timestamp);\n</code></pre>\n<h4 id=\"heading-5\">2.2 분석 데이터 테이블</h4>\n<pre><code class=\"language-sql\">-- AI 모델 예측 결과\nCREATE TABLE predictions (\n    id BIGSERIAL PRIMARY KEY,\n    model_id VARCHAR(50) NOT NULL,\n    symbol VARCHAR(20) NOT NULL,\n    prediction_type VARCHAR(20) NOT NULL,\n    predicted_value DECIMAL(20,8) NOT NULL,\n    confidence DECIMAL(5,4) NOT NULL,\n    timestamp TIMESTAMPTZ NOT NULL\n);\n\n-- 포트폴리오 상태\nCREATE TABLE portfolio_status (\n    id BIGSERIAL PRIMARY KEY,\n    user_id UUID NOT NULL,\n    asset_type VARCHAR(20) NOT NULL,\n    position_size DECIMAL(20,8) NOT NULL,\n    entry_price DECIMAL(20,8) NOT NULL,\n    current_price DECIMAL(20,8) NOT NULL,\n    pnl DECIMAL(20,8) NOT NULL,\n    timestamp TIMESTAMPTZ NOT NULL\n);\n</code></pre>\n<h3 id=\"heading-6\">3. 인덱싱 전략</h3>\n<h4 id=\"heading-7\">3.1 시장 데이터 인덱스</h4>\n<pre><code class=\"language-sql\">-- 시장 데이터 조회 최적화\nCREATE INDEX idx_market_data_symbol_timestamp ON market_data (symbol, timestamp DESC);\nCREATE INDEX idx_market_data_exchange_timestamp ON market_data (exchange, timestamp DESC);\n\n-- 옵션 데이터 조회 최적화\nCREATE INDEX idx_option_data_underlying_expiry ON option_data (underlying, expiry_date);\nCREATE INDEX idx_option_data_strike_type ON option_data (strike_price, option_type);\n</code></pre>\n<h4 id=\"heading-8\">3.2 분석 데이터 인덱스</h4>\n<pre><code class=\"language-sql\">-- 예측 데이터 조회 최적화\nCREATE INDEX idx_predictions_model_symbol ON predictions (model_id, symbol);\nCREATE INDEX idx_predictions_timestamp ON predictions (timestamp DESC);\n\n-- 포트폴리오 조회 최적화\nCREATE INDEX idx_portfolio_user_timestamp ON portfolio_status (user_id, timestamp DESC);\n</code></pre>\n<h3 id=\"heading-9\">4. 파티셔닝 전략</h3>\n<h4 id=\"heading-10\">4.1 시계열 데이터 파티셔닝</h4>\n<pre><code class=\"language-sql\">-- 월별 파티션 생성\nCREATE TABLE market_data_y2024m01 PARTITION OF market_data\n    FOR VALUES FROM ('2024-01-01') TO ('2024-02-01');\nCREATE TABLE market_data_y2024m02 PARTITION OF market_data\n    FOR VALUES FROM ('2024-02-01') TO ('2024-03-01');\n</code></pre>\n<h4 id=\"heading-11\">4.2 보관 정책</h4>\n<ul>\n<li>실시간 데이터: 최근 3개월</li>\n<li>집계 데이터: 최근 1년</li>\n<li>히스토리 데이터: S3 아카이브</li>\n</ul>\n<h2 id=\"heading-12\">📈 성능 최적화</h2>\n<h3 id=\"heading-13\">1. 쿼리 최적화</h3>\n<h4 id=\"heading-14\">1.1 자주 사용되는 쿼리</h4>\n<pre><code class=\"language-sql\">-- 특정 기간의 OHLCV 데이터 조회\nCREATE MATERIALIZED VIEW mv_ohlcv_1h AS\nSELECT\n    symbol,\n    date_trunc('hour', timestamp) as timeframe,\n    first(price) as open,\n    max(price) as high,\n    min(price) as low,\n    last(price) as close,\n    sum(volume) as volume\nFROM market_data\nGROUP BY symbol, timeframe;\n</code></pre>\n<h4 id=\"heading-15\">1.2 캐싱 전략</h4>\n<ul>\n<li>Redis 캐싱 레이어 구현</li>\n<li>실시간 데이터 메모리 캐싱</li>\n<li>집계 데이터 캐시 갱신 주기 설정</li>\n</ul>\n<h3 id=\"heading-16\">2. 백업 전략</h3>\n<h4 id=\"heading-17\">2.1 정기 백업</h4>\n<ul>\n<li>일일 증분 백업</li>\n<li>주간 전체 백업</li>\n<li>월간 아카이브</li>\n</ul>\n<h4 id=\"heading-18\">2.2 복구 계획</h4>\n<ul>\n<li>Point-in-Time Recovery 설정</li>\n<li>장애 복구 시나리오 문서화</li>\n<li>복구 테스트 계획</li>\n</ul>\n<h2 id=\"heading-19\">🔄 데이터 흐름</h2>\n<h3 id=\"heading-20\">1. 데이터 수집</h3>\n<pre><code class=\"language-mermaid\">graph LR\n    A[거래소 API] --&gt; B[데이터 수집기]\n    B --&gt; C[데이터 정제]\n    C --&gt; D[TimescaleDB]\n    D --&gt; E[분석 엔진]\n</code></pre>\n<h3 id=\"heading-21\">2. 데이터 처리</h3>\n<ul>\n<li>실시간 스트림 처리</li>\n<li>배치 처리</li>\n<li>이상치 탐지 및 처리</li>\n</ul>\n<h2 id=\"heading-22\">⚡ 확장성 고려사항</h2>\n<h3 id=\"heading-23\">1. 수평적 확장</h3>\n<ul>\n<li>읽기 전용 복제본 구성</li>\n<li>샤딩 전략 수립</li>\n<li>로드 밸런싱 설정</li>\n</ul>\n<h3 id=\"heading-24\">2. 수직적 확장</h3>\n<ul>\n<li>리소스 모니터링</li>\n<li>성능 지표 설정</li>\n<li>스케일 업 임계값 정의</li>\n</ul>\n<p>이 문서는 금융 데이터 분석 시스템의 데이터베이스 설계 기준을 제공합니다. 시스템의 요구사항과 성능을 고려하여 지속적으로 업데이트될 예정입니다. 🚀</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "금융 데이터 분석 시스템 데이터베이스 설계",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "📊 데이터베이스 아키텍처",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "1. 데이터베이스 선정 이유",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "2. 핵심 테이블 구조",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "2.1 Market Data Tables",
            "level": 4,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "2.2 분석 데이터 테이블",
            "level": 4,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "3. 인덱싱 전략",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "3.1 시장 데이터 인덱스",
            "level": 4,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "3.2 분석 데이터 인덱스",
            "level": 4,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "4. 파티셔닝 전략",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "4.1 시계열 데이터 파티셔닝",
            "level": 4,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "4.2 보관 정책",
            "level": 4,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "📈 성능 최적화",
            "level": 2,
            "isMainTopic": true,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "1. 쿼리 최적화",
            "level": 3,
            "isMainTopic": false,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "1.1 자주 사용되는 쿼리",
            "level": 4,
            "isMainTopic": false,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "1.2 캐싱 전략",
            "level": 4,
            "isMainTopic": false,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "2. 백업 전략",
            "level": 3,
            "isMainTopic": false,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "2.1 정기 백업",
            "level": 4,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "2.2 복구 계획",
            "level": 4,
            "isMainTopic": false,
            "position": 900
          },
          {
            "id": "heading-19",
            "text": "🔄 데이터 흐름",
            "level": 2,
            "isMainTopic": true,
            "position": 950
          },
          {
            "id": "heading-20",
            "text": "1. 데이터 수집",
            "level": 3,
            "isMainTopic": false,
            "position": 1000
          },
          {
            "id": "heading-21",
            "text": "2. 데이터 처리",
            "level": 3,
            "isMainTopic": false,
            "position": 1050
          },
          {
            "id": "heading-22",
            "text": "⚡ 확장성 고려사항",
            "level": 2,
            "isMainTopic": true,
            "position": 1100
          },
          {
            "id": "heading-23",
            "text": "1. 수평적 확장",
            "level": 3,
            "isMainTopic": false,
            "position": 1150
          },
          {
            "id": "heading-24",
            "text": "2. 수직적 확장",
            "level": 3,
            "isMainTopic": false,
            "position": 1200
          }
        ]
      },
      "en": {
        "title": "Entasis Engine - Database Design",
        "description": "Database schema and design documentation for digital asset data analysis system",
        "content": "<h1 id=\"heading-0\">Financial Data Analysis System Database Design</h1>\n<h2 id=\"heading-1\">📊 Database Architecture</h2>\n<h3 id=\"heading-2\">1. Database Selection Rationale</h3>\n<ul>\n<li><strong>PostgreSQL</strong>: RDBMS proven for stability and scalability</li>\n<li><strong>TimescaleDB</strong>: Extension optimized for time-series data processing</li>\n<li><strong>Partitioning</strong>: Efficient management of large-scale data</li>\n</ul>\n<h3 id=\"heading-3\">2. Core Table Structures</h3>\n<h4 id=\"heading-4\">2.1 Market Data Tables</h4>\n<pre><code class=\"language-sql\">-- 실시간 시장 데이터\nCREATE TABLE market_data (\n    id BIGSERIAL PRIMARY KEY,\n    symbol VARCHAR(20) NOT NULL,\n    exchange VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMPTZ NOT NULL,\n    price DECIMAL(20,8) NOT NULL,\n    volume DECIMAL(20,8) NOT NULL,\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\n) PARTITION BY RANGE (timestamp);\n\n-- 옵션 데이터\nCREATE TABLE option_data (\n    id BIGSERIAL PRIMARY KEY,\n    underlying VARCHAR(20) NOT NULL,\n    strike_price DECIMAL(20,8) NOT NULL,\n    expiry_date TIMESTAMPTZ NOT NULL,\n    option_type VARCHAR(4) NOT NULL,\n    iv DECIMAL(10,4),\n    delta DECIMAL(10,4),\n    gamma DECIMAL(10,4),\n    theta DECIMAL(10,4),\n    vega DECIMAL(10,4),\n    timestamp TIMESTAMPTZ NOT NULL\n) PARTITION BY RANGE (timestamp);\n</code></pre>\n<h4 id=\"heading-5\">2.2 분석 데이터 테이블</h4>\n<pre><code class=\"language-sql\">-- AI Model Prediction Results\nCREATE TABLE predictions (\n    id BIGSERIAL PRIMARY KEY,\n    model_id VARCHAR(50) NOT NULL,\n    symbol VARCHAR(20) NOT NULL,\n    prediction_type VARCHAR(20) NOT NULL,\n    predicted_value DECIMAL(20,8) NOT NULL,\n    confidence DECIMAL(5,4) NOT NULL,\n    timestamp TIMESTAMPTZ NOT NULL\n);\n\n-- Portfolio Status\nCREATE TABLE portfolio_status (\n    id BIGSERIAL PRIMARY KEY,\n    user_id UUID NOT NULL,\n    asset_type VARCHAR(20) NOT NULL,\n    position_size DECIMAL(20,8) NOT NULL,\n    entry_price DECIMAL(20,8) NOT NULL,\n    current_price DECIMAL(20,8) NOT NULL,\n    pnl DECIMAL(20,8) NOT NULL,\n    timestamp TIMESTAMPTZ NOT NULL\n);\n</code></pre>\n<h3 id=\"heading-6\">3. Indexing Strategy</h3>\n<h4 id=\"heading-7\">3.1 Market Data Indexing</h4>\n<pre><code class=\"language-sql\">-- Optimize market data query\nCREATE INDEX idx_market_data_symbol_timestamp ON market_data (symbol, timestamp DESC);\nCREATE INDEX idx_market_data_exchange_timestamp ON market_data (exchange, timestamp DESC);\n\n-- Optimize option data query\nCREATE INDEX idx_option_data_underlying_expiry ON option_data (underlying, expiry_date);\nCREATE INDEX idx_option_data_strike_type ON option_data (strike_price, option_type);\n</code></pre>\n<h4 id=\"heading-8\">3.2 Analysis Data Indexing</h4>\n<pre><code class=\"language-sql\">-- Optimize prediction data query\nCREATE INDEX idx_predictions_model_symbol ON predictions (model_id, symbol);\nCREATE INDEX idx_predictions_timestamp ON predictions (timestamp DESC);\n\n-- Optimize portfolio query\nCREATE INDEX idx_portfolio_user_timestamp ON portfolio_status (user_id, timestamp DESC);\n</code></pre>\n<h3 id=\"heading-9\">4. Partitioning Strategy</h3>\n<h4 id=\"heading-10\">4.1 Time-series Data Partitioning</h4>\n<pre><code class=\"language-sql\">-- Create monthly partitions\nCREATE TABLE market_data_y2024m01 PARTITION OF market_data\n    FOR VALUES FROM ('2024-01-01') TO ('2024-02-01');\nCREATE TABLE market_data_y2024m02 PARTITION OF market_data\n    FOR VALUES FROM ('2024-02-01') TO ('2024-03-01');\n</code></pre>\n<h4 id=\"heading-11\">4.2 Retention Policy</h4>\n<ul>\n<li>Real-time data: Latest 3 months</li>\n<li>Aggregated data: Latest 1 year</li>\n<li>Historical data: S3 archive</li>\n</ul>\n<h2 id=\"heading-12\">📈 Performance Optimization</h2>\n<h3 id=\"heading-13\">1. Query Optimization</h3>\n<h4 id=\"heading-14\">1.1 Frequent Queries</h4>\n<pre><code class=\"language-sql\">-- Query specific period OHLCV data\nCREATE MATERIALIZED VIEW mv_ohlcv_1h AS\nSELECT\n    symbol,\n    date_trunc('hour', timestamp) as timeframe,\n    first(price) as open,\n    max(price) as high,\n    min(price) as low,\n    last(price) as close,\n    sum(volume) as volume\nFROM market_data\nGROUP BY symbol, timeframe;\n</code></pre>\n<h4 id=\"heading-15\">1.2 Caching Strategy</h4>\n<ul>\n<li>Implement Redis caching layer</li>\n<li>Real-time data memory caching</li>\n<li>Configure aggregated data cache refresh interval</li>\n</ul>\n<h3 id=\"heading-16\">2. Backup Strategy</h3>\n<h4 id=\"heading-17\">2.1 Regular Backups</h4>\n<ul>\n<li>Daily incremental backups</li>\n<li>Weekly full backups</li>\n<li>Monthly archive</li>\n</ul>\n<h4 id=\"heading-18\">2.2 Recovery Plan</h4>\n<ul>\n<li>Point-in-Time Recovery setup</li>\n<li>Documented disaster recovery scenarios</li>\n<li>Planned recovery tests</li>\n</ul>\n<h2 id=\"heading-19\">🔄 Data Flow</h2>\n<h3 id=\"heading-20\">1. Data Collection</h3>\n<pre><code class=\"language-mermaid\">graph LR\n    A[Exchange API] --&gt; B[Data Collector]\n    B --&gt; C[Data Cleaning]\n    C --&gt; D[TimescaleDB]\n    D --&gt; E[Analysis Engine]\n</code></pre>\n<h3 id=\"heading-21\">2. Data Processing</h3>\n<ul>\n<li>Real-time stream processing</li>\n<li>Batch processing</li>\n<li>Anomaly detection and handling</li>\n</ul>\n<h2 id=\"heading-22\">⚡ Considerations for Scalability</h2>\n<h3 id=\"heading-23\">1. Horizontal Scaling</h3>\n<ul>\n<li>Configure read-only replicas</li>\n<li>Establish sharding strategy</li>\n<li>Set up load balancing</li>\n</ul>\n<h3 id=\"heading-24\">2. Vertical Scaling</h3>\n<ul>\n<li>Monitor resource usage</li>\n<li>Set performance metrics</li>\n<li>Define scaling thresholds</li>\n</ul>\n<p>This document provides the database design standards for the financial data analysis system. It will be updated continuously considering the system requirements and performance. 🚀</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "Financial Data Analysis System Database Design",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "📊 Database Architecture",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "1. Database Selection Rationale",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "2. Core Table Structures",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "2.1 Market Data Tables",
            "level": 4,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "2.2 분석 데이터 테이블",
            "level": 4,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "3. Indexing Strategy",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "3.1 Market Data Indexing",
            "level": 4,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "3.2 Analysis Data Indexing",
            "level": 4,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "4. Partitioning Strategy",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "4.1 Time-series Data Partitioning",
            "level": 4,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "4.2 Retention Policy",
            "level": 4,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "📈 Performance Optimization",
            "level": 2,
            "isMainTopic": true,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "1. Query Optimization",
            "level": 3,
            "isMainTopic": false,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "1.1 Frequent Queries",
            "level": 4,
            "isMainTopic": false,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "1.2 Caching Strategy",
            "level": 4,
            "isMainTopic": false,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "2. Backup Strategy",
            "level": 3,
            "isMainTopic": false,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "2.1 Regular Backups",
            "level": 4,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "2.2 Recovery Plan",
            "level": 4,
            "isMainTopic": false,
            "position": 900
          },
          {
            "id": "heading-19",
            "text": "🔄 Data Flow",
            "level": 2,
            "isMainTopic": true,
            "position": 950
          },
          {
            "id": "heading-20",
            "text": "1. Data Collection",
            "level": 3,
            "isMainTopic": false,
            "position": 1000
          },
          {
            "id": "heading-21",
            "text": "2. Data Processing",
            "level": 3,
            "isMainTopic": false,
            "position": 1050
          },
          {
            "id": "heading-22",
            "text": "⚡ Considerations for Scalability",
            "level": 2,
            "isMainTopic": true,
            "position": 1100
          },
          {
            "id": "heading-23",
            "text": "1. Horizontal Scaling",
            "level": 3,
            "isMainTopic": false,
            "position": 1150
          },
          {
            "id": "heading-24",
            "text": "2. Vertical Scaling",
            "level": 3,
            "isMainTopic": false,
            "position": 1200
          }
        ]
      }
    },
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_6",
    "title": "Entasis Engine - API 명세서",
    "content": "\n# 금융 데이터 분석 시스템 API 명세서\n\n## 🔐 인증 및 보안\n\n### 1. 인증 방식\n\n#### 1.1 JWT 인증\n\n```json\n{\n  \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}\n```\n\n#### 1.2 API Key 인증\n\n```json\n{\n  \"X-API-Key\": \"your-api-key-here\"\n}\n```\n\n### 2. 보안 정책\n\n- Rate Limiting: 1000 requests/minute\n- IP Whitelisting 지원\n- SSL/TLS 필수\n\n## 📡 RESTful API 엔드포인트\n\n### 1. 시장 데이터 API\n\n#### 1.1 실시간 시세 조회\n\n```http\nGET /api/v1/market/price/{symbol}\n\nResponse 200:\n{\n  \"symbol\": \"BTC-USDT\",\n  \"price\": \"65432.10\",\n  \"timestamp\": \"2024-03-21T09:30:00Z\",\n  \"volume\": \"123.45\",\n  \"exchange\": \"binance\"\n}\n```\n\n#### 1.2 과거 데이터 조회\n\n```http\nGET /api/v1/market/history/{symbol}\nParameters:\n  - interval: \"1m\" | \"5m\" | \"1h\" | \"1d\"\n  - start: ISO8601\n  - end: ISO8601\n\nResponse 200:\n{\n  \"symbol\": \"BTC-USDT\",\n  \"data\": [\n    {\n      \"timestamp\": \"2024-03-21T09:00:00Z\",\n      \"open\": \"65000.00\",\n      \"high\": \"65100.00\",\n      \"low\": \"64900.00\",\n      \"close\": \"65050.00\",\n      \"volume\": \"234.56\"\n    }\n  ]\n}\n```\n\n### 2. 포트폴리오 API\n\n#### 2.1 포지션 조회\n\n```http\nGET /api/v1/portfolio/positions\n\nResponse 200:\n{\n  \"positions\": [\n    {\n      \"symbol\": \"BTC-USDT\",\n      \"size\": \"1.5\",\n      \"entry_price\": \"64000.00\",\n      \"current_price\": \"65000.00\",\n      \"pnl\": \"1500.00\",\n      \"timestamp\": \"2024-03-21T09:30:00Z\"\n    }\n  ]\n}\n```\n\n#### 2.2 포지션 생성\n\n```http\nPOST /api/v1/portfolio/positions\nRequest:\n{\n  \"symbol\": \"BTC-USDT\",\n  \"size\": \"1.5\",\n  \"type\": \"long\",\n  \"leverage\": \"1\"\n}\n\nResponse 201:\n{\n  \"position_id\": \"pos_123456\",\n  \"status\": \"success\",\n  \"timestamp\": \"2024-03-21T09:30:00Z\"\n}\n```\n\n### 3. AI 분석 API\n\n#### 3.1 가격 예측\n\n```http\nGET /api/v1/analysis/prediction/{symbol}\nParameters:\n  - timeframe: \"1h\" | \"4h\" | \"1d\"\n  - model: \"lstm\" | \"ensemble\"\n\nResponse 200:\n{\n  \"symbol\": \"BTC-USDT\",\n  \"prediction\": \"66000.00\",\n  \"confidence\": 0.85,\n  \"timeframe\": \"1h\",\n  \"model\": \"ensemble\",\n  \"timestamp\": \"2024-03-21T09:30:00Z\"\n}\n```\n\n#### 3.2 리스크 분석\n\n```http\nGET /api/v1/analysis/risk/{symbol}\n\nResponse 200:\n{\n  \"symbol\": \"BTC-USDT\",\n  \"var_95\": \"3200.00\",\n  \"expected_shortfall\": \"3800.00\",\n  \"volatility\": \"0.45\",\n  \"timestamp\": \"2024-03-21T09:30:00Z\"\n}\n```\n\n## 🔄 WebSocket API\n\n### 1. 시장 데이터 스트림\n\n#### 1.1 실시간 시세 구독\n\n```javascript\n// 연결\nws://api.example.com/ws/market\n\n// 구독 메시지\n{\n  \"action\": \"subscribe\",\n  \"channel\": \"market\",\n  \"symbols\": [\"BTC-USDT\", \"ETH-USDT\"]\n}\n\n// 수신 데이터\n{\n  \"symbol\": \"BTC-USDT\",\n  \"price\": \"65432.10\",\n  \"timestamp\": \"2024-03-21T09:30:00.123Z\",\n  \"volume\": \"1.23\"\n}\n```\n\n#### 1.2 주문북 구독\n\n```javascript\n// 구독 메시지\n{\n  \"action\": \"subscribe\",\n  \"channel\": \"orderbook\",\n  \"symbol\": \"BTC-USDT\",\n  \"depth\": 10\n}\n\n// 수신 데이터\n{\n  \"symbol\": \"BTC-USDT\",\n  \"bids\": [\n    [\"65000.00\", \"1.234\"],\n    [\"64999.00\", \"2.345\"]\n  ],\n  \"asks\": [\n    [\"65001.00\", \"1.234\"],\n    [\"65002.00\", \"2.345\"]\n  ],\n  \"timestamp\": \"2024-03-21T09:30:00.123Z\"\n}\n```\n\n## 📊 에러 코드\n\n### 1. HTTP 상태 코드\n\n```json\n{\n  \"400\": \"잘못된 요청\",\n  \"401\": \"인증 실패\",\n  \"403\": \"권한 없음\",\n  \"404\": \"리소스 없음\",\n  \"429\": \"요청 한도 초과\",\n  \"500\": \"서버 내부 오류\"\n}\n```\n\n### 2. 비즈니스 에러 코드\n\n```json\n{\n  \"MARKET_001\": \"유효하지 않은 심볼\",\n  \"MARKET_002\": \"거래소 연결 실패\",\n  \"PORT_001\": \"잔액 부족\",\n  \"PORT_002\": \"포지션 한도 초과\",\n  \"AI_001\": \"모델 로딩 실패\",\n  \"AI_002\": \"예측 실패\"\n}\n```\n\n## 📝 API 사용 예시\n\n### 1. REST API 호출\n\n```python\nimport requests\n\n# 시장 데이터 조회\ndef get_market_price(symbol):\n    url = f\"https://api.example.com/v1/market/price/{symbol}\"\n    headers = {\n        \"Authorization\": f\"Bearer {token}\",\n        \"X-API-Key\": \"your-api-key\"\n    }\n    response = requests.get(url, headers=headers)\n    return response.json()\n\n# 포지션 생성\ndef create_position(symbol, size):\n    url = \"https://api.example.com/v1/portfolio/positions\"\n    data = {\n        \"symbol\": symbol,\n        \"size\": size,\n        \"type\": \"long\"\n    }\n    response = requests.post(url, json=data, headers=headers)\n    return response.json()\n```\n\n### 2. WebSocket 연결\n\n```javascript\nconst ws = new WebSocket(\"ws://api.example.com/ws/market\");\n\nws.onopen = () => {\n  ws.send(\n    JSON.stringify({\n      action: \"subscribe\",\n      channel: \"market\",\n      symbols: [\"BTC-USDT\"],\n    })\n  );\n};\n\nws.onmessage = (event) => {\n  const data = JSON.parse(event.data);\n  console.log(`${data.symbol}: ${data.price}`);\n};\n```\n\n이 문서는 금융 데이터 분석 시스템의 API 명세를 제공합니다. API는 지속적으로 업데이트되며, 최신 버전은 Swagger UI를 통해 확인할 수 있습니다. 🚀\n",
    "date": "2025-02-12",
    "category": "projects",
    "tags": [
      "api",
      "rest",
      "websocket",
      "swagger",
      "endpoint",
      "authentication",
      "documentation"
    ],
    "thumbnail": "/images/cryptocurrency.jpg",
    "translations": {
      "ko": {
        "title": "Entasis Engine - API 명세서",
        "description": "가상자산 데이터 분석 시스템의 RESTful API 및 WebSocket 명세",
        "content": "<h1 id=\"heading-0\">금융 데이터 분석 시스템 API 명세서</h1>\n<h2 id=\"heading-1\">🔐 인증 및 보안</h2>\n<h3 id=\"heading-2\">1. 인증 방식</h3>\n<h4 id=\"heading-3\">1.1 JWT 인증</h4>\n<pre><code class=\"language-json\">{\n  \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}\n</code></pre>\n<h4 id=\"heading-4\">1.2 API Key 인증</h4>\n<pre><code class=\"language-json\">{\n  \"X-API-Key\": \"your-api-key-here\"\n}\n</code></pre>\n<h3 id=\"heading-5\">2. 보안 정책</h3>\n<ul>\n<li>Rate Limiting: 1000 requests/minute</li>\n<li>IP Whitelisting 지원</li>\n<li>SSL/TLS 필수</li>\n</ul>\n<h2 id=\"heading-6\">📡 RESTful API 엔드포인트</h2>\n<h3 id=\"heading-7\">1. 시장 데이터 API</h3>\n<h4 id=\"heading-8\">1.1 실시간 시세 조회</h4>\n<pre><code class=\"language-http\">GET /api/v1/market/price/{symbol}\n\nResponse 200:\n{\n  \"symbol\": \"BTC-USDT\",\n  \"price\": \"65432.10\",\n  \"timestamp\": \"2024-03-21T09:30:00Z\",\n  \"volume\": \"123.45\",\n  \"exchange\": \"binance\"\n}\n</code></pre>\n<h4 id=\"heading-9\">1.2 과거 데이터 조회</h4>\n<pre><code class=\"language-http\">GET /api/v1/market/history/{symbol}\nParameters:\n  - interval: \"1m\" | \"5m\" | \"1h\" | \"1d\"\n  - start: ISO8601\n  - end: ISO8601\n\nResponse 200:\n{\n  \"symbol\": \"BTC-USDT\",\n  \"data\": [\n    {\n      \"timestamp\": \"2024-03-21T09:00:00Z\",\n      \"open\": \"65000.00\",\n      \"high\": \"65100.00\",\n      \"low\": \"64900.00\",\n      \"close\": \"65050.00\",\n      \"volume\": \"234.56\"\n    }\n  ]\n}\n</code></pre>\n<h3 id=\"heading-10\">2. 포트폴리오 API</h3>\n<h4 id=\"heading-11\">2.1 포지션 조회</h4>\n<pre><code class=\"language-http\">GET /api/v1/portfolio/positions\n\nResponse 200:\n{\n  \"positions\": [\n    {\n      \"symbol\": \"BTC-USDT\",\n      \"size\": \"1.5\",\n      \"entry_price\": \"64000.00\",\n      \"current_price\": \"65000.00\",\n      \"pnl\": \"1500.00\",\n      \"timestamp\": \"2024-03-21T09:30:00Z\"\n    }\n  ]\n}\n</code></pre>\n<h4 id=\"heading-12\">2.2 포지션 생성</h4>\n<pre><code class=\"language-http\">POST /api/v1/portfolio/positions\nRequest:\n{\n  \"symbol\": \"BTC-USDT\",\n  \"size\": \"1.5\",\n  \"type\": \"long\",\n  \"leverage\": \"1\"\n}\n\nResponse 201:\n{\n  \"position_id\": \"pos_123456\",\n  \"status\": \"success\",\n  \"timestamp\": \"2024-03-21T09:30:00Z\"\n}\n</code></pre>\n<h3 id=\"heading-13\">3. AI 분석 API</h3>\n<h4 id=\"heading-14\">3.1 가격 예측</h4>\n<pre><code class=\"language-http\">GET /api/v1/analysis/prediction/{symbol}\nParameters:\n  - timeframe: \"1h\" | \"4h\" | \"1d\"\n  - model: \"lstm\" | \"ensemble\"\n\nResponse 200:\n{\n  \"symbol\": \"BTC-USDT\",\n  \"prediction\": \"66000.00\",\n  \"confidence\": 0.85,\n  \"timeframe\": \"1h\",\n  \"model\": \"ensemble\",\n  \"timestamp\": \"2024-03-21T09:30:00Z\"\n}\n</code></pre>\n<h4 id=\"heading-15\">3.2 리스크 분석</h4>\n<pre><code class=\"language-http\">GET /api/v1/analysis/risk/{symbol}\n\nResponse 200:\n{\n  \"symbol\": \"BTC-USDT\",\n  \"var_95\": \"3200.00\",\n  \"expected_shortfall\": \"3800.00\",\n  \"volatility\": \"0.45\",\n  \"timestamp\": \"2024-03-21T09:30:00Z\"\n}\n</code></pre>\n<h2 id=\"heading-16\">🔄 WebSocket API</h2>\n<h3 id=\"heading-17\">1. 시장 데이터 스트림</h3>\n<h4 id=\"heading-18\">1.1 실시간 시세 구독</h4>\n<pre><code class=\"language-javascript\">// 연결\nws://api.example.com/ws/market\n\n// 구독 메시지\n{\n  \"action\": \"subscribe\",\n  \"channel\": \"market\",\n  \"symbols\": [\"BTC-USDT\", \"ETH-USDT\"]\n}\n\n// 수신 데이터\n{\n  \"symbol\": \"BTC-USDT\",\n  \"price\": \"65432.10\",\n  \"timestamp\": \"2024-03-21T09:30:00.123Z\",\n  \"volume\": \"1.23\"\n}\n</code></pre>\n<h4 id=\"heading-19\">1.2 주문북 구독</h4>\n<pre><code class=\"language-javascript\">// 구독 메시지\n{\n  \"action\": \"subscribe\",\n  \"channel\": \"orderbook\",\n  \"symbol\": \"BTC-USDT\",\n  \"depth\": 10\n}\n\n// 수신 데이터\n{\n  \"symbol\": \"BTC-USDT\",\n  \"bids\": [\n    [\"65000.00\", \"1.234\"],\n    [\"64999.00\", \"2.345\"]\n  ],\n  \"asks\": [\n    [\"65001.00\", \"1.234\"],\n    [\"65002.00\", \"2.345\"]\n  ],\n  \"timestamp\": \"2024-03-21T09:30:00.123Z\"\n}\n</code></pre>\n<h2 id=\"heading-20\">📊 에러 코드</h2>\n<h3 id=\"heading-21\">1. HTTP 상태 코드</h3>\n<pre><code class=\"language-json\">{\n  \"400\": \"잘못된 요청\",\n  \"401\": \"인증 실패\",\n  \"403\": \"권한 없음\",\n  \"404\": \"리소스 없음\",\n  \"429\": \"요청 한도 초과\",\n  \"500\": \"서버 내부 오류\"\n}\n</code></pre>\n<h3 id=\"heading-22\">2. 비즈니스 에러 코드</h3>\n<pre><code class=\"language-json\">{\n  \"MARKET_001\": \"유효하지 않은 심볼\",\n  \"MARKET_002\": \"거래소 연결 실패\",\n  \"PORT_001\": \"잔액 부족\",\n  \"PORT_002\": \"포지션 한도 초과\",\n  \"AI_001\": \"모델 로딩 실패\",\n  \"AI_002\": \"예측 실패\"\n}\n</code></pre>\n<h2 id=\"heading-23\">📝 API 사용 예시</h2>\n<h3 id=\"heading-24\">1. REST API 호출</h3>\n<pre><code class=\"language-python\">import requests\n\n# 시장 데이터 조회\ndef get_market_price(symbol):\n    url = f\"https://api.example.com/v1/market/price/{symbol}\"\n    headers = {\n        \"Authorization\": f\"Bearer {token}\",\n        \"X-API-Key\": \"your-api-key\"\n    }\n    response = requests.get(url, headers=headers)\n    return response.json()\n\n# 포지션 생성\ndef create_position(symbol, size):\n    url = \"https://api.example.com/v1/portfolio/positions\"\n    data = {\n        \"symbol\": symbol,\n        \"size\": size,\n        \"type\": \"long\"\n    }\n    response = requests.post(url, json=data, headers=headers)\n    return response.json()\n</code></pre>\n<h3 id=\"heading-25\">2. WebSocket 연결</h3>\n<pre><code class=\"language-javascript\">const ws = new WebSocket(\"ws://api.example.com/ws/market\");\n\nws.onopen = () =&gt; {\n  ws.send(\n    JSON.stringify({\n      action: \"subscribe\",\n      channel: \"market\",\n      symbols: [\"BTC-USDT\"],\n    })\n  );\n};\n\nws.onmessage = (event) =&gt; {\n  const data = JSON.parse(event.data);\n  console.log(`${data.symbol}: ${data.price}`);\n};\n</code></pre>\n<p>이 문서는 금융 데이터 분석 시스템의 API 명세를 제공합니다. API는 지속적으로 업데이트되며, 최신 버전은 Swagger UI를 통해 확인할 수 있습니다. 🚀</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "금융 데이터 분석 시스템 API 명세서",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "🔐 인증 및 보안",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "1. 인증 방식",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "1.1 JWT 인증",
            "level": 4,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "1.2 API Key 인증",
            "level": 4,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "2. 보안 정책",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "📡 RESTful API 엔드포인트",
            "level": 2,
            "isMainTopic": true,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "1. 시장 데이터 API",
            "level": 3,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "1.1 실시간 시세 조회",
            "level": 4,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "1.2 과거 데이터 조회",
            "level": 4,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "2. 포트폴리오 API",
            "level": 3,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "2.1 포지션 조회",
            "level": 4,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "2.2 포지션 생성",
            "level": 4,
            "isMainTopic": false,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "3. AI 분석 API",
            "level": 3,
            "isMainTopic": false,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "3.1 가격 예측",
            "level": 4,
            "isMainTopic": false,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "3.2 리스크 분석",
            "level": 4,
            "isMainTopic": false,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "🔄 WebSocket API",
            "level": 2,
            "isMainTopic": true,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "1. 시장 데이터 스트림",
            "level": 3,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "1.1 실시간 시세 구독",
            "level": 4,
            "isMainTopic": false,
            "position": 900
          },
          {
            "id": "heading-19",
            "text": "1.2 주문북 구독",
            "level": 4,
            "isMainTopic": false,
            "position": 950
          },
          {
            "id": "heading-20",
            "text": "📊 에러 코드",
            "level": 2,
            "isMainTopic": true,
            "position": 1000
          },
          {
            "id": "heading-21",
            "text": "1. HTTP 상태 코드",
            "level": 3,
            "isMainTopic": false,
            "position": 1050
          },
          {
            "id": "heading-22",
            "text": "2. 비즈니스 에러 코드",
            "level": 3,
            "isMainTopic": false,
            "position": 1100
          },
          {
            "id": "heading-23",
            "text": "📝 API 사용 예시",
            "level": 2,
            "isMainTopic": true,
            "position": 1150
          },
          {
            "id": "heading-24",
            "text": "1. REST API 호출",
            "level": 3,
            "isMainTopic": false,
            "position": 1200
          },
          {
            "id": "heading-25",
            "text": "2. WebSocket 연결",
            "level": 3,
            "isMainTopic": false,
            "position": 1250
          }
        ]
      },
      "en": {
        "title": "Entasis Engine - API Specification",
        "description": "RESTful API and WebSocket specifications for digital asset data analysis system",
        "content": "<h1 id=\"heading-0\">Financial Data Analysis System API Specification</h1>\n<h2 id=\"heading-1\">🔐 Authentication &amp; Security</h2>\n<h3 id=\"heading-2\">1. Authentication Methods</h3>\n<h4 id=\"heading-3\">1.1 JWT Authentication</h4>\n<pre><code class=\"language-json\">{\n  \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}\n</code></pre>\n<h4 id=\"heading-4\">1.2 API Key Authentication</h4>\n<pre><code class=\"language-json\">{\n  \"X-API-Key\": \"your-api-key-here\"\n}\n</code></pre>\n<h3 id=\"heading-5\">2. Security Policies</h3>\n<ul>\n<li>Rate Limiting: 1000 requests/minute</li>\n<li>IP Whitelisting</li>\n<li>SSL/TLS required</li>\n</ul>\n<h2 id=\"heading-6\">📡 RESTful API Endpoints</h2>\n<h3 id=\"heading-7\">1. Market Data API</h3>\n<h4 id=\"heading-8\">1.1 Real-time Price Retrieval</h4>\n<pre><code class=\"language-http\">GET /api/v1/market/price/{symbol}\n\nResponse 200:\n{\n  \"symbol\": \"BTC-USDT\",\n  \"price\": \"65432.10\",\n  \"timestamp\": \"2024-03-21T09:30:00Z\",\n  \"volume\": \"123.45\",\n  \"exchange\": \"binance\"\n}\n</code></pre>\n<h4 id=\"heading-9\">1.2 Historical Data Retrieval</h4>\n<pre><code class=\"language-http\">GET /api/v1/market/history/{symbol}\nParameters:\n  - interval: \"1m\" | \"5m\" | \"1h\" | \"1d\"\n  - start: ISO8601\n  - end: ISO8601\n\nResponse 200:\n{\n  \"symbol\": \"BTC-USDT\",\n  \"data\": [\n    {\n      \"timestamp\": \"2024-03-21T09:00:00Z\",\n      \"open\": \"65000.00\",\n      \"high\": \"65100.00\",\n      \"low\": \"64900.00\",\n      \"close\": \"65050.00\",\n      \"volume\": \"234.56\"\n    }\n  ]\n}\n</code></pre>\n<h3 id=\"heading-10\">2. Portfolio API</h3>\n<h4 id=\"heading-11\">2.1 Position Retrieval</h4>\n<pre><code class=\"language-http\">GET /api/v1/portfolio/positions\n\nResponse 200:\n{\n  \"positions\": [\n    {\n      \"symbol\": \"BTC-USDT\",\n      \"size\": \"1.5\",\n      \"entry_price\": \"64000.00\",\n      \"current_price\": \"65000.00\",\n      \"pnl\": \"1500.00\",\n      \"timestamp\": \"2024-03-21T09:30:00Z\"\n    }\n  ]\n}\n</code></pre>\n<h4 id=\"heading-12\">2.2 Position Creation</h4>\n<pre><code class=\"language-http\">POST /api/v1/portfolio/positions\nRequest:\n{\n  \"symbol\": \"BTC-USDT\",\n  \"size\": \"1.5\",\n  \"type\": \"long\",\n  \"leverage\": \"1\"\n}\n\nResponse 201:\n{\n  \"position_id\": \"pos_123456\",\n  \"status\": \"success\",\n  \"timestamp\": \"2024-03-21T09:30:00Z\"\n}\n</code></pre>\n<h3 id=\"heading-13\">3. AI Analysis API</h3>\n<h4 id=\"heading-14\">3.1 Price Prediction</h4>\n<pre><code class=\"language-http\">GET /api/v1/analysis/prediction/{symbol}\nParameters:\n  - timeframe: \"1h\" | \"4h\" | \"1d\"\n  - model: \"lstm\" | \"ensemble\"\n\nResponse 200:\n{\n  \"symbol\": \"BTC-USDT\",\n  \"prediction\": \"66000.00\",\n  \"confidence\": 0.85,\n  \"timeframe\": \"1h\",\n  \"model\": \"ensemble\",\n  \"timestamp\": \"2024-03-21T09:30:00Z\"\n}\n</code></pre>\n<h4 id=\"heading-15\">3.2 Risk Analysis</h4>\n<pre><code class=\"language-http\">GET /api/v1/analysis/risk/{symbol}\n\nResponse 200:\n{\n  \"symbol\": \"BTC-USDT\",\n  \"var_95\": \"3200.00\",\n  \"expected_shortfall\": \"3800.00\",\n  \"volatility\": \"0.45\",\n  \"timestamp\": \"2024-03-21T09:30:00Z\"\n}\n</code></pre>\n<h2 id=\"heading-16\">🔄 WebSocket API</h2>\n<h3 id=\"heading-17\">1. Market Data Stream</h3>\n<h4 id=\"heading-18\">1.1 Real-time Price Subscription</h4>\n<pre><code class=\"language-javascript\">// Connection\nws://api.example.com/ws/market\n\n// Subscription message\n{\n  \"action\": \"subscribe\",\n  \"channel\": \"market\",\n  \"symbols\": [\"BTC-USDT\", \"ETH-USDT\"]\n}\n\n// Received data\n{\n  \"symbol\": \"BTC-USDT\",\n  \"price\": \"65432.10\",\n  \"timestamp\": \"2024-03-21T09:30:00.123Z\",\n  \"volume\": \"1.23\"\n}\n</code></pre>\n<h4 id=\"heading-19\">1.2 Orderbook Subscription</h4>\n<pre><code class=\"language-javascript\">// Subscription message\n{\n  \"action\": \"subscribe\",\n  \"channel\": \"orderbook\",\n  \"symbol\": \"BTC-USDT\",\n  \"depth\": 10\n}\n\n// Received data\n{\n  \"symbol\": \"BTC-USDT\",\n  \"bids\": [\n    [\"65000.00\", \"1.234\"],\n    [\"64999.00\", \"2.345\"]\n  ],\n  \"asks\": [\n    [\"65001.00\", \"1.234\"],\n    [\"65002.00\", \"2.345\"]\n  ],\n  \"timestamp\": \"2024-03-21T09:30:00.123Z\"\n}\n</code></pre>\n<h2 id=\"heading-20\">📊 Error Codes</h2>\n<h3 id=\"heading-21\">1. HTTP Status Codes</h3>\n<pre><code class=\"language-json\">{\n  \"400\": \"잘못된 요청\",\n  \"401\": \"인증 실패\",\n  \"403\": \"권한 없음\",\n  \"404\": \"리소스 없음\",\n  \"429\": \"요청 한도 초과\",\n  \"500\": \"서버 내부 오류\"\n}\n</code></pre>\n<h3 id=\"heading-22\">2. Business Error Codes</h3>\n<pre><code class=\"language-json\">{\n  \"MARKET_001\": \"유효하지 않은 심볼\",\n  \"MARKET_002\": \"거래소 연결 실패\",\n  \"PORT_001\": \"잔액 부족\",\n  \"PORT_002\": \"포지션 한도 초과\",\n  \"AI_001\": \"모델 로딩 실패\",\n  \"AI_002\": \"예측 실패\"\n}\n</code></pre>\n<h2 id=\"heading-23\">📝 API Usage Examples</h2>\n<h3 id=\"heading-24\">1. REST API Call</h3>\n<pre><code class=\"language-python\">import requests\n\n# Market data retrieval\ndef get_market_price(symbol):\n    url = f\"https://api.example.com/v1/market/price/{symbol}\"\n    headers = {\n        \"Authorization\": f\"Bearer {token}\",\n        \"X-API-Key\": \"your-api-key\"\n    }\n    response = requests.get(url, headers=headers)\n    return response.json()\n\n# Position creation\ndef create_position(symbol, size):\n    url = \"https://api.example.com/v1/portfolio/positions\"\n    data = {\n        \"symbol\": symbol,\n        \"size\": size,\n        \"type\": \"long\"\n    }\n    response = requests.post(url, json=data, headers=headers)\n    return response.json()\n</code></pre>\n<h3 id=\"heading-25\">2. WebSocket Connection</h3>\n<pre><code class=\"language-javascript\">const ws = new WebSocket(\"ws://api.example.com/ws/market\");\n\nws.onopen = () =&gt; {\n  ws.send(\n    JSON.stringify({\n      action: \"subscribe\",\n      channel: \"market\",\n      symbols: [\"BTC-USDT\"],\n    })\n  );\n};\n\nws.onmessage = (event) =&gt; {\n  const data = JSON.parse(event.data);\n  console.log(`${data.symbol}: ${data.price}`);\n};\n</code></pre>\n<p>This document provides the API specification for the financial data analysis system. APIs are continuously updated, and the latest version can be viewed through the Swagger UI. 🚀</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "Financial Data Analysis System API Specification",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "🔐 Authentication & Security",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "1. Authentication Methods",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "1.1 JWT Authentication",
            "level": 4,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "1.2 API Key Authentication",
            "level": 4,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "2. Security Policies",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "📡 RESTful API Endpoints",
            "level": 2,
            "isMainTopic": true,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "1. Market Data API",
            "level": 3,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "1.1 Real-time Price Retrieval",
            "level": 4,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "1.2 Historical Data Retrieval",
            "level": 4,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "2. Portfolio API",
            "level": 3,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "2.1 Position Retrieval",
            "level": 4,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "2.2 Position Creation",
            "level": 4,
            "isMainTopic": false,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "3. AI Analysis API",
            "level": 3,
            "isMainTopic": false,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "3.1 Price Prediction",
            "level": 4,
            "isMainTopic": false,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "3.2 Risk Analysis",
            "level": 4,
            "isMainTopic": false,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "🔄 WebSocket API",
            "level": 2,
            "isMainTopic": true,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "1. Market Data Stream",
            "level": 3,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "1.1 Real-time Price Subscription",
            "level": 4,
            "isMainTopic": false,
            "position": 900
          },
          {
            "id": "heading-19",
            "text": "1.2 Orderbook Subscription",
            "level": 4,
            "isMainTopic": false,
            "position": 950
          },
          {
            "id": "heading-20",
            "text": "📊 Error Codes",
            "level": 2,
            "isMainTopic": true,
            "position": 1000
          },
          {
            "id": "heading-21",
            "text": "1. HTTP Status Codes",
            "level": 3,
            "isMainTopic": false,
            "position": 1050
          },
          {
            "id": "heading-22",
            "text": "2. Business Error Codes",
            "level": 3,
            "isMainTopic": false,
            "position": 1100
          },
          {
            "id": "heading-23",
            "text": "📝 API Usage Examples",
            "level": 2,
            "isMainTopic": true,
            "position": 1150
          },
          {
            "id": "heading-24",
            "text": "1. REST API Call",
            "level": 3,
            "isMainTopic": false,
            "position": 1200
          },
          {
            "id": "heading-25",
            "text": "2. WebSocket Connection",
            "level": 3,
            "isMainTopic": false,
            "position": 1250
          }
        ]
      }
    },
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_7",
    "title": "Entasis Engine - AI 모델 설계",
    "content": "\n# 금융 데이터 분석 시스템 AI 모델 설계\n\n## 📊 모델 아키텍처 개요\n\n### 1. 예측 모델 구조\n\n#### 1.1 LSTM 기반 시계열 예측\n\n```python\nclass PricePredictionLSTM(nn.Module):\n    def __init__(self, input_dim, hidden_dim, num_layers, output_dim):\n        super().__init__()\n        self.lstm = nn.LSTM(\n            input_dim,\n            hidden_dim,\n            num_layers,\n            batch_first=True,\n            dropout=0.2\n        )\n        self.fc = nn.Linear(hidden_dim, output_dim)\n\n    def forward(self, x):\n        lstm_out, _ = self.lstm(x)\n        predictions = self.fc(lstm_out[:, -1, :])\n        return predictions\n```\n\n#### 1.2 앙상블 모델 구성\n\n```python\nclass EnsembleModel:\n    def __init__(self):\n        self.models = {\n            'lstm': PricePredictionLSTM(...),\n            'random_forest': RandomForestRegressor(...),\n            'xgboost': XGBRegressor(...),\n            'lightgbm': LGBMRegressor(...)\n        }\n        self.weights = {\n            'lstm': 0.4,\n            'random_forest': 0.2,\n            'xgboost': 0.2,\n            'lightgbm': 0.2\n        }\n```\n\n### 2. 특징 엔지니어링\n\n#### 2.1 기술적 지표\n\n```python\ndef calculate_technical_indicators(df):\n    # 이동평균\n    df['sma_20'] = df['close'].rolling(window=20).mean()\n    df['sma_50'] = df['close'].rolling(window=50).mean()\n\n    # RSI\n    delta = df['close'].diff()\n    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()\n    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()\n    df['rsi'] = 100 - (100 / (1 + gain/loss))\n\n    # MACD\n    exp1 = df['close'].ewm(span=12, adjust=False).mean()\n    exp2 = df['close'].ewm(span=26, adjust=False).mean()\n    df['macd'] = exp1 - exp2\n    df['signal'] = df['macd'].ewm(span=9, adjust=False).mean()\n\n    return df\n```\n\n#### 2.2 시장 감성 분석\n\n```python\ndef analyze_market_sentiment(text_data):\n    sentiment_model = pipeline(\n        \"sentiment-analysis\",\n        model=\"finbert-sentiment\"\n    )\n    scores = sentiment_model(text_data)\n    return aggregate_sentiment_scores(scores)\n```\n\n## 🔄 학습 파이프라인\n\n### 1. 데이터 전처리\n\n#### 1.1 시계열 데이터 준비\n\n```python\ndef prepare_time_series(data, sequence_length):\n    sequences = []\n    targets = []\n\n    for i in range(len(data) - sequence_length):\n        seq = data[i:(i + sequence_length)]\n        target = data[i + sequence_length]\n        sequences.append(seq)\n        targets.append(target)\n\n    return np.array(sequences), np.array(targets)\n```\n\n#### 1.2 데이터 정규화\n\n```python\ndef normalize_features(data):\n    scaler = MinMaxScaler()\n    normalized_data = scaler.fit_transform(data)\n    return normalized_data, scaler\n```\n\n### 2. 모델 학습\n\n#### 2.1 LSTM 학습 프로세스\n\n```python\ndef train_lstm_model(model, train_loader, val_loader, epochs):\n    optimizer = optim.Adam(model.parameters())\n    criterion = nn.MSELoss()\n\n    for epoch in range(epochs):\n        model.train()\n        for batch_X, batch_y in train_loader:\n            optimizer.zero_grad()\n            outputs = model(batch_X)\n            loss = criterion(outputs, batch_y)\n            loss.backward()\n            optimizer.step()\n\n        # 검증\n        model.eval()\n        val_loss = validate_model(model, val_loader, criterion)\n        print(f'Epoch {epoch}: Val Loss = {val_loss:.4f}')\n```\n\n#### 2.2 앙상블 모델 통합\n\n```python\ndef ensemble_predict(models, weights, X):\n    predictions = []\n    for model_name, model in models.items():\n        pred = model.predict(X)\n        predictions.append(pred * weights[model_name])\n    return np.sum(predictions, axis=0)\n```\n\n## 📈 성능 평가\n\n### 1. 평가 메트릭\n\n#### 1.1 예측 정확도 평가\n\n```python\ndef evaluate_predictions(y_true, y_pred):\n    metrics = {\n        'mse': mean_squared_error(y_true, y_pred),\n        'mae': mean_absolute_error(y_true, y_pred),\n        'r2': r2_score(y_true, y_pred),\n        'mape': mean_absolute_percentage_error(y_true, y_pred)\n    }\n    return metrics\n```\n\n#### 1.2 백테스팅\n\n```python\ndef backtest_strategy(model, historical_data, initial_capital=10000):\n    portfolio = Portfolio(initial_capital)\n    signals = generate_trading_signals(model, historical_data)\n\n    for timestamp, signal in signals.items():\n        if signal > 0:\n            portfolio.long_position(timestamp)\n        elif signal < 0:\n            portfolio.short_position(timestamp)\n\n    return portfolio.calculate_returns()\n```\n\n## 🔍 리스크 관리\n\n### 1. 리스크 모니터링\n\n#### 1.1 Value at Risk (VaR) 계산\n\n```python\ndef calculate_var(returns, confidence_level=0.95):\n    return np.percentile(returns, (1 - confidence_level) * 100)\n```\n\n#### 1.2 Expected Shortfall\n\n```python\ndef calculate_expected_shortfall(returns, var):\n    return returns[returns <= var].mean()\n```\n\n### 2. 포지션 사이징\n\n```python\ndef calculate_position_size(prediction, confidence, account_size):\n    base_size = account_size * 0.02  # 2% 리스크 룰\n    adjusted_size = base_size * confidence\n    return min(adjusted_size, account_size * 0.05)  # 최대 5% 제한\n```\n\n## 🚀 배포 및 모니터링\n\n### 1. 모델 서빙\n\n#### 1.1 모델 직렬화\n\n```python\ndef save_model(model, path):\n    torch.save({\n        'model_state_dict': model.state_dict(),\n        'hyperparameters': model.hyperparameters,\n        'scaler': model.scaler\n    }, path)\n```\n\n#### 1.2 실시간 추론\n\n```python\n@app.route('/predict', methods=['POST'])\ndef predict():\n    data = request.json\n    prediction = model.predict(preprocess_data(data))\n    confidence = calculate_prediction_confidence(prediction)\n    return jsonify({\n        'prediction': prediction,\n        'confidence': confidence\n    })\n```\n\n### 2. 성능 모니터링\n\n```python\ndef monitor_model_performance(predictions, actuals):\n    metrics = calculate_metrics(predictions, actuals)\n    alert_if_degraded(metrics)\n    log_performance(metrics)\n```\n\n이 문서는 금융 데이터 분석 시스템의 AI 모델 설계 및 구현 상세를 제공합니다. 모델은 지속적으로 개선되며, 성능 메트릭과 리스크 관리 전략도 함께 업데이트됩니다. 🚀\n",
    "date": "2025-02-13",
    "category": "projects",
    "tags": [
      "ai",
      "machine-learning",
      "deep-learning",
      "lstm",
      "ensemble",
      "prediction",
      "risk-analysis"
    ],
    "thumbnail": "/images/cryptocurrency.jpg",
    "translations": {
      "ko": {
        "title": "Entasis Engine - AI 모델 설계",
        "description": "가상자산 데이터 분석 시스템의 AI 모델 아키텍처 및 구현 상세",
        "content": "<h1 id=\"heading-0\">금융 데이터 분석 시스템 AI 모델 설계</h1>\n<h2 id=\"heading-1\">📊 모델 아키텍처 개요</h2>\n<h3 id=\"heading-2\">1. 예측 모델 구조</h3>\n<h4 id=\"heading-3\">1.1 LSTM 기반 시계열 예측</h4>\n<pre><code class=\"language-python\">class PricePredictionLSTM(nn.Module):\n    def __init__(self, input_dim, hidden_dim, num_layers, output_dim):\n        super().__init__()\n        self.lstm = nn.LSTM(\n            input_dim,\n            hidden_dim,\n            num_layers,\n            batch_first=True,\n            dropout=0.2\n        )\n        self.fc = nn.Linear(hidden_dim, output_dim)\n\n    def forward(self, x):\n        lstm_out, _ = self.lstm(x)\n        predictions = self.fc(lstm_out[:, -1, :])\n        return predictions\n</code></pre>\n<h4 id=\"heading-4\">1.2 앙상블 모델 구성</h4>\n<pre><code class=\"language-python\">class EnsembleModel:\n    def __init__(self):\n        self.models = {\n            'lstm': PricePredictionLSTM(...),\n            'random_forest': RandomForestRegressor(...),\n            'xgboost': XGBRegressor(...),\n            'lightgbm': LGBMRegressor(...)\n        }\n        self.weights = {\n            'lstm': 0.4,\n            'random_forest': 0.2,\n            'xgboost': 0.2,\n            'lightgbm': 0.2\n        }\n</code></pre>\n<h3 id=\"heading-5\">2. 특징 엔지니어링</h3>\n<h4 id=\"heading-6\">2.1 기술적 지표</h4>\n<pre><code class=\"language-python\">def calculate_technical_indicators(df):\n    # 이동평균\n    df['sma_20'] = df['close'].rolling(window=20).mean()\n    df['sma_50'] = df['close'].rolling(window=50).mean()\n\n    # RSI\n    delta = df['close'].diff()\n    gain = (delta.where(delta &gt; 0, 0)).rolling(window=14).mean()\n    loss = (-delta.where(delta &lt; 0, 0)).rolling(window=14).mean()\n    df['rsi'] = 100 - (100 / (1 + gain/loss))\n\n    # MACD\n    exp1 = df['close'].ewm(span=12, adjust=False).mean()\n    exp2 = df['close'].ewm(span=26, adjust=False).mean()\n    df['macd'] = exp1 - exp2\n    df['signal'] = df['macd'].ewm(span=9, adjust=False).mean()\n\n    return df\n</code></pre>\n<h4 id=\"heading-7\">2.2 시장 감성 분석</h4>\n<pre><code class=\"language-python\">def analyze_market_sentiment(text_data):\n    sentiment_model = pipeline(\n        \"sentiment-analysis\",\n        model=\"finbert-sentiment\"\n    )\n    scores = sentiment_model(text_data)\n    return aggregate_sentiment_scores(scores)\n</code></pre>\n<h2 id=\"heading-8\">🔄 학습 파이프라인</h2>\n<h3 id=\"heading-9\">1. 데이터 전처리</h3>\n<h4 id=\"heading-10\">1.1 시계열 데이터 준비</h4>\n<pre><code class=\"language-python\">def prepare_time_series(data, sequence_length):\n    sequences = []\n    targets = []\n\n    for i in range(len(data) - sequence_length):\n        seq = data[i:(i + sequence_length)]\n        target = data[i + sequence_length]\n        sequences.append(seq)\n        targets.append(target)\n\n    return np.array(sequences), np.array(targets)\n</code></pre>\n<h4 id=\"heading-11\">1.2 데이터 정규화</h4>\n<pre><code class=\"language-python\">def normalize_features(data):\n    scaler = MinMaxScaler()\n    normalized_data = scaler.fit_transform(data)\n    return normalized_data, scaler\n</code></pre>\n<h3 id=\"heading-12\">2. 모델 학습</h3>\n<h4 id=\"heading-13\">2.1 LSTM 학습 프로세스</h4>\n<pre><code class=\"language-python\">def train_lstm_model(model, train_loader, val_loader, epochs):\n    optimizer = optim.Adam(model.parameters())\n    criterion = nn.MSELoss()\n\n    for epoch in range(epochs):\n        model.train()\n        for batch_X, batch_y in train_loader:\n            optimizer.zero_grad()\n            outputs = model(batch_X)\n            loss = criterion(outputs, batch_y)\n            loss.backward()\n            optimizer.step()\n\n        # 검증\n        model.eval()\n        val_loss = validate_model(model, val_loader, criterion)\n        print(f'Epoch {epoch}: Val Loss = {val_loss:.4f}')\n</code></pre>\n<h4 id=\"heading-14\">2.2 앙상블 모델 통합</h4>\n<pre><code class=\"language-python\">def ensemble_predict(models, weights, X):\n    predictions = []\n    for model_name, model in models.items():\n        pred = model.predict(X)\n        predictions.append(pred * weights[model_name])\n    return np.sum(predictions, axis=0)\n</code></pre>\n<h2 id=\"heading-15\">📈 성능 평가</h2>\n<h3 id=\"heading-16\">1. 평가 메트릭</h3>\n<h4 id=\"heading-17\">1.1 예측 정확도 평가</h4>\n<pre><code class=\"language-python\">def evaluate_predictions(y_true, y_pred):\n    metrics = {\n        'mse': mean_squared_error(y_true, y_pred),\n        'mae': mean_absolute_error(y_true, y_pred),\n        'r2': r2_score(y_true, y_pred),\n        'mape': mean_absolute_percentage_error(y_true, y_pred)\n    }\n    return metrics\n</code></pre>\n<h4 id=\"heading-18\">1.2 백테스팅</h4>\n<pre><code class=\"language-python\">def backtest_strategy(model, historical_data, initial_capital=10000):\n    portfolio = Portfolio(initial_capital)\n    signals = generate_trading_signals(model, historical_data)\n\n    for timestamp, signal in signals.items():\n        if signal &gt; 0:\n            portfolio.long_position(timestamp)\n        elif signal &lt; 0:\n            portfolio.short_position(timestamp)\n\n    return portfolio.calculate_returns()\n</code></pre>\n<h2 id=\"heading-19\">🔍 리스크 관리</h2>\n<h3 id=\"heading-20\">1. 리스크 모니터링</h3>\n<h4 id=\"heading-21\">1.1 Value at Risk (VaR) 계산</h4>\n<pre><code class=\"language-python\">def calculate_var(returns, confidence_level=0.95):\n    return np.percentile(returns, (1 - confidence_level) * 100)\n</code></pre>\n<h4 id=\"heading-22\">1.2 Expected Shortfall</h4>\n<pre><code class=\"language-python\">def calculate_expected_shortfall(returns, var):\n    return returns[returns &lt;= var].mean()\n</code></pre>\n<h3 id=\"heading-23\">2. 포지션 사이징</h3>\n<pre><code class=\"language-python\">def calculate_position_size(prediction, confidence, account_size):\n    base_size = account_size * 0.02  # 2% 리스크 룰\n    adjusted_size = base_size * confidence\n    return min(adjusted_size, account_size * 0.05)  # 최대 5% 제한\n</code></pre>\n<h2 id=\"heading-24\">🚀 배포 및 모니터링</h2>\n<h3 id=\"heading-25\">1. 모델 서빙</h3>\n<h4 id=\"heading-26\">1.1 모델 직렬화</h4>\n<pre><code class=\"language-python\">def save_model(model, path):\n    torch.save({\n        'model_state_dict': model.state_dict(),\n        'hyperparameters': model.hyperparameters,\n        'scaler': model.scaler\n    }, path)\n</code></pre>\n<h4 id=\"heading-27\">1.2 실시간 추론</h4>\n<pre><code class=\"language-python\">@app.route('/predict', methods=['POST'])\ndef predict():\n    data = request.json\n    prediction = model.predict(preprocess_data(data))\n    confidence = calculate_prediction_confidence(prediction)\n    return jsonify({\n        'prediction': prediction,\n        'confidence': confidence\n    })\n</code></pre>\n<h3 id=\"heading-28\">2. 성능 모니터링</h3>\n<pre><code class=\"language-python\">def monitor_model_performance(predictions, actuals):\n    metrics = calculate_metrics(predictions, actuals)\n    alert_if_degraded(metrics)\n    log_performance(metrics)\n</code></pre>\n<p>이 문서는 금융 데이터 분석 시스템의 AI 모델 설계 및 구현 상세를 제공합니다. 모델은 지속적으로 개선되며, 성능 메트릭과 리스크 관리 전략도 함께 업데이트됩니다. 🚀</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "금융 데이터 분석 시스템 AI 모델 설계",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "📊 모델 아키텍처 개요",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "1. 예측 모델 구조",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "1.1 LSTM 기반 시계열 예측",
            "level": 4,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "1.2 앙상블 모델 구성",
            "level": 4,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "2. 특징 엔지니어링",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "2.1 기술적 지표",
            "level": 4,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "2.2 시장 감성 분석",
            "level": 4,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "🔄 학습 파이프라인",
            "level": 2,
            "isMainTopic": true,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "1. 데이터 전처리",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "1.1 시계열 데이터 준비",
            "level": 4,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "1.2 데이터 정규화",
            "level": 4,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "2. 모델 학습",
            "level": 3,
            "isMainTopic": false,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "2.1 LSTM 학습 프로세스",
            "level": 4,
            "isMainTopic": false,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "2.2 앙상블 모델 통합",
            "level": 4,
            "isMainTopic": false,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "📈 성능 평가",
            "level": 2,
            "isMainTopic": true,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "1. 평가 메트릭",
            "level": 3,
            "isMainTopic": false,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "1.1 예측 정확도 평가",
            "level": 4,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "1.2 백테스팅",
            "level": 4,
            "isMainTopic": false,
            "position": 900
          },
          {
            "id": "heading-19",
            "text": "🔍 리스크 관리",
            "level": 2,
            "isMainTopic": true,
            "position": 950
          },
          {
            "id": "heading-20",
            "text": "1. 리스크 모니터링",
            "level": 3,
            "isMainTopic": false,
            "position": 1000
          },
          {
            "id": "heading-21",
            "text": "1.1 Value at Risk (VaR) 계산",
            "level": 4,
            "isMainTopic": false,
            "position": 1050
          },
          {
            "id": "heading-22",
            "text": "1.2 Expected Shortfall",
            "level": 4,
            "isMainTopic": false,
            "position": 1100
          },
          {
            "id": "heading-23",
            "text": "2. 포지션 사이징",
            "level": 3,
            "isMainTopic": false,
            "position": 1150
          },
          {
            "id": "heading-24",
            "text": "🚀 배포 및 모니터링",
            "level": 2,
            "isMainTopic": true,
            "position": 1200
          },
          {
            "id": "heading-25",
            "text": "1. 모델 서빙",
            "level": 3,
            "isMainTopic": false,
            "position": 1250
          },
          {
            "id": "heading-26",
            "text": "1.1 모델 직렬화",
            "level": 4,
            "isMainTopic": false,
            "position": 1300
          },
          {
            "id": "heading-27",
            "text": "1.2 실시간 추론",
            "level": 4,
            "isMainTopic": false,
            "position": 1350
          },
          {
            "id": "heading-28",
            "text": "2. 성능 모니터링",
            "level": 3,
            "isMainTopic": false,
            "position": 1400
          }
        ]
      },
      "en": {
        "title": "Entasis Engine - AI Model Design",
        "description": "AI model architecture and implementation details for digital asset data analysis system",
        "content": "<h1 id=\"heading-0\">Financial Data Analysis System AI Model Design</h1>\n<h2 id=\"heading-1\">📊 Model Architecture Overview</h2>\n<h3 id=\"heading-2\">1. Prediction Model Structure</h3>\n<h4 id=\"heading-3\">1.1 LSTM-based Time Series Prediction</h4>\n<pre><code class=\"language-python\">class PricePredictionLSTM(nn.Module):\n    def __init__(self, input_dim, hidden_dim, num_layers, output_dim):\n        super().__init__()\n        self.lstm = nn.LSTM(\n            input_dim,\n            hidden_dim,\n            num_layers,\n            batch_first=True,\n            dropout=0.2\n        )\n        self.fc = nn.Linear(hidden_dim, output_dim)\n\n    def forward(self, x):\n        lstm_out, _ = self.lstm(x)\n        predictions = self.fc(lstm_out[:, -1, :])\n        return predictions\n</code></pre>\n<h4 id=\"heading-4\">1.2 Ensemble Model Configuration</h4>\n<pre><code class=\"language-python\">class EnsembleModel:\n    def __init__(self):\n        self.models = {\n            'lstm': PricePredictionLSTM(...),\n            'random_forest': RandomForestRegressor(...),\n            'xgboost': XGBRegressor(...),\n            'lightgbm': LGBMRegressor(...)\n        }\n        self.weights = {\n            'lstm': 0.4,\n            'random_forest': 0.2,\n            'xgboost': 0.2,\n            'lightgbm': 0.2\n        }\n</code></pre>\n<h3 id=\"heading-5\">2. Feature Engineering</h3>\n<h4 id=\"heading-6\">2.1 Technical Indicators</h4>\n<pre><code class=\"language-python\">def calculate_technical_indicators(df):\n    # Moving average\n    df['sma_20'] = df['close'].rolling(window=20).mean()\n    df['sma_50'] = df['close'].rolling(window=50).mean()\n\n    # RSI\n    delta = df['close'].diff()\n    gain = (delta.where(delta &gt; 0, 0)).rolling(window=14).mean()\n    loss = (-delta.where(delta &lt; 0, 0)).rolling(window=14).mean()\n    df['rsi'] = 100 - (100 / (1 + gain/loss))\n\n    # MACD\n    exp1 = df['close'].ewm(span=12, adjust=False).mean()\n    exp2 = df['close'].ewm(span=26, adjust=False).mean()\n    df['macd'] = exp1 - exp2\n    df['signal'] = df['macd'].ewm(span=9, adjust=False).mean()\n\n    return df\n</code></pre>\n<h4 id=\"heading-7\">2.2 Market Sentiment Analysis</h4>\n<pre><code class=\"language-python\">def analyze_market_sentiment(text_data):\n    sentiment_model = pipeline(\n        \"sentiment-analysis\",\n        model=\"finbert-sentiment\"\n    )\n    scores = sentiment_model(text_data)\n    return aggregate_sentiment_scores(scores)\n</code></pre>\n<h2 id=\"heading-8\">🔄 Learning Pipeline</h2>\n<h3 id=\"heading-9\">1. Data Preprocessing</h3>\n<h4 id=\"heading-10\">1.1 Time Series Data Preparation</h4>\n<pre><code class=\"language-python\">def prepare_time_series(data, sequence_length):\n    sequences = []\n    targets = []\n\n    for i in range(len(data) - sequence_length):\n        seq = data[i:(i + sequence_length)]\n        target = data[i + sequence_length]\n        sequences.append(seq)\n        targets.append(target)\n\n    return np.array(sequences), np.array(targets)\n</code></pre>\n<h4 id=\"heading-11\">1.2 Data Normalization</h4>\n<pre><code class=\"language-python\">def normalize_features(data):\n    scaler = MinMaxScaler()\n    normalized_data = scaler.fit_transform(data)\n    return normalized_data, scaler\n</code></pre>\n<h3 id=\"heading-12\">2. Model Training</h3>\n<h4 id=\"heading-13\">2.1 LSTM Training Process</h4>\n<pre><code class=\"language-python\">def train_lstm_model(model, train_loader, val_loader, epochs):\n    optimizer = optim.Adam(model.parameters())\n    criterion = nn.MSELoss()\n\n    for epoch in range(epochs):\n        model.train()\n        for batch_X, batch_y in train_loader:\n            optimizer.zero_grad()\n            outputs = model(batch_X)\n            loss = criterion(outputs, batch_y)\n            loss.backward()\n            optimizer.step()\n\n        # Validation\n        model.eval()\n        val_loss = validate_model(model, val_loader, criterion)\n        print(f'Epoch {epoch}: Val Loss = {val_loss:.4f}')\n</code></pre>\n<h4 id=\"heading-14\">2.2 Ensemble Model Integration</h4>\n<pre><code class=\"language-python\">def ensemble_predict(models, weights, X):\n    predictions = []\n    for model_name, model in models.items():\n        pred = model.predict(X)\n        predictions.append(pred * weights[model_name])\n    return np.sum(predictions, axis=0)\n</code></pre>\n<h2 id=\"heading-15\">📈 Performance Evaluation</h2>\n<h3 id=\"heading-16\">1. Evaluation Metrics</h3>\n<h4 id=\"heading-17\">1.1 Prediction Accuracy Evaluation</h4>\n<pre><code class=\"language-python\">def evaluate_predictions(y_true, y_pred):\n    metrics = {\n        'mse': mean_squared_error(y_true, y_pred),\n        'mae': mean_absolute_error(y_true, y_pred),\n        'r2': r2_score(y_true, y_pred),\n        'mape': mean_absolute_percentage_error(y_true, y_pred)\n    }\n    return metrics\n</code></pre>\n<h4 id=\"heading-18\">1.2 Backtesting</h4>\n<pre><code class=\"language-python\">def backtest_strategy(model, historical_data, initial_capital=10000):\n    portfolio = Portfolio(initial_capital)\n    signals = generate_trading_signals(model, historical_data)\n\n    for timestamp, signal in signals.items():\n        if signal &gt; 0:\n            portfolio.long_position(timestamp)\n        elif signal &lt; 0:\n            portfolio.short_position(timestamp)\n\n    return portfolio.calculate_returns()\n</code></pre>\n<h2 id=\"heading-19\">🔍 Risk Management</h2>\n<h3 id=\"heading-20\">1. Risk Monitoring</h3>\n<h4 id=\"heading-21\">1.1 Value at Risk (VaR) Calculation</h4>\n<pre><code class=\"language-python\">def calculate_var(returns, confidence_level=0.95):\n    return np.percentile(returns, (1 - confidence_level) * 100)\n</code></pre>\n<h4 id=\"heading-22\">1.2 Expected Shortfall</h4>\n<pre><code class=\"language-python\">def calculate_expected_shortfall(returns, var):\n    return returns[returns &lt;= var].mean()\n</code></pre>\n<h3 id=\"heading-23\">2. Position Sizing</h3>\n<pre><code class=\"language-python\">def calculate_position_size(prediction, confidence, account_size):\n    base_size = account_size * 0.02  # 2% risk rule\n    adjusted_size = base_size * confidence\n    return min(adjusted_size, account_size * 0.05)  # Maximum 5% limit\n</code></pre>\n<h2 id=\"heading-24\">🚀 Deployment &amp; Monitoring</h2>\n<h3 id=\"heading-25\">1. Model Serving</h3>\n<h4 id=\"heading-26\">1.1 Model Serialization</h4>\n<pre><code class=\"language-python\">def save_model(model, path):\n    torch.save({\n        'model_state_dict': model.state_dict(),\n        'hyperparameters': model.hyperparameters,\n        'scaler': model.scaler\n    }, path)\n</code></pre>\n<h4 id=\"heading-27\">1.2 Real-time Inference</h4>\n<pre><code class=\"language-python\">@app.route('/predict', methods=['POST'])\ndef predict():\n    data = request.json\n    prediction = model.predict(preprocess_data(data))\n    confidence = calculate_prediction_confidence(prediction)\n    return jsonify({\n        'prediction': prediction,\n        'confidence': confidence\n    })\n</code></pre>\n<h3 id=\"heading-28\">2. Performance Monitoring</h3>\n<pre><code class=\"language-python\">def monitor_model_performance(predictions, actuals):\n    metrics = calculate_metrics(predictions, actuals)\n    alert_if_degraded(metrics)\n    log_performance(metrics)\n</code></pre>\n<p>This document provides the AI model design and implementation details for the financial data analysis system. The model is continuously improved, and the performance metrics and risk management strategies are also updated. 🚀</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "Financial Data Analysis System AI Model Design",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "📊 Model Architecture Overview",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "1. Prediction Model Structure",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "1.1 LSTM-based Time Series Prediction",
            "level": 4,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "1.2 Ensemble Model Configuration",
            "level": 4,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "2. Feature Engineering",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "2.1 Technical Indicators",
            "level": 4,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "2.2 Market Sentiment Analysis",
            "level": 4,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "🔄 Learning Pipeline",
            "level": 2,
            "isMainTopic": true,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "1. Data Preprocessing",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "1.1 Time Series Data Preparation",
            "level": 4,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "1.2 Data Normalization",
            "level": 4,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "2. Model Training",
            "level": 3,
            "isMainTopic": false,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "2.1 LSTM Training Process",
            "level": 4,
            "isMainTopic": false,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "2.2 Ensemble Model Integration",
            "level": 4,
            "isMainTopic": false,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "📈 Performance Evaluation",
            "level": 2,
            "isMainTopic": true,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "1. Evaluation Metrics",
            "level": 3,
            "isMainTopic": false,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "1.1 Prediction Accuracy Evaluation",
            "level": 4,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "1.2 Backtesting",
            "level": 4,
            "isMainTopic": false,
            "position": 900
          },
          {
            "id": "heading-19",
            "text": "🔍 Risk Management",
            "level": 2,
            "isMainTopic": true,
            "position": 950
          },
          {
            "id": "heading-20",
            "text": "1. Risk Monitoring",
            "level": 3,
            "isMainTopic": false,
            "position": 1000
          },
          {
            "id": "heading-21",
            "text": "1.1 Value at Risk (VaR) Calculation",
            "level": 4,
            "isMainTopic": false,
            "position": 1050
          },
          {
            "id": "heading-22",
            "text": "1.2 Expected Shortfall",
            "level": 4,
            "isMainTopic": false,
            "position": 1100
          },
          {
            "id": "heading-23",
            "text": "2. Position Sizing",
            "level": 3,
            "isMainTopic": false,
            "position": 1150
          },
          {
            "id": "heading-24",
            "text": "🚀 Deployment & Monitoring",
            "level": 2,
            "isMainTopic": true,
            "position": 1200
          },
          {
            "id": "heading-25",
            "text": "1. Model Serving",
            "level": 3,
            "isMainTopic": false,
            "position": 1250
          },
          {
            "id": "heading-26",
            "text": "1.1 Model Serialization",
            "level": 4,
            "isMainTopic": false,
            "position": 1300
          },
          {
            "id": "heading-27",
            "text": "1.2 Real-time Inference",
            "level": 4,
            "isMainTopic": false,
            "position": 1350
          },
          {
            "id": "heading-28",
            "text": "2. Performance Monitoring",
            "level": 3,
            "isMainTopic": false,
            "position": 1400
          }
        ]
      }
    },
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_8",
    "title": "Entasis Engine - UI/UX 디자인 가이드",
    "content": "\n# 금융 데이터 분석 시스템 UI/UX 디자인 가이드\n\n## 🎨 디자인 시스템\n\n### 1. 색상 팔레트\n\n```css\n:root {\n  /* 주요 색상 */\n  --primary-100: #e3f2fd;\n  --primary-500: #2196f3;\n  --primary-900: #0d47a1;\n\n  /* 보조 색상 */\n  --secondary-100: #f3e5f5;\n  --secondary-500: #9c27b0;\n  --secondary-900: #4a148c;\n\n  /* 상태 색상 */\n  --success: #4caf50;\n  --warning: #ffc107;\n  --error: #f44336;\n  --info: #2196f3;\n\n  /* 중립 색상 */\n  --neutral-100: #f5f5f5;\n  --neutral-300: #e0e0e0;\n  --neutral-500: #9e9e9e;\n  --neutral-700: #616161;\n  --neutral-900: #212121;\n}\n```\n\n### 2. 타이포그래피\n\n```css\n:root {\n  /* 폰트 패밀리 */\n  --font-primary: \"Inter\", sans-serif;\n  --font-secondary: \"Roboto Mono\", monospace;\n\n  /* 폰트 크기 */\n  --text-xs: 0.75rem; /* 12px */\n  --text-sm: 0.875rem; /* 14px */\n  --text-base: 1rem; /* 16px */\n  --text-lg: 1.125rem; /* 18px */\n  --text-xl: 1.25rem; /* 20px */\n  --text-2xl: 1.5rem; /* 24px */\n\n  /* 폰트 두께 */\n  --font-light: 300;\n  --font-regular: 400;\n  --font-medium: 500;\n  --font-bold: 700;\n}\n```\n\n### 3. 그리드 시스템\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  gap: var(--spacing-4);\n\n  @media (max-width: 768px) {\n    grid-template-columns: repeat(4, 1fr);\n  }\n}\n```\n\n## 📱 컴포넌트 라이브러리\n\n### 1. 차트 컴포넌트\n\n#### 1.1 캔들스틱 차트\n\n```typescript\ninterface CandlestickProps {\n  data: {\n    timestamp: string;\n    open: number;\n    high: number;\n    low: number;\n    close: number;\n  }[];\n  width?: number;\n  height?: number;\n  theme?: \"light\" | \"dark\";\n}\n\nconst Candlestick: React.FC<CandlestickProps> = ({\n  data,\n  width = 800,\n  height = 400,\n  theme = \"light\",\n}) => {\n  // 차트 구현\n};\n```\n\n#### 1.2 기술적 지표\n\n```typescript\ninterface TechnicalIndicatorProps {\n  type: \"MA\" | \"RSI\" | \"MACD\";\n  data: number[];\n  parameters: {\n    period?: number;\n    signal?: number;\n  };\n}\n```\n\n### 2. 대시보드 레이아웃\n\n```typescript\ninterface DashboardLayoutProps {\n  sidebar?: React.ReactNode;\n  header?: React.ReactNode;\n  main: React.ReactNode;\n  footer?: React.ReactNode;\n}\n\nconst DashboardLayout: React.FC<DashboardLayoutProps> = ({\n  sidebar,\n  header,\n  main,\n  footer,\n}) => (\n  <div className=\"dashboard-layout\">\n    {sidebar && <aside className=\"sidebar\">{sidebar}</aside>}\n    <div className=\"main-content\">\n      {header && <header className=\"header\">{header}</header>}\n      <main className=\"main\">{main}</main>\n      {footer && <footer className=\"footer\">{footer}</footer>}\n    </div>\n  </div>\n);\n```\n\n## 🔄 사용자 플로우\n\n### 1. 트레이딩 플로우\n\n```mermaid\ngraph TD\n    A[대시보드 진입] --> B[시장 데이터 확인]\n    B --> C{분석 도구 선택}\n    C -->|기술적 분석| D[지표 설정]\n    C -->|AI 예측| E[모델 선택]\n    D --> F[매매 신호 확인]\n    E --> F\n    F --> G[포지션 설정]\n    G --> H[주문 실행]\n    H --> I[모니터링]\n```\n\n### 2. 포트폴리오 관리\n\n```mermaid\ngraph TD\n    A[포트폴리오 뷰] --> B[자산 배분 확인]\n    B --> C[리스크 분석]\n    C --> D{조정 필요?}\n    D -->|Yes| E[리밸런싱]\n    D -->|No| F[모니터링 유지]\n    E --> G[주문 실행]\n    G --> F\n```\n\n## 📐 반응형 디자인\n\n### 1. 브레이크포인트\n\n```scss\n$breakpoints: (\n  \"mobile\": 320px,\n  \"tablet\": 768px,\n  \"desktop\": 1024px,\n  \"wide\": 1440px,\n);\n\n@mixin respond-to($breakpoint) {\n  @if map-has-key($breakpoints, $breakpoint) {\n    @media (min-width: map-get($breakpoints, $breakpoint)) {\n      @content;\n    }\n  }\n}\n```\n\n### 2. 레이아웃 조정\n\n```scss\n.trading-view {\n  display: grid;\n  gap: 1rem;\n\n  @include respond-to(\"mobile\") {\n    grid-template-columns: 1fr;\n  }\n\n  @include respond-to(\"tablet\") {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @include respond-to(\"desktop\") {\n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n```\n\n## ♿ 접근성\n\n### 1. ARIA 레이블\n\n```typescript\nconst PriceAlert: React.FC = () => (\n  <div role=\"alert\" aria-live=\"polite\" aria-atomic=\"true\">\n    <span className=\"price-change\">+5.23%</span>\n  </div>\n);\n```\n\n### 2. 키보드 네비게이션\n\n```typescript\nconst TradingPanel: React.FC = () => {\n  const handleKeyPress = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case \"ArrowUp\":\n        incrementPrice();\n        break;\n      case \"ArrowDown\":\n        decrementPrice();\n        break;\n      case \"Enter\":\n        submitOrder();\n        break;\n    }\n  };\n\n  return (\n    <div\n      tabIndex={0}\n      onKeyDown={handleKeyPress}\n      role=\"region\"\n      aria-label=\"거래 패널\"\n    >\n      {/* 거래 패널 내용 */}\n    </div>\n  );\n};\n```\n\n## 🎯 사용성 테스트\n\n### 1. 테스트 시나리오\n\n```typescript\nconst usabilityTests = [\n  {\n    name: \"기본 거래 플로우\",\n    steps: [\n      \"대시보드 접속\",\n      \"차트 분석\",\n      \"주문 설정\",\n      \"주문 실행\",\n      \"결과 확인\",\n    ],\n    success_criteria: [\n      \"3분 이내 완료\",\n      \"오류 없는 실행\",\n      \"사용자 만족도 4/5 이상\",\n    ],\n  },\n];\n```\n\n### 2. 피드백 수집\n\n```typescript\ninterface UserFeedback {\n  task: string;\n  completion_time: number;\n  error_count: number;\n  satisfaction: number;\n  comments: string;\n}\n```\n\n이 문서는 금융 데이터 분석 시스템의 UI/UX 디자인 가이드를 제공합니다. 사용자 경험을 최적화하기 위해 지속적으로 업데이트되며, 피드백을 반영하여 개선됩니다. 🚀\n",
    "date": "2025-02-13",
    "category": "projects",
    "tags": [
      "ui",
      "ux",
      "design",
      "wireframe",
      "component",
      "responsive",
      "accessibility"
    ],
    "thumbnail": "/images/cryptocurrency.jpg",
    "translations": {
      "ko": {
        "title": "Entasis Engine - UI/UX 디자인 가이드",
        "description": "가상자산 데이터 분석 시스템의 사용자 인터페이스 및 경험 디자인 가이드",
        "content": "<h1 id=\"heading-0\">금융 데이터 분석 시스템 UI/UX 디자인 가이드</h1>\n<h2 id=\"heading-1\">🎨 디자인 시스템</h2>\n<h3 id=\"heading-2\">1. 색상 팔레트</h3>\n<pre><code class=\"language-css\">:root {\n  /* 주요 색상 */\n  --primary-100: #e3f2fd;\n  --primary-500: #2196f3;\n  --primary-900: #0d47a1;\n\n  /* 보조 색상 */\n  --secondary-100: #f3e5f5;\n  --secondary-500: #9c27b0;\n  --secondary-900: #4a148c;\n\n  /* 상태 색상 */\n  --success: #4caf50;\n  --warning: #ffc107;\n  --error: #f44336;\n  --info: #2196f3;\n\n  /* 중립 색상 */\n  --neutral-100: #f5f5f5;\n  --neutral-300: #e0e0e0;\n  --neutral-500: #9e9e9e;\n  --neutral-700: #616161;\n  --neutral-900: #212121;\n}\n</code></pre>\n<h3 id=\"heading-3\">2. 타이포그래피</h3>\n<pre><code class=\"language-css\">:root {\n  /* 폰트 패밀리 */\n  --font-primary: \"Inter\", sans-serif;\n  --font-secondary: \"Roboto Mono\", monospace;\n\n  /* 폰트 크기 */\n  --text-xs: 0.75rem; /* 12px */\n  --text-sm: 0.875rem; /* 14px */\n  --text-base: 1rem; /* 16px */\n  --text-lg: 1.125rem; /* 18px */\n  --text-xl: 1.25rem; /* 20px */\n  --text-2xl: 1.5rem; /* 24px */\n\n  /* 폰트 두께 */\n  --font-light: 300;\n  --font-regular: 400;\n  --font-medium: 500;\n  --font-bold: 700;\n}\n</code></pre>\n<h3 id=\"heading-4\">3. 그리드 시스템</h3>\n<pre><code class=\"language-css\">.container {\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  gap: var(--spacing-4);\n\n  @media (max-width: 768px) {\n    grid-template-columns: repeat(4, 1fr);\n  }\n}\n</code></pre>\n<h2 id=\"heading-5\">📱 컴포넌트 라이브러리</h2>\n<h3 id=\"heading-6\">1. 차트 컴포넌트</h3>\n<h4 id=\"heading-7\">1.1 캔들스틱 차트</h4>\n<pre><code class=\"language-typescript\">interface CandlestickProps {\n  data: {\n    timestamp: string;\n    open: number;\n    high: number;\n    low: number;\n    close: number;\n  }[];\n  width?: number;\n  height?: number;\n  theme?: \"light\" | \"dark\";\n}\n\nconst Candlestick: React.FC&lt;CandlestickProps&gt; = ({\n  data,\n  width = 800,\n  height = 400,\n  theme = \"light\",\n}) =&gt; {\n  // 차트 구현\n};\n</code></pre>\n<h4 id=\"heading-8\">1.2 기술적 지표</h4>\n<pre><code class=\"language-typescript\">interface TechnicalIndicatorProps {\n  type: \"MA\" | \"RSI\" | \"MACD\";\n  data: number[];\n  parameters: {\n    period?: number;\n    signal?: number;\n  };\n}\n</code></pre>\n<h3 id=\"heading-9\">2. 대시보드 레이아웃</h3>\n<pre><code class=\"language-typescript\">interface DashboardLayoutProps {\n  sidebar?: React.ReactNode;\n  header?: React.ReactNode;\n  main: React.ReactNode;\n  footer?: React.ReactNode;\n}\n\nconst DashboardLayout: React.FC&lt;DashboardLayoutProps&gt; = ({\n  sidebar,\n  header,\n  main,\n  footer,\n}) =&gt; (\n  &lt;div className=\"dashboard-layout\"&gt;\n    {sidebar &amp;&amp; &lt;aside className=\"sidebar\"&gt;{sidebar}&lt;/aside&gt;}\n    &lt;div className=\"main-content\"&gt;\n      {header &amp;&amp; &lt;header className=\"header\"&gt;{header}&lt;/header&gt;}\n      &lt;main className=\"main\"&gt;{main}&lt;/main&gt;\n      {footer &amp;&amp; &lt;footer className=\"footer\"&gt;{footer}&lt;/footer&gt;}\n    &lt;/div&gt;\n  &lt;/div&gt;\n);\n</code></pre>\n<h2 id=\"heading-10\">🔄 사용자 플로우</h2>\n<h3 id=\"heading-11\">1. 트레이딩 플로우</h3>\n<pre><code class=\"language-mermaid\">graph TD\n    A[대시보드 진입] --&gt; B[시장 데이터 확인]\n    B --&gt; C{분석 도구 선택}\n    C --&gt;|기술적 분석| D[지표 설정]\n    C --&gt;|AI 예측| E[모델 선택]\n    D --&gt; F[매매 신호 확인]\n    E --&gt; F\n    F --&gt; G[포지션 설정]\n    G --&gt; H[주문 실행]\n    H --&gt; I[모니터링]\n</code></pre>\n<h3 id=\"heading-12\">2. 포트폴리오 관리</h3>\n<pre><code class=\"language-mermaid\">graph TD\n    A[포트폴리오 뷰] --&gt; B[자산 배분 확인]\n    B --&gt; C[리스크 분석]\n    C --&gt; D{조정 필요?}\n    D --&gt;|Yes| E[리밸런싱]\n    D --&gt;|No| F[모니터링 유지]\n    E --&gt; G[주문 실행]\n    G --&gt; F\n</code></pre>\n<h2 id=\"heading-13\">📐 반응형 디자인</h2>\n<h3 id=\"heading-14\">1. 브레이크포인트</h3>\n<pre><code class=\"language-scss\">$breakpoints: (\n  \"mobile\": 320px,\n  \"tablet\": 768px,\n  \"desktop\": 1024px,\n  \"wide\": 1440px,\n);\n\n@mixin respond-to($breakpoint) {\n  @if map-has-key($breakpoints, $breakpoint) {\n    @media (min-width: map-get($breakpoints, $breakpoint)) {\n      @content;\n    }\n  }\n}\n</code></pre>\n<h3 id=\"heading-15\">2. 레이아웃 조정</h3>\n<pre><code class=\"language-scss\">.trading-view {\n  display: grid;\n  gap: 1rem;\n\n  @include respond-to(\"mobile\") {\n    grid-template-columns: 1fr;\n  }\n\n  @include respond-to(\"tablet\") {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @include respond-to(\"desktop\") {\n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n</code></pre>\n<h2 id=\"heading-16\">♿ 접근성</h2>\n<h3 id=\"heading-17\">1. ARIA 레이블</h3>\n<pre><code class=\"language-typescript\">const PriceAlert: React.FC = () =&gt; (\n  &lt;div role=\"alert\" aria-live=\"polite\" aria-atomic=\"true\"&gt;\n    &lt;span className=\"price-change\"&gt;+5.23%&lt;/span&gt;\n  &lt;/div&gt;\n);\n</code></pre>\n<h3 id=\"heading-18\">2. 키보드 네비게이션</h3>\n<pre><code class=\"language-typescript\">const TradingPanel: React.FC = () =&gt; {\n  const handleKeyPress = (e: KeyboardEvent) =&gt; {\n    switch (e.key) {\n      case \"ArrowUp\":\n        incrementPrice();\n        break;\n      case \"ArrowDown\":\n        decrementPrice();\n        break;\n      case \"Enter\":\n        submitOrder();\n        break;\n    }\n  };\n\n  return (\n    &lt;div\n      tabIndex={0}\n      onKeyDown={handleKeyPress}\n      role=\"region\"\n      aria-label=\"거래 패널\"\n    &gt;\n      {/* 거래 패널 내용 */}\n    &lt;/div&gt;\n  );\n};\n</code></pre>\n<h2 id=\"heading-19\">🎯 사용성 테스트</h2>\n<h3 id=\"heading-20\">1. 테스트 시나리오</h3>\n<pre><code class=\"language-typescript\">const usabilityTests = [\n  {\n    name: \"기본 거래 플로우\",\n    steps: [\n      \"대시보드 접속\",\n      \"차트 분석\",\n      \"주문 설정\",\n      \"주문 실행\",\n      \"결과 확인\",\n    ],\n    success_criteria: [\n      \"3분 이내 완료\",\n      \"오류 없는 실행\",\n      \"사용자 만족도 4/5 이상\",\n    ],\n  },\n];\n</code></pre>\n<h3 id=\"heading-21\">2. 피드백 수집</h3>\n<pre><code class=\"language-typescript\">interface UserFeedback {\n  task: string;\n  completion_time: number;\n  error_count: number;\n  satisfaction: number;\n  comments: string;\n}\n</code></pre>\n<p>이 문서는 금융 데이터 분석 시스템의 UI/UX 디자인 가이드를 제공합니다. 사용자 경험을 최적화하기 위해 지속적으로 업데이트되며, 피드백을 반영하여 개선됩니다. 🚀</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "금융 데이터 분석 시스템 UI/UX 디자인 가이드",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "🎨 디자인 시스템",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "1. 색상 팔레트",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "2. 타이포그래피",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "3. 그리드 시스템",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "📱 컴포넌트 라이브러리",
            "level": 2,
            "isMainTopic": true,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "1. 차트 컴포넌트",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "1.1 캔들스틱 차트",
            "level": 4,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "1.2 기술적 지표",
            "level": 4,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "2. 대시보드 레이아웃",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "🔄 사용자 플로우",
            "level": 2,
            "isMainTopic": true,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "1. 트레이딩 플로우",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "2. 포트폴리오 관리",
            "level": 3,
            "isMainTopic": false,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "📐 반응형 디자인",
            "level": 2,
            "isMainTopic": true,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "1. 브레이크포인트",
            "level": 3,
            "isMainTopic": false,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "2. 레이아웃 조정",
            "level": 3,
            "isMainTopic": false,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "♿ 접근성",
            "level": 2,
            "isMainTopic": true,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "1. ARIA 레이블",
            "level": 3,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "2. 키보드 네비게이션",
            "level": 3,
            "isMainTopic": false,
            "position": 900
          },
          {
            "id": "heading-19",
            "text": "🎯 사용성 테스트",
            "level": 2,
            "isMainTopic": true,
            "position": 950
          },
          {
            "id": "heading-20",
            "text": "1. 테스트 시나리오",
            "level": 3,
            "isMainTopic": false,
            "position": 1000
          },
          {
            "id": "heading-21",
            "text": "2. 피드백 수집",
            "level": 3,
            "isMainTopic": false,
            "position": 1050
          }
        ]
      },
      "en": {
        "title": "Entasis Engine - UI/UX Design Guide",
        "description": "User interface and experience design guide for digital asset data analysis system",
        "content": "<h1 id=\"heading-0\">Financial Data Analysis System UI/UX Design Guide</h1>\n<h2 id=\"heading-1\">🎨 Design System</h2>\n<h3 id=\"heading-2\">1. Color Palette</h3>\n<pre><code class=\"language-css\">:root {\n  /* Main colors */\n  --primary-100: #e3f2fd;\n  --primary-500: #2196f3;\n  --primary-900: #0d47a1;\n\n  /* Secondary colors */\n  --secondary-100: #f3e5f5;\n  --secondary-500: #9c27b0;\n  --secondary-900: #4a148c;\n\n  /* Status colors */\n  --success: #4caf50;\n  --warning: #ffc107;\n  --error: #f44336;\n  --info: #2196f3;\n\n  /* Neutral colors */\n  --neutral-100: #f5f5f5;\n  --neutral-300: #e0e0e0;\n  --neutral-500: #9e9e9e;\n  --neutral-700: #616161;\n  --neutral-900: #212121;\n}\n</code></pre>\n<h3 id=\"heading-3\">2. Typography</h3>\n<pre><code class=\"language-css\">:root {\n  /* Font families */\n  --font-primary: \"Inter\", sans-serif;\n  --font-secondary: \"Roboto Mono\", monospace;\n\n  /* Font sizes */\n  --text-xs: 0.75rem; /* 12px */\n  --text-sm: 0.875rem; /* 14px */\n  --text-base: 1rem; /* 16px */\n  --text-lg: 1.125rem; /* 18px */\n  --text-xl: 1.25rem; /* 20px */\n  --text-2xl: 1.5rem; /* 24px */\n\n  /* Font weights */\n  --font-light: 300;\n  --font-regular: 400;\n  --font-medium: 500;\n  --font-bold: 700;\n}\n</code></pre>\n<h3 id=\"heading-4\">3. Grid System</h3>\n<pre><code class=\"language-css\">.container {\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  gap: var(--spacing-4);\n\n  @media (max-width: 768px) {\n    grid-template-columns: repeat(4, 1fr);\n  }\n}\n</code></pre>\n<h2 id=\"heading-5\">📱 Component Library</h2>\n<h3 id=\"heading-6\">1. Chart Component</h3>\n<h4 id=\"heading-7\">1.1 Candlestick Chart</h4>\n<pre><code class=\"language-typescript\">interface CandlestickProps {\n  data: {\n    timestamp: string;\n    open: number;\n    high: number;\n    low: number;\n    close: number;\n  }[];\n  width?: number;\n  height?: number;\n  theme?: \"light\" | \"dark\";\n}\n\nconst Candlestick: React.FC&lt;CandlestickProps&gt; = ({\n  data,\n  width = 800,\n  height = 400,\n  theme = \"light\",\n}) =&gt; {\n  // Chart implementation\n};\n</code></pre>\n<h4 id=\"heading-8\">1.2 Technical Indicators</h4>\n<pre><code class=\"language-typescript\">interface TechnicalIndicatorProps {\n  type: \"MA\" | \"RSI\" | \"MACD\";\n  data: number[];\n  parameters: {\n    period?: number;\n    signal?: number;\n  };\n}\n</code></pre>\n<h3 id=\"heading-9\">2. Dashboard Layout</h3>\n<pre><code class=\"language-typescript\">interface DashboardLayoutProps {\n  sidebar?: React.ReactNode;\n  header?: React.ReactNode;\n  main: React.ReactNode;\n  footer?: React.ReactNode;\n}\n\nconst DashboardLayout: React.FC&lt;DashboardLayoutProps&gt; = ({\n  sidebar,\n  header,\n  main,\n  footer,\n}) =&gt; (\n  &lt;div className=\"dashboard-layout\"&gt;\n    {sidebar &amp;&amp; &lt;aside className=\"sidebar\"&gt;{sidebar}&lt;/aside&gt;}\n    &lt;div className=\"main-content\"&gt;\n      {header &amp;&amp; &lt;header className=\"header\"&gt;{header}&lt;/header&gt;}\n      &lt;main className=\"main\"&gt;{main}&lt;/main&gt;\n      {footer &amp;&amp; &lt;footer className=\"footer\"&gt;{footer}&lt;/footer&gt;}\n    &lt;/div&gt;\n  &lt;/div&gt;\n);\n</code></pre>\n<h2 id=\"heading-10\">🔄 User Flow</h2>\n<h3 id=\"heading-11\">1. Trading Flow</h3>\n<pre><code class=\"language-mermaid\">graph TD\n    A[Dashboard Entry] --&gt; B[Market Data Check]\n    B --&gt; C{Analysis Tool Selection}\n    C --&gt;|Technical Analysis| D[Indicator Settings]\n    C --&gt;|AI Prediction| E[Model Selection]\n    D --&gt; F[Trade Signal Verification]\n    E --&gt; F\n    F --&gt; G[Position Settings]\n    G --&gt; H[Order Execution]\n    H --&gt; I[Monitoring]\n</code></pre>\n<h3 id=\"heading-12\">2. Portfolio Management</h3>\n<pre><code class=\"language-mermaid\">graph TD\n    A[Portfolio View] --&gt; B[Asset Allocation Check]\n    B --&gt; C[Risk Analysis]\n    C --&gt; D{Adjustment Required?}\n    D --&gt;|Yes| E[Rebalancing]\n    D --&gt;|No| F[Monitoring]\n    E --&gt; G[Order Execution]\n    G --&gt; F\n</code></pre>\n<h2 id=\"heading-13\">📐 Responsive Design</h2>\n<h3 id=\"heading-14\">1. Breakpoints</h3>\n<pre><code class=\"language-scss\">$breakpoints: (\n  \"mobile\": 320px,\n  \"tablet\": 768px,\n  \"desktop\": 1024px,\n  \"wide\": 1440px,\n);\n\n@mixin respond-to($breakpoint) {\n  @if map-has-key($breakpoints, $breakpoint) {\n    @media (min-width: map-get($breakpoints, $breakpoint)) {\n      @content;\n    }\n  }\n}\n</code></pre>\n<h3 id=\"heading-15\">2. Layout Adjustment</h3>\n<pre><code class=\"language-scss\">.trading-view {\n  display: grid;\n  gap: 1rem;\n\n  @include respond-to(\"mobile\") {\n    grid-template-columns: 1fr;\n  }\n\n  @include respond-to(\"tablet\") {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @include respond-to(\"desktop\") {\n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n</code></pre>\n<h2 id=\"heading-16\">♿ Accessibility</h2>\n<h3 id=\"heading-17\">1. ARIA Labels</h3>\n<pre><code class=\"language-typescript\">const PriceAlert: React.FC = () =&gt; (\n  &lt;div role=\"alert\" aria-live=\"polite\" aria-atomic=\"true\"&gt;\n    &lt;span className=\"price-change\"&gt;+5.23%&lt;/span&gt;\n  &lt;/div&gt;\n);\n</code></pre>\n<h3 id=\"heading-18\">2. Keyboard Navigation</h3>\n<pre><code class=\"language-typescript\">const TradingPanel: React.FC = () =&gt; {\n  const handleKeyPress = (e: KeyboardEvent) =&gt; {\n    switch (e.key) {\n      case \"ArrowUp\":\n        incrementPrice();\n        break;\n      case \"ArrowDown\":\n        decrementPrice();\n        break;\n      case \"Enter\":\n        submitOrder();\n        break;\n    }\n  };\n\n  return (\n    &lt;div\n      tabIndex={0}\n      onKeyDown={handleKeyPress}\n      role=\"region\"\n      aria-label=\"거래 패널\"\n    &gt;\n      {/* Trading panel content */}\n    &lt;/div&gt;\n  );\n};\n</code></pre>\n<h2 id=\"heading-19\">🎯 Usability Testing</h2>\n<h3 id=\"heading-20\">1. Test Scenarios</h3>\n<pre><code class=\"language-typescript\">const usabilityTests = [\n  {\n    name: \"Basic Trading Flow\",\n    steps: [\n      \"Dashboard Access\",\n      \"Chart Analysis\",\n      \"Order Settings\",\n      \"Order Execution\",\n      \"Result Verification\",\n    ],\n    success_criteria: [\n      \"3 minutes completion\",\n      \"Error-free execution\",\n      \"User satisfaction 4/5 or higher\",\n    ],\n  },\n];\n</code></pre>\n<h3 id=\"heading-21\">2. Feedback Collection</h3>\n<pre><code class=\"language-typescript\">interface UserFeedback {\n  task: string;\n  completion_time: number;\n  error_count: number;\n  satisfaction: number;\n  comments: string;\n}\n</code></pre>\n<p>This document provides the UI/UX design guide for the financial data analysis system. It will be updated continuously to optimize user experience, reflecting feedback and improvements. 🚀</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "Financial Data Analysis System UI/UX Design Guide",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "🎨 Design System",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "1. Color Palette",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "2. Typography",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "3. Grid System",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "📱 Component Library",
            "level": 2,
            "isMainTopic": true,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "1. Chart Component",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "1.1 Candlestick Chart",
            "level": 4,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "1.2 Technical Indicators",
            "level": 4,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "2. Dashboard Layout",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "🔄 User Flow",
            "level": 2,
            "isMainTopic": true,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "1. Trading Flow",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "2. Portfolio Management",
            "level": 3,
            "isMainTopic": false,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "📐 Responsive Design",
            "level": 2,
            "isMainTopic": true,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "1. Breakpoints",
            "level": 3,
            "isMainTopic": false,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "2. Layout Adjustment",
            "level": 3,
            "isMainTopic": false,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "♿ Accessibility",
            "level": 2,
            "isMainTopic": true,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "1. ARIA Labels",
            "level": 3,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "2. Keyboard Navigation",
            "level": 3,
            "isMainTopic": false,
            "position": 900
          },
          {
            "id": "heading-19",
            "text": "🎯 Usability Testing",
            "level": 2,
            "isMainTopic": true,
            "position": 950
          },
          {
            "id": "heading-20",
            "text": "1. Test Scenarios",
            "level": 3,
            "isMainTopic": false,
            "position": 1000
          },
          {
            "id": "heading-21",
            "text": "2. Feedback Collection",
            "level": 3,
            "isMainTopic": false,
            "position": 1050
          }
        ]
      }
    },
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_9",
    "title": "Entasis Engine - 인프라 구성도",
    "content": "\n# 금융 데이터 분석 시스템 인프라 구성도\n\n## 🏗️ 시스템 아키텍처\n\n### 1. 전체 구성도\n\n```mermaid\ngraph TB\n    subgraph External[외부 시스템]\n        API1[거래소 API]\n        API2[데이터 피드]\n    end\n\n    subgraph LoadBalancer[로드 밸런서]\n        LB1[AWS ALB]\n        LB2[내부 L4]\n    end\n\n    subgraph ServiceMesh[서비스 메시]\n        direction TB\n        subgraph DataCollection[데이터 수집 계층]\n            DC1[Collector-1]\n            DC2[Collector-2]\n        end\n\n        subgraph Processing[처리 계층]\n            P1[Spark Cluster]\n            P2[Stream Processing]\n        end\n\n        subgraph AI[AI 분석 계층]\n            AI1[Model Serving]\n            AI2[Training Pipeline]\n        end\n\n        subgraph API[API 계층]\n            API3[REST API]\n            API4[WebSocket]\n        end\n    end\n\n    subgraph Storage[스토리지]\n        DB1[(TimescaleDB)]\n        DB2[(Redis)]\n        S3[Object Storage]\n    end\n\n    subgraph Monitoring[모니터링]\n        M1[Prometheus]\n        M2[Grafana]\n        M3[ELK Stack]\n    end\n\n    External --> LoadBalancer\n    LoadBalancer --> ServiceMesh\n    ServiceMesh --> Storage\n    ServiceMesh --> Monitoring\n```\n\n## 🌐 네트워크 구성\n\n### 1. 네트워크 세그먼트\n\n```plaintext\n+------------------------+     +------------------------+\n|     Public Subnet      |     |    Private Subnet      |\n|------------------------|     |------------------------|\n| - Load Balancer        |     | - Application Servers  |\n| - Bastion Host         |     | - Database Clusters    |\n| - NAT Gateway          |     | - Cache Servers        |\n+------------------------+     +------------------------+\n           |                              |\n           |        VPC Peering           |\n           +------------------------------+\n```\n\n### 2. 보안 그룹 설정\n\n```yaml\nsecurity_groups:\n  frontend:\n    inbound:\n      - port: 80\n        source: 0.0.0.0/0\n      - port: 443\n        source: 0.0.0.0/0\n\n  application:\n    inbound:\n      - port: 8080\n        source: frontend_sg\n      - port: 9000\n        source: monitoring_sg\n\n  database:\n    inbound:\n      - port: 5432\n        source: application_sg\n      - port: 6379\n        source: application_sg\n```\n\n## 🚀 쿠버네티스 클러스터\n\n### 1. 노드 구성\n\n```yaml\nnode_pools:\n  - name: general\n    instance_type: c5.2xlarge\n    min_size: 3\n    max_size: 10\n    labels:\n      role: general\n\n  - name: ai-inference\n    instance_type: g4dn.xlarge\n    min_size: 2\n    max_size: 5\n    labels:\n      role: ai-inference\n\n  - name: data-processing\n    instance_type: r5.2xlarge\n    min_size: 2\n    max_size: 8\n    labels:\n      role: data-processing\n```\n\n### 2. 서비스 배포\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: trading-api\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: trading-api\n  template:\n    metadata:\n      labels:\n        app: trading-api\n    spec:\n      containers:\n        - name: trading-api\n          image: trading-api:1.0.0\n          resources:\n            requests:\n              cpu: 1\n              memory: 2Gi\n            limits:\n              cpu: 2\n              memory: 4Gi\n```\n\n## 📊 모니터링 시스템\n\n### 1. 메트릭 수집\n\n```yaml\nprometheus:\n  scrape_configs:\n    - job_name: \"kubernetes-pods\"\n      kubernetes_sd_configs:\n        - role: pod\n      relabel_configs:\n        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n          action: keep\n          regex: true\n\n    - job_name: \"trading-metrics\"\n      static_configs:\n        - targets: [\"trading-api:9090\"]\n```\n\n### 2. 알림 설정\n\n```yaml\nalertmanager:\n  config:\n    route:\n      receiver: \"slack\"\n      group_wait: 30s\n      group_interval: 5m\n      repeat_interval: 4h\n\n    receivers:\n      - name: \"slack\"\n        slack_configs:\n          - channel: \"#alerts\"\n            send_resolved: true\n```\n\n## 🔒 보안 설정\n\n### 1. 네트워크 정책\n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: api-network-policy\nspec:\n  podSelector:\n    matchLabels:\n      app: trading-api\n  policyTypes:\n    - Ingress\n    - Egress\n  ingress:\n    - from:\n        - podSelector:\n            matchLabels:\n              role: frontend\n      ports:\n        - protocol: TCP\n          port: 8080\n```\n\n### 2. 암호화 설정\n\n```yaml\nencryption:\n  - resources:\n      - secrets\n    providers:\n      - aescbc:\n          keys:\n            - name: key1\n              secret: <base64-encoded-key>\n      - identity: {}\n```\n\n## 🔄 스케일링 전략\n\n### 1. 수평적 확장\n\n```yaml\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: trading-api-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: trading-api\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n    - type: Resource\n      resource:\n        name: cpu\n        target:\n          type: Utilization\n          averageUtilization: 70\n```\n\n### 2. 수직적 확장\n\n```yaml\napiVersion: autoscaling.k8s.io/v1\nkind: VerticalPodAutoscaler\nmetadata:\n  name: trading-api-vpa\nspec:\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: trading-api\n  updatePolicy:\n    updateMode: Auto\n```\n\n## 🔧 운영 관리\n\n### 1. 로깅 설정\n\n```yaml\nfilebeat:\n  inputs:\n    - type: container\n      paths:\n        - /var/log/containers/*.log\n      processors:\n        - add_kubernetes_metadata:\n            host: ${NODE_NAME}\n            matchers:\n              - logs_path:\n                  logs_path: \"/var/log/containers/\"\n```\n\n### 2. 백업 정책\n\n```yaml\nbackup:\n  schedule: \"0 1 * * *\" # 매일 01:00\n  retention:\n    hourly: 24\n    daily: 7\n    weekly: 4\n    monthly: 12\n  storage:\n    type: s3\n    bucket: backup-bucket\n    region: ap-northeast-2\n```\n\n이 문서는 금융 데이터 분석 시스템의 인프라 구성을 상세히 설명합니다. 시스템의 안정성과 확장성을 보장하기 위해 지속적으로 업데이트됩니다. 🚀\n",
    "date": "2025-02-13",
    "category": "projects",
    "tags": [
      "infrastructure",
      "cloud",
      "kubernetes",
      "devops",
      "security",
      "monitoring",
      "scaling"
    ],
    "thumbnail": "/images/cryptocurrency.jpg",
    "translations": {
      "ko": {
        "title": "Entasis Engine - 인프라 구성도",
        "description": "가상자산 데이터 분석 시스템의 인프라 아키텍처 및 구성 상세",
        "content": "<h1 id=\"heading-0\">금융 데이터 분석 시스템 인프라 구성도</h1>\n<h2 id=\"heading-1\">🏗️ 시스템 아키텍처</h2>\n<h3 id=\"heading-2\">1. 전체 구성도</h3>\n<pre><code class=\"language-mermaid\">graph TB\n    subgraph External[외부 시스템]\n        API1[거래소 API]\n        API2[데이터 피드]\n    end\n\n    subgraph LoadBalancer[로드 밸런서]\n        LB1[AWS ALB]\n        LB2[내부 L4]\n    end\n\n    subgraph ServiceMesh[서비스 메시]\n        direction TB\n        subgraph DataCollection[데이터 수집 계층]\n            DC1[Collector-1]\n            DC2[Collector-2]\n        end\n\n        subgraph Processing[처리 계층]\n            P1[Spark Cluster]\n            P2[Stream Processing]\n        end\n\n        subgraph AI[AI 분석 계층]\n            AI1[Model Serving]\n            AI2[Training Pipeline]\n        end\n\n        subgraph API[API 계층]\n            API3[REST API]\n            API4[WebSocket]\n        end\n    end\n\n    subgraph Storage[스토리지]\n        DB1[(TimescaleDB)]\n        DB2[(Redis)]\n        S3[Object Storage]\n    end\n\n    subgraph Monitoring[모니터링]\n        M1[Prometheus]\n        M2[Grafana]\n        M3[ELK Stack]\n    end\n\n    External --&gt; LoadBalancer\n    LoadBalancer --&gt; ServiceMesh\n    ServiceMesh --&gt; Storage\n    ServiceMesh --&gt; Monitoring\n</code></pre>\n<h2 id=\"heading-3\">🌐 네트워크 구성</h2>\n<h3 id=\"heading-4\">1. 네트워크 세그먼트</h3>\n<pre><code class=\"language-plaintext\">+------------------------+     +------------------------+\n|     Public Subnet      |     |    Private Subnet      |\n|------------------------|     |------------------------|\n| - Load Balancer        |     | - Application Servers  |\n| - Bastion Host         |     | - Database Clusters    |\n| - NAT Gateway          |     | - Cache Servers        |\n+------------------------+     +------------------------+\n           |                              |\n           |        VPC Peering           |\n           +------------------------------+\n</code></pre>\n<h3 id=\"heading-5\">2. 보안 그룹 설정</h3>\n<pre><code class=\"language-yaml\">security_groups:\n  frontend:\n    inbound:\n      - port: 80\n        source: 0.0.0.0/0\n      - port: 443\n        source: 0.0.0.0/0\n\n  application:\n    inbound:\n      - port: 8080\n        source: frontend_sg\n      - port: 9000\n        source: monitoring_sg\n\n  database:\n    inbound:\n      - port: 5432\n        source: application_sg\n      - port: 6379\n        source: application_sg\n</code></pre>\n<h2 id=\"heading-6\">🚀 쿠버네티스 클러스터</h2>\n<h3 id=\"heading-7\">1. 노드 구성</h3>\n<pre><code class=\"language-yaml\">node_pools:\n  - name: general\n    instance_type: c5.2xlarge\n    min_size: 3\n    max_size: 10\n    labels:\n      role: general\n\n  - name: ai-inference\n    instance_type: g4dn.xlarge\n    min_size: 2\n    max_size: 5\n    labels:\n      role: ai-inference\n\n  - name: data-processing\n    instance_type: r5.2xlarge\n    min_size: 2\n    max_size: 8\n    labels:\n      role: data-processing\n</code></pre>\n<h3 id=\"heading-8\">2. 서비스 배포</h3>\n<pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: trading-api\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: trading-api\n  template:\n    metadata:\n      labels:\n        app: trading-api\n    spec:\n      containers:\n        - name: trading-api\n          image: trading-api:1.0.0\n          resources:\n            requests:\n              cpu: 1\n              memory: 2Gi\n            limits:\n              cpu: 2\n              memory: 4Gi\n</code></pre>\n<h2 id=\"heading-9\">📊 모니터링 시스템</h2>\n<h3 id=\"heading-10\">1. 메트릭 수집</h3>\n<pre><code class=\"language-yaml\">prometheus:\n  scrape_configs:\n    - job_name: \"kubernetes-pods\"\n      kubernetes_sd_configs:\n        - role: pod\n      relabel_configs:\n        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n          action: keep\n          regex: true\n\n    - job_name: \"trading-metrics\"\n      static_configs:\n        - targets: [\"trading-api:9090\"]\n</code></pre>\n<h3 id=\"heading-11\">2. 알림 설정</h3>\n<pre><code class=\"language-yaml\">alertmanager:\n  config:\n    route:\n      receiver: \"slack\"\n      group_wait: 30s\n      group_interval: 5m\n      repeat_interval: 4h\n\n    receivers:\n      - name: \"slack\"\n        slack_configs:\n          - channel: \"#alerts\"\n            send_resolved: true\n</code></pre>\n<h2 id=\"heading-12\">🔒 보안 설정</h2>\n<h3 id=\"heading-13\">1. 네트워크 정책</h3>\n<pre><code class=\"language-yaml\">apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: api-network-policy\nspec:\n  podSelector:\n    matchLabels:\n      app: trading-api\n  policyTypes:\n    - Ingress\n    - Egress\n  ingress:\n    - from:\n        - podSelector:\n            matchLabels:\n              role: frontend\n      ports:\n        - protocol: TCP\n          port: 8080\n</code></pre>\n<h3 id=\"heading-14\">2. 암호화 설정</h3>\n<pre><code class=\"language-yaml\">encryption:\n  - resources:\n      - secrets\n    providers:\n      - aescbc:\n          keys:\n            - name: key1\n              secret: &lt;base64-encoded-key&gt;\n      - identity: {}\n</code></pre>\n<h2 id=\"heading-15\">🔄 스케일링 전략</h2>\n<h3 id=\"heading-16\">1. 수평적 확장</h3>\n<pre><code class=\"language-yaml\">apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: trading-api-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: trading-api\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n    - type: Resource\n      resource:\n        name: cpu\n        target:\n          type: Utilization\n          averageUtilization: 70\n</code></pre>\n<h3 id=\"heading-17\">2. 수직적 확장</h3>\n<pre><code class=\"language-yaml\">apiVersion: autoscaling.k8s.io/v1\nkind: VerticalPodAutoscaler\nmetadata:\n  name: trading-api-vpa\nspec:\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: trading-api\n  updatePolicy:\n    updateMode: Auto\n</code></pre>\n<h2 id=\"heading-18\">🔧 운영 관리</h2>\n<h3 id=\"heading-19\">1. 로깅 설정</h3>\n<pre><code class=\"language-yaml\">filebeat:\n  inputs:\n    - type: container\n      paths:\n        - /var/log/containers/*.log\n      processors:\n        - add_kubernetes_metadata:\n            host: ${NODE_NAME}\n            matchers:\n              - logs_path:\n                  logs_path: \"/var/log/containers/\"\n</code></pre>\n<h3 id=\"heading-20\">2. 백업 정책</h3>\n<pre><code class=\"language-yaml\">backup:\n  schedule: \"0 1 * * *\" # 매일 01:00\n  retention:\n    hourly: 24\n    daily: 7\n    weekly: 4\n    monthly: 12\n  storage:\n    type: s3\n    bucket: backup-bucket\n    region: ap-northeast-2\n</code></pre>\n<p>이 문서는 금융 데이터 분석 시스템의 인프라 구성을 상세히 설명합니다. 시스템의 안정성과 확장성을 보장하기 위해 지속적으로 업데이트됩니다. 🚀</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "금융 데이터 분석 시스템 인프라 구성도",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "🏗️ 시스템 아키텍처",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "1. 전체 구성도",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "🌐 네트워크 구성",
            "level": 2,
            "isMainTopic": true,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "1. 네트워크 세그먼트",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "2. 보안 그룹 설정",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "🚀 쿠버네티스 클러스터",
            "level": 2,
            "isMainTopic": true,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "1. 노드 구성",
            "level": 3,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "2. 서비스 배포",
            "level": 3,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "📊 모니터링 시스템",
            "level": 2,
            "isMainTopic": true,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "1. 메트릭 수집",
            "level": 3,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "2. 알림 설정",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "🔒 보안 설정",
            "level": 2,
            "isMainTopic": true,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "1. 네트워크 정책",
            "level": 3,
            "isMainTopic": false,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "2. 암호화 설정",
            "level": 3,
            "isMainTopic": false,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "🔄 스케일링 전략",
            "level": 2,
            "isMainTopic": true,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "1. 수평적 확장",
            "level": 3,
            "isMainTopic": false,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "2. 수직적 확장",
            "level": 3,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "🔧 운영 관리",
            "level": 2,
            "isMainTopic": true,
            "position": 900
          },
          {
            "id": "heading-19",
            "text": "1. 로깅 설정",
            "level": 3,
            "isMainTopic": false,
            "position": 950
          },
          {
            "id": "heading-20",
            "text": "2. 백업 정책",
            "level": 3,
            "isMainTopic": false,
            "position": 1000
          }
        ]
      },
      "en": {
        "title": "Entasis Engine - Infrastructure Architecture",
        "description": "Detailed infrastructure architecture and configuration for digital asset data analysis system",
        "content": "<h1 id=\"heading-0\">Financial Data Analysis System Infrastructure Architecture</h1>\n<h2 id=\"heading-1\">🏗️ System Architecture</h2>\n<h3 id=\"heading-2\">1. Overall Architecture</h3>\n<pre><code class=\"language-mermaid\">graph TB\n    subgraph External[External Systems]\n        API1[Exchange API]\n        API2[Data Feed]\n    end\n\n    subgraph LoadBalancer[LoadBalancer]\n        LB1[AWS ALB]\n        LB2[Internal L4]\n    end\n\n    subgraph ServiceMesh[Service Mesh]\n        direction TB\n        subgraph DataCollection[Data Collection Layer]\n            DC1[Collector-1]\n            DC2[Collector-2]\n        end\n\n        subgraph Processing[Processing Layer]\n            P1[Spark Cluster]\n            P2[Stream Processing]\n        end\n\n        subgraph AI[AI Analysis Layer]\n            AI1[Model Serving]\n            AI2[Training Pipeline]\n        end\n\n        subgraph API[API Layer]\n            API3[REST API]\n            API4[WebSocket]\n        end\n    end\n\n    subgraph Storage[Storage]\n        DB1[(TimescaleDB)]\n        DB2[(Redis)]\n        S3[Object Storage]\n    end\n\n    subgraph Monitoring[Monitoring]\n        M1[Prometheus]\n        M2[Grafana]\n        M3[ELK Stack]\n    end\n\n    External --&gt; LoadBalancer\n    LoadBalancer --&gt; ServiceMesh\n    ServiceMesh --&gt; Storage\n    ServiceMesh --&gt; Monitoring\n</code></pre>\n<h2 id=\"heading-3\">🌐 Network Configuration</h2>\n<h3 id=\"heading-4\">1. Network Segments</h3>\n<pre><code class=\"language-plaintext\">+------------------------+     +------------------------+\n|     Public Subnet      |     |    Private Subnet      |\n|------------------------|     |------------------------|\n| - Load Balancer        |     | - Application Servers  |\n| - Bastion Host         |     | - Database Clusters    |\n| - NAT Gateway          |     | - Cache Servers        |\n+------------------------+     +------------------------+\n           |                              |\n           |        VPC Peering           |\n           +------------------------------+\n</code></pre>\n<h3 id=\"heading-5\">2. Security Group Configuration</h3>\n<pre><code class=\"language-yaml\">security_groups:\n  frontend:\n    inbound:\n      - port: 80\n        source: 0.0.0.0/0\n      - port: 443\n        source: 0.0.0.0/0\n\n  application:\n    inbound:\n      - port: 8080\n        source: frontend_sg\n      - port: 9000\n        source: monitoring_sg\n\n  database:\n    inbound:\n      - port: 5432\n        source: application_sg\n      - port: 6379\n        source: application_sg\n</code></pre>\n<h2 id=\"heading-6\">🚀 Kubernetes Cluster</h2>\n<h3 id=\"heading-7\">1. Node Configuration</h3>\n<pre><code class=\"language-yaml\">node_pools:\n  - name: general\n    instance_type: c5.2xlarge\n    min_size: 3\n    max_size: 10\n    labels:\n      role: general\n\n  - name: ai-inference\n    instance_type: g4dn.xlarge\n    min_size: 2\n    max_size: 5\n    labels:\n      role: ai-inference\n\n  - name: data-processing\n    instance_type: r5.2xlarge\n    min_size: 2\n    max_size: 8\n    labels:\n      role: data-processing\n</code></pre>\n<h3 id=\"heading-8\">2. Service Deployment</h3>\n<pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: trading-api\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: trading-api\n  template:\n    metadata:\n      labels:\n        app: trading-api\n    spec:\n      containers:\n        - name: trading-api\n          image: trading-api:1.0.0\n          resources:\n            requests:\n              cpu: 1\n              memory: 2Gi\n            limits:\n              cpu: 2\n              memory: 4Gi\n</code></pre>\n<h2 id=\"heading-9\">📊 Monitoring System</h2>\n<h3 id=\"heading-10\">1. Metric Collection</h3>\n<pre><code class=\"language-yaml\">prometheus:\n  scrape_configs:\n    - job_name: \"kubernetes-pods\"\n      kubernetes_sd_configs:\n        - role: pod\n      relabel_configs:\n        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n          action: keep\n          regex: true\n\n    - job_name: \"trading-metrics\"\n      static_configs:\n        - targets: [\"trading-api:9090\"]\n</code></pre>\n<h3 id=\"heading-11\">2. Alert Configuration</h3>\n<pre><code class=\"language-yaml\">alertmanager:\n  config:\n    route:\n      receiver: \"slack\"\n      group_wait: 30s\n      group_interval: 5m\n      repeat_interval: 4h\n\n    receivers:\n      - name: \"slack\"\n        slack_configs:\n          - channel: \"#alerts\"\n            send_resolved: true\n</code></pre>\n<h2 id=\"heading-12\">🔒 Security Configuration</h2>\n<h3 id=\"heading-13\">1. Network Policy</h3>\n<pre><code class=\"language-yaml\">apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: api-network-policy\nspec:\n  podSelector:\n    matchLabels:\n      app: trading-api\n  policyTypes:\n    - Ingress\n    - Egress\n  ingress:\n    - from:\n        - podSelector:\n            matchLabels:\n              role: frontend\n      ports:\n        - protocol: TCP\n          port: 8080\n</code></pre>\n<h3 id=\"heading-14\">2. Encryption Configuration</h3>\n<pre><code class=\"language-yaml\">encryption:\n  - resources:\n      - secrets\n    providers:\n      - aescbc:\n          keys:\n            - name: key1\n              secret: &lt;base64-encoded-key&gt;\n      - identity: {}\n</code></pre>\n<h2 id=\"heading-15\">🔄 Scaling Strategy</h2>\n<h3 id=\"heading-16\">1. Horizontal Scaling</h3>\n<pre><code class=\"language-yaml\">apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: trading-api-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: trading-api\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n    - type: Resource\n      resource:\n        name: cpu\n        target:\n          type: Utilization\n          averageUtilization: 70\n</code></pre>\n<h3 id=\"heading-17\">2. Vertical Scaling</h3>\n<pre><code class=\"language-yaml\">apiVersion: autoscaling.k8s.io/v1\nkind: VerticalPodAutoscaler\nmetadata:\n  name: trading-api-vpa\nspec:\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: trading-api\n  updatePolicy:\n    updateMode: Auto\n</code></pre>\n<h2 id=\"heading-18\">🔧 Operations Management</h2>\n<h3 id=\"heading-19\">1. Logging Configuration</h3>\n<pre><code class=\"language-yaml\">filebeat:\n  inputs:\n    - type: container\n      paths:\n        - /var/log/containers/*.log\n      processors:\n        - add_kubernetes_metadata:\n            host: ${NODE_NAME}\n            matchers:\n              - logs_path:\n                  logs_path: \"/var/log/containers/\"\n</code></pre>\n<h3 id=\"heading-20\">2. Backup Policy</h3>\n<pre><code class=\"language-yaml\">backup:\n  schedule: \"0 1 * * *\" # Daily at 01:00\n  retention:\n    hourly: 24\n    daily: 7\n    weekly: 4\n    monthly: 12\n  storage:\n    type: s3\n    bucket: backup-bucket\n    region: ap-northeast-2\n</code></pre>\n<p>This document provides the infrastructure architecture and configuration for the financial data analysis system. It will be updated continuously to ensure stability and scalability. 🚀</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "Financial Data Analysis System Infrastructure Architecture",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "🏗️ System Architecture",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "1. Overall Architecture",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "🌐 Network Configuration",
            "level": 2,
            "isMainTopic": true,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "1. Network Segments",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "2. Security Group Configuration",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "🚀 Kubernetes Cluster",
            "level": 2,
            "isMainTopic": true,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "1. Node Configuration",
            "level": 3,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "2. Service Deployment",
            "level": 3,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "📊 Monitoring System",
            "level": 2,
            "isMainTopic": true,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "1. Metric Collection",
            "level": 3,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "2. Alert Configuration",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "🔒 Security Configuration",
            "level": 2,
            "isMainTopic": true,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "1. Network Policy",
            "level": 3,
            "isMainTopic": false,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "2. Encryption Configuration",
            "level": 3,
            "isMainTopic": false,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "🔄 Scaling Strategy",
            "level": 2,
            "isMainTopic": true,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "1. Horizontal Scaling",
            "level": 3,
            "isMainTopic": false,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "2. Vertical Scaling",
            "level": 3,
            "isMainTopic": false,
            "position": 850
          },
          {
            "id": "heading-18",
            "text": "🔧 Operations Management",
            "level": 2,
            "isMainTopic": true,
            "position": 900
          },
          {
            "id": "heading-19",
            "text": "1. Logging Configuration",
            "level": 3,
            "isMainTopic": false,
            "position": 950
          },
          {
            "id": "heading-20",
            "text": "2. Backup Policy",
            "level": 3,
            "isMainTopic": false,
            "position": 1000
          }
        ]
      }
    },
    "imageHeights": {}
  },
  {
    "id": "entasys",
    "title": "Entasis",
    "content": "\n## 1. 프로젝트 개요\n\n### 프로젝트 명\n\n- ENTASYS (엔타시스) SIEM 솔루션\n\n### 프로젝트 목적\n\n- 기업의 보안 위협을 실시간으로 탐지하고 대응하는 통합 보안 관제 시스템 구축\n- 다양한 보안 장비와 시스템의 로그를 수집/분석하여 보안 위협 조기 발견\n- AI/ML 기반의 지능형 위협 탐지 및 대응 체계 구현\n\n### 핵심 기능\n\n1. 통합 로그 수집 및 관리\n\n   - 방화벽, IPS, WAF 등 보안장비 로그 수집\n   - 서버, 네트워크 장비, 애플리케이션 로그 통합\n   - 실시간 로그 정규화 및 상관분석\n   - 로그 원본 보관 및 위/변조 방지\n\n2. 실시간 위협 탐지\n\n   - AI 기반 이상행위 탐지(User/Entity Behavior Analytics)\n   - 알려진/알려지지 않은 위협 탐지\n   - 취약점 스캐닝 및 모니터링\n   - 실시간 위협 인텔리전스 연동\n\n3. 보안 대시보드 및 분석\n\n   - 직관적인 통합 보안 대시보드\n   - 실시간 보안 이벤트 모니터링\n   - 드릴다운 분석 및 포렌식 기능\n   - 맞춤형 보고서 자동 생성\n\n4. 자동화된 대응체계\n   - 위협 탐지시 자동 차단/격리\n   - 담당자 알림 및 티켓팅 연동\n   - 플레이북 기반 대응 자동화\n   - 보안장비 연동 및 제어\n\n## 시스템 아키텍처\n\n### 수집 계층\n\n- 분산 로그 수집기(Collector) 구조\n- 초당 50,000 EPS 처리 성능\n- 로그 필터링 및 정규화\n- 데이터 압축 및 암호화 전송\n\n### 저장 계층\n\n- 분산 스토리지(Elasticsearch) 기반\n- 실시간/장기 보관 이원화\n- 데이터 암호화 저장\n- 자동 백업 및 복구\n\n### 분석 계층\n\n- 실시간 상관분석 엔진\n- ML 기반 이상행위 탐지\n- 위협 인텔리전스 연동\n- 규칙 기반 탐지\n\n### 표현 계층\n\n- HTML5 기반 웹 콘솔\n- 반응형 대시보드\n- 드릴다운 분석 도구\n- 맞춤형 보고서\n\n## 구축 요구사항\n\n### 하드웨어\n\n- 수집서버: 최소 8코어/32GB RAM\n- 분석서버: 최소 16코어/64GB RAM\n- 저장장치: 최소 10TB SSD\n\n### 소프트웨어\n\n- OS: RHEL/CentOS 7 이상\n- Docker/Kubernetes\n- Elasticsearch 7.x\n- Node.js 16.x\n\n## 향후 로드맵\n\n### 2024년 하반기\n\n- AI 엔진 고도화\n- 클라우드 네이티브 아키텍처 전환\n- 글로벌 위협 인텔리전스 연동 확대\n\n### 2025년\n\n- 제로트러스트 보안 프레임워크 적용\n- 블록체인 기반 로그 무결성 검증\n- 멀티클라우드 통합 모니터링\n",
    "date": "2024-03-20",
    "category": "projects",
    "tags": [
      "React",
      "Express",
      "MySQL",
      "Web3.js",
      "AWS",
      "Ganache",
      "Truffle",
      "ERC20",
      "MetaMask",
      "Figma"
    ],
    "thumbnail": "/images/entasis/entasis_circuit.gif",
    "translations": {
      "ko": {
        "title": "Entasis",
        "description": "가상자산 거래소 개발",
        "content": "<h2 id=\"heading-0\">1. 프로젝트 개요</h2>\n<h3 id=\"heading-1\">프로젝트 명</h3>\n<ul>\n<li>ENTASYS (엔타시스) SIEM 솔루션</li>\n</ul>\n<h3 id=\"heading-2\">프로젝트 목적</h3>\n<ul>\n<li>기업의 보안 위협을 실시간으로 탐지하고 대응하는 통합 보안 관제 시스템 구축</li>\n<li>다양한 보안 장비와 시스템의 로그를 수집/분석하여 보안 위협 조기 발견</li>\n<li>AI/ML 기반의 지능형 위협 탐지 및 대응 체계 구현</li>\n</ul>\n<h3 id=\"heading-3\">핵심 기능</h3>\n<ol>\n<li>\n<p>통합 로그 수집 및 관리</p>\n<ul>\n<li>방화벽, IPS, WAF 등 보안장비 로그 수집</li>\n<li>서버, 네트워크 장비, 애플리케이션 로그 통합</li>\n<li>실시간 로그 정규화 및 상관분석</li>\n<li>로그 원본 보관 및 위/변조 방지</li>\n</ul>\n</li>\n<li>\n<p>실시간 위협 탐지</p>\n<ul>\n<li>AI 기반 이상행위 탐지(User/Entity Behavior Analytics)</li>\n<li>알려진/알려지지 않은 위협 탐지</li>\n<li>취약점 스캐닝 및 모니터링</li>\n<li>실시간 위협 인텔리전스 연동</li>\n</ul>\n</li>\n<li>\n<p>보안 대시보드 및 분석</p>\n<ul>\n<li>직관적인 통합 보안 대시보드</li>\n<li>실시간 보안 이벤트 모니터링</li>\n<li>드릴다운 분석 및 포렌식 기능</li>\n<li>맞춤형 보고서 자동 생성</li>\n</ul>\n</li>\n<li>\n<p>자동화된 대응체계</p>\n<ul>\n<li>위협 탐지시 자동 차단/격리</li>\n<li>담당자 알림 및 티켓팅 연동</li>\n<li>플레이북 기반 대응 자동화</li>\n<li>보안장비 연동 및 제어</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"heading-4\">시스템 아키텍처</h2>\n<h3 id=\"heading-5\">수집 계층</h3>\n<ul>\n<li>분산 로그 수집기(Collector) 구조</li>\n<li>초당 50,000 EPS 처리 성능</li>\n<li>로그 필터링 및 정규화</li>\n<li>데이터 압축 및 암호화 전송</li>\n</ul>\n<h3 id=\"heading-6\">저장 계층</h3>\n<ul>\n<li>분산 스토리지(Elasticsearch) 기반</li>\n<li>실시간/장기 보관 이원화</li>\n<li>데이터 암호화 저장</li>\n<li>자동 백업 및 복구</li>\n</ul>\n<h3 id=\"heading-7\">분석 계층</h3>\n<ul>\n<li>실시간 상관분석 엔진</li>\n<li>ML 기반 이상행위 탐지</li>\n<li>위협 인텔리전스 연동</li>\n<li>규칙 기반 탐지</li>\n</ul>\n<h3 id=\"heading-8\">표현 계층</h3>\n<ul>\n<li>HTML5 기반 웹 콘솔</li>\n<li>반응형 대시보드</li>\n<li>드릴다운 분석 도구</li>\n<li>맞춤형 보고서</li>\n</ul>\n<h2 id=\"heading-9\">구축 요구사항</h2>\n<h3 id=\"heading-10\">하드웨어</h3>\n<ul>\n<li>수집서버: 최소 8코어/32GB RAM</li>\n<li>분석서버: 최소 16코어/64GB RAM</li>\n<li>저장장치: 최소 10TB SSD</li>\n</ul>\n<h3 id=\"heading-11\">소프트웨어</h3>\n<ul>\n<li>OS: RHEL/CentOS 7 이상</li>\n<li>Docker/Kubernetes</li>\n<li>Elasticsearch 7.x</li>\n<li>Node.js 16.x</li>\n</ul>\n<h2 id=\"heading-12\">향후 로드맵</h2>\n<h3 id=\"heading-13\">2024년 하반기</h3>\n<ul>\n<li>AI 엔진 고도화</li>\n<li>클라우드 네이티브 아키텍처 전환</li>\n<li>글로벌 위협 인텔리전스 연동 확대</li>\n</ul>\n<h3 id=\"heading-14\">2025년</h3>\n<ul>\n<li>제로트러스트 보안 프레임워크 적용</li>\n<li>블록체인 기반 로그 무결성 검증</li>\n<li>멀티클라우드 통합 모니터링</li>\n</ul>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "1. 프로젝트 개요",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "프로젝트 명",
            "level": 3,
            "isMainTopic": false,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "프로젝트 목적",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "핵심 기능",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "시스템 아키텍처",
            "level": 2,
            "isMainTopic": true,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "수집 계층",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "저장 계층",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "분석 계층",
            "level": 3,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "표현 계층",
            "level": 3,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "구축 요구사항",
            "level": 2,
            "isMainTopic": true,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "하드웨어",
            "level": 3,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "소프트웨어",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "향후 로드맵",
            "level": 2,
            "isMainTopic": true,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "2024년 하반기",
            "level": 3,
            "isMainTopic": false,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "2025년",
            "level": 3,
            "isMainTopic": false,
            "position": 700
          }
        ]
      },
      "en": {
        "title": "Entasis",
        "description": "Development of Virtual Asset Exchange",
        "content": "<h2 id=\"heading-0\">1. Project Overview</h2>\n<h3 id=\"heading-1\">Project Name</h3>\n<ul>\n<li>ENTASYS SIEM Solution</li>\n</ul>\n<h3 id=\"heading-2\">Project Purpose</h3>\n<ul>\n<li>Build an integrated security monitoring system that detects and responds to enterprise security threats in real-time</li>\n<li>Early detection of security threats by collecting and analyzing logs from various security equipment and systems</li>\n<li>Implementation of AI/ML-based intelligent threat detection and response system</li>\n</ul>\n<h3 id=\"heading-3\">Core Features</h3>\n<ol>\n<li>\n<p>Integrated Log Collection and Management</p>\n<ul>\n<li>Collect logs from security devices like firewalls, IPS, WAF</li>\n<li>Integration of server, network equipment, and application logs</li>\n<li>Real-time log normalization and correlation analysis</li>\n<li>Log original storage and tampering prevention</li>\n</ul>\n</li>\n<li>\n<p>Real-time Threat Detection</p>\n<ul>\n<li>AI-based User/Entity Behavior Analytics</li>\n<li>Detection of known and unknown threats</li>\n<li>Vulnerability scanning and monitoring</li>\n<li>Real-time threat intelligence integration</li>\n</ul>\n</li>\n<li>\n<p>Security Dashboard and Analysis</p>\n<ul>\n<li>Intuitive integrated security dashboard</li>\n<li>Real-time security event monitoring</li>\n<li>Drill-down analysis and forensic capabilities</li>\n<li>Automated custom report generation</li>\n</ul>\n</li>\n<li>\n<p>Automated Response System</p>\n<ul>\n<li>Automatic blocking/isolation upon threat detection</li>\n<li>Staff notification and ticketing integration</li>\n<li>Playbook-based response automation</li>\n<li>Security device integration and control</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"heading-4\">System Architecture</h2>\n<h3 id=\"heading-5\">Collection Layer</h3>\n<ul>\n<li>Distributed log collector structure</li>\n<li>50,000 EPS processing performance per second</li>\n<li>Log filtering and normalization</li>\n<li>Data compression and encrypted transmission</li>\n</ul>\n<h3 id=\"heading-6\">Storage Layer</h3>\n<ul>\n<li>Based on distributed storage (Elasticsearch)</li>\n<li>Dual storage for real-time/long-term retention</li>\n<li>Encrypted data storage</li>\n<li>Automatic backup and recovery</li>\n</ul>\n<h3 id=\"heading-7\">Analysis Layer</h3>\n<ul>\n<li>Real-time correlation analysis engine</li>\n<li>ML-based anomaly detection</li>\n<li>Threat intelligence integration</li>\n<li>Rule-based detection</li>\n</ul>\n<h3 id=\"heading-8\">Presentation Layer</h3>\n<ul>\n<li>HTML5-based web console</li>\n<li>Responsive dashboard</li>\n<li>Drill-down analysis tools</li>\n<li>Customized reporting</li>\n</ul>\n<h2 id=\"heading-9\">Implementation Requirements</h2>\n<h3 id=\"heading-10\">Hardware</h3>\n<ul>\n<li>Collection Server: Minimum 8 cores/32GB RAM</li>\n<li>Analysis Server: Minimum 16 cores/64GB RAM</li>\n<li>Storage: Minimum 10TB SSD</li>\n</ul>\n<h3 id=\"heading-11\">Software</h3>\n<ul>\n<li>OS: RHEL/CentOS 7 or higher</li>\n<li>Docker/Kubernetes</li>\n<li>Elasticsearch 7.x</li>\n<li>Node.js 16.x</li>\n</ul>\n<h2 id=\"heading-12\">Future Roadmap</h2>\n<h3 id=\"heading-13\">2024 Second Half</h3>\n<ul>\n<li>AI engine advancement</li>\n<li>Transition to cloud-native architecture</li>\n<li>Expansion of global threat intelligence integration</li>\n</ul>\n<h3 id=\"heading-14\">2025</h3>\n<ul>\n<li>Application of Zero Trust security framework</li>\n<li>Blockchain-based log integrity verification</li>\n<li>Multi-cloud integrated monitoring</li>\n</ul>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "1. Project Overview",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "Project Name",
            "level": 3,
            "isMainTopic": false,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "Project Purpose",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "Core Features",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "System Architecture",
            "level": 2,
            "isMainTopic": true,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "Collection Layer",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "Storage Layer",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "Analysis Layer",
            "level": 3,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "Presentation Layer",
            "level": 3,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "Implementation Requirements",
            "level": 2,
            "isMainTopic": true,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "Hardware",
            "level": 3,
            "isMainTopic": false,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "Software",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "Future Roadmap",
            "level": 2,
            "isMainTopic": true,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "2024 Second Half",
            "level": 3,
            "isMainTopic": false,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "2025",
            "level": 3,
            "isMainTopic": false,
            "position": 700
          }
        ]
      }
    },
    "imageHeights": {}
  },
  {
    "id": "fds",
    "title": "FDS 기획",
    "content": "\n## 시스템 개요\n\n가상자산 이상 거래 탐지 시스템(Virtual Asset FDS, VA-FDS)은 블록체인 네트워크에서 발생하는 비정상적인 거래 패턴을 실시간으로 감지하고 대응하는 시스템입니다.\n\n### 주요 특징\n\n1. **블록체인 특화 데이터 수집**\n\n   - 온체인 트랜잭션 데이터\n   - 지갑 주소 행위 패턴\n   - 스마트 컨트랙트 인터랙션\n   - DEX/CEX 거래 데이터\n\n2. **하이브리드 분석 방식**\n   - 룰 기반 탐지 (Rule-based Detection)\n   - 머신러닝 기반 이상 탐지\n   - 온체인 데이터 분석\n   - 크로스체인 추적\n\n## 핵심 기능\n\n![Profile Image 1](/images/fds.jpeg)\n\n### 1. 실시간 트랜잭션 모니터링\n\n- 대량 송금 패턴 감지\n- 이상 거래 금액 탐지\n- 의심스러운 지갑 주소 추적\n- 스마트 컨트랙트 취약점 분석\n\n### 2. 크로스체인 추적 시스템\n\n- 브리지 트랜잭션 모니터링\n- 체인 간 자금 흐름 추적\n- 크로스체인 세탁 패턴 감지\n- 브리지 해킹 위험 감지\n\n### 3. AI 기반 패턴 분석\n\n- 지도학습: RandomForest, XGBoost\n- 비지도학습: Isolation Forest\n- 딥러닝: LSTM, GNN\n- 앙상블 기법 적용\n\n## 기술 스택\n\n### Backend\n\n- Node.js/Python\n- PostgreSQL (트랜잭션 데이터)\n- Redis (실시간 캐싱)\n- Kafka (스트림 처리)\n\n### Blockchain\n\n- Web3.js/Ethers.js\n- The Graph (데이터 인덱싱)\n- Chainlink (오라클)\n\n### AI/ML\n\n- TensorFlow/PyTorch\n- scikit-learn\n- NetworkX (그래프 분석)\n\n## 시스템 아키텍처\n\n```plaintext\n[블록체인 네트워크]\n    │\n    ├─ [이더리움 노드] ─── [The Graph 인덱서]\n    ├─ [바이낸스 노드] ─── [체인 브릿지 모니터]\n    └─ [기타 체인 노드] ── [크로스체인 트래커]\n              │\n              ▼\n[데이터 수집 레이어]\n    │\n    ├─ [트랜잭션 콜렉터] ── (실시간 거래 데이터)\n    ├─ [컨트랙트 스캐너] ── (스마트 컨트랙트 호출)\n    └─ [이벤트 리스너] ──── (체인 이벤트 로그)\n              │\n              ▼\n[스트림 프로세싱]\n    │\n    ├─ [Kafka 프로듀서] ─── (실시간 데이터 스트림)\n    ├─ [Redis 캐시] ─────── (고속 데이터 처리)\n    └─ [데이터 파서] ────── (정형/비정형 데이터 변환)\n              │\n              ▼\n[분석 엔진]\n    │\n    ├─ [룰 기반 엔진] ────── (정적 규칙 검사)\n    │      └─ [임계값 체크] ─ (거래량/금액 분석)\n    │\n    ├─ [ML 엔진]\n    │      ├─ [지도학습 모델] ── (이상 패턴 분류)\n    │      ├─ [비지도학습 모델] ─ (이상치 탐지)\n    │      └─ [앙상블 모델] ──── (통합 예측)\n    │\n    └─ [그래프 분석기]\n           ├─ [주소 클러스터링] ── (연관 지갑 그룹화)\n           └─ [자금 흐름 추적] ─── (거래 경로 분석)\n              │\n              ▼\n[실시간 모니터링]\n    │\n    ├─ [알림 시스템]\n    │      ├─ [우선순위 분류기] ── (위험도 평가)\n    │      └─ [알림 디스패처] ─── (채널별 알림 발송)\n    │\n    └─ [대응 시스템]\n           ├─ [자동화 대응] ────── (거래 차단/제한)\n           ├─ [수동 검토] ─────── (분석가 확인)\n           └─ [보고서 생성] ───── (감사 추적)\n```\n\n### 주요 컴포넌트 설명\n\n1. **블록체인 네트워크 레이어**\n\n   - 다중 체인 노드 운영\n   - 실시간 블록 데이터 수집\n   - 크로스체인 브릿지 모니터링\n\n2. **데이터 수집 레이어**\n\n   - 트랜잭션 데이터 실시간 수집\n   - 스마트 컨트랙트 인터랙션 분석\n   - 체인 이벤트 로그 추적\n\n3. **스트림 프로세싱 레이어**\n\n   - 대용량 실시간 데이터 처리\n   - 인메모리 캐싱\n   - 데이터 정규화 및 변환\n\n4. **분석 엔진 레이어**\n\n   - 다중 분석 모델 운영\n   - 실시간 패턴 매칭\n   - 머신러닝 기반 예측\n\n5. **모니터링 및 대응 레이어**\n   - 실시간 위험 평가\n   - 자동화된 대응 체계\n   - 감사 추적 시스템\n\n## 구현 계획\n\n### Phase 1: 기본 인프라 구축\n\n- 데이터 수집 파이프라인 구축\n- 기본 룰 기반 탐지 시스템 구현\n- 실시간 모니터링 대시보드 개발\n\n### Phase 2: AI 모델 개발\n\n- 지도학습 모델 훈련\n- 비지도학습 모델 구현\n- 앙상블 시스템 구축\n\n### Phase 3: 크로스체인 확장\n\n- 멀티체인 데이터 수집\n- 크로스체인 추적 시스템\n- 통합 대시보드 개발\n\n## 기대 효과\n\n1. **보안성 강화**\n\n   - 해킹 시도 조기 감지\n   - 자금 세탁 방지\n   - 사기 거래 예방\n\n2. **운영 효율성**\n\n   - 자동화된 모니터링\n   - 실시간 대응 체계\n   - 리스크 관리 강화\n\n3. **사용자 신뢰도**\n   - 안전한 거래 환경\n   - 투명한 모니터링\n   - 신속한 이상 거래 대응\n\n## 향후 발전 방향\n\n1. **탈중앙화 FDS**\n\n   - DAO 기반 거버넌스\n   - 탈중앙화 신고 시스템\n   - 커뮤니티 기반 검증\n\n2. **AI 고도화**\n\n   - 제로샷 러닝 도입\n   - 강화학습 모델 적용\n   - 연합학습 시스템\n\n3. **생태계 확장**\n   - DeFi 프로토콜 연동\n   - CEX 협력 체계\n   - 규제기관 협력\n",
    "date": "2024-03-20",
    "category": "projects",
    "tags": [
      "Blockchain",
      "FDS",
      "Security",
      "AI"
    ],
    "thumbnail": "/images/solidity.webp",
    "translations": {
      "ko": {
        "title": "FDS 기획",
        "description": "블록체인 기반 가상자산 거래의 이상 탐지 시스템 설계",
        "content": "<h2 id=\"heading-0\">시스템 개요</h2>\n<p>가상자산 이상 거래 탐지 시스템(Virtual Asset FDS, VA-FDS)은 블록체인 네트워크에서 발생하는 비정상적인 거래 패턴을 실시간으로 감지하고 대응하는 시스템입니다.</p>\n<h3 id=\"heading-1\">주요 특징</h3>\n<ol>\n<li>\n<p><strong>블록체인 특화 데이터 수집</strong></p>\n<ul>\n<li>온체인 트랜잭션 데이터</li>\n<li>지갑 주소 행위 패턴</li>\n<li>스마트 컨트랙트 인터랙션</li>\n<li>DEX/CEX 거래 데이터</li>\n</ul>\n</li>\n<li>\n<p><strong>하이브리드 분석 방식</strong></p>\n<ul>\n<li>룰 기반 탐지 (Rule-based Detection)</li>\n<li>머신러닝 기반 이상 탐지</li>\n<li>온체인 데이터 분석</li>\n<li>크로스체인 추적</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"heading-2\">핵심 기능</h2>\n<p><img src=\"/images/fds.jpeg\" alt=\"Profile Image 1\"></p>\n<h3 id=\"heading-3\">1. 실시간 트랜잭션 모니터링</h3>\n<ul>\n<li>대량 송금 패턴 감지</li>\n<li>이상 거래 금액 탐지</li>\n<li>의심스러운 지갑 주소 추적</li>\n<li>스마트 컨트랙트 취약점 분석</li>\n</ul>\n<h3 id=\"heading-4\">2. 크로스체인 추적 시스템</h3>\n<ul>\n<li>브리지 트랜잭션 모니터링</li>\n<li>체인 간 자금 흐름 추적</li>\n<li>크로스체인 세탁 패턴 감지</li>\n<li>브리지 해킹 위험 감지</li>\n</ul>\n<h3 id=\"heading-5\">3. AI 기반 패턴 분석</h3>\n<ul>\n<li>지도학습: RandomForest, XGBoost</li>\n<li>비지도학습: Isolation Forest</li>\n<li>딥러닝: LSTM, GNN</li>\n<li>앙상블 기법 적용</li>\n</ul>\n<h2 id=\"heading-6\">기술 스택</h2>\n<h3 id=\"heading-7\">Backend</h3>\n<ul>\n<li>Node.js/Python</li>\n<li>PostgreSQL (트랜잭션 데이터)</li>\n<li>Redis (실시간 캐싱)</li>\n<li>Kafka (스트림 처리)</li>\n</ul>\n<h3 id=\"heading-8\">Blockchain</h3>\n<ul>\n<li>Web3.js/Ethers.js</li>\n<li>The Graph (데이터 인덱싱)</li>\n<li>Chainlink (오라클)</li>\n</ul>\n<h3 id=\"heading-9\">AI/ML</h3>\n<ul>\n<li>TensorFlow/PyTorch</li>\n<li>scikit-learn</li>\n<li>NetworkX (그래프 분석)</li>\n</ul>\n<h2 id=\"heading-10\">시스템 아키텍처</h2>\n<pre><code class=\"language-plaintext\">[블록체인 네트워크]\n    │\n    ├─ [이더리움 노드] ─── [The Graph 인덱서]\n    ├─ [바이낸스 노드] ─── [체인 브릿지 모니터]\n    └─ [기타 체인 노드] ── [크로스체인 트래커]\n              │\n              ▼\n[데이터 수집 레이어]\n    │\n    ├─ [트랜잭션 콜렉터] ── (실시간 거래 데이터)\n    ├─ [컨트랙트 스캐너] ── (스마트 컨트랙트 호출)\n    └─ [이벤트 리스너] ──── (체인 이벤트 로그)\n              │\n              ▼\n[스트림 프로세싱]\n    │\n    ├─ [Kafka 프로듀서] ─── (실시간 데이터 스트림)\n    ├─ [Redis 캐시] ─────── (고속 데이터 처리)\n    └─ [데이터 파서] ────── (정형/비정형 데이터 변환)\n              │\n              ▼\n[분석 엔진]\n    │\n    ├─ [룰 기반 엔진] ────── (정적 규칙 검사)\n    │      └─ [임계값 체크] ─ (거래량/금액 분석)\n    │\n    ├─ [ML 엔진]\n    │      ├─ [지도학습 모델] ── (이상 패턴 분류)\n    │      ├─ [비지도학습 모델] ─ (이상치 탐지)\n    │      └─ [앙상블 모델] ──── (통합 예측)\n    │\n    └─ [그래프 분석기]\n           ├─ [주소 클러스터링] ── (연관 지갑 그룹화)\n           └─ [자금 흐름 추적] ─── (거래 경로 분석)\n              │\n              ▼\n[실시간 모니터링]\n    │\n    ├─ [알림 시스템]\n    │      ├─ [우선순위 분류기] ── (위험도 평가)\n    │      └─ [알림 디스패처] ─── (채널별 알림 발송)\n    │\n    └─ [대응 시스템]\n           ├─ [자동화 대응] ────── (거래 차단/제한)\n           ├─ [수동 검토] ─────── (분석가 확인)\n           └─ [보고서 생성] ───── (감사 추적)\n</code></pre>\n<h3 id=\"heading-11\">주요 컴포넌트 설명</h3>\n<ol>\n<li>\n<p><strong>블록체인 네트워크 레이어</strong></p>\n<ul>\n<li>다중 체인 노드 운영</li>\n<li>실시간 블록 데이터 수집</li>\n<li>크로스체인 브릿지 모니터링</li>\n</ul>\n</li>\n<li>\n<p><strong>데이터 수집 레이어</strong></p>\n<ul>\n<li>트랜잭션 데이터 실시간 수집</li>\n<li>스마트 컨트랙트 인터랙션 분석</li>\n<li>체인 이벤트 로그 추적</li>\n</ul>\n</li>\n<li>\n<p><strong>스트림 프로세싱 레이어</strong></p>\n<ul>\n<li>대용량 실시간 데이터 처리</li>\n<li>인메모리 캐싱</li>\n<li>데이터 정규화 및 변환</li>\n</ul>\n</li>\n<li>\n<p><strong>분석 엔진 레이어</strong></p>\n<ul>\n<li>다중 분석 모델 운영</li>\n<li>실시간 패턴 매칭</li>\n<li>머신러닝 기반 예측</li>\n</ul>\n</li>\n<li>\n<p><strong>모니터링 및 대응 레이어</strong></p>\n<ul>\n<li>실시간 위험 평가</li>\n<li>자동화된 대응 체계</li>\n<li>감사 추적 시스템</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"heading-12\">구현 계획</h2>\n<h3 id=\"heading-13\">Phase 1: 기본 인프라 구축</h3>\n<ul>\n<li>데이터 수집 파이프라인 구축</li>\n<li>기본 룰 기반 탐지 시스템 구현</li>\n<li>실시간 모니터링 대시보드 개발</li>\n</ul>\n<h3 id=\"heading-14\">Phase 2: AI 모델 개발</h3>\n<ul>\n<li>지도학습 모델 훈련</li>\n<li>비지도학습 모델 구현</li>\n<li>앙상블 시스템 구축</li>\n</ul>\n<h3 id=\"heading-15\">Phase 3: 크로스체인 확장</h3>\n<ul>\n<li>멀티체인 데이터 수집</li>\n<li>크로스체인 추적 시스템</li>\n<li>통합 대시보드 개발</li>\n</ul>\n<h2 id=\"heading-16\">기대 효과</h2>\n<ol>\n<li>\n<p><strong>보안성 강화</strong></p>\n<ul>\n<li>해킹 시도 조기 감지</li>\n<li>자금 세탁 방지</li>\n<li>사기 거래 예방</li>\n</ul>\n</li>\n<li>\n<p><strong>운영 효율성</strong></p>\n<ul>\n<li>자동화된 모니터링</li>\n<li>실시간 대응 체계</li>\n<li>리스크 관리 강화</li>\n</ul>\n</li>\n<li>\n<p><strong>사용자 신뢰도</strong></p>\n<ul>\n<li>안전한 거래 환경</li>\n<li>투명한 모니터링</li>\n<li>신속한 이상 거래 대응</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"heading-17\">향후 발전 방향</h2>\n<ol>\n<li>\n<p><strong>탈중앙화 FDS</strong></p>\n<ul>\n<li>DAO 기반 거버넌스</li>\n<li>탈중앙화 신고 시스템</li>\n<li>커뮤니티 기반 검증</li>\n</ul>\n</li>\n<li>\n<p><strong>AI 고도화</strong></p>\n<ul>\n<li>제로샷 러닝 도입</li>\n<li>강화학습 모델 적용</li>\n<li>연합학습 시스템</li>\n</ul>\n</li>\n<li>\n<p><strong>생태계 확장</strong></p>\n<ul>\n<li>DeFi 프로토콜 연동</li>\n<li>CEX 협력 체계</li>\n<li>규제기관 협력</li>\n</ul>\n</li>\n</ol>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "시스템 개요",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "주요 특징",
            "level": 3,
            "isMainTopic": false,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "핵심 기능",
            "level": 2,
            "isMainTopic": true,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "1. 실시간 트랜잭션 모니터링",
            "level": 3,
            "isMainTopic": false,
            "position": 0
          },
          {
            "id": "heading-4",
            "text": "2. 크로스체인 추적 시스템",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "3. AI 기반 패턴 분석",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "기술 스택",
            "level": 2,
            "isMainTopic": true,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "Backend",
            "level": 3,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "Blockchain",
            "level": 3,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "AI/ML",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "시스템 아키텍처",
            "level": 2,
            "isMainTopic": true,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "주요 컴포넌트 설명",
            "level": 3,
            "isMainTopic": false,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "구현 계획",
            "level": 2,
            "isMainTopic": true,
            "position": 600
          },
          {
            "id": "heading-13",
            "text": "Phase 1: 기본 인프라 구축",
            "level": 3,
            "isMainTopic": false,
            "position": 650
          },
          {
            "id": "heading-14",
            "text": "Phase 2: AI 모델 개발",
            "level": 3,
            "isMainTopic": false,
            "position": 700
          },
          {
            "id": "heading-15",
            "text": "Phase 3: 크로스체인 확장",
            "level": 3,
            "isMainTopic": false,
            "position": 750
          },
          {
            "id": "heading-16",
            "text": "기대 효과",
            "level": 2,
            "isMainTopic": true,
            "position": 800
          },
          {
            "id": "heading-17",
            "text": "향후 발전 방향",
            "level": 2,
            "isMainTopic": true,
            "position": 850
          }
        ]
      },
      "en": {
        "title": "FDS Planning",
        "description": "Design of Anomaly Detection System for Blockchain-based Digital Asset Trading",
        "content": "<h2 id=\"heading-0\">System Overview</h2>\n<p>Virtual Asset FDS (VA-FDS) is a system that detects and responds to abnormal transaction patterns in blockchain networks in real-time.</p>\n<h3 id=\"heading-1\">Key Features</h3>\n<ol>\n<li>\n<p><strong>Blockchain-Specific Data Collection</strong></p>\n<ul>\n<li>On-chain transaction data</li>\n<li>Wallet address behavior patterns</li>\n<li>Smart contract interactions</li>\n<li>DEX/CEX trading data</li>\n</ul>\n</li>\n<li>\n<p><strong>Hybrid Analysis Approach</strong></p>\n<ul>\n<li>Rule-based Detection</li>\n<li>Machine Learning-based Anomaly Detection</li>\n<li>On-chain Data Analysis</li>\n<li>Cross-chain Tracking</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"heading-2\">Core Functions</h2>\n<p><img src=\"/images/fds.jpeg\" alt=\"Profile Image 1\"></p>\n<h3 id=\"heading-3\">1. Real-time Transaction Monitoring</h3>\n<ul>\n<li>Bulk transfer pattern detection</li>\n<li>Abnormal transaction amount detection</li>\n<li>Suspicious wallet address tracking</li>\n<li>Smart contract vulnerability analysis</li>\n</ul>\n<h3 id=\"heading-4\">2. Cross-chain Tracking System</h3>\n<ul>\n<li>Bridge transaction monitoring</li>\n<li>Cross-chain fund flow tracking</li>\n<li>Cross-chain laundering pattern detection</li>\n<li>Bridge hacking risk detection</li>\n</ul>\n<h3 id=\"heading-5\">3. AI-based Pattern Analysis</h3>\n<ul>\n<li>Supervised Learning: RandomForest, XGBoost</li>\n<li>Unsupervised Learning: Isolation Forest</li>\n<li>Deep Learning: LSTM, GNN</li>\n<li>Ensemble techniques application</li>\n</ul>\n<h2 id=\"heading-6\">Tech Stack</h2>\n<h3 id=\"heading-7\">Backend</h3>\n<ul>\n<li>Node.js/Python</li>\n<li>PostgreSQL (transaction data)</li>\n<li>Redis (real-time caching)</li>\n<li>Kafka (stream processing)</li>\n</ul>\n<h3 id=\"heading-8\">Blockchain</h3>\n<ul>\n<li>Web3.js/Ethers.js</li>\n<li>The Graph (data indexing)</li>\n<li>Chainlink (oracle)</li>\n</ul>\n<h3 id=\"heading-9\">AI/ML</h3>\n<ul>\n<li>TensorFlow/PyTorch</li>\n<li>scikit-learn</li>\n<li>NetworkX (graph analysis)</li>\n</ul>\n<h2 id=\"heading-10\">System Architecture</h2>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "System Overview",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "Key Features",
            "level": 3,
            "isMainTopic": false,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "Core Functions",
            "level": 2,
            "isMainTopic": true,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "1. Real-time Transaction Monitoring",
            "level": 3,
            "isMainTopic": false,
            "position": 0
          },
          {
            "id": "heading-4",
            "text": "2. Cross-chain Tracking System",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "3. AI-based Pattern Analysis",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "Tech Stack",
            "level": 2,
            "isMainTopic": true,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "Backend",
            "level": 3,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "Blockchain",
            "level": 3,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "AI/ML",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "System Architecture",
            "level": 2,
            "isMainTopic": true,
            "position": 500
          }
        ]
      }
    },
    "imageHeights": {
      "img-3": 400
    }
  },
  {
    "id": "gig_crawler_1",
    "title": "FastAPI와 PostgreSQL을 활용한 아웃소싱 크롤러 개발",
    "content": "\n# 프로젝트 시작하기: FastAPI와 PostgreSQL 환경 설정 🛠️\n\n안녕하세요! 오늘은 프리랜서 프로젝트 크롤러 개발을 시작하면서 FastAPI와 PostgreSQL 환경을 어떻게 설정했는지 공유해볼게요.\n\n### **FastAPI와 PostgreSQL을 연동하는 가장 쉬운 방법! 🚀**\n\n안녕하세요! 이번에는 **FastAPI**와 **PostgreSQL**을 연결하는 방법을 쉽게 설명해드릴게요.  \n혹시 **FastAPI**를 처음 써보신다면? 너무 걱정하지 마세요! 차근차근 따라오시면 금방 이해하실 거예요. 😃\n\n---\n\n## **1. 프로젝트 기본 구조 만들기**\n\n먼저, 프로젝트 폴더를 아래처럼 구성해볼게요.\n\n```\nbackend/\n├── .env                  # 환경 변수 설정\n├── requirements.txt      # 필요한 패키지 리스트\n└── app/\n    ├── main.py          # FastAPI 메인 애플리케이션\n    ├── config.py        # 설정 파일\n    ├── models/          # SQLAlchemy 모델 파일들\n    ├── schemas/         # Pydantic 스키마 파일들\n    ├── api/             # API 엔드포인트\n    └── db/              # 데이터베이스 관련 파일\n```\n\n이제 하나씩 설정해봅시다! 😊\n\n---\n\n## **2. 필요한 패키지 설치하기**\n\nFastAPI와 PostgreSQL을 연동하려면 몇 가지 패키지가 필요해요.  \n먼저 `requirements.txt` 파일을 만들어서 아래 내용을 추가해주세요.\n\n```text\nfastapi==0.104.1\nuvicorn==0.24.0\nsqlalchemy==2.0.23\npydantic==2.5.2\npydantic-settings==2.1.0\npython-dotenv==1.0.0\npsycopg2-binary==2.9.9\n```\n\n그리고 터미널에서 아래 명령어를 실행하면 한 번에 설치됩니다! 🎯\n\n```bash\npip install -r requirements.txt\n```\n\n---\n\n## **3. 환경 변수 설정 (.env 파일 만들기)**\n\nPostgreSQL 연결 정보를 `.env` 파일에 저장할 거예요.  \n`.env` 파일을 만들어서 아래 내용을 입력해주세요.\n\n```env\nPOSTGRES_USER=postgres\nPOSTGRES_PASSWORD=postgres123\nPOSTGRES_HOST=localhost\nPOSTGRES_PORT=5432\nPOSTGRES_DB=gig_crawler\n```\n\n**✅ 왜 이렇게 설정할까요?**  \n👉 보안과 유지보수를 위해 코드에 직접 DB 정보를 적지 않고 환경 변수로 관리하는 게 좋아요!\n\n---\n\n## **4. 설정 관리 (config.py 만들기)**\n\n이제 `.env` 파일에 있는 환경 변수를 가져올 수 있도록 `config.py` 파일을 만들어봅시다.\n\n```python\nfrom pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    POSTGRES_USER: str\n    POSTGRES_PASSWORD: str\n    POSTGRES_HOST: str\n    POSTGRES_PORT: str\n    POSTGRES_DB: str\n\n    class Config:\n        env_file = \".env\"\n\nsettings = Settings()\n```\n\n이제 `settings.POSTGRES_USER` 이런 식으로 환경 변수를 불러올 수 있어요! 🎉\n\n---\n\n## **5. 데이터베이스 연결 설정 (database.py 만들기)**\n\n이제 본격적으로 **PostgreSQL**과 연결할 `database.py` 파일을 만들어볼게요.\n\n```python\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nfrom ..config import settings\nfrom urllib.parse import quote_plus\n\n# URL 인코딩을 사용한 DB 연결 문자열 만들기\npassword = quote_plus(settings.POSTGRES_PASSWORD)\nDATABASE_URL = f\"postgresql://{settings.POSTGRES_USER}:{password}@{settings.POSTGRES_HOST}:{settings.POSTGRES_PORT}/{settings.POSTGRES_DB}\"\n\n# SQLAlchemy 엔진 생성\nengine = create_engine(\n    DATABASE_URL,\n    echo=True,  # SQL 쿼리 로그 확인용\n    pool_pre_ping=True,\n    connect_args={'application_name': 'gig_crawler'}\n)\n\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n```\n\n---\n\n## **6. FastAPI 앱 설정 (main.py 만들기)**\n\n이제 FastAPI 서버를 실행할 `main.py` 파일을 만들어봅시다.\n\n```python\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp = FastAPI(title=\"Project Crawler API\")\n\n# CORS 설정\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:3000\"],  # 프론트엔드 도메인\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Hello, FastAPI & PostgreSQL!\"}\n```\n\n이제 `http://localhost:8000/` 에 접속하면 **\"Hello, FastAPI & PostgreSQL!\"** 메시지가 나와야 해요!\n\n---\n\n## **7. PostgreSQL 데이터베이스 생성하기**\n\n이제 PostgreSQL에서 사용할 데이터베이스를 만들어봅시다.  \n터미널에서 `psql`을 실행한 다음, 아래 명령어를 입력하세요.\n\n```sql\nCREATE DATABASE gig_crawler WITH ENCODING 'UTF8' LC_COLLATE='Korean_Korea.949' LC_CTYPE='Korean_Korea.949';\n```\n\n이제 데이터베이스가 준비되었습니다! 🎉\n\n---\n\n## **8. 서버 실행하기! 🚀**\n\n이제 마지막 단계입니다!  \n아래 명령어를 실행해서 FastAPI 서버를 켜볼까요?\n\n```bash\nuvicorn app.main:app --reload\n```\n\n터미널에 **\"Uvicorn running on http://127.0.0.1:8000\"** 이런 메시지가 나오면 성공이에요!  \n이제 브라우저에서 `http://127.0.0.1:8000/docs` 로 들어가면 API 문서도 자동으로 생성된 걸 확인할 수 있어요.\n\n---\n\n## **마무리 🎯**\n\n지금까지 **FastAPI + PostgreSQL** 연동을 설정해봤어요!  \n혹시 실행하면서 문제가 생기면 아래 사항을 다시 확인해보세요.\n\n✅ `.env` 파일을 UTF-8로 저장했나요?  \n✅ PostgreSQL 서버가 실행 중인가요?  \n✅ 데이터베이스가 생성되어 있나요?  \n✅ `uvicorn app.main:app --reload` 명령어를 실행했나요?\n\n이제 여기에 **CRUD API**를 추가해서 원하는 프로젝트를 만들어보세요! 💡  \n궁금한 점 있으면 언제든지 질문하세요~! 😃\n",
    "date": "2025-02-12",
    "category": "backend",
    "tags": [
      "FastAPI",
      "PostgreSQL",
      "Python",
      "Crawler",
      "asyncio",
      "SQLAlchemy",
      "비동기처리",
      "데이터수집",
      "실시간처리"
    ],
    "thumbnail": "/images/fastapi.png",
    "translations": {
      "ko": {
        "title": "FastAPI와 PostgreSQL을 활용한 아웃소싱 크롤러 개발",
        "description": "FastAPI와 PostgreSQL을 사용하여 국내외 프리랜서 플랫폼의 프로젝트 정보를 수집하는 크롤러 시스템 구축 프로젝트",
        "content": "<h1 id=\"heading-0\">프로젝트 시작하기: FastAPI와 PostgreSQL 환경 설정 🛠️</h1>\n<p>안녕하세요! 오늘은 프리랜서 프로젝트 크롤러 개발을 시작하면서 FastAPI와 PostgreSQL 환경을 어떻게 설정했는지 공유해볼게요.</p>\n<h3 id=\"heading-1\"><strong>FastAPI와 PostgreSQL을 연동하는 가장 쉬운 방법! 🚀</strong></h3>\n<p>안녕하세요! 이번에는 <strong>FastAPI</strong>와 <strong>PostgreSQL</strong>을 연결하는 방법을 쉽게 설명해드릴게요.<br>\n혹시 <strong>FastAPI</strong>를 처음 써보신다면? 너무 걱정하지 마세요! 차근차근 따라오시면 금방 이해하실 거예요. 😃</p>\n<hr>\n<h2 id=\"heading-2\"><strong>1. 프로젝트 기본 구조 만들기</strong></h2>\n<p>먼저, 프로젝트 폴더를 아래처럼 구성해볼게요.</p>\n<pre><code>backend/\n├── .env                  # 환경 변수 설정\n├── requirements.txt      # 필요한 패키지 리스트\n└── app/\n    ├── main.py          # FastAPI 메인 애플리케이션\n    ├── config.py        # 설정 파일\n    ├── models/          # SQLAlchemy 모델 파일들\n    ├── schemas/         # Pydantic 스키마 파일들\n    ├── api/             # API 엔드포인트\n    └── db/              # 데이터베이스 관련 파일\n</code></pre>\n<p>이제 하나씩 설정해봅시다! 😊</p>\n<hr>\n<h2 id=\"heading-3\"><strong>2. 필요한 패키지 설치하기</strong></h2>\n<p>FastAPI와 PostgreSQL을 연동하려면 몇 가지 패키지가 필요해요.<br>\n먼저 <code>requirements.txt</code> 파일을 만들어서 아래 내용을 추가해주세요.</p>\n<pre><code class=\"language-text\">fastapi==0.104.1\nuvicorn==0.24.0\nsqlalchemy==2.0.23\npydantic==2.5.2\npydantic-settings==2.1.0\npython-dotenv==1.0.0\npsycopg2-binary==2.9.9\n</code></pre>\n<p>그리고 터미널에서 아래 명령어를 실행하면 한 번에 설치됩니다! 🎯</p>\n<pre><code class=\"language-bash\">pip install -r requirements.txt\n</code></pre>\n<hr>\n<h2 id=\"heading-4\"><strong>3. 환경 변수 설정 (.env 파일 만들기)</strong></h2>\n<p>PostgreSQL 연결 정보를 <code>.env</code> 파일에 저장할 거예요.<br>\n<code>.env</code> 파일을 만들어서 아래 내용을 입력해주세요.</p>\n<pre><code class=\"language-env\">POSTGRES_USER=postgres\nPOSTGRES_PASSWORD=postgres123\nPOSTGRES_HOST=localhost\nPOSTGRES_PORT=5432\nPOSTGRES_DB=gig_crawler\n</code></pre>\n<p><strong>✅ 왜 이렇게 설정할까요?</strong><br>\n👉 보안과 유지보수를 위해 코드에 직접 DB 정보를 적지 않고 환경 변수로 관리하는 게 좋아요!</p>\n<hr>\n<h2 id=\"heading-5\"><strong>4. 설정 관리 (config.py 만들기)</strong></h2>\n<p>이제 <code>.env</code> 파일에 있는 환경 변수를 가져올 수 있도록 <code>config.py</code> 파일을 만들어봅시다.</p>\n<pre><code class=\"language-python\">from pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    POSTGRES_USER: str\n    POSTGRES_PASSWORD: str\n    POSTGRES_HOST: str\n    POSTGRES_PORT: str\n    POSTGRES_DB: str\n\n    class Config:\n        env_file = \".env\"\n\nsettings = Settings()\n</code></pre>\n<p>이제 <code>settings.POSTGRES_USER</code> 이런 식으로 환경 변수를 불러올 수 있어요! 🎉</p>\n<hr>\n<h2 id=\"heading-6\"><strong>5. 데이터베이스 연결 설정 (database.py 만들기)</strong></h2>\n<p>이제 본격적으로 <strong>PostgreSQL</strong>과 연결할 <code>database.py</code> 파일을 만들어볼게요.</p>\n<pre><code class=\"language-python\">from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nfrom ..config import settings\nfrom urllib.parse import quote_plus\n\n# URL 인코딩을 사용한 DB 연결 문자열 만들기\npassword = quote_plus(settings.POSTGRES_PASSWORD)\nDATABASE_URL = f\"postgresql://{settings.POSTGRES_USER}:{password}@{settings.POSTGRES_HOST}:{settings.POSTGRES_PORT}/{settings.POSTGRES_DB}\"\n\n# SQLAlchemy 엔진 생성\nengine = create_engine(\n    DATABASE_URL,\n    echo=True,  # SQL 쿼리 로그 확인용\n    pool_pre_ping=True,\n    connect_args={'application_name': 'gig_crawler'}\n)\n\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n</code></pre>\n<hr>\n<h2 id=\"heading-7\"><strong>6. FastAPI 앱 설정 (main.py 만들기)</strong></h2>\n<p>이제 FastAPI 서버를 실행할 <code>main.py</code> 파일을 만들어봅시다.</p>\n<pre><code class=\"language-python\">from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp = FastAPI(title=\"Project Crawler API\")\n\n# CORS 설정\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:3000\"],  # 프론트엔드 도메인\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Hello, FastAPI &amp; PostgreSQL!\"}\n</code></pre>\n<p>이제 <code>http://localhost:8000/</code> 에 접속하면 <strong>\"Hello, FastAPI &amp; PostgreSQL!\"</strong> 메시지가 나와야 해요!</p>\n<hr>\n<h2 id=\"heading-8\"><strong>7. PostgreSQL 데이터베이스 생성하기</strong></h2>\n<p>이제 PostgreSQL에서 사용할 데이터베이스를 만들어봅시다.<br>\n터미널에서 <code>psql</code>을 실행한 다음, 아래 명령어를 입력하세요.</p>\n<pre><code class=\"language-sql\">CREATE DATABASE gig_crawler WITH ENCODING 'UTF8' LC_COLLATE='Korean_Korea.949' LC_CTYPE='Korean_Korea.949';\n</code></pre>\n<p>이제 데이터베이스가 준비되었습니다! 🎉</p>\n<hr>\n<h2 id=\"heading-9\"><strong>8. 서버 실행하기! 🚀</strong></h2>\n<p>이제 마지막 단계입니다!<br>\n아래 명령어를 실행해서 FastAPI 서버를 켜볼까요?</p>\n<pre><code class=\"language-bash\">uvicorn app.main:app --reload\n</code></pre>\n<p>터미널에 <strong>\"Uvicorn running on <a href=\"http://127.0.0.1:8000\">http://127.0.0.1:8000</a>\"</strong> 이런 메시지가 나오면 성공이에요!<br>\n이제 브라우저에서 <code>http://127.0.0.1:8000/docs</code> 로 들어가면 API 문서도 자동으로 생성된 걸 확인할 수 있어요.</p>\n<hr>\n<h2 id=\"heading-10\"><strong>마무리 🎯</strong></h2>\n<p>지금까지 <strong>FastAPI + PostgreSQL</strong> 연동을 설정해봤어요!<br>\n혹시 실행하면서 문제가 생기면 아래 사항을 다시 확인해보세요.</p>\n<p>✅ <code>.env</code> 파일을 UTF-8로 저장했나요?<br>\n✅ PostgreSQL 서버가 실행 중인가요?<br>\n✅ 데이터베이스가 생성되어 있나요?<br>\n✅ <code>uvicorn app.main:app --reload</code> 명령어를 실행했나요?</p>\n<p>이제 여기에 <strong>CRUD API</strong>를 추가해서 원하는 프로젝트를 만들어보세요! 💡<br>\n궁금한 점 있으면 언제든지 질문하세요~! 😃</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "프로젝트 시작하기: FastAPI와 PostgreSQL 환경 설정 🛠️",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "FastAPI와 PostgreSQL을 연동하는 가장 쉬운 방법! 🚀",
            "level": 3,
            "isMainTopic": false,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "1. 프로젝트 기본 구조 만들기",
            "level": 2,
            "isMainTopic": true,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "2. 필요한 패키지 설치하기",
            "level": 2,
            "isMainTopic": true,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "3. 환경 변수 설정 (.env 파일 만들기)",
            "level": 2,
            "isMainTopic": true,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "4. 설정 관리 (config.py 만들기)",
            "level": 2,
            "isMainTopic": true,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "5. 데이터베이스 연결 설정 (database.py 만들기)",
            "level": 2,
            "isMainTopic": true,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "6. FastAPI 앱 설정 (main.py 만들기)",
            "level": 2,
            "isMainTopic": true,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "7. PostgreSQL 데이터베이스 생성하기",
            "level": 2,
            "isMainTopic": true,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "8. 서버 실행하기! 🚀",
            "level": 2,
            "isMainTopic": true,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "마무리 🎯",
            "level": 2,
            "isMainTopic": true,
            "position": 500
          }
        ]
      },
      "en": {
        "title": "Outsourcing Crawler Development using FastAPI and PostgreSQL",
        "description": "Building a crawler system to collect project information from domestic and international freelance platforms using FastAPI and PostgreSQL",
        "content": "<h1 id=\"heading-0\">Getting Started: Setting up FastAPI and PostgreSQL Environment 🛠️</h1>\n<p>Hello! Today I'll share how I set up the FastAPI and PostgreSQL environment for developing a freelance project crawler.</p>\n<h3 id=\"heading-1\"><strong>The Easiest Way to Connect FastAPI and PostgreSQL! 🚀</strong></h3>\n<p>Hi there! I'll explain how to connect <strong>FastAPI</strong> and <strong>PostgreSQL</strong> in a simple way.\nNew to <strong>FastAPI</strong>? Don't worry! You'll understand quickly if you follow along step by step. 😃</p>\n<hr>\n<h2 id=\"heading-2\"><strong>1. Creating Basic Project Structure</strong></h2>\n<p>First, let's organize the project folder like this:</p>\n<pre><code>backend/\n├── .env                  # environment variable settings\n├── requirements.txt      # list of required packages\n└── app/\n    ├── main.py          # FastAPI main application\n    ├── config.py        # configuration file\n    ├── models/          # SQLAlchemy model files\n    ├── schemas/         # Pydantic schema files\n    ├── api/             # API endpoints\n    └── db/              # database related files\n</code></pre>\n<p>Let's set it up one by one! 😊</p>\n<hr>\n<h2 id=\"heading-3\"><strong>2. Install Required Packages</strong></h2>\n<p>To connect FastAPI and PostgreSQL, we need several packages.<br>\nFirst, create the <code>requirements.txt</code> file and add the following contents.</p>\n<pre><code class=\"language-text\">fastapi==0.104.1\nuvicorn==0.24.0\nsqlalchemy==2.0.23\npydantic==2.5.2\npydantic-settings==2.1.0\npython-dotenv==1.0.0\npsycopg2-binary==2.9.9\n</code></pre>\n<p>Run the following command in the terminal to install all packages at once! 🎯</p>\n<pre><code class=\"language-bash\">pip install -r requirements.txt\n</code></pre>\n<hr>\n<h2 id=\"heading-4\"><strong>3. Setting up environment variables (create .env file)</strong></h2>\n<p>We will save the PostgreSQL connection information in the <code>.env</code> file.<br>\nCreate the <code>.env</code> file and input the following contents.</p>\n<pre><code class=\"language-env\">POSTGRES_USER=postgres\nPOSTGRES_PASSWORD=postgres123\nPOSTGRES_HOST=localhost\nPOSTGRES_PORT=5432\nPOSTGRES_DB=gig_crawler\n</code></pre>\n<p><strong>✅ Why do we set it up this way?</strong><br>\n👉 To ensure security and maintainability, it is better to manage the DB information in the code as environment variables rather than directly in the code.</p>\n<hr>\n<h2 id=\"heading-5\"><strong>4. Setting up configuration (create config.py file)</strong></h2>\n<p>Let's create the <code>config.py</code> file to get the environment variables from the <code>.env</code> file.</p>\n<pre><code class=\"language-python\">from pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    POSTGRES_USER: str\n    POSTGRES_PASSWORD: str\n    POSTGRES_HOST: str\n    POSTGRES_PORT: str\n    POSTGRES_DB: str\n\n    class Config:\n        env_file = \".env\"\n\nsettings = Settings()\n</code></pre>\n<p>Now, we can get the environment variables like <code>settings.POSTGRES_USER</code>! 🎉</p>\n<hr>\n<h2 id=\"heading-6\"><strong>5. Setting up database connection (create database.py file)</strong></h2>\n<p>Let's create the <code>database.py</code> file to connect to <strong>PostgreSQL</strong>.</p>\n<pre><code class=\"language-python\">from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nfrom ..config import settings\nfrom urllib.parse import quote_plus\n\n# Create a database connection string using URL encoding\npassword = quote_plus(settings.POSTGRES_PASSWORD)\nDATABASE_URL = f\"postgresql://{settings.POSTGRES_USER}:{password}@{settings.POSTGRES_HOST}:{settings.POSTGRES_PORT}/{settings.POSTGRES_DB}\"\n\n# Create an SQLAlchemy engine\nengine = create_engine(\n    DATABASE_URL,\n    echo=True,  # For checking SQL queries\n    pool_pre_ping=True,\n    connect_args={'application_name': 'gig_crawler'}\n)\n\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n</code></pre>\n<hr>\n<h2 id=\"heading-7\"><strong>6. Setting up FastAPI app (create main.py file)</strong></h2>\n<p>Let's create the <code>main.py</code> file to run the FastAPI server.</p>\n<pre><code class=\"language-python\">from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp = FastAPI(title=\"Project Crawler API\")\n\n# CORS settings\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:3000\"],  # frontend domain\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Hello, FastAPI &amp; PostgreSQL!\"}\n</code></pre>\n<p>Now, if you access <code>http://localhost:8000/</code>, you should see the <strong>\"Hello, FastAPI &amp; PostgreSQL!\"</strong> message!</p>\n<hr>\n<h2 id=\"heading-8\"><strong>7. Create a PostgreSQL database</strong></h2>\n<p>Let's create the database to be used in PostgreSQL.<br>\nRun <code>psql</code> in the terminal and input the following command.</p>\n<pre><code class=\"language-sql\">CREATE DATABASE gig_crawler WITH ENCODING 'UTF8' LC_COLLATE='Korean_Korea.949' LC_CTYPE='Korean_Korea.949';\n</code></pre>\n<p>Now, the database is ready! 🎉</p>\n<hr>\n<h2 id=\"heading-9\"><strong>8. Run the server! 🚀</strong></h2>\n<p>This is the final step!<br>\nRun the following command to turn on the FastAPI server.</p>\n<pre><code class=\"language-bash\">uvicorn app.main:app --reload\n</code></pre>\n<p>The terminal should show <strong>\"Uvicorn running on <a href=\"http://127.0.0.1:8000\">http://127.0.0.1:8000</a>\"</strong> message.<br>\nNow, if you access <code>http://127.0.0.1:8000/docs</code>, you can see the API documentation automatically generated.</p>\n<hr>\n<h2 id=\"heading-10\"><strong>9. Conclusion 🎯</strong></h2>\n<p>So far, we've set up the <strong>FastAPI + PostgreSQL</strong> connection!<br>\nIf you encounter any issues while running, please check the following:</p>\n<p>✅ Did you save the <code>.env</code> file in UTF-8?<br>\n✅ Is the PostgreSQL server running?<br>\n✅ Is the database created?<br>\n✅ Did you run the <code>uvicorn app.main:app --reload</code> command?</p>\n<p>Now, add <strong>CRUD API</strong> to this and create the project you want! 💡<br>\nIf you have any questions, feel free to ask anytime! 😃</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "Getting Started: Setting up FastAPI and PostgreSQL Environment 🛠️",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "The Easiest Way to Connect FastAPI and PostgreSQL! 🚀",
            "level": 3,
            "isMainTopic": false,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "1. Creating Basic Project Structure",
            "level": 2,
            "isMainTopic": true,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "2. Install Required Packages",
            "level": 2,
            "isMainTopic": true,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "3. Setting up environment variables (create .env file)",
            "level": 2,
            "isMainTopic": true,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "4. Setting up configuration (create config.py file)",
            "level": 2,
            "isMainTopic": true,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "5. Setting up database connection (create database.py file)",
            "level": 2,
            "isMainTopic": true,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "6. Setting up FastAPI app (create main.py file)",
            "level": 2,
            "isMainTopic": true,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "7. Create a PostgreSQL database",
            "level": 2,
            "isMainTopic": true,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "8. Run the server! 🚀",
            "level": 2,
            "isMainTopic": true,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "9. Conclusion 🎯",
            "level": 2,
            "isMainTopic": true,
            "position": 500
          }
        ]
      }
    },
    "imageHeights": {}
  },
  {
    "id": "gig_crawler_2",
    "title": "FastAPI와 PostgreSQL을 활용한 아웃소싱 크롤러 개발",
    "content": "\n# SQLAlchemy로 데이터베이스 비동기 처리 구현하기 🔄\n\n안녕하세요! 오늘은 FastAPI 크롤러 프로젝트에서 **데이터베이스 비동기 처리**를 어떻게 구현했는지 자세히 공유해볼게요.\n\n## 1. 들어가며 🎯\n\n요즘 웹 개발에서 비동기 처리는 정말 중요한 요소가 되었어요. 특히 크롤러처럼 데이터를 많이 다루는 애플리케이션에서는 더욱 그렇죠! 이번 글에서는 제가 SQLAlchemy를 사용해서 비동기 데이터베이스 처리를 구현한 경험을 나눠볼게요.\n\n## 2. 왜 비동기 처리가 필요했나요? 🤔\n\n기존에 동기 방식으로 처리했을 때 몇 가지 문제점이 있었어요:\n\n1. **응답 지연**: 데이터베이스 응답을 기다리는 동안 다른 작업을 못했어요\n2. **자원 낭비**: 서버 리소스가 효율적으로 사용되지 못했죠\n3. **확장성 한계**: 동시에 많은 요청이 들어오면 처리가 힘들었어요\n\n이런 문제들을 해결하기 위해 비동기 처리 도입이 필요했답니다!\n\n---\n\n## 3. SQLAlchemy 비동기 설정\n\n### 3.1 기존 동기 방식의 문제점\n\n일반적으로 SQLAlchemy는 동기 방식으로 작동합니다. 하지만 동기 방식의 문제점은 다음과 같습니다.\n\n- **I/O 블로킹**: 데이터베이스에서 응답을 받을 때까지 애플리케이션이 대기해야 함\n- **성능 저하**: 많은 요청이 동시에 들어오면 응답 시간이 길어짐\n- **확장성 부족**: 다중 작업을 효과적으로 처리하기 어려움\n\n이를 해결하기 위해 **SQLAlchemy 비동기 모드**를 활용할 수 있습니다.\n\n---\n\n### 3.2 SQLAlchemy 비동기 설정 방법\n\n#### 1) 비동기 엔진 생성 (`create_async_engine`)\n\n```python\nfrom sqlalchemy.ext.asyncio import create_async_engine\n\nDATABASE_URL = \"postgresql+asyncpg://user:password@localhost/dbname\"\nengine = create_async_engine(DATABASE_URL, echo=True)\n```\n\n#### 2) 비동기 세션 생성 (`async_session`)\n\n```python\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.orm import sessionmaker\n\nasync_session = sessionmaker(\n    bind=engine,\n    class_=AsyncSession,\n    expire_on_commit=False\n)\n```\n\n#### 3) 데이터베이스 작업 예제 (비동기 방식)\n\n```python\nfrom models import User  # 가정한 모델\n\nasync def get_user_by_id(user_id: int):\n    async with async_session() as session:\n        result = await session.get(User, user_id)\n        return result\n```\n\n위 예제에서는 `async_session`을 사용하여 비동기적으로 데이터베이스에서 사용자를 조회합니다.\n\n---\n\n## 4. 기존 동기 방식과 비교\n\n| 방식                  | 장점                        | 단점                        |\n| --------------------- | --------------------------- | --------------------------- |\n| 동기 (Synchronous)    | 간단한 코드, 익숙한 패턴    | 응답 속도 저하, 확장성 부족 |\n| 비동기 (Asynchronous) | 빠른 응답, 높은 동시성 처리 | 설정이 다소 복잡함          |\n\n비동기 방식은 특히 **대량의 요청을 처리하는 API 서버**나 **크롤러**를 운영할 때 매우 유용합니다.\n\n---\n\n## 5. 마치며\n\n이번 글에서는 SQLAlchemy의 비동기 설정 방법을 살펴보았습니다. 다음 글에서는 `database.py`를 비동기 방식으로 변경하고, **세션 관리 코드 통합**에 대해 다뤄보겠습니다! ��\n\n다음 글에서 만나요! 😊\n",
    "date": "2025-02-12",
    "category": "backend",
    "tags": [
      "FastAPI",
      "PostgreSQL",
      "Python",
      "Crawler",
      "asyncio",
      "SQLAlchemy",
      "비동기처리",
      "데이터수집",
      "실시간처리"
    ],
    "thumbnail": "/images/fastapi.png",
    "translations": {
      "ko": {
        "title": "FastAPI와 PostgreSQL을 활용한 아웃소싱 크롤러 개발",
        "description": "프리랜서 플랫폼의 프로젝트 정보를 실시간으로 수집하고 분석하는 크롤러를 만들어보았어요. FastAPI의 비동기 처리와 PostgreSQL의 강력한 기능을 활용해서 효율적인 시스템을 구축했답니다! 🚀",
        "content": "<h1 id=\"heading-0\">SQLAlchemy로 데이터베이스 비동기 처리 구현하기 🔄</h1>\n<p>안녕하세요! 오늘은 FastAPI 크롤러 프로젝트에서 <strong>데이터베이스 비동기 처리</strong>를 어떻게 구현했는지 자세히 공유해볼게요.</p>\n<h2 id=\"heading-1\">1. 들어가며 🎯</h2>\n<p>요즘 웹 개발에서 비동기 처리는 정말 중요한 요소가 되었어요. 특히 크롤러처럼 데이터를 많이 다루는 애플리케이션에서는 더욱 그렇죠! 이번 글에서는 제가 SQLAlchemy를 사용해서 비동기 데이터베이스 처리를 구현한 경험을 나눠볼게요.</p>\n<h2 id=\"heading-2\">2. 왜 비동기 처리가 필요했나요? 🤔</h2>\n<p>기존에 동기 방식으로 처리했을 때 몇 가지 문제점이 있었어요:</p>\n<ol>\n<li><strong>응답 지연</strong>: 데이터베이스 응답을 기다리는 동안 다른 작업을 못했어요</li>\n<li><strong>자원 낭비</strong>: 서버 리소스가 효율적으로 사용되지 못했죠</li>\n<li><strong>확장성 한계</strong>: 동시에 많은 요청이 들어오면 처리가 힘들었어요</li>\n</ol>\n<p>이런 문제들을 해결하기 위해 비동기 처리 도입이 필요했답니다!</p>\n<hr>\n<h2 id=\"heading-3\">3. SQLAlchemy 비동기 설정</h2>\n<h3 id=\"heading-4\">3.1 기존 동기 방식의 문제점</h3>\n<p>일반적으로 SQLAlchemy는 동기 방식으로 작동합니다. 하지만 동기 방식의 문제점은 다음과 같습니다.</p>\n<ul>\n<li><strong>I/O 블로킹</strong>: 데이터베이스에서 응답을 받을 때까지 애플리케이션이 대기해야 함</li>\n<li><strong>성능 저하</strong>: 많은 요청이 동시에 들어오면 응답 시간이 길어짐</li>\n<li><strong>확장성 부족</strong>: 다중 작업을 효과적으로 처리하기 어려움</li>\n</ul>\n<p>이를 해결하기 위해 <strong>SQLAlchemy 비동기 모드</strong>를 활용할 수 있습니다.</p>\n<hr>\n<h3 id=\"heading-5\">3.2 SQLAlchemy 비동기 설정 방법</h3>\n<h4 id=\"heading-6\">1) 비동기 엔진 생성 (<code>create_async_engine</code>)</h4>\n<pre><code class=\"language-python\">from sqlalchemy.ext.asyncio import create_async_engine\n\nDATABASE_URL = \"postgresql+asyncpg://user:password@localhost/dbname\"\nengine = create_async_engine(DATABASE_URL, echo=True)\n</code></pre>\n<h4 id=\"heading-7\">2) 비동기 세션 생성 (<code>async_session</code>)</h4>\n<pre><code class=\"language-python\">from sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.orm import sessionmaker\n\nasync_session = sessionmaker(\n    bind=engine,\n    class_=AsyncSession,\n    expire_on_commit=False\n)\n</code></pre>\n<h4 id=\"heading-8\">3) 데이터베이스 작업 예제 (비동기 방식)</h4>\n<pre><code class=\"language-python\">from models import User  # 가정한 모델\n\nasync def get_user_by_id(user_id: int):\n    async with async_session() as session:\n        result = await session.get(User, user_id)\n        return result\n</code></pre>\n<p>위 예제에서는 <code>async_session</code>을 사용하여 비동기적으로 데이터베이스에서 사용자를 조회합니다.</p>\n<hr>\n<h2 id=\"heading-9\">4. 기존 동기 방식과 비교</h2>\n<table class=\"markdown-table\">\n<thead>\n<tr>\n<th>방식</th>\n<th>장점</th>\n<th>단점</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>동기 (Synchronous)</td>\n<td>간단한 코드, 익숙한 패턴</td>\n<td>응답 속도 저하, 확장성 부족</td>\n</tr>\n<tr>\n<td>비동기 (Asynchronous)</td>\n<td>빠른 응답, 높은 동시성 처리</td>\n<td>설정이 다소 복잡함</td>\n</tr>\n</tbody>\n</table>\n<p>비동기 방식은 특히 <strong>대량의 요청을 처리하는 API 서버</strong>나 <strong>크롤러</strong>를 운영할 때 매우 유용합니다.</p>\n<hr>\n<h2 id=\"heading-10\">5. 마치며</h2>\n<p>이번 글에서는 SQLAlchemy의 비동기 설정 방법을 살펴보았습니다. 다음 글에서는 <code>database.py</code>를 비동기 방식으로 변경하고, <strong>세션 관리 코드 통합</strong>에 대해 다뤄보겠습니다! ��</p>\n<p>다음 글에서 만나요! 😊</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "SQLAlchemy로 데이터베이스 비동기 처리 구현하기 🔄",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "1. 들어가며 🎯",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "2. 왜 비동기 처리가 필요했나요? 🤔",
            "level": 2,
            "isMainTopic": true,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "3. SQLAlchemy 비동기 설정",
            "level": 2,
            "isMainTopic": true,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "3.1 기존 동기 방식의 문제점",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "3.2 SQLAlchemy 비동기 설정 방법",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "1) 비동기 엔진 생성 (create_async_engine)",
            "level": 4,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "2) 비동기 세션 생성 (async_session)",
            "level": 4,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "3) 데이터베이스 작업 예제 (비동기 방식)",
            "level": 4,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "4. 기존 동기 방식과 비교",
            "level": 2,
            "isMainTopic": true,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "5. 마치며",
            "level": 2,
            "isMainTopic": true,
            "position": 500
          }
        ]
      },
      "en": {
        "title": "Building an Outsourcing Crawler with FastAPI and PostgreSQL",
        "description": "I created a crawler that collects and analyzes project information from freelance platforms in real-time. I built an efficient system using FastAPI's asynchronous processing and PostgreSQL's powerful features! 🚀",
        "content": "<h1 id=\"heading-0\">Implementing Asynchronous Database Operations with SQLAlchemy 🔄</h1>\n<p>Hello! Today I'll share in detail how I implemented <strong>asynchronous database operations</strong> in my FastAPI crawler project.</p>\n<h2 id=\"heading-1\">1. Introduction 🎯</h2>\n<p>Asynchronous processing has become a crucial element in modern web development. This is especially true for data-heavy applications like crawlers! In this post, I'll share my experience implementing asynchronous database operations using SQLAlchemy.</p>\n<h2 id=\"heading-2\">2. Why Did We Need Async Processing? 🤔</h2>\n<p>When using synchronous processing, we faced several issues:</p>\n<ol>\n<li><strong>Response Delays</strong>: Couldn't perform other tasks while waiting for database responses</li>\n<li><strong>Resource Waste</strong>: Server resources weren't being used efficiently</li>\n<li><strong>Scalability Limits</strong>: Struggled to handle many concurrent requests</li>\n</ol>\n<p>These problems made it necessary to implement asynchronous processing!</p>\n<hr>\n<h2 id=\"heading-3\">3. SQLAlchemy Async Configuration</h2>\n<h3 id=\"heading-4\">3.1 Issues with Traditional Synchronous Approach</h3>\n<p>SQLAlchemy typically operates synchronously. However, this synchronous approach has several drawbacks:</p>\n<ul>\n<li><strong>I/O Blocking</strong>: Application must wait for database responses</li>\n<li><strong>Performance Degradation</strong>: Response times increase with concurrent requests</li>\n<li><strong>Limited Scalability</strong>: Difficulty handling multiple operations effectively</li>\n</ul>\n<p>We can address these issues using <strong>SQLAlchemy's async mode</strong>.</p>\n<hr>\n<h3 id=\"heading-5\">3.2 Setting Up SQLAlchemy for Async Operations</h3>\n<h4 id=\"heading-6\">1) Creating an Async Engine (<code>create_async_engine</code>)</h4>\n<pre><code class=\"language-python\">from sqlalchemy.ext.asyncio import create_async_engine\n\nDATABASE_URL = \"postgresql+asyncpg://user:password@localhost/dbname\"\nengine = create_async_engine(DATABASE_URL, echo=True)\n</code></pre>\n<h4 id=\"heading-7\">2) Creating an Async Session (<code>async_session</code>)</h4>\n<pre><code class=\"language-python\">from sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.orm import sessionmaker\n\nasync_session = sessionmaker(\n    bind=engine,\n    class_=AsyncSession,\n    expire_on_commit=False\n)\n</code></pre>\n<h4 id=\"heading-8\">3) Database Operation Example (Async Mode)</h4>\n<pre><code class=\"language-python\">from models import User  # assumed model\n\nasync def get_user_by_id(user_id: int):\n    async with async_session() as session:\n        result = await session.get(User, user_id)\n        return result\n</code></pre>\n<p>In the example above, we use <code>async_session</code> to asynchronously retrieve a user from the database.</p>\n<hr>\n<h2 id=\"heading-9\">4. Comparison with Traditional Synchronous Approach</h2>\n<table class=\"markdown-table\">\n<thead>\n<tr>\n<th>Approach</th>\n<th>Pros</th>\n<th>Cons</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Synchronous (Sync)</td>\n<td>Simple code, familiar pattern</td>\n<td>Slow response, limited scalability</td>\n</tr>\n<tr>\n<td>Asynchronous (Async)</td>\n<td>Fast response, high concurrency</td>\n<td>Slightly complex setup</td>\n</tr>\n</tbody>\n</table>\n<p>Asynchronous processing is particularly useful when handling <strong>API servers</strong> or <strong>crawlers</strong> that require <strong>large amounts of requests</strong>.</p>\n<hr>\n<h2 id=\"heading-10\">5. Conclusion</h2>\n<p>In this post, we looked at the SQLAlchemy asynchronous configuration method. Next, we'll cover <strong>integrating session management code</strong> and <strong>changing <code>database.py</code> to asynchronous mode</strong>.</p>\n<p>See you next time! 😊</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "Implementing Asynchronous Database Operations with SQLAlchemy 🔄",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "1. Introduction 🎯",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "2. Why Did We Need Async Processing? 🤔",
            "level": 2,
            "isMainTopic": true,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "3. SQLAlchemy Async Configuration",
            "level": 2,
            "isMainTopic": true,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "3.1 Issues with Traditional Synchronous Approach",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "3.2 Setting Up SQLAlchemy for Async Operations",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "1) Creating an Async Engine (create_async_engine)",
            "level": 4,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "2) Creating an Async Session (async_session)",
            "level": 4,
            "isMainTopic": false,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "3) Database Operation Example (Async Mode)",
            "level": 4,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "4. Comparison with Traditional Synchronous Approach",
            "level": 2,
            "isMainTopic": true,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "5. Conclusion",
            "level": 2,
            "isMainTopic": true,
            "position": 500
          }
        ]
      }
    },
    "imageHeights": {}
  },
  {
    "id": "gig_crawler_3",
    "title": "FastAPI와 PostgreSQL을 활용한 아웃소싱 크롤러 개발",
    "content": "\n# database.py를 비동기 방식으로 변경하고 세션 관리 통합하기\n\n안녕하세요, 여러분!  \n지난 번 글에서는 SQLAlchemy의 비동기 설정에 대해 알아보았는데요, 오늘은 그 연장선상에서 **database.py** 파일을 어떻게 비동기 방식으로 변경하고, **세션 관리 코드를 통합**할 수 있는지 자세히 설명해 드리려고 해요.\n\n비동기 처리를 도입하면 데이터베이스 작업 시 기다리는 시간을 줄이고, 여러 요청을 동시에 효율적으로 처리할 수 있답니다. 한 번 차근차근 살펴볼게요!\n\n---\n\n## 1. 왜 비동기 방식일까요?\n\n먼저, 동기 방식과 비동기 방식의 차이를 간단히 짚어보겠습니다.\n\n- **동기 방식:**  \n  데이터베이스에 요청하면 결과가 반환될 때까지 기다리게 됩니다. 그래서 요청이 많은 경우, 한 작업이 끝날 때까지 다른 작업이 대기하는 문제가 발생할 수 있어요.\n- **비동기 방식:**  \n  데이터베이스 요청을 보낸 후에도 다른 작업을 동시에 진행할 수 있습니다. 즉, 한 작업이 끝날 때까지 기다리지 않고, 효율적으로 여러 작업을 처리할 수 있게 해줍니다.\n\n비동기 처리를 통해 우리 애플리케이션의 응답 속도와 동시 처리 능력을 크게 향상시킬 수 있어요!\n\n---\n\n## 2. 기존 동기 방식의 database.py\n\n우리의 기존 **database.py**는 동기 방식으로 작성되어 있었어요. 예를 들어, 아래와 같이 데이터베이스 엔진과 세션을 생성했었죠:\n\n```python\n# 기존 database.py (동기 방식)\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\nDATABASE_URL = \"postgresql://user:password@localhost/dbname\"\n\nengine = create_engine(DATABASE_URL, echo=True)\nSessionLocal = sessionmaker(bind=engine)\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n```\n\n이 방식은 구현이 간단하다는 장점이 있지만, 많은 요청이 들어올 때는 **I/O 블로킹** 현상이 발생하여 성능 저하의 원인이 되곤 합니다.\n\n---\n\n## 3. 비동기 방식으로 변경하기\n\n이제 비동기 방식으로 전환해 볼 건데요, 주요 변경 사항을 하나씩 짚어보겠습니다.\n\n### 3.1. 비동기 엔진 생성하기\n\n동기 방식 대신 `sqlalchemy.ext.asyncio` 모듈의 `create_async_engine` 함수를 사용하여 비동기 엔진을 생성합니다.  \n먼저 데이터베이스 URL에 `+asyncpg`를 추가해서 비동기 드라이버를 사용하도록 합니다.\n\n```python\nfrom sqlalchemy.ext.asyncio import create_async_engine\n\nDATABASE_URL = \"postgresql+asyncpg://user:password@localhost/dbname\"\nengine = create_async_engine(DATABASE_URL, echo=True)\n```\n\n이제 엔진은 비동기 처리를 위해 최적화되어 준비되었어요!\n\n### 3.2. 비동기 세션 생성 및 통합\n\n다음으로, 비동기 세션을 생성하기 위해 `AsyncSession`과 `sessionmaker`를 활용합니다.  \n동기 코드와는 달리 `class_` 매개변수에 `AsyncSession`을 지정해주고, `expire_on_commit=False` 옵션을 사용해 세션의 만료를 방지합니다.\n\n```python\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.orm import sessionmaker\n\nasync_session = sessionmaker(\n    bind=engine,\n    class_=AsyncSession,\n    expire_on_commit=False\n)\n```\n\n이제 모든 데이터베이스 요청은 이 **비동기 세션**을 사용하게 됩니다.\n\n### 3.3. 비동기 세션 관리 함수 구현하기\n\n비동기 방식에서는 `async with` 구문을 활용해 세션을 안전하게 열고 닫는 것이 중요해요.  \n아래와 같이 `get_db` 함수를 비동기 제너레이터로 변경하여, 세션을 열고 사용 후 자동으로 종료하도록 구현할 수 있습니다.\n\n```python\nasync def get_db():\n    async with async_session() as session:\n        yield session\n```\n\n이 코드는 데이터베이스 작업이 끝나면 `async with` 블록이 종료되면서 세션을 깔끔하게 닫아줘요.  \n예외가 발생하더라도 자동으로 리소스가 정리되므로, 안정적인 운영이 가능합니다.\n\n---\n\n## 4. 통합 세션 관리의 장점\n\n이번에 세션 관리 코드를 통합하면서 얻을 수 있는 이점은 다음과 같습니다:\n\n- **코드의 간결함:**  \n  모든 데이터베이스 접근 시 동일한 비동기 세션 관리 로직을 사용하므로, 코드가 훨씬 깔끔해졌습니다.\n- **안정성 강화:**  \n  `async with`를 사용하면, 예외가 발생해도 세션이 자동으로 종료되어 리소스 누수가 없어요.\n- **유지보수 용이성:**  \n  세션 관리 코드가 한 곳에 모여 있으니, 향후 수정이나 확장이 필요할 때 한 곳만 관리하면 됩니다.\n\n---\n\n## 5. 마치며\n\n오늘은 **database.py** 파일을 비동기 방식으로 전환하고, 세션 관리 코드를 통합하는 방법을 살펴보았습니다.  \n이렇게 변경하면, 앞으로 API 서버나 크롤러에서 발생하는 데이터베이스 I/O 작업을 훨씬 더 효율적으로 처리할 수 있게 됩니다.\n\n다음 글에서는 **프로젝트 모델 개선 및 필드 업데이트**에 대해 다룰 예정이에요.\n\n여러분의 피드백이 큰 힘이 됩니다. 다음 글에서 또 만나요! 🚀\n\n---\n\n이 글이 도움이 되었길 바라며, 앞으로도 지속적으로 개선된 기술들을 공유할 예정입니다. 감사합니다!\n",
    "date": "2025-02-12",
    "category": "backend",
    "tags": [
      "FastAPI",
      "PostgreSQL",
      "Python",
      "Crawler",
      "asyncio",
      "SQLAlchemy",
      "비동기처리",
      "데이터수집",
      "실시간처리"
    ],
    "thumbnail": "/images/fastapi.png",
    "translations": {
      "ko": {
        "title": "FastAPI와 PostgreSQL을 활용한 아웃소싱 크롤러 개발",
        "description": "프리랜서 플랫폼의 프로젝트 정보를 실시간으로 수집하고 분석하는 크롤러를 만들어보았어요. FastAPI의 비동기 처리와 PostgreSQL의 강력한 기능을 활용해서 효율적인 시스템을 구축했답니다! 🚀",
        "content": "<h1 id=\"heading-0\">database.py를 비동기 방식으로 변경하고 세션 관리 통합하기</h1>\n<p>안녕하세요, 여러분!<br>\n지난 번 글에서는 SQLAlchemy의 비동기 설정에 대해 알아보았는데요, 오늘은 그 연장선상에서 <strong>database.py</strong> 파일을 어떻게 비동기 방식으로 변경하고, <strong>세션 관리 코드를 통합</strong>할 수 있는지 자세히 설명해 드리려고 해요.</p>\n<p>비동기 처리를 도입하면 데이터베이스 작업 시 기다리는 시간을 줄이고, 여러 요청을 동시에 효율적으로 처리할 수 있답니다. 한 번 차근차근 살펴볼게요!</p>\n<hr>\n<h2 id=\"heading-1\">1. 왜 비동기 방식일까요?</h2>\n<p>먼저, 동기 방식과 비동기 방식의 차이를 간단히 짚어보겠습니다.</p>\n<ul>\n<li><strong>동기 방식:</strong><br>\n데이터베이스에 요청하면 결과가 반환될 때까지 기다리게 됩니다. 그래서 요청이 많은 경우, 한 작업이 끝날 때까지 다른 작업이 대기하는 문제가 발생할 수 있어요.</li>\n<li><strong>비동기 방식:</strong><br>\n데이터베이스 요청을 보낸 후에도 다른 작업을 동시에 진행할 수 있습니다. 즉, 한 작업이 끝날 때까지 기다리지 않고, 효율적으로 여러 작업을 처리할 수 있게 해줍니다.</li>\n</ul>\n<p>비동기 처리를 통해 우리 애플리케이션의 응답 속도와 동시 처리 능력을 크게 향상시킬 수 있어요!</p>\n<hr>\n<h2 id=\"heading-2\">2. 기존 동기 방식의 database.py</h2>\n<p>우리의 기존 <strong>database.py</strong>는 동기 방식으로 작성되어 있었어요. 예를 들어, 아래와 같이 데이터베이스 엔진과 세션을 생성했었죠:</p>\n<pre><code class=\"language-python\"># 기존 database.py (동기 방식)\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\nDATABASE_URL = \"postgresql://user:password@localhost/dbname\"\n\nengine = create_engine(DATABASE_URL, echo=True)\nSessionLocal = sessionmaker(bind=engine)\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre>\n<p>이 방식은 구현이 간단하다는 장점이 있지만, 많은 요청이 들어올 때는 <strong>I/O 블로킹</strong> 현상이 발생하여 성능 저하의 원인이 되곤 합니다.</p>\n<hr>\n<h2 id=\"heading-3\">3. 비동기 방식으로 변경하기</h2>\n<p>이제 비동기 방식으로 전환해 볼 건데요, 주요 변경 사항을 하나씩 짚어보겠습니다.</p>\n<h3 id=\"heading-4\">3.1. 비동기 엔진 생성하기</h3>\n<p>동기 방식 대신 <code>sqlalchemy.ext.asyncio</code> 모듈의 <code>create_async_engine</code> 함수를 사용하여 비동기 엔진을 생성합니다.<br>\n먼저 데이터베이스 URL에 <code>+asyncpg</code>를 추가해서 비동기 드라이버를 사용하도록 합니다.</p>\n<pre><code class=\"language-python\">from sqlalchemy.ext.asyncio import create_async_engine\n\nDATABASE_URL = \"postgresql+asyncpg://user:password@localhost/dbname\"\nengine = create_async_engine(DATABASE_URL, echo=True)\n</code></pre>\n<p>이제 엔진은 비동기 처리를 위해 최적화되어 준비되었어요!</p>\n<h3 id=\"heading-5\">3.2. 비동기 세션 생성 및 통합</h3>\n<p>다음으로, 비동기 세션을 생성하기 위해 <code>AsyncSession</code>과 <code>sessionmaker</code>를 활용합니다.<br>\n동기 코드와는 달리 <code>class_</code> 매개변수에 <code>AsyncSession</code>을 지정해주고, <code>expire_on_commit=False</code> 옵션을 사용해 세션의 만료를 방지합니다.</p>\n<pre><code class=\"language-python\">from sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.orm import sessionmaker\n\nasync_session = sessionmaker(\n    bind=engine,\n    class_=AsyncSession,\n    expire_on_commit=False\n)\n</code></pre>\n<p>이제 모든 데이터베이스 요청은 이 <strong>비동기 세션</strong>을 사용하게 됩니다.</p>\n<h3 id=\"heading-6\">3.3. 비동기 세션 관리 함수 구현하기</h3>\n<p>비동기 방식에서는 <code>async with</code> 구문을 활용해 세션을 안전하게 열고 닫는 것이 중요해요.<br>\n아래와 같이 <code>get_db</code> 함수를 비동기 제너레이터로 변경하여, 세션을 열고 사용 후 자동으로 종료하도록 구현할 수 있습니다.</p>\n<pre><code class=\"language-python\">async def get_db():\n    async with async_session() as session:\n        yield session\n</code></pre>\n<p>이 코드는 데이터베이스 작업이 끝나면 <code>async with</code> 블록이 종료되면서 세션을 깔끔하게 닫아줘요.<br>\n예외가 발생하더라도 자동으로 리소스가 정리되므로, 안정적인 운영이 가능합니다.</p>\n<hr>\n<h2 id=\"heading-7\">4. 통합 세션 관리의 장점</h2>\n<p>이번에 세션 관리 코드를 통합하면서 얻을 수 있는 이점은 다음과 같습니다:</p>\n<ul>\n<li><strong>코드의 간결함:</strong><br>\n모든 데이터베이스 접근 시 동일한 비동기 세션 관리 로직을 사용하므로, 코드가 훨씬 깔끔해졌습니다.</li>\n<li><strong>안정성 강화:</strong><br>\n<code>async with</code>를 사용하면, 예외가 발생해도 세션이 자동으로 종료되어 리소스 누수가 없어요.</li>\n<li><strong>유지보수 용이성:</strong><br>\n세션 관리 코드가 한 곳에 모여 있으니, 향후 수정이나 확장이 필요할 때 한 곳만 관리하면 됩니다.</li>\n</ul>\n<hr>\n<h2 id=\"heading-8\">5. 마치며</h2>\n<p>오늘은 <strong>database.py</strong> 파일을 비동기 방식으로 전환하고, 세션 관리 코드를 통합하는 방법을 살펴보았습니다.<br>\n이렇게 변경하면, 앞으로 API 서버나 크롤러에서 발생하는 데이터베이스 I/O 작업을 훨씬 더 효율적으로 처리할 수 있게 됩니다.</p>\n<p>다음 글에서는 <strong>프로젝트 모델 개선 및 필드 업데이트</strong>에 대해 다룰 예정이에요.</p>\n<p>여러분의 피드백이 큰 힘이 됩니다. 다음 글에서 또 만나요! 🚀</p>\n<hr>\n<p>이 글이 도움이 되었길 바라며, 앞으로도 지속적으로 개선된 기술들을 공유할 예정입니다. 감사합니다!</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "database.py를 비동기 방식으로 변경하고 세션 관리 통합하기",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "1. 왜 비동기 방식일까요?",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "2. 기존 동기 방식의 database.py",
            "level": 2,
            "isMainTopic": true,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "3. 비동기 방식으로 변경하기",
            "level": 2,
            "isMainTopic": true,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "3.1. 비동기 엔진 생성하기",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "3.2. 비동기 세션 생성 및 통합",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "3.3. 비동기 세션 관리 함수 구현하기",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "4. 통합 세션 관리의 장점",
            "level": 2,
            "isMainTopic": true,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "5. 마치며",
            "level": 2,
            "isMainTopic": true,
            "position": 400
          }
        ]
      },
      "en": {
        "title": "Building an Outsourcing Crawler with FastAPI and PostgreSQL",
        "description": "I created a crawler that collects and analyzes project information from freelance platforms in real-time. I built an efficient system using FastAPI's asynchronous processing and PostgreSQL's powerful features! 🚀",
        "content": "<h1 id=\"heading-0\">Converting database.py to Async and Integrating Session Management</h1>\n<p>Hello everyone!<br>\nIn our last post, we looked at SQLAlchemy's async configuration. Today, we'll dive deeper into how to convert our <strong>database.py</strong> file to async mode and integrate session management code.</p>\n<p>By introducing async processing, we can reduce database operation wait times and efficiently handle multiple requests simultaneously. Let's take a look step by step!</p>\n<hr>\n<h2 id=\"heading-1\">1. Why Async?</h2>\n<p>First, let's briefly cover the difference between synchronous and asynchronous approaches:</p>\n<ul>\n<li><strong>Synchronous:</strong><br>\nWhen making a database request, you have to wait for the result to return. This can cause bottlenecks when there are many requests, as other tasks must wait for the current one to complete.</li>\n<li><strong>Asynchronous:</strong><br>\nYou can continue with other tasks after sending a database request. This means you don't have to wait for one task to finish before starting another, allowing for more efficient handling of multiple operations.</li>\n</ul>\n<p>Async processing can significantly improve our application's response time and concurrent processing capabilities!</p>\n<hr>\n<h2 id=\"heading-2\">2. Original Synchronous database.py</h2>\n<p>Our original <strong>database.py</strong> was written synchronously. For example, we created the database engine and session like this:</p>\n<pre><code class=\"language-python\"># Original database.py (synchronous mode)\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\nDATABASE_URL = \"postgresql://user:password@localhost/dbname\"\n\nengine = create_engine(DATABASE_URL, echo=True)\nSessionLocal = sessionmaker(bind=engine)\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre>\n<p>This approach has the advantage of being simple to implement, but when many requests come in, <strong>I/O blocking</strong> occurs, causing performance degradation.</p>\n<hr>\n<h2 id=\"heading-3\">3. Change to Asynchronous Mode</h2>\n<p>Now, let's switch to the asynchronous mode. I'll go through the main changes one by one.</p>\n<h3 id=\"heading-4\">3.1. Create an Asynchronous Engine</h3>\n<p>Instead of using the synchronous <code>create_engine</code> function, use the <code>create_async_engine</code> function from the <code>sqlalchemy.ext.asyncio</code> module to create an asynchronous engine.<br>\nFirst, add <code>+asyncpg</code> to the database URL to use the asynchronous driver.</p>\n<pre><code class=\"language-python\">from sqlalchemy.ext.asyncio import create_async_engine\n\nDATABASE_URL = \"postgresql+asyncpg://user:password@localhost/dbname\"\nengine = create_async_engine(DATABASE_URL, echo=True)\n</code></pre>\n<p>Now, the engine is optimized for asynchronous processing and ready to go!</p>\n<h3 id=\"heading-5\">3.2. Create an Asynchronous Session</h3>\n<p>Next, use <code>AsyncSession</code> and <code>sessionmaker</code> to create an asynchronous session.<br>\nUnlike the synchronous code, specify <code>AsyncSession</code> in the <code>class_</code> parameter and use the <code>expire_on_commit=False</code> option to prevent the session from expiring.</p>\n<pre><code class=\"language-python\">from sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.orm import sessionmaker\n\nasync_session = sessionmaker(\n    bind=engine,\n    class_=AsyncSession,\n    expire_on_commit=False\n)\n</code></pre>\n<p>Now, all database requests will use this <strong>asynchronous session</strong>.</p>\n<h3 id=\"heading-6\">3.3. Implement the Asynchronous Session Management Function</h3>\n<p>In the asynchronous mode, it is important to safely open and close the session using the <code>async with</code> statement.<br>\nYou can implement it by changing the <code>get_db</code> function to an asynchronous generator, which opens the session, uses it, and automatically closes it after the operation is complete.</p>\n<pre><code class=\"language-python\">async def get_db():\n    async with async_session() as session:\n        yield session\n</code></pre>\n<p>This code ensures that the session is closed cleanly when the database operation is complete.<br>\nEven if an exception occurs, the resources are automatically cleaned up, ensuring stable operation.</p>\n<hr>\n<h2 id=\"heading-7\">4. Benefits of Integrating Session Management</h2>\n<p>When integrating the session management code, we can achieve the following benefits:</p>\n<ul>\n<li><strong>Clarity:</strong><br>\nAll database access uses the same asynchronous session management logic, making the code much cleaner.</li>\n<li><strong>Stability:</strong><br>\nUsing <code>async with</code> ensures that the session is automatically closed even if an exception occurs, preventing resource leaks.</li>\n<li><strong>Ease of Maintenance:</strong><br>\nThe session management code is all in one place, so it is easy to manage future modifications or extensions.</li>\n</ul>\n<hr>\n<h2 id=\"heading-8\">5. Conclusion</h2>\n<p>Today, we looked at how to convert the <strong>database.py</strong> file to asynchronous mode and integrate session management code.<br>\nBy doing this, we can handle database I/O operations in API servers or crawlers much more efficiently.</p>\n<p>Next, we will cover <strong>improving project models and updating fields</strong>.</p>\n<p>Your feedback is a great help! See you next time! 🚀</p>\n<hr>\n<p>I hope this article was helpful, and I will continue to share improved technologies. Thank you!</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "Converting database.py to Async and Integrating Session Management",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "1. Why Async?",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "2. Original Synchronous database.py",
            "level": 2,
            "isMainTopic": true,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "3. Change to Asynchronous Mode",
            "level": 2,
            "isMainTopic": true,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "3.1. Create an Asynchronous Engine",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "3.2. Create an Asynchronous Session",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "3.3. Implement the Asynchronous Session Management Function",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "4. Benefits of Integrating Session Management",
            "level": 2,
            "isMainTopic": true,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "5. Conclusion",
            "level": 2,
            "isMainTopic": true,
            "position": 400
          }
        ]
      }
    },
    "imageHeights": {}
  },
  {
    "id": "gig_crawler_4",
    "title": "FastAPI와 PostgreSQL을 활용한 아웃소싱 크롤러 개발",
    "content": "\n# 프로젝트 모델 개선: 구조 및 필드 정리하기\n\n안녕하세요, 여러분!  \n이전 글들에서는 데이터베이스의 비동기 처리와 세션 관리 통합에 대해 알아보았는데요, 이번 글에서는 **프로젝트 모델 개선**에 대해 이야기해보려고 합니다. 데이터 모델은 애플리케이션의 핵심인데, 잘 정리된 모델은 유지보수와 확장에 큰 도움을 줍니다. 그럼 차근차근 개선 포인트를 살펴볼까요?\n\n---\n\n## 1. 왜 모델 개선이 필요할까요?\n\n기존 모델을 사용하면서 몇 가지 문제점을 발견했어요. 예를 들어:\n\n- **budget 필드 하나로 관리:**  \n  한 번에 예산 정보를 관리하려다 보니, 최소/최대 예산 값을 따로 활용하기 어려웠어요.\n\n- **metadata라는 필드명:**  \n  SQLAlchemy에서는 `metadata`가 예약어로 사용되어, 다른 용도로 사용하면 충돌 위험이 있었습니다.\n\n- **새로운 요구사항 반영:**  \n  프로젝트 정보에 추가적으로 `currency`, `posted_date`, `deadline`, `skills` 등의 정보가 필요해졌습니다.\n\n이러한 이유로, 모델을 좀 더 세분화하고 명확하게 개선하고자 했어요.\n\n---\n\n## 2. 구체적인 개선 내용\n\n### 2.1 예산 필드 분리: budget_min & budget_max\n\n기존에는 하나의 `budget` 필드로 예산 정보를 저장했다면,  \n이제는 최소 예산과 최대 예산을 별도의 필드로 관리할 거예요.  \n이렇게 하면 검색, 필터링, 정렬 등에서 더 세밀하게 활용할 수 있습니다.\n\n```python\nfrom sqlalchemy import Column, Integer\n\nclass Project(Base):\n    __tablename__ = 'projects'\n\n    id = Column(Integer, primary_key=True, index=True)\n    # 기존 budget 필드 -> 두 개로 분리\n    budget_min = Column(Integer, nullable=False)\n    budget_max = Column(Integer, nullable=False)\n```\n\n### 2.2 예약어 충돌 해결: metadata → project_metadata\n\nSQLAlchemy의 예약어인 `metadata` 대신, 혼동 없이 사용할 수 있도록 `project_metadata`로 변경합니다.\n\n```python\nfrom sqlalchemy import Column, JSON\n\nclass Project(Base):\n    __tablename__ = 'projects'\n\n    id = Column(Integer, primary_key=True, index=True)\n    # 예약어 문제 해결을 위해 변경\n    project_metadata = Column(JSON, nullable=True)\n```\n\n### 2.3 새로운 필드 추가\n\n프로젝트의 세부 정보를 더욱 풍부하게 표현하기 위해 몇 가지 새로운 필드를 추가했습니다.\n\n- **currency:** 예산 단위를 나타내는 필드\n- **posted_date:** 프로젝트가 게시된 날짜\n- **deadline:** 프로젝트 마감 기한\n- **skills:** 프로젝트에 필요한 기술 스택 정보\n\n```python\nfrom sqlalchemy import Column, String, DateTime\nimport datetime\n\nclass Project(Base):\n    __tablename__ = 'projects'\n\n    id = Column(Integer, primary_key=True, index=True)\n    budget_min = Column(Integer, nullable=False)\n    budget_max = Column(Integer, nullable=False)\n    project_metadata = Column(JSON, nullable=True)\n\n    # 추가된 새로운 필드들\n    currency = Column(String, default='USD')\n    posted_date = Column(DateTime, default=datetime.datetime.utcnow)\n    deadline = Column(DateTime, nullable=True)\n    skills = Column(String, nullable=True)  # 예: \"Python, JavaScript, SQL\"\n```\n\n이렇게 모델을 개선하면, 데이터가 더 구조적이고 명확하게 관리되어 추후 쿼리나 데이터 분석 시에도 큰 도움이 됩니다.\n\n---\n\n## 3. 개선된 모델의 장점\n\n- **명확한 데이터 표현:**  \n  예산 정보를 최소/최대 값으로 분리하여 다양한 범위 검색 및 비교가 가능해집니다.\n- **예약어 충돌 방지:**  \n  `project_metadata`라는 명확한 필드명을 사용하여 SQLAlchemy 내 예약어와의 충돌을 피했습니다.\n- **확장성 있는 모델:**  \n  추가 필드를 통해 프로젝트 정보를 더욱 풍부하게 표현할 수 있고, 미래의 요구사항에도 유연하게 대응할 수 있습니다.\n\n---\n\n## 4. 마치며\n\n이번 글에서는 프로젝트 모델 개선에 대해 자세히 살펴보았습니다.  \n데이터베이스 모델을 체계적으로 관리하는 것은 애플리케이션의 장기적인 유지보수와 성능 개선에 큰 영향을 미칩니다.  \n앞으로 남은 글에서는 **크롤러 스케줄러 구현** 및 **암호화 시스템 도입** 등, 더 많은 개선 사항들을 소개할 예정이니 많은 기대 부탁드립니다!\n\n혹시 개선 포인트에 대해 추가로 의견이 있으시거나 질문이 있다면 언제든지 댓글로 남겨주세요. 여러분의 피드백이 큰 힘이 됩니다. 감사합니다! 🚀\n\n---\n\n다음 글에서 만나요!\n",
    "date": "2025-02-12",
    "category": "backend",
    "tags": [
      "FastAPI",
      "PostgreSQL",
      "Python",
      "Crawler",
      "asyncio",
      "SQLAlchemy",
      "비동기처리",
      "데이터수집",
      "실시간처리",
      "데이터모델링",
      "리팩토링",
      "ORM",
      "데이터구조"
    ],
    "thumbnail": "/images/fastapi.png",
    "translations": {
      "ko": {
        "title": "FastAPI와 PostgreSQL을 활용한 아웃소싱 크롤러 개발",
        "description": "크롤러 프로젝트의 데이터 모델을 개선하고 구조를 정리해보았어요! 예산 필드 분리, 메타데이터 필드 개선, 그리고 새로운 필드 추가로 더 체계적인 데이터 관리가 가능해졌답니다. 🔧",
        "content": "<h1 id=\"heading-0\">프로젝트 모델 개선: 구조 및 필드 정리하기</h1>\n<p>안녕하세요, 여러분!<br>\n이전 글들에서는 데이터베이스의 비동기 처리와 세션 관리 통합에 대해 알아보았는데요, 이번 글에서는 <strong>프로젝트 모델 개선</strong>에 대해 이야기해보려고 합니다. 데이터 모델은 애플리케이션의 핵심인데, 잘 정리된 모델은 유지보수와 확장에 큰 도움을 줍니다. 그럼 차근차근 개선 포인트를 살펴볼까요?</p>\n<hr>\n<h2 id=\"heading-1\">1. 왜 모델 개선이 필요할까요?</h2>\n<p>기존 모델을 사용하면서 몇 가지 문제점을 발견했어요. 예를 들어:</p>\n<ul>\n<li>\n<p><strong>budget 필드 하나로 관리:</strong><br>\n한 번에 예산 정보를 관리하려다 보니, 최소/최대 예산 값을 따로 활용하기 어려웠어요.</p>\n</li>\n<li>\n<p><strong>metadata라는 필드명:</strong><br>\nSQLAlchemy에서는 <code>metadata</code>가 예약어로 사용되어, 다른 용도로 사용하면 충돌 위험이 있었습니다.</p>\n</li>\n<li>\n<p><strong>새로운 요구사항 반영:</strong><br>\n프로젝트 정보에 추가적으로 <code>currency</code>, <code>posted_date</code>, <code>deadline</code>, <code>skills</code> 등의 정보가 필요해졌습니다.</p>\n</li>\n</ul>\n<p>이러한 이유로, 모델을 좀 더 세분화하고 명확하게 개선하고자 했어요.</p>\n<hr>\n<h2 id=\"heading-2\">2. 구체적인 개선 내용</h2>\n<h3 id=\"heading-3\">2.1 예산 필드 분리: budget_min &amp; budget_max</h3>\n<p>기존에는 하나의 <code>budget</code> 필드로 예산 정보를 저장했다면,<br>\n이제는 최소 예산과 최대 예산을 별도의 필드로 관리할 거예요.<br>\n이렇게 하면 검색, 필터링, 정렬 등에서 더 세밀하게 활용할 수 있습니다.</p>\n<pre><code class=\"language-python\">from sqlalchemy import Column, Integer\n\nclass Project(Base):\n    __tablename__ = 'projects'\n\n    id = Column(Integer, primary_key=True, index=True)\n    # 기존 budget 필드 -&gt; 두 개로 분리\n    budget_min = Column(Integer, nullable=False)\n    budget_max = Column(Integer, nullable=False)\n</code></pre>\n<h3 id=\"heading-4\">2.2 예약어 충돌 해결: metadata → project_metadata</h3>\n<p>SQLAlchemy의 예약어인 <code>metadata</code> 대신, 혼동 없이 사용할 수 있도록 <code>project_metadata</code>로 변경합니다.</p>\n<pre><code class=\"language-python\">from sqlalchemy import Column, JSON\n\nclass Project(Base):\n    __tablename__ = 'projects'\n\n    id = Column(Integer, primary_key=True, index=True)\n    # 예약어 문제 해결을 위해 변경\n    project_metadata = Column(JSON, nullable=True)\n</code></pre>\n<h3 id=\"heading-5\">2.3 새로운 필드 추가</h3>\n<p>프로젝트의 세부 정보를 더욱 풍부하게 표현하기 위해 몇 가지 새로운 필드를 추가했습니다.</p>\n<ul>\n<li><strong>currency:</strong> 예산 단위를 나타내는 필드</li>\n<li><strong>posted_date:</strong> 프로젝트가 게시된 날짜</li>\n<li><strong>deadline:</strong> 프로젝트 마감 기한</li>\n<li><strong>skills:</strong> 프로젝트에 필요한 기술 스택 정보</li>\n</ul>\n<pre><code class=\"language-python\">from sqlalchemy import Column, String, DateTime\nimport datetime\n\nclass Project(Base):\n    __tablename__ = 'projects'\n\n    id = Column(Integer, primary_key=True, index=True)\n    budget_min = Column(Integer, nullable=False)\n    budget_max = Column(Integer, nullable=False)\n    project_metadata = Column(JSON, nullable=True)\n\n    # 추가된 새로운 필드들\n    currency = Column(String, default='USD')\n    posted_date = Column(DateTime, default=datetime.datetime.utcnow)\n    deadline = Column(DateTime, nullable=True)\n    skills = Column(String, nullable=True)  # 예: \"Python, JavaScript, SQL\"\n</code></pre>\n<p>이렇게 모델을 개선하면, 데이터가 더 구조적이고 명확하게 관리되어 추후 쿼리나 데이터 분석 시에도 큰 도움이 됩니다.</p>\n<hr>\n<h2 id=\"heading-6\">3. 개선된 모델의 장점</h2>\n<ul>\n<li><strong>명확한 데이터 표현:</strong><br>\n예산 정보를 최소/최대 값으로 분리하여 다양한 범위 검색 및 비교가 가능해집니다.</li>\n<li><strong>예약어 충돌 방지:</strong><br>\n<code>project_metadata</code>라는 명확한 필드명을 사용하여 SQLAlchemy 내 예약어와의 충돌을 피했습니다.</li>\n<li><strong>확장성 있는 모델:</strong><br>\n추가 필드를 통해 프로젝트 정보를 더욱 풍부하게 표현할 수 있고, 미래의 요구사항에도 유연하게 대응할 수 있습니다.</li>\n</ul>\n<hr>\n<h2 id=\"heading-7\">4. 마치며</h2>\n<p>이번 글에서는 프로젝트 모델 개선에 대해 자세히 살펴보았습니다.<br>\n데이터베이스 모델을 체계적으로 관리하는 것은 애플리케이션의 장기적인 유지보수와 성능 개선에 큰 영향을 미칩니다.<br>\n앞으로 남은 글에서는 <strong>크롤러 스케줄러 구현</strong> 및 <strong>암호화 시스템 도입</strong> 등, 더 많은 개선 사항들을 소개할 예정이니 많은 기대 부탁드립니다!</p>\n<p>혹시 개선 포인트에 대해 추가로 의견이 있으시거나 질문이 있다면 언제든지 댓글로 남겨주세요. 여러분의 피드백이 큰 힘이 됩니다. 감사합니다! 🚀</p>\n<hr>\n<p>다음 글에서 만나요!</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "프로젝트 모델 개선: 구조 및 필드 정리하기",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "1. 왜 모델 개선이 필요할까요?",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "2. 구체적인 개선 내용",
            "level": 2,
            "isMainTopic": true,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "2.1 예산 필드 분리: budget_min & budget_max",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "2.2 예약어 충돌 해결: metadata → project_metadata",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "2.3 새로운 필드 추가",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "3. 개선된 모델의 장점",
            "level": 2,
            "isMainTopic": true,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "4. 마치며",
            "level": 2,
            "isMainTopic": true,
            "position": 350
          }
        ]
      },
      "en": {
        "title": "Building an Outsourcing Crawler with FastAPI and PostgreSQL",
        "description": "I improved the data model and structure of the crawler project! With budget field separation, metadata field improvements, and new field additions, more systematic data management is now possible. 🔧",
        "content": "<h1 id=\"heading-0\">Project Model Improvement: Organizing Structure and Fields</h1>\n<p>Hello everyone!<br>\nIn previous posts, we looked at asynchronous database processing and session management integration. In this post, I'd like to discuss <strong>project model improvements</strong>. The data model is core to the application, and a well-organized model greatly helps with maintenance and scalability. Let's examine the improvement points step by step!</p>\n<hr>\n<h2 id=\"heading-1\">1. Why Do We Need Model Improvements?</h2>\n<p>We discovered several issues while using the existing model. For example:</p>\n<ul>\n<li>\n<p><strong>Managing budget in a single field:</strong><br>\nTrying to manage budget information in one field made it difficult to utilize minimum/maximum budget values separately.</p>\n</li>\n<li>\n<p><strong>Field name 'metadata':</strong><br>\nSince 'metadata' is a reserved word in SQLAlchemy, using it for other purposes could risk conflicts.</p>\n</li>\n<li>\n<p><strong>Reflecting new requirements:</strong><br>\nAdditional information like <code>currency</code>, <code>posted_date</code>, <code>deadline</code>, <code>skills</code> became necessary for project information.</p>\n</li>\n</ul>\n<p>For these reasons, we wanted to make the model more granular and clearer.</p>\n<hr>\n<h2 id=\"heading-2\">2. Specific Improvements</h2>\n<h3 id=\"heading-3\">2.1 Separating Budget Fields: budget_min &amp; budget_max</h3>\n<p>While we previously stored budget information in a single <code>budget</code> field,<br>\nwe'll now manage minimum and maximum budgets as separate fields.<br>\nThis allows for more precise usage in searching, filtering, and sorting.</p>\n<pre><code class=\"language-python\">from sqlalchemy import Column, Integer\n\nclass Project(Base):\n    __tablename__ = 'projects'\n\n    id = Column(Integer, primary_key=True, index=True)\n    # Existing budget field -&gt; split into two\n    budget_min = Column(Integer, nullable=False)\n    budget_max = Column(Integer, nullable=False)\n</code></pre>\n<h3 id=\"heading-4\">2.2 Resolving Reserved Word Collision: metadata → project_metadata</h3>\n<p>Instead of using the reserved word <code>metadata</code> in SQLAlchemy,<br>\nwe'll use <code>project_metadata</code> to avoid confusion.</p>\n<pre><code class=\"language-python\">from sqlalchemy import Column, JSON\n\nclass Project(Base):\n    __tablename__ = 'projects'\n\n    id = Column(Integer, primary_key=True, index=True)\n    # To resolve the reserved word problem, we'll change it\n    project_metadata = Column(JSON, nullable=True)\n</code></pre>\n<h3 id=\"heading-5\">2.3 Adding New Fields</h3>\n<p>To represent more detailed project information, we added several new fields.</p>\n<ul>\n<li><strong>currency:</strong> Field representing the budget unit</li>\n<li><strong>posted_date:</strong> Field representing the project posting date</li>\n<li><strong>deadline:</strong> Field representing the project deadline</li>\n<li><strong>skills:</strong> Field representing the technical stack needed for the project</li>\n</ul>\n<pre><code class=\"language-python\">from sqlalchemy import Column, String, DateTime\nimport datetime\n\nclass Project(Base):\n    __tablename__ = 'projects'\n\n    id = Column(Integer, primary_key=True, index=True)\n    budget_min = Column(Integer, nullable=False)\n    budget_max = Column(Integer, nullable=False)\n    project_metadata = Column(JSON, nullable=True)\n\n    # Added new fields\n    currency = Column(String, default='USD')\n    posted_date = Column(DateTime, default=datetime.datetime.utcnow)\n    deadline = Column(DateTime, nullable=True)\n    skills = Column(String, nullable=True)  # For example: \"Python, JavaScript, SQL\"\n</code></pre>\n<p>By improving the model, data is more structured and clearly managed, which will be helpful for future queries or data analysis.</p>\n<hr>\n<h2 id=\"heading-6\">3. Benefits of Improved Model</h2>\n<ul>\n<li><strong>Clear data representation:</strong><br>\nBy separating budget information into minimum/maximum values,<br>\nit is possible to search and compare various ranges.</li>\n<li><strong>Avoiding reserved word collisions:</strong><br>\nBy using the clear field name <code>project_metadata</code>,<br>\nwe avoided conflicts with reserved words in SQLAlchemy.</li>\n<li><strong>Extensible model:</strong><br>\nBy adding additional fields,<br>\nwe can represent project information more richly and flexibly.</li>\n</ul>\n<hr>\n<h2 id=\"heading-7\">4. Conclusion</h2>\n<p>In this article, we looked at the project model improvements in detail.<br>\nManaging the database model systematically is a big influence on the long-term maintenance and performance improvement of the application.<br>\nIn the remaining articles, we will introduce more improvements such as <strong>crawler scheduler implementation</strong> and <strong>encryption system introduction</strong>, so please look forward to it!</p>\n<p>If you have any additional points or questions about the improvements, please leave a comment anytime. Your feedback is a big help! 🚀</p>\n<hr>\n<p>See you next time!</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "Project Model Improvement: Organizing Structure and Fields",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "1. Why Do We Need Model Improvements?",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "2. Specific Improvements",
            "level": 2,
            "isMainTopic": true,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "2.1 Separating Budget Fields: budget_min & budget_max",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "2.2 Resolving Reserved Word Collision: metadata → project_metadata",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "2.3 Adding New Fields",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "3. Benefits of Improved Model",
            "level": 2,
            "isMainTopic": true,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "4. Conclusion",
            "level": 2,
            "isMainTopic": true,
            "position": 350
          }
        ]
      }
    },
    "imageHeights": {}
  },
  {
    "id": "gig_crawler_5",
    "title": "FastAPI와 PostgreSQL을 활용한 아웃소싱 크롤러 개발",
    "content": "\n이번 글에서는 **암호화 시스템 구현**에 대해 자세히 소개할게요!\n\n---\n\n# 암호화 시스템 구현: CryptoUtil 클래스와 프로젝트 ID 보호\n\n안녕하세요, 여러분!  \n이전 글들에서 데이터베이스 비동기 처리, 세션 관리, 모델 개선, 크롤러 스케줄러 등에 대해 다뤘는데요, 이번 글에서는 **암호화 시스템 구현**에 대해 이야기해보려고 합니다.\n\n우리 프로젝트에서는 보안이 매우 중요한 요소 중 하나입니다. 특히, 프로젝트 ID와 같이 민감한 정보는 암호화를 통해 외부로 노출되지 않도록 보호할 필요가 있죠. 이번 글에서는 **Fernet**을 활용한 대칭키 암호화 방식을 적용하여, 프로젝트 ID의 암호화와 복호화를 구현하는 방법을 소개하겠습니다.\n\n---\n\n## 1. 암호화가 필요한 이유\n\n- **보안 강화:**  \n  데이터가 외부에 노출되면 악의적인 공격에 취약해집니다. 암호화를 통해 중요한 정보(예: 프로젝트 ID)를 안전하게 보호할 수 있습니다.\n\n- **데이터 무결성 유지:**  \n  암호화된 데이터는 전송 중 변조 여부를 쉽게 확인할 수 있어, 데이터의 신뢰성을 보장할 수 있습니다.\n\n- **규정 준수:**  \n  여러 보안 규제와 컴플라이언스 요건을 만족시키기 위해 민감 정보를 암호화하는 것은 필수적입니다.\n\n---\n\n## 2. Fernet 대칭키 암호화란?\n\n**Fernet**은 파이썬의 [cryptography](https://cryptography.io/) 라이브러리에서 제공하는 대칭키 암호화 방식입니다.\n\n- **대칭키 암호화:** 암호화와 복호화에 동일한 키를 사용합니다.\n- **사용법이 간단:** 몇 줄의 코드로 강력한 암호화 기능을 구현할 수 있습니다.\n- **안전성:** 암호화된 메시지의 무결성과 인증을 보장합니다.\n\n---\n\n## 3. CryptoUtil 클래스 구현\n\n이제 실제로 `CryptoUtil` 클래스를 구현해 보겠습니다. 이 클래스는 암호화와 복호화 기능을 제공하며, 주로 프로젝트 ID와 같은 민감한 데이터를 보호하는 데 사용됩니다.\n\n```python\nfrom cryptography.fernet import Fernet\n\nclass CryptoUtil:\n    def __init__(self, key: str):\n        \"\"\"\n        생성자: 암호화에 사용할 Fernet 인스턴스를 초기화합니다.\n        :param key: Fernet 암호화 키 (문자열)\n        \"\"\"\n        self.fernet = Fernet(key)\n\n    def encrypt(self, data: str) -> str:\n        \"\"\"\n        데이터를 암호화합니다.\n        :param data: 암호화할 문자열 데이터\n        :return: 암호화된 문자열 (토큰)\n        \"\"\"\n        return self.fernet.encrypt(data.encode()).decode()\n\n    def decrypt(self, token: str) -> str:\n        \"\"\"\n        암호화된 토큰을 복호화합니다.\n        :param token: 암호화된 문자열 (토큰)\n        :return: 복호화된 원본 문자열\n        \"\"\"\n        return self.fernet.decrypt(token.encode()).decode()\n\n\n# 예시 사용법\nif __name__ == '__main__':\n    # 암호화 키는 보통 환경 변수나 설정 파일에서 안전하게 로드합니다.\n    # 여기서는 예시로 새로운 키를 생성합니다.\n    key = Fernet.generate_key()\n    crypto_util = CryptoUtil(key)\n\n    original_id = \"project123\"\n    encrypted_id = crypto_util.encrypt(original_id)\n    decrypted_id = crypto_util.decrypt(encrypted_id)\n\n    print(\"원본 프로젝트 ID:\", original_id)\n    print(\"암호화된 프로젝트 ID:\", encrypted_id)\n    print(\"복호화된 프로젝트 ID:\", decrypted_id)\n```\n\n### 3.1 코드 설명\n\n- **초기화:**  \n  `__init__` 메서드에서 전달받은 암호화 키로 `Fernet` 인스턴스를 초기화합니다.\n\n- **encrypt 메서드:**  \n  문자열 데이터를 바이트로 변환한 후 암호화하여, 다시 문자열로 디코딩합니다.\n\n- **decrypt 메서드:**  \n  암호화된 토큰을 바이트로 변환하여 복호화하고, 원래의 문자열로 디코딩합니다.\n\n---\n\n## 4. 설정에 암호화 키 추가하기\n\n실제 운영 환경에서는 암호화 키를 코드에 하드코딩하지 않고, 보안 설정 파일이나 환경 변수에서 로드하는 것이 좋습니다. 예를 들어, `config.py` 파일을 만들어 아래와 같이 작성할 수 있습니다:\n\n```python\nimport os\n\n# 환경 변수에서 암호화 키를 가져오거나, 기본값을 설정합니다.\nENCRYPTION_KEY = os.getenv(\"ENCRYPTION_KEY\", Fernet.generate_key().decode())\n```\n\n이렇게 설정해두면, 운영 환경에서 별도의 암호화 키를 안전하게 관리할 수 있어 보안성이 한층 강화됩니다.\n\n---\n\n## 5. 암호화 시스템의 적용\n\n이제 API 엔드포인트나 데이터 저장 시, 프로젝트 ID를 직접 노출하는 대신 암호화된 값을 사용하면 됩니다.  \n예를 들어, 프로젝트 조회 API에서는 클라이언트에게 암호화된 ID를 제공하고, 이후 클라이언트의 요청 시 해당 암호화된 ID를 복호화하여 내부 데이터베이스에서 조회할 수 있습니다.\n\n이와 같이 암호화 시스템을 도입하면, 민감 정보의 노출 위험을 줄이고 보안을 강화할 수 있습니다.\n\n---\n\n## 6. 마치며\n\n오늘은 **암호화 시스템 구현**에 대해 살펴보았습니다.  \n`CryptoUtil` 클래스를 통해 간단하게 암호화와 복호화 기능을 구현할 수 있었고, 이를 통해 프로젝트 ID와 같은 민감한 데이터를 효과적으로 보호할 수 있음을 확인했습니다.\n\n다음 글에서는 **API 엔드포인트 개선** 및 비동기 데이터베이스 쿼리 적용에 대해 다룰 예정입니다.\n\n감사합니다. 다음 글에서 또 만나요! 🚀\n\n---\n",
    "date": "2025-02-12",
    "category": "backend",
    "tags": [
      "FastAPI",
      "PostgreSQL",
      "Python",
      "Crawler",
      "asyncio",
      "SQLAlchemy",
      "비동기처리",
      "데이터수집",
      "실시간처리",
      "암호화",
      "Fernet",
      "보안",
      "cryptography",
      "데이터보호"
    ],
    "thumbnail": "/images/fastapi.png",
    "translations": {
      "ko": {
        "title": "FastAPI와 PostgreSQL을 활용한 아웃소싱 크롤러 개발",
        "description": "크롤러 프로젝트에 암호화 시스템을 도입했어요! Fernet을 활용한 대칭키 암호화로 프로젝트 ID를 안전하게 보호하고, CryptoUtil 클래스로 편리하게 관리할 수 있게 되었답니다. 🔒",
        "content": "<p>이번 글에서는 <strong>암호화 시스템 구현</strong>에 대해 자세히 소개할게요!</p>\n<hr>\n<h1 id=\"heading-0\">암호화 시스템 구현: CryptoUtil 클래스와 프로젝트 ID 보호</h1>\n<p>안녕하세요, 여러분!<br>\n이전 글들에서 데이터베이스 비동기 처리, 세션 관리, 모델 개선, 크롤러 스케줄러 등에 대해 다뤘는데요, 이번 글에서는 <strong>암호화 시스템 구현</strong>에 대해 이야기해보려고 합니다.</p>\n<p>우리 프로젝트에서는 보안이 매우 중요한 요소 중 하나입니다. 특히, 프로젝트 ID와 같이 민감한 정보는 암호화를 통해 외부로 노출되지 않도록 보호할 필요가 있죠. 이번 글에서는 <strong>Fernet</strong>을 활용한 대칭키 암호화 방식을 적용하여, 프로젝트 ID의 암호화와 복호화를 구현하는 방법을 소개하겠습니다.</p>\n<hr>\n<h2 id=\"heading-1\">1. 암호화가 필요한 이유</h2>\n<ul>\n<li>\n<p><strong>보안 강화:</strong><br>\n데이터가 외부에 노출되면 악의적인 공격에 취약해집니다. 암호화를 통해 중요한 정보(예: 프로젝트 ID)를 안전하게 보호할 수 있습니다.</p>\n</li>\n<li>\n<p><strong>데이터 무결성 유지:</strong><br>\n암호화된 데이터는 전송 중 변조 여부를 쉽게 확인할 수 있어, 데이터의 신뢰성을 보장할 수 있습니다.</p>\n</li>\n<li>\n<p><strong>규정 준수:</strong><br>\n여러 보안 규제와 컴플라이언스 요건을 만족시키기 위해 민감 정보를 암호화하는 것은 필수적입니다.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"heading-2\">2. Fernet 대칭키 암호화란?</h2>\n<p><strong>Fernet</strong>은 파이썬의 <a href=\"https://cryptography.io/\">cryptography</a> 라이브러리에서 제공하는 대칭키 암호화 방식입니다.</p>\n<ul>\n<li><strong>대칭키 암호화:</strong> 암호화와 복호화에 동일한 키를 사용합니다.</li>\n<li><strong>사용법이 간단:</strong> 몇 줄의 코드로 강력한 암호화 기능을 구현할 수 있습니다.</li>\n<li><strong>안전성:</strong> 암호화된 메시지의 무결성과 인증을 보장합니다.</li>\n</ul>\n<hr>\n<h2 id=\"heading-3\">3. CryptoUtil 클래스 구현</h2>\n<p>이제 실제로 <code>CryptoUtil</code> 클래스를 구현해 보겠습니다. 이 클래스는 암호화와 복호화 기능을 제공하며, 주로 프로젝트 ID와 같은 민감한 데이터를 보호하는 데 사용됩니다.</p>\n<pre><code class=\"language-python\">from cryptography.fernet import Fernet\n\nclass CryptoUtil:\n    def __init__(self, key: str):\n        \"\"\"\n        생성자: 암호화에 사용할 Fernet 인스턴스를 초기화합니다.\n        :param key: Fernet 암호화 키 (문자열)\n        \"\"\"\n        self.fernet = Fernet(key)\n\n    def encrypt(self, data: str) -&gt; str:\n        \"\"\"\n        데이터를 암호화합니다.\n        :param data: 암호화할 문자열 데이터\n        :return: 암호화된 문자열 (토큰)\n        \"\"\"\n        return self.fernet.encrypt(data.encode()).decode()\n\n    def decrypt(self, token: str) -&gt; str:\n        \"\"\"\n        암호화된 토큰을 복호화합니다.\n        :param token: 암호화된 문자열 (토큰)\n        :return: 복호화된 원본 문자열\n        \"\"\"\n        return self.fernet.decrypt(token.encode()).decode()\n\n\n# 예시 사용법\nif __name__ == '__main__':\n    # 암호화 키는 보통 환경 변수나 설정 파일에서 안전하게 로드합니다.\n    # 여기서는 예시로 새로운 키를 생성합니다.\n    key = Fernet.generate_key()\n    crypto_util = CryptoUtil(key)\n\n    original_id = \"project123\"\n    encrypted_id = crypto_util.encrypt(original_id)\n    decrypted_id = crypto_util.decrypt(encrypted_id)\n\n    print(\"원본 프로젝트 ID:\", original_id)\n    print(\"암호화된 프로젝트 ID:\", encrypted_id)\n    print(\"복호화된 프로젝트 ID:\", decrypted_id)\n</code></pre>\n<h3 id=\"heading-4\">3.1 코드 설명</h3>\n<ul>\n<li>\n<p><strong>초기화:</strong><br>\n<code>__init__</code> 메서드에서 전달받은 암호화 키로 <code>Fernet</code> 인스턴스를 초기화합니다.</p>\n</li>\n<li>\n<p><strong>encrypt 메서드:</strong><br>\n문자열 데이터를 바이트로 변환한 후 암호화하여, 다시 문자열로 디코딩합니다.</p>\n</li>\n<li>\n<p><strong>decrypt 메서드:</strong><br>\n암호화된 토큰을 바이트로 변환하여 복호화하고, 원래의 문자열로 디코딩합니다.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"heading-5\">4. 설정에 암호화 키 추가하기</h2>\n<p>실제 운영 환경에서는 암호화 키를 코드에 하드코딩하지 않고, 보안 설정 파일이나 환경 변수에서 로드하는 것이 좋습니다. 예를 들어, <code>config.py</code> 파일을 만들어 아래와 같이 작성할 수 있습니다:</p>\n<pre><code class=\"language-python\">import os\n\n# 환경 변수에서 암호화 키를 가져오거나, 기본값을 설정합니다.\nENCRYPTION_KEY = os.getenv(\"ENCRYPTION_KEY\", Fernet.generate_key().decode())\n</code></pre>\n<p>이렇게 설정해두면, 운영 환경에서 별도의 암호화 키를 안전하게 관리할 수 있어 보안성이 한층 강화됩니다.</p>\n<hr>\n<h2 id=\"heading-6\">5. 암호화 시스템의 적용</h2>\n<p>이제 API 엔드포인트나 데이터 저장 시, 프로젝트 ID를 직접 노출하는 대신 암호화된 값을 사용하면 됩니다.<br>\n예를 들어, 프로젝트 조회 API에서는 클라이언트에게 암호화된 ID를 제공하고, 이후 클라이언트의 요청 시 해당 암호화된 ID를 복호화하여 내부 데이터베이스에서 조회할 수 있습니다.</p>\n<p>이와 같이 암호화 시스템을 도입하면, 민감 정보의 노출 위험을 줄이고 보안을 강화할 수 있습니다.</p>\n<hr>\n<h2 id=\"heading-7\">6. 마치며</h2>\n<p>오늘은 <strong>암호화 시스템 구현</strong>에 대해 살펴보았습니다.<br>\n<code>CryptoUtil</code> 클래스를 통해 간단하게 암호화와 복호화 기능을 구현할 수 있었고, 이를 통해 프로젝트 ID와 같은 민감한 데이터를 효과적으로 보호할 수 있음을 확인했습니다.</p>\n<p>다음 글에서는 <strong>API 엔드포인트 개선</strong> 및 비동기 데이터베이스 쿼리 적용에 대해 다룰 예정입니다.</p>\n<p>감사합니다. 다음 글에서 또 만나요! 🚀</p>\n<hr>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "암호화 시스템 구현: CryptoUtil 클래스와 프로젝트 ID 보호",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "1. 암호화가 필요한 이유",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "2. Fernet 대칭키 암호화란?",
            "level": 2,
            "isMainTopic": true,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "3. CryptoUtil 클래스 구현",
            "level": 2,
            "isMainTopic": true,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "3.1 코드 설명",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "4. 설정에 암호화 키 추가하기",
            "level": 2,
            "isMainTopic": true,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "5. 암호화 시스템의 적용",
            "level": 2,
            "isMainTopic": true,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "6. 마치며",
            "level": 2,
            "isMainTopic": true,
            "position": 350
          }
        ]
      },
      "en": {
        "title": "Building an Outsourcing Crawler with FastAPI and PostgreSQL",
        "description": "I implemented an encryption system in the crawler project! Using Fernet symmetric key encryption to securely protect project IDs and manage them conveniently with the CryptoUtil class. 🔒",
        "content": "<p>In this post, I'll introduce the <strong>implementation of the encryption system</strong> in detail!</p>\n<hr>\n<h1 id=\"heading-0\">Implementing Encryption: CryptoUtil Class and Project ID Protection</h1>\n<p>Hello everyone!<br>\nIn previous posts, we covered database async processing, session management, model improvements, and crawler scheduling. Today, we'll discuss the <strong>implementation of an encryption system</strong>.</p>\n<p>Security is one of the most critical elements in our project. In particular, sensitive information like project IDs needs to be protected from external exposure through encryption. In this post, I'll introduce how to implement encryption and decryption of project IDs using <strong>Fernet</strong> symmetric key encryption.</p>\n<hr>\n<h2 id=\"heading-1\">1. Why Do We Need Encryption?</h2>\n<ul>\n<li>\n<p><strong>Enhanced Security:</strong><br>\nWhen data is exposed externally, it becomes vulnerable to malicious attacks. Through encryption, we can securely protect important information (e.g., project IDs).</p>\n</li>\n<li>\n<p><strong>Maintaining Data Integrity:</strong><br>\nEncrypted data makes it easy to verify if tampering occurred during transmission, ensuring data reliability.</p>\n</li>\n<li>\n<p><strong>Regulatory Compliance:</strong><br>\nEncrypting sensitive information is essential to meet various security regulations and compliance requirements.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"heading-2\">2. What is Fernet Symmetric Key Encryption?</h2>\n<p><strong>Fernet</strong> is a symmetric key encryption method provided by Python's <a href=\"https://cryptography.io/\">cryptography</a> library.</p>\n<ul>\n<li><strong>Symmetric Key Encryption:</strong> Uses the same key for encryption and decryption</li>\n<li><strong>Simple Usage:</strong> Implements powerful encryption features with just a few lines of code</li>\n<li><strong>Security:</strong> Ensures integrity and authentication of encrypted messages</li>\n</ul>\n<hr>\n<h2 id=\"heading-3\">3. Implementing the CryptoUtil Class</h2>\n<p>Now let's implement the <code>CryptoUtil</code> class. This class provides encryption and decryption functionality, primarily used to protect sensitive data like project IDs.</p>\n<pre><code class=\"language-python\">from cryptography.fernet import Fernet\n\nclass CryptoUtil:\n    def __init__(self, key: str):\n        \"\"\"\n        Constructor: Initializes the Fernet instance for encryption.\n        :param key: Fernet encryption key (string)\n        \"\"\"\n        self.fernet = Fernet(key)\n\n    def encrypt(self, data: str) -&gt; str:\n        \"\"\"\n        Encrypts the data.\n        :param data: String data to encrypt\n        :return: Encrypted string (token)\n        \"\"\"\n        return self.fernet.encrypt(data.encode()).decode()\n\n    def decrypt(self, token: str) -&gt; str:\n        \"\"\"\n        Decrypts the token.\n        :param token: Encrypted string (token)\n        :return: Decrypted original string\n        \"\"\"\n        return self.fernet.decrypt(token.encode()).decode()\n\n\n# Example usage\nif __name__ == '__main__':\n    # The encryption key is usually loaded safely from environment variables or configuration files.\n    # Here, we create a new key for demonstration purposes.\n    key = Fernet.generate_key()\n    crypto_util = CryptoUtil(key)\n\n    original_id = \"project123\"\n    encrypted_id = crypto_util.encrypt(original_id)\n    decrypted_id = crypto_util.decrypt(encrypted_id)\n\n    print(\"Original project ID:\", original_id)\n    print(\"Encrypted project ID:\", encrypted_id)\n    print(\"Decrypted project ID:\", decrypted_id)\n</code></pre>\n<h3 id=\"heading-4\">3.1 Code Explanation</h3>\n<ul>\n<li>\n<p><strong>Initialization:</strong><br>\nThe <code>__init__</code> method initializes the <code>Fernet</code> instance with the encryption key passed in.</p>\n</li>\n<li>\n<p><strong>encrypt method:</strong><br>\nConverts string data to bytes and encrypts it, then decodes it back to a string.</p>\n</li>\n<li>\n<p><strong>decrypt method:</strong><br>\nConverts the encrypted token to bytes and decrypts it, then decodes it back to a string.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"heading-5\">4. Adding the Encryption Key to the Configuration</h2>\n<p>In actual operation, it is better to load the encryption key from the security configuration file or environment variables rather than hard-coding it in the code. For example, you can create a <code>config.py</code> file and write it as follows:</p>\n<pre><code class=\"language-python\">import os\n\n# Get the encryption key from the environment variable or set a default value.\nENCRYPTION_KEY = os.getenv(\"ENCRYPTION_KEY\", Fernet.generate_key().decode())\n</code></pre>\n<p>This way, you can safely manage the encryption key in the operating environment, which further enhances security.</p>\n<hr>\n<h2 id=\"heading-6\">5. Applying the Encryption System</h2>\n<p>Now, you can use the encrypted value instead of exposing the project ID directly in API endpoints or data storage.<br>\nFor example, in a project retrieval API, you can provide the encrypted ID to the client and then decrypt it in the client's request to query the internal database.</p>\n<p>By introducing the encryption system, you can reduce the risk of exposing sensitive information and enhance security.</p>\n<hr>\n<h2 id=\"heading-7\">6. Conclusion</h2>\n<p>Today, we looked at the implementation of the encryption system.<br>\nWe were able to implement the encryption and decryption functions simply using the <code>CryptoUtil</code> class, and we confirmed that we can effectively protect sensitive data like project IDs.</p>\n<p>Next, we will cover <strong>improving API endpoints</strong> and <strong>applying asynchronous database queries</strong>.</p>\n<p>Thank you! See you next time! 🚀</p>\n<hr>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "Implementing Encryption: CryptoUtil Class and Project ID Protection",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "1. Why Do We Need Encryption?",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "2. What is Fernet Symmetric Key Encryption?",
            "level": 2,
            "isMainTopic": true,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "3. Implementing the CryptoUtil Class",
            "level": 2,
            "isMainTopic": true,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "3.1 Code Explanation",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "4. Adding the Encryption Key to the Configuration",
            "level": 2,
            "isMainTopic": true,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "5. Applying the Encryption System",
            "level": 2,
            "isMainTopic": true,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "6. Conclusion",
            "level": 2,
            "isMainTopic": true,
            "position": 350
          }
        ]
      }
    },
    "imageHeights": {}
  },
  {
    "id": "manbok",
    "title": "공인중개 웹사이트",
    "content": "\n![2](/images/manbok/manbok.png)\n\n## 프로젝트 개요\n\n토지, 공장, 창고의 매매/임대를 전문으로 하는 공인중개사무소와 원룸, 상가의 매매/임대를 전문으로 하는 공인중개사무소의 통합 웹 플랫폼을 구축합니다. 빅데이터 기반의 부동산 입지 분석과 AI 기반 매물 추천 시스템을 통해 매수인, 매도인, 임대인, 임차인에게 최적화된 부동산 솔루션을 제공하는 것이 목표입니다.\n\n### 주요 기능\n\n1. **스마트 매물 관리 시스템**\n\n   - 실시간 매물 등록/수정/삭제\n   - AI 기반 매물 가격 산정\n   - 매물 상태 자동 업데이트\n   - 고도화된 검색 및 필터링\n   - VR/AR 매물 투어\n   - 실시간 시세 정보 연동\n\n2. **빅데이터 기반 입지 분석 시스템**\n\n   - GIS 기반 위치 분석\n   - 교통/물류 접근성 분석\n   - 용도지역/구역 법률 검토\n   - 실시간 경제 지표 연동\n   - 환경영향 평가\n   - 주변 인프라 현황 분석\n   - 수요/공급 예측 모델링\n\n3. **통합 고객 관리 시스템 (CRM)**\n\n   - 고객 데이터 통합 관리\n   - AI 기반 고객 매칭\n   - 상담 이력 자동 기록\n   - 관심 매물 패턴 분석\n   - 계약 진행 자동화\n   - 고객 피드백 관리\n\n4. **지능형 컨텐츠 관리 시스템**\n   - AI 기반 컨텐츠 생성\n   - 자동 SEO 최적화\n   - 소셜 미디어 연동\n   - 실시간 부동산 뉴스 피드\n   - 맞춤형 뉴스레터 발송\n   - 컨텐츠 성과 분석\n\n![3](/images/manbok/manbok.gif)\n\n### 기술 스택\n\n- Frontend: Next.js 14, TypeScript, React Query, Recoil\n- Backend: NestJS, GraphQL, TypeORM\n- Database: PostgreSQL, Redis, Elasticsearch\n- AI/ML: TensorFlow, scikit-learn\n- Infrastructure: AWS (ECS, RDS, S3, CloudFront)\n- DevOps: Docker, Kubernetes, Jenkins, Prometheus\n- Analytics: Google Analytics 4, Amplitude\n\n### 개발 로드맵\n\n1. 기획 및 설계 (3주)\n\n   - 요구사항 상세 분석\n   - UI/UX 프로토타이핑\n   - 데이터 모델링\n   - 시스템 아키텍처 설계\n   - API 설계 및 문서화\n\n2. 프론트엔드 개발 (6주)\n\n   - 반응형 메인 페이지 구현\n   - 실시간 매물 관리 시스템\n   - 대시보드 및 분석 도구\n   - VR/AR 매물 뷰어\n   - 성능 최적화\n\n3. 백엔드 개발 (6주)\n\n   - MSA 기반 API 서버\n   - 실시간 데이터 동기화\n   - AI 모델 통합\n   - 보안 시스템 구축\n   - 결제 시스템 연동\n\n4. 품질 관리 및 배포 (3주)\n   - 자동화된 테스트 구축\n   - 성능 모니터링 시스템\n   - CI/CD 파이프라인 구축\n   - 무중단 배포 시스템\n   - 장애 대응 체계 수립\n\n### 기대 효과\n\n1. 데이터 기반 의사결정 지원\n2. 업무 효율성 300% 향상\n3. 고객 만족도 증대\n4. 매출 증대 효과\n5. 시장 경쟁력 강화\n6. 디지털 전환 가속화\n",
    "date": "2024-03-20",
    "category": "projects",
    "tags": [
      "React",
      " JavaScript"
    ],
    "thumbnail": "/images/manbok/manbok.gif",
    "translations": {
      "ko": {
        "title": "공인중개 웹사이트",
        "description": "공인중개 웹사이트 개발",
        "content": "<p><img src=\"/images/manbok/manbok.png\" alt=\"2\"></p>\n<h2 id=\"heading-0\">프로젝트 개요</h2>\n<p>토지, 공장, 창고의 매매/임대를 전문으로 하는 공인중개사무소와 원룸, 상가의 매매/임대를 전문으로 하는 공인중개사무소의 통합 웹 플랫폼을 구축합니다. 빅데이터 기반의 부동산 입지 분석과 AI 기반 매물 추천 시스템을 통해 매수인, 매도인, 임대인, 임차인에게 최적화된 부동산 솔루션을 제공하는 것이 목표입니다.</p>\n<h3 id=\"heading-1\">주요 기능</h3>\n<ol>\n<li>\n<p><strong>스마트 매물 관리 시스템</strong></p>\n<ul>\n<li>실시간 매물 등록/수정/삭제</li>\n<li>AI 기반 매물 가격 산정</li>\n<li>매물 상태 자동 업데이트</li>\n<li>고도화된 검색 및 필터링</li>\n<li>VR/AR 매물 투어</li>\n<li>실시간 시세 정보 연동</li>\n</ul>\n</li>\n<li>\n<p><strong>빅데이터 기반 입지 분석 시스템</strong></p>\n<ul>\n<li>GIS 기반 위치 분석</li>\n<li>교통/물류 접근성 분석</li>\n<li>용도지역/구역 법률 검토</li>\n<li>실시간 경제 지표 연동</li>\n<li>환경영향 평가</li>\n<li>주변 인프라 현황 분석</li>\n<li>수요/공급 예측 모델링</li>\n</ul>\n</li>\n<li>\n<p><strong>통합 고객 관리 시스템 (CRM)</strong></p>\n<ul>\n<li>고객 데이터 통합 관리</li>\n<li>AI 기반 고객 매칭</li>\n<li>상담 이력 자동 기록</li>\n<li>관심 매물 패턴 분석</li>\n<li>계약 진행 자동화</li>\n<li>고객 피드백 관리</li>\n</ul>\n</li>\n<li>\n<p><strong>지능형 컨텐츠 관리 시스템</strong></p>\n<ul>\n<li>AI 기반 컨텐츠 생성</li>\n<li>자동 SEO 최적화</li>\n<li>소셜 미디어 연동</li>\n<li>실시간 부동산 뉴스 피드</li>\n<li>맞춤형 뉴스레터 발송</li>\n<li>컨텐츠 성과 분석</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/manbok/manbok.gif\" alt=\"3\"></p>\n<h3 id=\"heading-2\">기술 스택</h3>\n<ul>\n<li>Frontend: Next.js 14, TypeScript, React Query, Recoil</li>\n<li>Backend: NestJS, GraphQL, TypeORM</li>\n<li>Database: PostgreSQL, Redis, Elasticsearch</li>\n<li>AI/ML: TensorFlow, scikit-learn</li>\n<li>Infrastructure: AWS (ECS, RDS, S3, CloudFront)</li>\n<li>DevOps: Docker, Kubernetes, Jenkins, Prometheus</li>\n<li>Analytics: Google Analytics 4, Amplitude</li>\n</ul>\n<h3 id=\"heading-3\">개발 로드맵</h3>\n<ol>\n<li>\n<p>기획 및 설계 (3주)</p>\n<ul>\n<li>요구사항 상세 분석</li>\n<li>UI/UX 프로토타이핑</li>\n<li>데이터 모델링</li>\n<li>시스템 아키텍처 설계</li>\n<li>API 설계 및 문서화</li>\n</ul>\n</li>\n<li>\n<p>프론트엔드 개발 (6주)</p>\n<ul>\n<li>반응형 메인 페이지 구현</li>\n<li>실시간 매물 관리 시스템</li>\n<li>대시보드 및 분석 도구</li>\n<li>VR/AR 매물 뷰어</li>\n<li>성능 최적화</li>\n</ul>\n</li>\n<li>\n<p>백엔드 개발 (6주)</p>\n<ul>\n<li>MSA 기반 API 서버</li>\n<li>실시간 데이터 동기화</li>\n<li>AI 모델 통합</li>\n<li>보안 시스템 구축</li>\n<li>결제 시스템 연동</li>\n</ul>\n</li>\n<li>\n<p>품질 관리 및 배포 (3주)</p>\n<ul>\n<li>자동화된 테스트 구축</li>\n<li>성능 모니터링 시스템</li>\n<li>CI/CD 파이프라인 구축</li>\n<li>무중단 배포 시스템</li>\n<li>장애 대응 체계 수립</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"heading-4\">기대 효과</h3>\n<ol>\n<li>데이터 기반 의사결정 지원</li>\n<li>업무 효율성 300% 향상</li>\n<li>고객 만족도 증대</li>\n<li>매출 증대 효과</li>\n<li>시장 경쟁력 강화</li>\n<li>디지털 전환 가속화</li>\n</ol>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "프로젝트 개요",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "주요 기능",
            "level": 3,
            "isMainTopic": false,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "기술 스택",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "개발 로드맵",
            "level": 3,
            "isMainTopic": false,
            "position": 0
          },
          {
            "id": "heading-4",
            "text": "기대 효과",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          }
        ]
      },
      "en": {
        "title": "Real Estate Website",
        "description": "Development of a real estate website",
        "content": "<p><img src=\"/images/manbok/manbok.png\" alt=\"2\"></p>\n<h2 id=\"heading-0\">Project Overview</h2>\n<p>We are building an integrated web platform for real estate agencies specializing in the sale/lease of land, factories, warehouses, and another agency focusing on the sale/lease of studio apartments and commercial properties. Our goal is to provide optimized real estate solutions to buyers, sellers, landlords, and tenants through big data-based location analysis and AI-based property recommendation systems.</p>\n<h3 id=\"heading-1\">Key Features</h3>\n<ol>\n<li>\n<p><strong>Smart Property Management System</strong></p>\n<ul>\n<li>Real-time property registration/modification/deletion</li>\n<li>AI-based property price estimation</li>\n<li>Automatic property status updates</li>\n<li>Advanced search and filtering</li>\n<li>VR/AR property tours</li>\n<li>Real-time market price integration</li>\n</ul>\n</li>\n<li>\n<p><strong>Big Data-based Location Analysis System</strong></p>\n<ul>\n<li>GIS-based location analysis</li>\n<li>Transportation/logistics accessibility analysis</li>\n<li>Land use zone/district legal review</li>\n<li>Real-time economic indicator integration</li>\n<li>Environmental impact assessment</li>\n<li>Surrounding infrastructure analysis</li>\n<li>Supply/demand prediction modeling</li>\n</ul>\n</li>\n<li>\n<p><strong>Integrated Customer Relationship Management (CRM)</strong></p>\n<ul>\n<li>Unified customer data management</li>\n<li>AI-based customer matching</li>\n<li>Automatic consultation history recording</li>\n<li>Interest property pattern analysis</li>\n<li>Contract process automation</li>\n<li>Customer feedback management</li>\n</ul>\n</li>\n<li>\n<p><strong>Intelligent Content Management System</strong></p>\n<ul>\n<li>AI-based content generation</li>\n<li>Automatic SEO optimization</li>\n<li>Social media integration</li>\n<li>Real-time real estate news feed</li>\n<li>Customized newsletter delivery</li>\n<li>Content performance analysis</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/manbok/manbok.gif\" alt=\"3\"></p>\n<h3 id=\"heading-2\">Technology Stack</h3>\n<ul>\n<li>Frontend: Next.js 14, TypeScript, React Query, Recoil</li>\n<li>Backend: NestJS, GraphQL, TypeORM</li>\n<li>Database: PostgreSQL, Redis, Elasticsearch</li>\n<li>AI/ML: TensorFlow, scikit-learn</li>\n<li>Infrastructure: AWS (ECS, RDS, S3, CloudFront)</li>\n<li>DevOps: Docker, Kubernetes, Jenkins, Prometheus</li>\n<li>Analytics: Google Analytics 4, Amplitude</li>\n</ul>\n<h3 id=\"heading-3\">Development Roadmap</h3>\n<ol>\n<li>\n<p>Planning and Design (3 weeks)</p>\n<ul>\n<li>Detailed requirements analysis</li>\n<li>UI/UX prototyping</li>\n<li>Data modeling</li>\n<li>System architecture design</li>\n<li>API design and documentation</li>\n</ul>\n</li>\n<li>\n<p>Frontend Development (6 weeks)</p>\n<ul>\n<li>Responsive main page implementation</li>\n<li>Real-time property management system</li>\n<li>Dashboard and analysis tools</li>\n<li>VR/AR property viewer</li>\n<li>Performance optimization</li>\n</ul>\n</li>\n<li>\n<p>Backend Development (6 weeks)</p>\n<ul>\n<li>MSA-based API server</li>\n<li>Real-time data synchronization</li>\n<li>AI model integration</li>\n<li>Security system implementation</li>\n<li>Payment system integration</li>\n</ul>\n</li>\n<li>\n<p>Quality Management and Deployment (3 weeks)</p>\n<ul>\n<li>Automated testing setup</li>\n<li>Performance monitoring system</li>\n<li>CI/CD pipeline implementation</li>\n<li>Zero-downtime deployment system</li>\n<li>Incident response system establishment</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"heading-4\">Expected Benefits</h3>\n<ol>\n<li>Data-driven decision support</li>\n<li>300% improvement in work efficiency</li>\n<li>Enhanced customer satisfaction</li>\n<li>Increased revenue</li>\n<li>Strengthened market competitiveness</li>\n<li>Accelerated digital transformation</li>\n</ol>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "Project Overview",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "Key Features",
            "level": 3,
            "isMainTopic": false,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "Technology Stack",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "Development Roadmap",
            "level": 3,
            "isMainTopic": false,
            "position": 0
          },
          {
            "id": "heading-4",
            "text": "Expected Benefits",
            "level": 3,
            "isMainTopic": false,
            "position": 200
          }
        ]
      }
    },
    "imageHeights": {
      "img-0": 400,
      "img-3": 400
    }
  },
  {
    "id": "mobyn",
    "title": "전자고지 시스템 개발",
    "content": "\n## 시스템 개요\n\n전자고지 시스템은 기업이나 기관에서 발행하는 각종 고지서를 카카오, 네이버, KT 등의 플랫폼을 통해 전자문서로 발송하고 관리하는 통합 솔루션입니다.\n\n### 주요 기능\n\n1. **전자고지서 발송 관리**\n   - 대상자 그룹 관리\n   - 발송 이력 추적\n   - 멀티 플랫폼 발송 설정\n   - 발송 상태 모니터링\n\n![3](/images/mobyn/mobyn_document_payment.gif)\n(결제 정보 관리 및 처리)\n\n2. **결제 시스템 연동**\n   - NICEpay 결제 모듈 통합\n   - 실시간 결제 상태 확인\n   - 결제 이력 관리\n   - 환불 프로세스 지원\n\n![5](/images/mobyn/mobyn_stats_1.gif)\n(일별/월별 발송량 통계 분석)\n\n![6](/images/mobyn/mobyn_stats_2.gif)\n(플랫폼별 발송 성공률 분석)\n\n![7](/images/mobyn/mobyn_stats_3.gif)\n(결제 전환율 및 매출 분석)\n\n![8](/images/mobyn/mobyn_stats_4.gif)\n(기간별 상세 통계 리포트)\n\n3. **통계 대시보드**\n\n- 발송 현황 분석\n- 플랫폼별 성공률 추적\n- 결제 전환율 모니터링\n- 기간별 통계 리포트\n\n![2](/images/mobyn/mobyn_document_management.gif)\n(문서 템플릿 관리 및 편집)\n\n4. **발송 관리 시스템**\n   - 대상자 그룹 관리\n   - 발송 이력 추적\n   - 멀티 플랫폼 발송 설정\n   - 발송 상태 모니터링\n\n![9](/images/mobyn/mobyn_status.gif)\n(실시간 발송 상태 모니터링)\n\n5. **발송 제목 및 내용 관리**\n   - 발송 제목 및 내용 관리\n   - 대상자 그룹 관리\n   - 발송 이력 추적\n   - 멀티 플랫폼 발송 설정\n   - 발송 상태 모니터링\n\n![10](/images/mobyn/mobyn_subject.gif)\n(발송 제목 및 내용 관리)\n\n6. **발송 대상자 관리**\n   - 대상자 그룹 관리\n   - 발송 이력 추적\n   - 멀티 플랫폼 발송 설정\n   - 발송 상태 모니터링\n\n![4](/images/mobyn/mobyn_send.gif)\n(대량 발송 프로세스 실행)\n\n7. **발송 예약 관리**\n   - 발송 예약 관리\n   - 발송 이력 추적\n   - 멀티 플랫폼 발송 설정\n   - 발송 상태 모니터링\n",
    "date": "2024-03-20",
    "category": "projects",
    "tags": [
      "React",
      "NicePay",
      "TypeScript",
      "React Hook Form"
    ],
    "thumbnail": "/images/mobyn/mobyn_dashboard.gif",
    "translations": {
      "ko": {
        "title": "전자고지 시스템 개발",
        "description": "카카오/네이버/KT 전자문서 발송 및 통계 시스템",
        "content": "<h2 id=\"heading-0\">시스템 개요</h2>\n<p>전자고지 시스템은 기업이나 기관에서 발행하는 각종 고지서를 카카오, 네이버, KT 등의 플랫폼을 통해 전자문서로 발송하고 관리하는 통합 솔루션입니다.</p>\n<h3 id=\"heading-1\">주요 기능</h3>\n<ol>\n<li><strong>전자고지서 발송 관리</strong>\n<ul>\n<li>대상자 그룹 관리</li>\n<li>발송 이력 추적</li>\n<li>멀티 플랫폼 발송 설정</li>\n<li>발송 상태 모니터링</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/mobyn/mobyn_document_payment.gif\" alt=\"3\">\n(결제 정보 관리 및 처리)</p>\n<ol start=\"2\">\n<li><strong>결제 시스템 연동</strong>\n<ul>\n<li>NICEpay 결제 모듈 통합</li>\n<li>실시간 결제 상태 확인</li>\n<li>결제 이력 관리</li>\n<li>환불 프로세스 지원</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/mobyn/mobyn_stats_1.gif\" alt=\"5\">\n(일별/월별 발송량 통계 분석)</p>\n<p><img src=\"/images/mobyn/mobyn_stats_2.gif\" alt=\"6\">\n(플랫폼별 발송 성공률 분석)</p>\n<p><img src=\"/images/mobyn/mobyn_stats_3.gif\" alt=\"7\">\n(결제 전환율 및 매출 분석)</p>\n<p><img src=\"/images/mobyn/mobyn_stats_4.gif\" alt=\"8\">\n(기간별 상세 통계 리포트)</p>\n<ol start=\"3\">\n<li><strong>통계 대시보드</strong></li>\n</ol>\n<ul>\n<li>발송 현황 분석</li>\n<li>플랫폼별 성공률 추적</li>\n<li>결제 전환율 모니터링</li>\n<li>기간별 통계 리포트</li>\n</ul>\n<p><img src=\"/images/mobyn/mobyn_document_management.gif\" alt=\"2\">\n(문서 템플릿 관리 및 편집)</p>\n<ol start=\"4\">\n<li><strong>발송 관리 시스템</strong>\n<ul>\n<li>대상자 그룹 관리</li>\n<li>발송 이력 추적</li>\n<li>멀티 플랫폼 발송 설정</li>\n<li>발송 상태 모니터링</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/mobyn/mobyn_status.gif\" alt=\"9\">\n(실시간 발송 상태 모니터링)</p>\n<ol start=\"5\">\n<li><strong>발송 제목 및 내용 관리</strong>\n<ul>\n<li>발송 제목 및 내용 관리</li>\n<li>대상자 그룹 관리</li>\n<li>발송 이력 추적</li>\n<li>멀티 플랫폼 발송 설정</li>\n<li>발송 상태 모니터링</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/mobyn/mobyn_subject.gif\" alt=\"10\">\n(발송 제목 및 내용 관리)</p>\n<ol start=\"6\">\n<li><strong>발송 대상자 관리</strong>\n<ul>\n<li>대상자 그룹 관리</li>\n<li>발송 이력 추적</li>\n<li>멀티 플랫폼 발송 설정</li>\n<li>발송 상태 모니터링</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/mobyn/mobyn_send.gif\" alt=\"4\">\n(대량 발송 프로세스 실행)</p>\n<ol start=\"7\">\n<li><strong>발송 예약 관리</strong>\n<ul>\n<li>발송 예약 관리</li>\n<li>발송 이력 추적</li>\n<li>멀티 플랫폼 발송 설정</li>\n<li>발송 상태 모니터링</li>\n</ul>\n</li>\n</ol>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "시스템 개요",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "주요 기능",
            "level": 3,
            "isMainTopic": false,
            "position": 50
          }
        ]
      },
      "en": {
        "title": "Electronic Notification System Development",
        "description": "Electronic Document Delivery and Statistics System for Kakao/Naver/KT",
        "content": "<h2 id=\"heading-0\">System Overview</h2>\n<p>The Electronic Notification System is an integrated solution that manages and delivers various notifications as electronic documents through platforms like Kakao, Naver, and KT for businesses and organizations.</p>\n<h3 id=\"heading-1\">Key Features</h3>\n<ol>\n<li><strong>Electronic Notification Management</strong>\n<ul>\n<li>Target group management</li>\n<li>Delivery history tracking</li>\n<li>Multi-platform delivery settings</li>\n<li>Delivery status monitoring</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/mobyn/mobyn_document_payment.gif\" alt=\"3\">\n(Payment Information Management and Processing)</p>\n<ol start=\"2\">\n<li><strong>Payment System Integration</strong>\n<ul>\n<li>NICEpay payment module integration</li>\n<li>Real-time payment status verification</li>\n<li>Payment history management</li>\n<li>Refund process support</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/mobyn/mobyn_stats_1.gif\" alt=\"5\">\n(Daily/Monthly Delivery Volume Analysis)</p>\n<p><img src=\"/images/mobyn/mobyn_stats_2.gif\" alt=\"6\">\n(Platform-specific Delivery Success Rate Analysis)</p>\n<p><img src=\"/images/mobyn/mobyn_stats_3.gif\" alt=\"7\">\n(Payment Conversion Rate and Revenue Analysis)</p>\n<p><img src=\"/images/mobyn/mobyn_stats_4.gif\" alt=\"8\">\n(Detailed Statistical Reports by Period)</p>\n<ol start=\"3\">\n<li><strong>Statistics Dashboard</strong>\n<ul>\n<li>Delivery status analysis</li>\n<li>Platform success rate tracking</li>\n<li>Payment conversion monitoring</li>\n<li>Period-based statistical reports</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/mobyn/mobyn_document_management.gif\" alt=\"2\">\n(Document Template Management and Editing)</p>\n<ol start=\"4\">\n<li><strong>Delivery Management System</strong>\n<ul>\n<li>Target group management</li>\n<li>Delivery history tracking</li>\n<li>Multi-platform delivery settings</li>\n<li>Delivery status monitoring</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/mobyn/mobyn_status.gif\" alt=\"9\">\n(Real-time Delivery Status Monitoring)</p>\n<ol start=\"5\">\n<li><strong>Title and Content Management</strong>\n<ul>\n<li>Title and content management</li>\n<li>Target group management</li>\n<li>Delivery history tracking</li>\n<li>Multi-platform delivery settings</li>\n<li>Delivery status monitoring</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/mobyn/mobyn_subject.gif\" alt=\"10\">\n(Title and Content Management)</p>\n<ol start=\"6\">\n<li><strong>Recipient Management</strong>\n<ul>\n<li>Target group management</li>\n<li>Delivery history tracking</li>\n<li>Multi-platform delivery settings</li>\n<li>Delivery status monitoring</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/mobyn/mobyn_send.gif\" alt=\"4\">\n(Bulk Delivery Process Execution)</p>\n<ol start=\"7\">\n<li><strong>Delivery Schedule Management</strong>\n<ul>\n<li>Delivery schedule management</li>\n<li>Delivery history tracking</li>\n<li>Multi-platform delivery settings</li>\n<li>Delivery status monitoring</li>\n</ul>\n</li>\n</ol>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "System Overview",
            "level": 2,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "Key Features",
            "level": 3,
            "isMainTopic": false,
            "position": 50
          }
        ]
      }
    },
    "imageHeights": {
      "img-2": 400,
      "img-3": 400,
      "img-4": 400,
      "img-5": 400,
      "img-6": 400,
      "img-7": 400,
      "img-8": 400,
      "img-9": 400,
      "img-10": 400
    }
  },
  {
    "id": "package_manager",
    "title": "JavaScript 패키지 매니저 비교",
    "content": "\n---\n\n# JavaScript 패키지 매니저 비교: npm, Yarn, pnpm\n\n안녕하세요, 개발자 여러분! 😊 오늘은 JavaScript 개발에서 필수적으로 사용하는 **패키지 매니저**에 대해 이야기해볼까 합니다. 아마도 대부분의 개발자분들이 `npm install`을 한 번쯤은 실행해보셨을 텐데요. 하지만 최근에는 `Yarn`과 `pnpm`도 많이 사용되고 있어서, 각각의 특징을 제대로 알고 선택하는 것이 중요합니다.\n\n그래서! **npm, Yarn, pnpm**을 비교하면서 각각의 장점과 단점을 살펴보도록 하겠습니다. 🚀\n\n---\n\n## 1. npm (Node Package Manager)\n\n**npm**은 Node.js를 설치하면 자동으로 함께 설치되는 기본 패키지 매니저입니다. 전 세계에서 가장 널리 사용되며, 수많은 패키지를 손쉽게 설치하고 관리할 수 있습니다.\n\n### ✅ 장점\n\n- **Node.js에 기본 내장**되어 있어서 따로 설치할 필요가 없습니다.\n- **방대한 생태계**를 가지고 있어, 원하는 패키지를 쉽게 찾을 수 있습니다.\n\n### ❌ 단점\n\n- `node_modules` 폴더가 굉장히 커질 수 있어 **프로젝트 관리가 어려워질 수 있음**.\n- 패키지 간의 의존성 문제가 발생할 가능성이 있어 **관리의 어려움**이 있음.\n\n> 📝 **언제 npm을 선택하면 좋을까요?**\n>\n> - 별도의 패키지 매니저를 설치하고 싶지 않다면.\n> - 가장 기본적인 환경에서 개발하고 싶다면.\n\n---\n\n## 2. Yarn (Yet Another Resource Negotiator)\n\n**Yarn**은 npm의 단점을 보완하기 위해 등장한 패키지 매니저입니다. **속도와 보안성**이 강화되어 많은 기업들이 사용하고 있습니다.\n\n### ✅ 장점\n\n- **lock 파일 (`yarn.lock`)을 통한 버전 관리**로 안정성이 뛰어납니다.\n- **보안성이 향상**되어 신뢰할 수 있는 패키지 설치가 가능.\n- **병렬 설치**를 지원하여 패키지를 더 빠르게 다운로드할 수 있음.\n\n### ❌ 단점\n\n- `yarn.lock` 파일이 npm과 호환되지 않을 수 있어 **모듈 충돌 가능성이 있음**.\n- npm보다 **더 많은 디스크 공간과 메모리를 사용**할 수도 있음.\n\n> 📝 **언제 Yarn을 선택하면 좋을까요?**\n>\n> - 대규모 프로젝트에서 **의존성 충돌을 최소화**하고 싶다면.\n> - 더 빠르고 안전한 패키지 관리를 원한다면.\n\n---\n\n## 3. pnpm (Performant npm)\n\n**pnpm**은 npm과 Yarn의 단점을 개선하고, 더 효율적인 패키지 관리를 목표로 한 패키지 매니저입니다. 특히 디스크 공간을 절약하면서도 더 빠른 속도를 제공합니다.\n\n### ✅ 장점\n\n- **디스크 공간을 절약**하는 구조로 패키지를 설치하여 `node_modules` 폴더가 커지는 문제를 방지.\n- npm보다 **약 2배 빠른 설치 속도**를 자랑함.\n- **중첩된 `node_modules` 구조**를 활용하여 의존성 문제를 줄일 수 있음.\n\n### ❌ 단점\n\n- 상대적으로 npm과 Yarn보다 **사용자가 적어 정보가 부족할 수도 있음**.\n\n> 📝 **언제 pnpm을 선택하면 좋을까요?**\n>\n> - **빠르고 가벼운 패키지 매니저**가 필요하다면.\n> - 여러 프로젝트에서 패키지를 공유하여 **디스크 공간을 절약하고 싶다면**.\n\n---\n\n## 4. 기능 비교\n\n| 기능                       | pnpm        | Yarn        | npm |\n| -------------------------- | ----------- | ----------- | --- |\n| 워크스페이스 지원          | ✔️          | ✔️          | ✔️  |\n| Isolated node_modules      | ✔️ (기본값) | ✔️          | ✔️  |\n| 피어 자동 설치             | ✔️          | ❌          | ✔️  |\n| Plug'n'Play                | ✔️          | ✔️ (기본값) | ❌  |\n| Zero-Installs              | ❌          | ✔️          | ❌  |\n| 의존성 패치                | ✔️          | ✔️          | ❌  |\n| Content-addressable 저장소 | ✔️          | ❌          | ❌  |\n\n---\n\n## 5. 결론: 어떤 패키지 매니저를 선택해야 할까?\n\n**📌 npm을 선택해야 할 때**\n\n- 추가 설치 없이 기본적인 환경에서 개발하고 싶다면.\n- 대규모 생태계를 활용하고 싶다면.\n\n**📌 Yarn을 선택해야 할 때**\n\n- 빠르고 안정적인 패키지 관리를 원한다면.\n- 팀 프로젝트에서 의존성을 철저하게 관리하고 싶다면.\n\n**📌 pnpm을 선택해야 할 때**\n\n- 디스크 공간을 절약하면서 빠르게 설치하고 싶다면.\n- 최신 기술을 적극적으로 활용하고 싶다면.\n\n---\n\n## 🔥 마무리하며\n\n각 패키지 매니저는 저마다의 장점과 단점을 가지고 있습니다. 팀 환경, 프로젝트 규모, 그리고 필요한 기능을 고려하여 **가장 적합한 패키지 매니저를 선택하는 것이 중요합니다!** 🚀\n",
    "date": "2025-03-20",
    "category": "architecture",
    "tags": [
      "JavaScript",
      "npm",
      "Yarn",
      "pnpm",
      "package manager",
      "Node.js"
    ],
    "thumbnail": "/images/package-manager.png",
    "translations": {
      "ko": {
        "title": "JavaScript 패키지 매니저 비교",
        "description": "npm, Yarn, pnpm 패키지 매니저의 특징과 장단점 비교",
        "content": "<hr>\n<h1 id=\"heading-0\">JavaScript 패키지 매니저 비교: npm, Yarn, pnpm</h1>\n<p>안녕하세요, 개발자 여러분! 😊 오늘은 JavaScript 개발에서 필수적으로 사용하는 <strong>패키지 매니저</strong>에 대해 이야기해볼까 합니다. 아마도 대부분의 개발자분들이 <code>npm install</code>을 한 번쯤은 실행해보셨을 텐데요. 하지만 최근에는 <code>Yarn</code>과 <code>pnpm</code>도 많이 사용되고 있어서, 각각의 특징을 제대로 알고 선택하는 것이 중요합니다.</p>\n<p>그래서! <strong>npm, Yarn, pnpm</strong>을 비교하면서 각각의 장점과 단점을 살펴보도록 하겠습니다. 🚀</p>\n<hr>\n<h2 id=\"heading-1\">1. npm (Node Package Manager)</h2>\n<p><strong>npm</strong>은 Node.js를 설치하면 자동으로 함께 설치되는 기본 패키지 매니저입니다. 전 세계에서 가장 널리 사용되며, 수많은 패키지를 손쉽게 설치하고 관리할 수 있습니다.</p>\n<h3 id=\"heading-2\">✅ 장점</h3>\n<ul>\n<li><strong>Node.js에 기본 내장</strong>되어 있어서 따로 설치할 필요가 없습니다.</li>\n<li><strong>방대한 생태계</strong>를 가지고 있어, 원하는 패키지를 쉽게 찾을 수 있습니다.</li>\n</ul>\n<h3 id=\"heading-3\">❌ 단점</h3>\n<ul>\n<li><code>node_modules</code> 폴더가 굉장히 커질 수 있어 <strong>프로젝트 관리가 어려워질 수 있음</strong>.</li>\n<li>패키지 간의 의존성 문제가 발생할 가능성이 있어 <strong>관리의 어려움</strong>이 있음.</li>\n</ul>\n<blockquote>\n<p>📝 <strong>언제 npm을 선택하면 좋을까요?</strong></p>\n<ul>\n<li>별도의 패키지 매니저를 설치하고 싶지 않다면.</li>\n<li>가장 기본적인 환경에서 개발하고 싶다면.</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"heading-4\">2. Yarn (Yet Another Resource Negotiator)</h2>\n<p><strong>Yarn</strong>은 npm의 단점을 보완하기 위해 등장한 패키지 매니저입니다. <strong>속도와 보안성</strong>이 강화되어 많은 기업들이 사용하고 있습니다.</p>\n<h3 id=\"heading-5\">✅ 장점</h3>\n<ul>\n<li><strong>lock 파일 (<code>yarn.lock</code>)을 통한 버전 관리</strong>로 안정성이 뛰어납니다.</li>\n<li><strong>보안성이 향상</strong>되어 신뢰할 수 있는 패키지 설치가 가능.</li>\n<li><strong>병렬 설치</strong>를 지원하여 패키지를 더 빠르게 다운로드할 수 있음.</li>\n</ul>\n<h3 id=\"heading-6\">❌ 단점</h3>\n<ul>\n<li><code>yarn.lock</code> 파일이 npm과 호환되지 않을 수 있어 <strong>모듈 충돌 가능성이 있음</strong>.</li>\n<li>npm보다 <strong>더 많은 디스크 공간과 메모리를 사용</strong>할 수도 있음.</li>\n</ul>\n<blockquote>\n<p>📝 <strong>언제 Yarn을 선택하면 좋을까요?</strong></p>\n<ul>\n<li>대규모 프로젝트에서 <strong>의존성 충돌을 최소화</strong>하고 싶다면.</li>\n<li>더 빠르고 안전한 패키지 관리를 원한다면.</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"heading-7\">3. pnpm (Performant npm)</h2>\n<p><strong>pnpm</strong>은 npm과 Yarn의 단점을 개선하고, 더 효율적인 패키지 관리를 목표로 한 패키지 매니저입니다. 특히 디스크 공간을 절약하면서도 더 빠른 속도를 제공합니다.</p>\n<h3 id=\"heading-8\">✅ 장점</h3>\n<ul>\n<li><strong>디스크 공간을 절약</strong>하는 구조로 패키지를 설치하여 <code>node_modules</code> 폴더가 커지는 문제를 방지.</li>\n<li>npm보다 <strong>약 2배 빠른 설치 속도</strong>를 자랑함.</li>\n<li><strong>중첩된 <code>node_modules</code> 구조</strong>를 활용하여 의존성 문제를 줄일 수 있음.</li>\n</ul>\n<h3 id=\"heading-9\">❌ 단점</h3>\n<ul>\n<li>상대적으로 npm과 Yarn보다 <strong>사용자가 적어 정보가 부족할 수도 있음</strong>.</li>\n</ul>\n<blockquote>\n<p>📝 <strong>언제 pnpm을 선택하면 좋을까요?</strong></p>\n<ul>\n<li><strong>빠르고 가벼운 패키지 매니저</strong>가 필요하다면.</li>\n<li>여러 프로젝트에서 패키지를 공유하여 <strong>디스크 공간을 절약하고 싶다면</strong>.</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"heading-10\">4. 기능 비교</h2>\n<table class=\"markdown-table\">\n<thead>\n<tr>\n<th>기능</th>\n<th>pnpm</th>\n<th>Yarn</th>\n<th>npm</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>워크스페이스 지원</td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>Isolated node_modules</td>\n<td>✔️ (기본값)</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>피어 자동 설치</td>\n<td>✔️</td>\n<td>❌</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>Plug'n'Play</td>\n<td>✔️</td>\n<td>✔️ (기본값)</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>Zero-Installs</td>\n<td>❌</td>\n<td>✔️</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>의존성 패치</td>\n<td>✔️</td>\n<td>✔️</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>Content-addressable 저장소</td>\n<td>✔️</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"heading-11\">5. 결론: 어떤 패키지 매니저를 선택해야 할까?</h2>\n<p><strong>📌 npm을 선택해야 할 때</strong></p>\n<ul>\n<li>추가 설치 없이 기본적인 환경에서 개발하고 싶다면.</li>\n<li>대규모 생태계를 활용하고 싶다면.</li>\n</ul>\n<p><strong>📌 Yarn을 선택해야 할 때</strong></p>\n<ul>\n<li>빠르고 안정적인 패키지 관리를 원한다면.</li>\n<li>팀 프로젝트에서 의존성을 철저하게 관리하고 싶다면.</li>\n</ul>\n<p><strong>📌 pnpm을 선택해야 할 때</strong></p>\n<ul>\n<li>디스크 공간을 절약하면서 빠르게 설치하고 싶다면.</li>\n<li>최신 기술을 적극적으로 활용하고 싶다면.</li>\n</ul>\n<hr>\n<h2 id=\"heading-12\">🔥 마무리하며</h2>\n<p>각 패키지 매니저는 저마다의 장점과 단점을 가지고 있습니다. 팀 환경, 프로젝트 규모, 그리고 필요한 기능을 고려하여 <strong>가장 적합한 패키지 매니저를 선택하는 것이 중요합니다!</strong> 🚀</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "JavaScript 패키지 매니저 비교: npm, Yarn, pnpm",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "1. npm (Node Package Manager)",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "✅ 장점",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "❌ 단점",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "2. Yarn (Yet Another Resource Negotiator)",
            "level": 2,
            "isMainTopic": true,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "✅ 장점",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "❌ 단점",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "3. pnpm (Performant npm)",
            "level": 2,
            "isMainTopic": true,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "✅ 장점",
            "level": 3,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "❌ 단점",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "4. 기능 비교",
            "level": 2,
            "isMainTopic": true,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "5. 결론: 어떤 패키지 매니저를 선택해야 할까?",
            "level": 2,
            "isMainTopic": true,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "🔥 마무리하며",
            "level": 2,
            "isMainTopic": true,
            "position": 600
          }
        ]
      },
      "en": {
        "title": "Comparing JavaScript Package Managers",
        "description": "Comparing features and trade-offs of npm, Yarn, and pnpm package managers",
        "content": "<hr>\n<h1 id=\"heading-0\">Comparing JavaScript Package Managers: npm, Yarn, pnpm</h1>\n<p>Hello developers! 😊 Today, let's talk about <strong>package managers</strong> that are essential in JavaScript development. While most developers have probably run <code>npm install</code> at least once, <code>Yarn</code> and <code>pnpm</code> are also becoming increasingly popular. It's important to understand the characteristics of each to make the right choice.</p>\n<p>So! Let's compare <strong>npm, Yarn, and pnpm</strong> by looking at their advantages and disadvantages. 🚀</p>\n<hr>\n<h2 id=\"heading-1\">1. npm (Node Package Manager)</h2>\n<p><strong>npm</strong> is the default package manager that comes bundled with Node.js. It's the most widely used package manager worldwide, allowing easy installation and management of numerous packages.</p>\n<h3 id=\"heading-2\">✅ Advantages</h3>\n<ul>\n<li><strong>Built into Node.js</strong> so no separate installation is needed.</li>\n<li>Has a <strong>vast ecosystem</strong>, making it easy to find desired packages.</li>\n</ul>\n<h3 id=\"heading-3\">❌ Disadvantages</h3>\n<ul>\n<li>The <code>node_modules</code> folder can become very large, making <strong>project management difficult</strong>.</li>\n<li>Potential dependency issues can lead to <strong>management challenges</strong>.</li>\n</ul>\n<blockquote>\n<p>📝 <strong>When should you choose npm?</strong></p>\n<ul>\n<li>When you don't want to install a separate package manager.</li>\n<li>When you want to develop in the most basic environment.</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"heading-4\">2. Yarn (Yet Another Resource Negotiator)</h2>\n<p><strong>Yarn</strong> is a package manager created to address npm's shortcomings. Many companies use it for its enhanced <strong>speed and security</strong>.</p>\n<h3 id=\"heading-5\">✅ Advantages</h3>\n<ul>\n<li>Excellent stability through <strong>version management with lock files</strong> (<code>yarn.lock</code>).</li>\n<li><strong>Enhanced security</strong> enables installation of trusted packages.</li>\n<li>Supports <strong>parallel installation</strong> for faster package downloads.</li>\n</ul>\n<h3 id=\"heading-6\">❌ Disadvantages</h3>\n<ul>\n<li><code>yarn.lock</code> files may not be compatible with npm, leading to <strong>potential module conflicts</strong>.</li>\n<li>May use <strong>more disk space and memory</strong> than npm.</li>\n</ul>\n<blockquote>\n<p>📝 <strong>When should you choose Yarn?</strong></p>\n<ul>\n<li>When you want to <strong>minimize dependency conflicts</strong> in large projects.</li>\n<li>When you need faster and more secure package management.</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"heading-7\">3. pnpm (Performant npm)</h2>\n<p><strong>pnpm</strong> is a package manager aimed at improving upon npm and Yarn's shortcomings, offering more efficient package management. It provides faster speeds while saving disk space.</p>\n<h3 id=\"heading-8\">✅ Advantages</h3>\n<ul>\n<li>Prevents <code>node_modules</code> bloat through a <strong>disk space-saving</strong> structure.</li>\n<li><strong>About twice as fast</strong> as npm for installations.</li>\n<li>Reduces dependency issues using a <strong>nested <code>node_modules</code> structure</strong>.</li>\n</ul>\n<h3 id=\"heading-9\">❌ Disadvantages</h3>\n<ul>\n<li>Having relatively fewer users than npm and Yarn means <strong>potentially less available information</strong>.</li>\n</ul>\n<blockquote>\n<p>📝 <strong>When should you choose pnpm?</strong></p>\n<ul>\n<li>When you need a <strong>fast and lightweight package manager</strong>.</li>\n<li>When you want to <strong>save disk space</strong> by sharing packages across multiple projects.</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"heading-10\">4. Feature Comparison</h2>\n<table class=\"markdown-table\">\n<thead>\n<tr>\n<th>Feature</th>\n<th>pnpm</th>\n<th>Yarn</th>\n<th>npm</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Workspace Support</td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>Isolated node_modules</td>\n<td>✔️ (default)</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>Auto Peer Installation</td>\n<td>✔️</td>\n<td>❌</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>Plug'n'Play</td>\n<td>✔️</td>\n<td>✔️ (default)</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>Zero-Installs</td>\n<td>❌</td>\n<td>✔️</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>Dependency Patching</td>\n<td>✔️</td>\n<td>✔️</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>Content-addressable Store</td>\n<td>✔️</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"heading-11\">5. Conclusion: Which Package Manager Should You Choose?</h2>\n<p><strong>📌 Choose npm when</strong></p>\n<ul>\n<li>You want to develop in a basic environment without additional installations.</li>\n<li>You want to leverage a large ecosystem.</li>\n</ul>\n<p><strong>📌 Choose Yarn when</strong></p>\n<ul>\n<li>You want fast and stable package management.</li>\n<li>You need rigorous dependency management in team projects.</li>\n</ul>\n<p><strong>📌 Choose pnpm when</strong></p>\n<ul>\n<li>You want fast installation while saving disk space.</li>\n<li>You want to actively utilize the latest technology.</li>\n</ul>\n<hr>\n<h2 id=\"heading-12\">🔥 Final Thoughts</h2>\n<p>Each package manager has its own strengths and weaknesses. It's important to <strong>choose the most suitable package manager</strong> considering your team environment, project scale, and required features! 🚀</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "Comparing JavaScript Package Managers: npm, Yarn, pnpm",
            "level": 1,
            "isMainTopic": true,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "1. npm (Node Package Manager)",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "✅ Advantages",
            "level": 3,
            "isMainTopic": false,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "❌ Disadvantages",
            "level": 3,
            "isMainTopic": false,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "2. Yarn (Yet Another Resource Negotiator)",
            "level": 2,
            "isMainTopic": true,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "✅ Advantages",
            "level": 3,
            "isMainTopic": false,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "❌ Disadvantages",
            "level": 3,
            "isMainTopic": false,
            "position": 300
          },
          {
            "id": "heading-7",
            "text": "3. pnpm (Performant npm)",
            "level": 2,
            "isMainTopic": true,
            "position": 350
          },
          {
            "id": "heading-8",
            "text": "✅ Advantages",
            "level": 3,
            "isMainTopic": false,
            "position": 400
          },
          {
            "id": "heading-9",
            "text": "❌ Disadvantages",
            "level": 3,
            "isMainTopic": false,
            "position": 450
          },
          {
            "id": "heading-10",
            "text": "4. Feature Comparison",
            "level": 2,
            "isMainTopic": true,
            "position": 500
          },
          {
            "id": "heading-11",
            "text": "5. Conclusion: Which Package Manager Should You Choose?",
            "level": 2,
            "isMainTopic": true,
            "position": 550
          },
          {
            "id": "heading-12",
            "text": "🔥 Final Thoughts",
            "level": 2,
            "isMainTopic": true,
            "position": 600
          }
        ]
      }
    },
    "imageHeights": {}
  },
  {
    "id": "signage_android_ver_1",
    "title": "React Native Expo APK 빌드 삽질기",
    "content": "\n### React Native Expo로 APK 빌드하면서 삽질한 이야기\n\n안녕하세요, 여러분! 오늘은 **React Native Expo를 이용해서 APK 빌드를 진행하면서 겪었던 삽질기**를 공유해보려고 합니다. 특히 `http://` API 사용 문제로 고생했던 경험이 있는데, 혹시 비슷한 문제를 겪고 있는 분이 있다면 참고가 되길 바랍니다. 😊\n\n---\n\n## 📦 첫 번째 빌드 – `development` 빌드\n\n처음에는 Expo 공식 문서를 참고하면서 `eas build`를 진행했어요. `eas.json`을 아래처럼 설정하고 빌드 명령어를 실행했죠.\n\n```json\n{\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\"\n    },\n    \"preview\": {\n      \"distribution\": \"internal\"\n    },\n    \"production\": {}\n  }\n}\n```\n\n```bash\neas build --profile development --platform android\n```\n\n빌드 완료 후 Expo.dev에서 APK를 다운로드하고 앱을 실행했더니...  \n🤦‍♂️ **\"development build\"라서 Expo Go 환경에서만 실행 가능하네요.**  \n아, 이런... 이게 아니었죠.\n\n그래서 `development`를 빼고 다시 빌드했습니다.\n\n```bash\neas build --platform android\n```\n\n그러나 이번엔 **AAB 파일이 생성**되었습니다.  \nAAB는 구글 플레이 스토어에 배포할 때 쓰는 포맷이어서 **로컬에서 APK 설치가 불가능**합니다.  \n(저는 단순히 APK를 생성하고 싶었을 뿐인데...)\n\n---\n\n## 🛠 두 번째 빌드 – APK 만들기\n\nAPK를 생성하기 위해 아래와 같이 `eas.json`을 수정했습니다.\n\n```json\n{\n  \"build\": {\n    \"preview\": {\n      \"android\": {\n        \"buildType\": \"apk\"\n      }\n    }\n  }\n}\n```\n\n그리고 다시 빌드!\n\n```bash\neas build -p android --profile preview\n```\n\n드디어 APK가 생성되었습니다! 🎉  \n그런데...  \n🤦‍♂️ **API에서 데이터를 불러오지 않습니다.**  \n\"Network Error\"가 발생하면서 데이터가 표시되지 않았어요.\n\n---\n\n## 🤔 문제 분석 – `http://` API 차단?!\n\n로그를 찍어보니 `AxiosError: Network Error`가 발생했더군요.  \n구글링과 ChatGPT 검색 결과, **Android 9(Pie) 이상에서는 기본적으로 HTTP 트래픽이 차단**된다는 사실을 알게 됐습니다.\n\n이를 해결하려면 **AndroidManifest.xml에 `android:usesCleartextTraffic=\"true\"`를 추가해야 한다**는군요.  \nExpo에서는 `app.json`을 수정해야 합니다.\n\n```json\n{\n  \"expo\": {\n    \"android\": {\n      \"useCleartextTraffic\": true,\n      \"permissions\": [\"INTERNET\", \"ACCESS_NETWORK_STATE\"]\n    }\n  }\n}\n```\n\n수정 후 다시 빌드했지만...  \n**또 실패**. 😭  \n이번에는 `fetch`로 바꿔도 같은 `Network request failed` 에러가 발생했습니다.\n\n---\n\n## 🔍 최종 해결 – `expo-build-properties` 플러그인 설치\n\n결국 Stack Overflow를 뒤지다 해결 방법을 찾았습니다.  \nExpo에서는 **`expo-build-properties` 플러그인을 설치하고, `useCleartextTraffic` 설정을 추가**해야 한다는 것이었어요.\n\n```bash\nnpx expo install expo-build-properties\n```\n\n그리고 `app.json`에서 플러그인을 추가했습니다.\n\n```json\n\"plugins\": [\n  [\n    \"expo-build-properties\",\n    {\n      \"android\": {\n        \"usesCleartextTraffic\": true\n      }\n    }\n  ]\n]\n```\n\n다시 빌드 후 APK를 디컴파일(`apktool` 사용)해서 확인해보니...  \n🤯 **`useCleartextTraffic`이 적용되지 않았습니다!!!**  \n이게 무슨 일이야...\n\n혹시 철자가 틀렸나 싶어서 다시 보니,  \n`useCleartextTraffic` → **`usesCleartextTraffic`(s 추가됨)**\n\n철자 수정 후 다시 빌드하니...  \n🎉 **드디어 성공!!!**\n\n---\n\n## 🚨 추가 문제 – 에뮬레이터 연결 안됨?!\n\n그런데 이걸 해결하고 보니 **에뮬레이터에서 API 요청이 안 되는 문제가 발생**했습니다.  \n해결 방법은 아직 찾고 있는 중인데, Expo의 네트워크 설정을 좀 더 살펴봐야 할 것 같습니다.\n\n---\n\n## 📌 결론 – 삽질하면서 배운 것\n\n1. **APK 빌드는 `buildType: \"apk\"` 설정을 추가해야 함**\n2. **Android 9 이상에서 `http://` API를 사용하려면 `usesCleartextTraffic: true` 설정이 필요함**\n3. **Expo에서는 `expo-build-properties` 플러그인을 설치해야 함**\n4. **오타 조심... `useCleartextTraffic`이 아니라 `usesCleartextTraffic`(s 있음)**\n\n이제야 빌드 과정이 익숙해진 것 같네요.  \n혹시 비슷한 문제를 겪고 있다면 참고하셔서 빠르게 해결하길 바랍니다! 😆\n",
    "date": "2025-02-12",
    "category": "frontend",
    "tags": [
      "React Native",
      "Expo",
      "Android",
      "Mobile"
    ],
    "thumbnail": "/images/react-native.png",
    "translations": {
      "ko": {
        "title": "React Native Expo APK 빌드 삽질기",
        "description": "React Native Expo로 APK 빌드 시 HTTP API 사용 문제와 해결 과정에 대한 상세한 가이드",
        "content": "<h3 id=\"heading-0\">React Native Expo로 APK 빌드하면서 삽질한 이야기</h3>\n<p>안녕하세요, 여러분! 오늘은 <strong>React Native Expo를 이용해서 APK 빌드를 진행하면서 겪었던 삽질기</strong>를 공유해보려고 합니다. 특히 <code>http://</code> API 사용 문제로 고생했던 경험이 있는데, 혹시 비슷한 문제를 겪고 있는 분이 있다면 참고가 되길 바랍니다. 😊</p>\n<hr>\n<h2 id=\"heading-1\">📦 첫 번째 빌드 – <code>development</code> 빌드</h2>\n<p>처음에는 Expo 공식 문서를 참고하면서 <code>eas build</code>를 진행했어요. <code>eas.json</code>을 아래처럼 설정하고 빌드 명령어를 실행했죠.</p>\n<pre><code class=\"language-json\">{\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\"\n    },\n    \"preview\": {\n      \"distribution\": \"internal\"\n    },\n    \"production\": {}\n  }\n}\n</code></pre>\n<pre><code class=\"language-bash\">eas build --profile development --platform android\n</code></pre>\n<p>빌드 완료 후 Expo.dev에서 APK를 다운로드하고 앱을 실행했더니...<br>\n🤦‍♂️ <strong>\"development build\"라서 Expo Go 환경에서만 실행 가능하네요.</strong><br>\n아, 이런... 이게 아니었죠.</p>\n<p>그래서 <code>development</code>를 빼고 다시 빌드했습니다.</p>\n<pre><code class=\"language-bash\">eas build --platform android\n</code></pre>\n<p>그러나 이번엔 <strong>AAB 파일이 생성</strong>되었습니다.<br>\nAAB는 구글 플레이 스토어에 배포할 때 쓰는 포맷이어서 <strong>로컬에서 APK 설치가 불가능</strong>합니다.<br>\n(저는 단순히 APK를 생성하고 싶었을 뿐인데...)</p>\n<hr>\n<h2 id=\"heading-2\">🛠 두 번째 빌드 – APK 만들기</h2>\n<p>APK를 생성하기 위해 아래와 같이 <code>eas.json</code>을 수정했습니다.</p>\n<pre><code class=\"language-json\">{\n  \"build\": {\n    \"preview\": {\n      \"android\": {\n        \"buildType\": \"apk\"\n      }\n    }\n  }\n}\n</code></pre>\n<p>그리고 다시 빌드!</p>\n<pre><code class=\"language-bash\">eas build -p android --profile preview\n</code></pre>\n<p>드디어 APK가 생성되었습니다! 🎉<br>\n그런데...<br>\n🤦‍♂️ <strong>API에서 데이터를 불러오지 않습니다.</strong><br>\n\"Network Error\"가 발생하면서 데이터가 표시되지 않았어요.</p>\n<hr>\n<h2 id=\"heading-3\">🤔 문제 분석 – <code>http://</code> API 차단?!</h2>\n<p>로그를 찍어보니 <code>AxiosError: Network Error</code>가 발생했더군요.<br>\n구글링과 ChatGPT 검색 결과, <strong>Android 9(Pie) 이상에서는 기본적으로 HTTP 트래픽이 차단</strong>된다는 사실을 알게 됐습니다.</p>\n<p>이를 해결하려면 <strong>AndroidManifest.xml에 <code>android:usesCleartextTraffic=\"true\"</code>를 추가해야 한다</strong>는군요.<br>\nExpo에서는 <code>app.json</code>을 수정해야 합니다.</p>\n<pre><code class=\"language-json\">{\n  \"expo\": {\n    \"android\": {\n      \"useCleartextTraffic\": true,\n      \"permissions\": [\"INTERNET\", \"ACCESS_NETWORK_STATE\"]\n    }\n  }\n}\n</code></pre>\n<p>수정 후 다시 빌드했지만...<br>\n<strong>또 실패</strong>. 😭<br>\n이번에는 <code>fetch</code>로 바꿔도 같은 <code>Network request failed</code> 에러가 발생했습니다.</p>\n<hr>\n<h2 id=\"heading-4\">🔍 최종 해결 – <code>expo-build-properties</code> 플러그인 설치</h2>\n<p>결국 Stack Overflow를 뒤지다 해결 방법을 찾았습니다.<br>\nExpo에서는 <strong><code>expo-build-properties</code> 플러그인을 설치하고, <code>useCleartextTraffic</code> 설정을 추가</strong>해야 한다는 것이었어요.</p>\n<pre><code class=\"language-bash\">npx expo install expo-build-properties\n</code></pre>\n<p>그리고 <code>app.json</code>에서 플러그인을 추가했습니다.</p>\n<pre><code class=\"language-json\">\"plugins\": [\n  [\n    \"expo-build-properties\",\n    {\n      \"android\": {\n        \"usesCleartextTraffic\": true\n      }\n    }\n  ]\n]\n</code></pre>\n<p>다시 빌드 후 APK를 디컴파일(<code>apktool</code> 사용)해서 확인해보니...<br>\n🤯 <strong><code>useCleartextTraffic</code>이 적용되지 않았습니다!!!</strong><br>\n이게 무슨 일이야...</p>\n<p>혹시 철자가 틀렸나 싶어서 다시 보니,<br>\n<code>useCleartextTraffic</code> → <strong><code>usesCleartextTraffic</code>(s 추가됨)</strong></p>\n<p>철자 수정 후 다시 빌드하니...<br>\n🎉 <strong>드디어 성공!!!</strong></p>\n<hr>\n<h2 id=\"heading-5\">🚨 추가 문제 – 에뮬레이터 연결 안됨?!</h2>\n<p>그런데 이걸 해결하고 보니 <strong>에뮬레이터에서 API 요청이 안 되는 문제가 발생</strong>했습니다.<br>\n해결 방법은 아직 찾고 있는 중인데, Expo의 네트워크 설정을 좀 더 살펴봐야 할 것 같습니다.</p>\n<hr>\n<h2 id=\"heading-6\">📌 결론 – 삽질하면서 배운 것</h2>\n<ol>\n<li><strong>APK 빌드는 <code>buildType: \"apk\"</code> 설정을 추가해야 함</strong></li>\n<li><strong>Android 9 이상에서 <code>http://</code> API를 사용하려면 <code>usesCleartextTraffic: true</code> 설정이 필요함</strong></li>\n<li><strong>Expo에서는 <code>expo-build-properties</code> 플러그인을 설치해야 함</strong></li>\n<li><strong>오타 조심... <code>useCleartextTraffic</code>이 아니라 <code>usesCleartextTraffic</code>(s 있음)</strong></li>\n</ol>\n<p>이제야 빌드 과정이 익숙해진 것 같네요.<br>\n혹시 비슷한 문제를 겪고 있다면 참고하셔서 빠르게 해결하길 바랍니다! 😆</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "React Native Expo로 APK 빌드하면서 삽질한 이야기",
            "level": 3,
            "isMainTopic": false,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "📦 첫 번째 빌드 – development 빌드",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "🛠 두 번째 빌드 – APK 만들기",
            "level": 2,
            "isMainTopic": true,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "🤔 문제 분석 – http:// API 차단?!",
            "level": 2,
            "isMainTopic": true,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "🔍 최종 해결 – expo-build-properties 플러그인 설치",
            "level": 2,
            "isMainTopic": true,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "🚨 추가 문제 – 에뮬레이터 연결 안됨?!",
            "level": 2,
            "isMainTopic": true,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "📌 결론 – 삽질하면서 배운 것",
            "level": 2,
            "isMainTopic": true,
            "position": 300
          }
        ]
      },
      "en": {
        "title": "Building APK with React Native Expo - A Troubleshooting Journey",
        "description": "A detailed guide on resolving HTTP API issues when building APK with React Native Expo",
        "content": "<h3 id=\"heading-0\">My Journey of Troubleshooting APK Build with React Native Expo</h3>\n<p>Hello everyone! Today I'd like to share my <strong>troubleshooting experience while building an APK with React Native Expo</strong>. I particularly struggled with <code>http://</code> API usage issues, and I hope this helps anyone facing similar problems. 😊</p>\n<hr>\n<h2 id=\"heading-1\">📦 First Build – <code>development</code> Build</h2>\n<p>Initially, I followed the Expo documentation and ran <code>eas build</code>. I configured <code>eas.json</code> as shown below and executed the build command.</p>\n<pre><code class=\"language-json\">{\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\"\n    },\n    \"preview\": {\n      \"distribution\": \"internal\"\n    },\n    \"production\": {}\n  }\n}\n</code></pre>\n<pre><code class=\"language-bash\">eas build --profile development --platform android\n</code></pre>\n<p>After the build is complete, download the APK from Expo.dev and run the app...<br>\n🤦‍♂️ <strong>\"development build\" so it can only be run in the Expo Go environment.</strong><br>\nOh no, this wasn't what I wanted.</p>\n<p>So I removed <code>development</code> and built again.</p>\n<pre><code class=\"language-bash\">eas build --platform android\n</code></pre>\n<p>This time, <strong>an AAB file was created</strong>.<br>\nAAB is the format used when distributing to the Google Play Store, so <strong>local APK installation is not possible</strong>.<br>\n(I just wanted to create an APK, but...)</p>\n<hr>\n<h2 id=\"heading-2\">🛠 Second Build – Creating APK</h2>\n<p>To create an APK, I modified <code>eas.json</code> as follows.</p>\n<pre><code class=\"language-json\">{\n  \"build\": {\n    \"preview\": {\n      \"android\": {\n        \"buildType\": \"apk\"\n      }\n    }\n  }\n}\n</code></pre>\n<p>And then build again!</p>\n<pre><code class=\"language-bash\">eas build -p android --profile preview\n</code></pre>\n<p>Finally, the APK was created! 🎉<br>\nHowever...<br>\n🤦‍♂️ <strong>The data is not loaded from the API.</strong><br>\nThe data did not appear due to the \"Network Error\" error.</p>\n<hr>\n<h2 id=\"heading-3\">🤔 Problem Analysis – <code>http://</code> API Blocked?!</h2>\n<p>When I checked the logs, I saw <code>AxiosError: Network Error</code>.<br>\nAfter searching Google and ChatGPT, I learned that <strong>in Android 9 (Pie) and above, HTTP traffic is blocked by default</strong>.</p>\n<p>To solve this, <strong>you need to add <code>android:usesCleartextTraffic=\"true\"</code> to AndroidManifest.xml</strong>.<br>\nIn Expo, you need to modify <code>app.json</code>.</p>\n<pre><code class=\"language-json\">{\n  \"expo\": {\n    \"android\": {\n      \"useCleartextTraffic\": true,\n      \"permissions\": [\"INTERNET\", \"ACCESS_NETWORK_STATE\"]\n    }\n  }\n}\n</code></pre>\n<p>After modifying, I built again, but...<br>\n<strong>Failed again</strong>. 😭<br>\nThis time, even when I changed to <code>fetch</code>, the same <code>Network request failed</code> error occurred.</p>\n<hr>\n<h2 id=\"heading-4\">🔍 Final Solution – Installing the <code>expo-build-properties</code> Plugin</h2>\n<p>After searching Stack Overflow, I found the solution.<br>\nIn Expo, <strong>you need to install the <code>expo-build-properties</code> plugin and add the <code>useCleartextTraffic</code> setting</strong>.</p>\n<pre><code class=\"language-bash\">npx expo install expo-build-properties\n</code></pre>\n<p>Then, I added the plugin in <code>app.json</code>.</p>\n<pre><code class=\"language-json\">\"plugins\": [\n  [\n    \"expo-build-properties\",\n    {\n      \"android\": {\n        \"usesCleartextTraffic\": true\n      }\n    }\n  ]\n]\n</code></pre>\n<p>After building again, I decompiled the APK using <code>apktool</code> and checked it...<br>\n🤯 <strong><code>useCleartextTraffic</code> was not applied!!!</strong><br>\nWhat's this?</p>\n<p>I thought maybe the spelling was wrong, so I checked it again,<br>\n<code>useCleartextTraffic</code> → <strong><code>usesCleartextTraffic</code>(s added)</strong></p>\n<p>After modifying the spelling, I built again...<br>\n🎉 <strong>Finally succeeded!!!</strong></p>\n<hr>\n<h2 id=\"heading-5\">🚨 Additional Problem – Emulator Connection Not Working?!</h2>\n<p>After solving this, <strong>the problem of API requests not working in the emulator occurred</strong>.<br>\nI'm still looking for a solution, but it seems I need to look into Expo's network settings more.</p>\n<hr>\n<h2 id=\"heading-6\">📌 Conclusion – What I Learned from the Process</h2>\n<ol>\n<li><strong>APK build requires adding the <code>buildType: \"apk\"</code> setting</strong></li>\n<li><strong>In Android 9 and above, <code>http://</code> API requires the <code>usesCleartextTraffic: true</code> setting</strong></li>\n<li><strong>Expo requires installing the <code>expo-build-properties</code> plugin</strong></li>\n<li><strong>Be careful with typos... <code>useCleartextTraffic</code> is not <code>usesCleartextTraffic</code> (s is present)</strong></li>\n</ol>\n<p>I'm finally getting the hang of the build process.<br>\nIf you're experiencing similar issues, I hope this helps you! 😆</p>\n",
        "tocItems": [
          {
            "id": "heading-0",
            "text": "My Journey of Troubleshooting APK Build with React Native Expo",
            "level": 3,
            "isMainTopic": false,
            "position": 0
          },
          {
            "id": "heading-1",
            "text": "📦 First Build – development Build",
            "level": 2,
            "isMainTopic": true,
            "position": 50
          },
          {
            "id": "heading-2",
            "text": "🛠 Second Build – Creating APK",
            "level": 2,
            "isMainTopic": true,
            "position": 100
          },
          {
            "id": "heading-3",
            "text": "🤔 Problem Analysis – http:// API Blocked?!",
            "level": 2,
            "isMainTopic": true,
            "position": 150
          },
          {
            "id": "heading-4",
            "text": "🔍 Final Solution – Installing the expo-build-properties Plugin",
            "level": 2,
            "isMainTopic": true,
            "position": 200
          },
          {
            "id": "heading-5",
            "text": "🚨 Additional Problem – Emulator Connection Not Working?!",
            "level": 2,
            "isMainTopic": true,
            "position": 250
          },
          {
            "id": "heading-6",
            "text": "📌 Conclusion – What I Learned from the Process",
            "level": 2,
            "isMainTopic": true,
            "position": 300
          }
        ]
      }
    },
    "imageHeights": {}
  }
]