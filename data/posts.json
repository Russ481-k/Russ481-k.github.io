[
  {
    "id": "about-me",
    "title": "개발자 윤수빈입니다.",
    "content": "<h2 id=\"heading-0\">About Me</h2>\n<p>금융공학과 데이터 처리에 특화된 풀스택 엔지니어입니다. Next.js, Python, Java를 활용하여 대규모 데이터 처리 및 금융 시스템을 구축하며, 알고리즘 최적화와 안정적인 웹 솔루션 개발에 중점을 두고 있습니다.</p>\n<p>다양한 프로젝트 경험을 통해 복잡한 데이터 구조를 효율적으로 처리하고, 금융 모델을 실시간으로 구현하는 데 강점을 가지고 있습니다. 금융 플랫폼 개발에 있어 혁신적인 접근을 추구하며, 확장성 있는 웹 애플리케이션과 데이터를 활용한 전략적 시스템 구축을 통해 비즈니스 가치를 창출하고자 합니다.</p>\n<h2 id=\"heading-1\">Contact</h2>\n<ul>\n<li><strong>Location</strong>: Busan, South Korea</li>\n<li><strong>E-mail</strong>: yunsubin481@gmail.com</li>\n<li><strong>Notion</strong>: <a href=\"https://binsspace.notion.site/Bin-s-Space\">Bin's Space</a></li>\n</ul>\n<h2 id=\"heading-2\">Research &amp; Studies</h2>\n<ul>\n<li><strong>금융공학</strong>: 투자론, 거시경제, 회계 연구</li>\n<li><strong>컴퓨터 과학</strong>: 자료구조, 네트워크, 데이터베이스, AI 연구</li>\n<li><strong>블록체인</strong>: STO 기반 증권형 토큰 거래소, NFT 거래소 프로젝트 연구</li>\n</ul>\n<h2 id=\"heading-3\">Education</h2>\n<ul>\n<li><strong>2018 - 2019</strong>: Bachelor of Business (독학학위제)\n<ul>\n<li>금융공학, 투자론, 거시경제, 회계 전공</li>\n</ul>\n</li>\n<li><strong>2019 - 2024</strong>: Bachelor of Computer Science (독학학위제)\n<ul>\n<li>자료구조, 네트워크, 데이터베이스, AI 전공</li>\n</ul>\n</li>\n<li><strong>2022 - 2023</strong>: BootCamp BlockChain (CodeStates)\n<ul>\n<li>STO, NFT, DeFi 플랫폼 개발 과정 수료</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"heading-4\">Experience</h2>\n<h3 id=\"heading-5\">VISIONTEC (FullStack Developer)</h3>\n<p><strong>2024-05 ~ 2025-01</strong></p>\n<ul>\n<li>삼성화재, 한양대학교 데이터 관리 시스템 총괄</li>\n<li>실시간 데이터 처리 속도 최적화 (800건/초 → 25,000건/초)</li>\n<li>대규모 로그 데이터 분석 및 시각화 시스템 구축</li>\n<li>Next.js, PostgreSQL, Prisma, Docker, ChakraUI</li>\n<li>기획 및 디자인 포함 기여도 100%</li>\n</ul>\n<p><strong>2024-01 ~ 2024-05</strong></p>\n<ul>\n<li>금융 ERP 시스템 마이그레이션</li>\n<li>레거시 시스템을 React와 Flask 기반으로 현대화</li>\n<li>실시간 금융 데이터 처리 및 성능 최적화</li>\n<li>React, ChakraUI, Python Flask, MariaDB</li>\n<li>기여도 35%</li>\n</ul>\n<h3 id=\"heading-6\">IDINO (FullStack Developer)</h3>\n<p><strong>2024-05 ~ 현재</strong></p>\n<ul>\n<li>학사행정 시스템 개발</li>\n<li>마산대학교, 강원대학교, 여주대학교 장학생 관리 시스템 개발</li>\n<li>기업 협업 및 자문 결재 시스템 개발</li>\n<li>교원 평가 관리 및 학생 평가 관리 시스템 구축</li>\n<li>JAVA JSP, WebSquare, MySQL</li>\n<li>기여도 35%</li>\n</ul>\n<h3 id=\"heading-7\">KT, NAVER, KAKAO 연동 (Frontend Developer)</h3>\n<p><strong>2023-09 ~ 2024-01</strong></p>\n<ul>\n<li>문자 대량 발송 상담 챗봇 관리 시스템 개발</li>\n<li>Redux를 이용한 사용자 데이터 및 권한 관리 기능 구현</li>\n<li>KT API를 통한 대량 문자 발송 기능 구현</li>\n<li>카카오톡 알림톡 대량 발송 기능 구현</li>\n<li>챗봇 시나리오 및 템플릿 관리 기능 구현</li>\n<li>기여도 90%</li>\n</ul>\n<h3 id=\"heading-8\">NICEpay, 반응형 웹 (Frontend Developer)</h3>\n<p><strong>2023-04 ~ 2023-09</strong></p>\n<ul>\n<li>전자문서 및 전자고지 발송 기능 개발</li>\n<li>NICEpay 결제 기능 연동</li>\n<li>통계 페이지 및 반응형 웹 기능 개발</li>\n</ul>\n<p><img src=\"/images/profile3.jpg\" alt=\"Profile Image 3\"></p>\n<h2 id=\"heading-9\">Core Competencies</h2>\n<h3 id=\"heading-10\">금융 시스템 개발 전문성</h3>\n<p>복잡한 금융 모델을 실시간으로 처리하고 시각화하는 시스템 개발에 전문성을 보유하고 있습니다.\n대규모 데이터 처리 시스템 구축 경험을 통해, 금융 시장의 빠른 변화에 대응할 수 있는 확장성 있는 솔루션을 제공합니다.</p>\n<h3 id=\"heading-11\">지속적인 학습과 혁신</h3>\n<p>금융 시장과 기술의 빠른 변화에 대응하기 위해 끊임없이 새로운 것을 학습하고 있습니다.\n독학으로 금융공학과 컴퓨터 과학을 습득했으며, 블록체인과 같은 최신 기술을 금융 시스템에 접목시키는 시도를 지속하고 있습니다.</p>\n<h3 id=\"heading-12\">문제 해결 능력</h3>\n<p>복잡한 금융 데이터 처리 문제를 분석하고 효과적인 해결책을 찾아내는 과정에서 큰 성과를 이루어냈습니다.\n삼성화재와 한양대학교 프로젝트에서 데이터 처리 속도를 획기적으로 향상시킨 경험은 문제 해결에 대한 자신감을 더해주었습니다.</p>\n<h3 id=\"heading-13\">건강한 신체 관리</h3>\n<p>지속적인 성과 창출을 위해 체력 관리를 중요하게 생각합니다.\n주 5회, 하루 1시간 30분의 꾸준한 운동을 통해 업무 효율성과 집중력을 유지하고 있습니다.</p>\n",
    "date": "2024-03-20",
    "category": "about",
    "tags": [
      "Full Stack",
      "Next.js",
      "Python",
      "Financial"
    ],
    "description": "Hello! 👋 I am a Full Stack Engineer specialized in Financial Engineering and Data Processing.",
    "thumbnail": "/images/profile1.jpg",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "About Me",
        "level": 2,
        "isMainTopic": true,
        "position": 19.9140625
      },
      {
        "id": "heading-1",
        "text": "Contact",
        "level": 2,
        "isMainTopic": true,
        "position": 200.7421875
      },
      {
        "id": "heading-2",
        "text": "Research & Studies",
        "level": 2,
        "isMainTopic": true,
        "position": 323.5703125
      },
      {
        "id": "heading-3",
        "text": "Education",
        "level": 2,
        "isMainTopic": true,
        "position": 449.3984375
      },
      {
        "id": "heading-4",
        "text": "Experience",
        "level": 2,
        "isMainTopic": true,
        "position": 632.7265625
      },
      {
        "id": "heading-5",
        "text": "VISIONTEC (FullStack Developer)",
        "level": 3,
        "isMainTopic": false,
        "position": 680.140625
      },
      {
        "id": "heading-6",
        "text": "IDINO (FullStack Developer)",
        "level": 3,
        "isMainTopic": false,
        "position": 1017.078125
      },
      {
        "id": "heading-7",
        "text": "KT, NAVER, KAKAO 연동 (Frontend Developer)",
        "level": 3,
        "isMainTopic": false,
        "position": 1227.515625
      },
      {
        "id": "heading-8",
        "text": "NICEpay, 반응형 웹 (Frontend Developer)",
        "level": 3,
        "isMainTopic": false,
        "position": 1439.453125
      },
      {
        "id": "heading-9",
        "text": "Core Competencies",
        "level": 2,
        "isMainTopic": true,
        "position": 0
      },
      {
        "id": "heading-10",
        "text": "금융 시스템 개발 전문성",
        "level": 3,
        "isMainTopic": false,
        "position": 1628.5859375
      },
      {
        "id": "heading-11",
        "text": "지속적인 학습과 혁신",
        "level": 3,
        "isMainTopic": false,
        "position": 1676
      },
      {
        "id": "heading-12",
        "text": "문제 해결 능력",
        "level": 3,
        "isMainTopic": false,
        "position": 1775.4375
      },
      {
        "id": "heading-13",
        "text": "건강한 신체 관리",
        "level": 3,
        "isMainTopic": false,
        "position": 1874.875
      }
    ],
    "imageHeights": {
      "img-9": 18.5
    }
  },
  {
    "id": "convention_document",
    "title": "Convention Document",
    "content": "<h2 id=\"heading-0\">1. 목적</h2>\n<ol>\n<li>개발 표준화: 프론트엔드 개발에 일관성을 부여하여 코드의 가독성과 유지보수성을 높입니다.</li>\n<li>팀 협업 강화: 개발자들 간의 협업을 원활하게 하고 의사소통을 개선합니다.</li>\n<li>새로운 개발자 온보딩: 새로 합류한 개발자가 프로젝트에 빠르게 적응하고 효율적으로 개발할 수 있도록 돕습니다.</li>\n<li>코드 품질 향상: 일관된 코딩 스타일과 최적화 기법을 적용하여 코드의 품질을 향상시킵니다.</li>\n<li>유지보수성 강화: 일관된 구조와 명명 규칙을 통해 코드의 가독성을 높이고 유지보수를 용이하게 합니다.</li>\n</ol>\n<h2 id=\"heading-1\">2. 코딩 스타일 가이드</h2>\n<h3 id=\"heading-2\">2.1. 들여쓰기</h3>\n<ol>\n<li>Prettier의 기본설정으로 들여쓰기 합니다.</li>\n</ol>\n<h3 id=\"heading-3\">2.2. 변수와 상수</h3>\n<p>변수와 상수는 프론트엔드 개발에서 중요한 개념입니다. 이 섹션에서는 변수와 상수의 사용에 대한 가이드라인을 설명합니다.</p>\n<ol>\n<li>변수명과 상수명\n<ul>\n<li>변수명과 상수명은 의미를 명확하게 전달할 수 있도록 짓는 것이 좋습니다.</li>\n<li>변수명과 상수명은 영문을 사용하여 작성합니다.</li>\n<li>여러 단어로 이루어진 경우에는 단어 사이를 카멜케이스로 구분합니다. 예: myVariable, userName</li>\n</ul>\n</li>\n<li>변수의 선언과 할당\n<ul>\n<li>변수를 선언할 때에는 let 키워드를 사용합니다. 예: let count = 0;</li>\n<li>변수의 값은 필요에 따라 언제든지 변경할 수 있습니다.</li>\n</ul>\n</li>\n<li>상수의 선언과 할당\n<ul>\n<li>상수를 선언할 때에는 const 키워드를 사용합니다. 예: const PI = 3.14;</li>\n<li>상수는 한 번 할당된 값은 변경할 수 없습니다.</li>\n</ul>\n</li>\n<li>변수와 상수의 초기화\n<ul>\n<li>변수와 상수는 선언과 동시에 초기값을 할당하는 것이 좋습니다.</li>\n<li>초기화되지 않은 변수나 상수는 의도치 않은 동작을 야기할 수 있으므로 주의해야 합니다.</li>\n</ul>\n</li>\n</ol>\n<p>변수와 상수는 프로그램의 데이터를 저장하고 조작하는 데에 필수적인 요소입니다. 적절하게 변수와 상수를 활용하여 가독성 높은 코드를 작성하고, 필요에 따라 값의 변경 여부를 고려하여 변수와 상수를 선택하시기 바랍니다.</p>\n<h3 id=\"heading-4\">2.3. 함수와 메서드</h3>\n<p>함수와 메서드는 프론트엔드 개발에서 코드의 재사용성과 모듈화를 위해 중요한 요소입니다. 이 섹션에서는 함수와 메서드의 사용에 대한 가이드라인을 제시합니다.</p>\n<ol>\n<li>함수와 메서드의 정의\n<ul>\n<li>함수는 독립적으로 동작하는 코드 블록입니다. 주어진 입력을 받아서 처리하고, 결과를 반환할 수 있습니다.</li>\n<li>메서드는 객체에 속해 있는 함수로, 객체의 상태를 조작하거나 객체의 동작을 수행합니다.</li>\n</ul>\n</li>\n<li>함수와 메서드의 명명 규칙\n<ul>\n<li>함수와 메서드의 이름은 동사 형태로 짓는 것이 일반적입니다. 예: calculateTotal, loginUser</li>\n<li>함수와 메서드의 이름은 의미를 명확하게 전달할 수 있도록 작성해야 합니다.</li>\n<li>여러 단어로 이루어진 경우에는 카멜 케이스(camelCase)를 사용하여 작성합니다. 예: calculateTaxAmount, loginUserWithCredentials</li>\n</ul>\n</li>\n<li>함수와 메서드의 매개변수\n<ul>\n<li>함수와 메서드는 필요한 입력값을 매개변수(parameter)로 받을 수 있습니다.</li>\n<li>매개변수의 이름은 변수와 동일한 명명 규칙을 따르며, 입력값의 의미를 잘 표현할 수 있도록 작성해야 합니다.</li>\n</ul>\n</li>\n<li>함수와 메서드의 반환값\n<ul>\n<li>함수와 메서드는 필요에 따라 결과값을 반환할 수 있습니다.</li>\n<li>반환값의 타입은 명확하게 정의하고, 함수 또는 메서드의 목적과 일치하는 데이터를 반환해야 합니다.</li>\n</ul>\n</li>\n<li>함수와 메서드의 범위\n<ul>\n<li>함수와 메서드는 선언된 블록(scope) 내에서 유효합니다. 함수 내부에서 선언된 변수는 함수 내에서만 사용할 수 있으며, 함수 외부에서는 접근할 수 없습니다.</li>\n</ul>\n</li>\n</ol>\n<p>함수와 메서드는 코드의 재사용성과 유지보수성을 높여주는 도구입니다. 적절하게 함수와 메서드를 활용하여 코드를 구성하고, 가독성과 유연성을 고려하여 함수와 메서드를 설계하시기 바랍니다.</p>\n<h3 id=\"heading-5\">2.4. 컴포넌트</h3>\n<p>클래스와 컴포넌트는 객체지향 프로그래밍과 리액트 프론트엔드 개발에서 중요한 개념입니다. 이 섹션에서는 클래스와 컴포넌트의 사용에 대한 가이드라인을 제시합니다.</p>\n<ol>\n<li>컴포넌트의 정의\n<ul>\n<li>컴포넌트는 UI의 독립적인 구성 요소입니다. 화면에 특정한 기능을 가진 모듈 형태로 나타낼 수 있습니다.</li>\n<li>리액트에서 컴포넌트는 클래스로 정의될 수도 있고, 함수로 정의될 수도 있습니다. 클래스 컴포넌트와 함수형 컴포넌트가 있습니다.</li>\n</ul>\n</li>\n<li>컴포넌트의 명명 규칙\n<ul>\n<li>컴포넌트의 이름은 대문자로 시작해야 합니다.</li>\n<li>컴포넌트의 이름은 명사나 명사구로 짓는 것이 일반적입니다. 예: User, LoginForm, Header</li>\n</ul>\n</li>\n<li>상속과 확장성\n<ul>\n<li>컴포넌트는 상속을 통해 기존의 컴포넌트를 확장할 수 있습니다. 이를 통해 코드의 재사용성과 확장성을 높일 수 있습니다.</li>\n<li>상속을 사용할 때는 상속받은 컴포넌트의 기능을 잘 이해하고, 필요한 부분을 재정의하여 사용해야 합니다.</li>\n</ul>\n</li>\n</ol>\n<p>컴포넌트는 객체지향 개념과 리액트 개발에서 핵심적인 역할을 수행합니다.컴포넌트를 잘 이해하고 적절하게 활용하여 유지보수 가능하고 확장성 있는 코드를 작성해야 합니다.</p>\n<h3 id=\"heading-6\">2.5. 주석</h3>\n<p>주석은 코드에 대한 설명이나 추가 정보를 제공하기 위해 사용됩니다. 올바른 주석 작성은 코드의 가독성과 유지보수성을 향상시키는 데 도움이 됩니다. 아래는 주석 작성에 대한 가이드라인입니다.</p>\n<ol>\n<li>주석의 목적\n<ul>\n<li>주석의 사용을 최대한 지양하며 필수적인 경우에만 사용합니다.</li>\n<li>중요한 사항이나 추후에 작업을 필요로하는 부분을 강조하는 주석을 작성합니다.</li>\n</ul>\n</li>\n<li>주석의 작성 규칙\n<ul>\n<li>주석은 명확하고 간결하게 작성되어야 합니다.</li>\n<li>주석은 코드에 비해 적절한 수로 작성되어야 합니다. 과도한 주석은 코드를 가독성이 떨어뜨릴 수 있습니다.</li>\n<li>주석은 필요한 부분에 작성되어야 하며, 필요 없는 주석은 삭제되어야 합니다.</li>\n<li>주석은 코드의 변경에 따라 업데이트되어야 합니다.</li>\n</ul>\n</li>\n</ol>\n<p>주석은 코드를 이해하고 유지보수하기 쉽게 만들어줍니다. 주석을 적절하게 작성하여 코드를 더욱 명확하고 의미 있는 형태로 유지해야 합니다.</p>\n<h3 id=\"heading-7\">2.6. 네이밍 규칙</h3>\n<p>일관된 네이밍 규칙은 코드의 가독성과 일관성을 유지하는 데 중요합니다. 아래는 네이밍 규칙에 대한 가이드라인입니다.</p>\n<ol>\n<li>변수와 상수 네이밍\n<ul>\n<li>의미 전달: 변수와 상수의 이름은 해당 값을 잘 설명해야 합니다. 다른 개발자들이 이름만으로 변수의 역할과 용도를 이해할 수 있어야 합니다.</li>\n<li>카멜 케이스: 변수와 상수의 이름은 카멜 케이스를 사용합니다. 첫 단어는 소문자로 시작하고, 이후 단어의 첫 글자는 대문자로 작성합니다. 예: firstName, userAge</li>\n<li>가독성: 변수의 길이는 적절하게 설정해야 합니다. 너무 짧으면 의미 전달이 어려우며, 너무 길면 가독성이 저하될 수 있습니다.</li>\n</ul>\n</li>\n<li>함수와 메서드 네이밍\n<ul>\n<li>동사 형태: 함수와 메서드의 이름은 동사로 시작해야 합니다. 동작하는 기능을 잘 설명하는 동사를 선택합니다. 예: getUserData, calculateTotal</li>\n<li>카멜 케이스: 함수와 메서드의 이름은 카멜 케이스를 사용합니다. 첫 단어는 소문자로 시작하고, 이후 단어의 첫 글자는 대문자로 작성합니다. 예: fetchData, updateProfile</li>\n</ul>\n</li>\n<li>컴포넌트 네이밍\n<ul>\n<li>파스칼 케이스: 컴포넌트의 이름은 파스칼 케이스를 사용합니다. 모든 단어의 첫 글자를 대문자로 작성하고, 단어 사이에는 공백이 없습니다. 예: UserService, HomePage</li>\n<li>명확한 역할: 클래스와 컴포넌트의 이름은 해당 역할을 명확하게 전달해야 합니다. 다른 개발자들이 이름만으로 해당 클래스나 컴포넌트의 역할을 이해할 수 있어야 합니다.</li>\n</ul>\n</li>\n<li>폴더 디렉토리 파일 네이밍: routes와 type폴더를 제외하고 src의 모든 폴더 내의 파일의 이름은 index로 통일합니다.\n<ul>\n<li>컴포넌트 폴더\n<ul>\n<li>대문자와 파스칼 케이스: 파일의 이름은 첫 글자를 대문자로 작성하고, 단어 사이에는 공백이 없습니다</li>\n</ul>\n</li>\n<li>이외의 폴더\n<ul>\n<li>소문자와 하이픈: 파일의 이름은 소문자로 작성하며, 여러 단어는 하이픈으로 구분합니다. 예: user-service.js, home-page.tsx</li>\n</ul>\n</li>\n<li>파일 확장자: 파일의 확장자는 해당 파일의 유형에 맞게 설정합니다. 예: .ts, .tsx</li>\n</ul>\n</li>\n</ol>\n<p>일관된 네이밍 규칙을 따르면 코드의 가독성이 향상되고 협업 시에도 일관성을 유지할 수 있습니다. 모든 개발자들이 네이밍 규칙을 공유하고 준수하도록 합니다.</p>\n<h3 id=\"heading-8\">2.7. 코드 포맷팅</h3>\n<p>일관된 코드 포맷팅은 가독성을 향상시키고 협업을 용이하게 만듭니다.</p>\n<p>아래는 코드 포맷팅에 대한 가이드라인이며 순서대로 구성됩니다.</p>\n<ul>\n<li>\n<p>대분류(1,2,3…)를 기준으로 한 줄 띄웁니다.</p>\n</li>\n<li>\n<p>소분류(a,b,c…)는 띄우지 않습니다.</p>\n<ol>\n<li>\n<p>import Module</p>\n<pre><code class=\"language-jsx\">import {\n  Box,\n  Flex,\n  FormControl,\n  FormLabel,\n  Input,\n} from \"@chakra-ui/react\";\nimport { useMemo } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\n</code><p><code class=\"language-jsx\">import { CodeSelect } from \"@mobyen-frontend/common\";<br>import useUserRoles from \"features/user/hooks/useUserRoles\";<br></code></p></pre><p></p><ol>\n<li>외부 모듈: from 이후를 기준, 알파벳 순으로 정렬합니다.</li>\n<li>내부 모듈: from 이후를 기준, 알파벳 순으로 정렬합니다.</li>\n</ol>\n</li>\n<li>\n<p>interface: 스코프 내에 있는 내용을 알파벳 순서대로 정렬합니다.</p>\n<pre><code class=\"language-jsx\">interface SearchPanelProps {\n  isSearching: boolean;\n  onChange: (param: {\n    email: string | null,\n    ext: string | null,\n    mobile: string | null,\n    name: string | null,\n    tel: string | null,\n    userRole: string | null,\n    useYN: string | null,\n  }) =&gt; void;\n  onReset: () =&gt; void;\n}\n</code></pre>\n</li>\n<li>\n<p>defaultProps: 스코프 내에 있는 내용을 알파벳 순서대로 정렬합니다.</p>\n<pre><code class=\"language-jsx\">const defaultProps = {\n  isSearching: false,\n  onChange(_param: {\n    email: null,\n    ext: null,\n    mobile: null,\n    name: null,\n    tel: null,\n    userRole: null,\n    useYN: null,\n  }) {},\n  onReset() {},\n};\n</code></pre>\n</li>\n<li>\n<p>component</p>\n<pre><code class=\"language-jsx\">function SearchPanel({ isSearching, onChange, onReset }: SearchPanelProps) {\n  const { handleSubmit, register, reset, resetField } = useForm&lt;{\n    search: string;\n    searchType?: \"email\" | \"ext\" | \"mobile\" | \"name\" | \"tel\";\n    useYN: string;\n    userRole: string;\n  }&gt;();\n\n<p>  const { data: userRoles } = useUserRoles({ publicYN: \"Y\" });</p><p>  const handleFormSubmit = handleSubmit(<br>    ({ search, searchType, userRole, useYN }) =&gt; {<br>      let email = null;<br>      let ext = null;<br>      let mobile = null;<br>      let name = null;<br>      let tel = null;<br>      if (searchType) {<br>        email = searchType === \"email\" ? search : null;<br>        ext = searchType === \"ext\" ? search : null;<br>        mobile = searchType === \"mobile\" ? search : null;<br>        name = searchType === \"name\" ? search : null;<br>        tel = searchType === \"tel\" ? search : null;<br>      } else {<br>        resetField(\"search\");<br>      }<br>      onChange({<br>        email: email ?? null,<br>        ext: ext ?? null,<br>        mobile: mobile ?? null,<br>        name: name ?? null,<br>        tel: tel ?? null,<br>        userRole: userRole ? userRole : null,<br>        useYN: useYN ? useYN : null,<br>      });<br>    }<br>  );</p><p>  const handleResetButtonClick = () =&gt; {<br>    reset();<br>    onReset();<br>  };</p><p>  const userRoleOptions = useMemo(<br>    () =&gt;<br>      userRoles?.map((role) =&gt; ({<br>        code: String(role.id),<br>        name: role.name ?? \"\",<br>      })) ?? [],<br>    [userRoles]<br>  );<br>  const searchTypeOption = [<br>    {<br>      code: \"name\",<br>      name: \"이름\",<br>    },<br>    {<br>      code: \"email\",<br>      name: \"이메일\",<br>    },<br>    {<br>      code: \"tel\",<br>      name: \"전화번호\",<br>    },<br>    {<br>      code: \"ext\",<br>      name: \"내선번호\",<br>    },<br>    {<br>      code: \"mobile\",<br>      name: \"휴대폰번호\",<br>    },<br>  ];</p></code><p><code class=\"language-jsx\">  return (<br>    &lt;Flex<br>      as=\"form\"<br>      flexDirection=\"column\"<br>      gap={2}<br>      onSubmit={handleFormSubmit}<br>      width=\"100%\"<br>    &gt;<br>      &lt;Box<br>        borderBottomColor=\"black\"<br>        borderBottomWidth=\"1px\"<br>        borderTopColor=\"black\"<br>        borderTopWidth=\"1px\"<br>        p={3}<br>      &gt;<br>        &lt;FormControl&gt;<br>          &lt;FormLabel fontSize=\"xs\" fontWeight=\"bold\" htmlFor=\"userRole\"&gt;<br>            검색조건<br>          &lt;/FormLabel&gt;<br>          &lt;Flex flexWrap=\"wrap\" gap={2}&gt;<br>            &lt;CodeSelect<br>              codes={userRoleOptions}<br>              flex={{ md: 1 }}<br>              id=\"userRole\"<br>              minWidth={{ md: \"150px\" }}<br>              maxWidth={{ lg: \"200px\" }}<br>              placeholder=\"권한\"<br>              {...register(\"userRole\")}<br>            /&gt;<br>            &lt;CodeSelect<br>              codes={[<br>                { code: \"Y\", name: \"사용\" },<br>                { code: \"N\", name: \"미사용\" },<br>              ]}<br>              flex={{ sm: 1 }}<br>              id=\"useYN\"<br>              maxWidth={{ lg: \"200px\" }}<br>              minWidth={{ md: \"150px\" }}<br>              placeholder=\"사용여부\"<br>              {...register(\"useYN\")}<br>            /&gt;<br>            &lt;CodeSelect<br>              codes={searchTypeOption}<br>              flex={{ sm: 1 }}<br>              id=\"searchType\"<br>              maxWidth={{ lg: \"170px\" }}<br>              minWidth={{ md: \"130px\" }}<br>              placeholder=\"검색조건\"<br>              {...register(\"searchType\")}<br>            /&gt;<br>            &lt;Input<br>              flex={{ md: 2 }}<br>              id=\"search\"<br>              maxWidth={{ lg: \"300px\" }}<br>              minWidth={{ md: \"200px\" }}<br>              placeholder=\"검색어\"<br>              {...register(\"search\")}<br>            /&gt;<br>            &lt;Input<br>              disabled={isSearching}<br>              hidden<br>              id=\"searchButton\"<br>              type=\"submit\"<br>            /&gt;<br>            &lt;Input<br>              hidden<br>              id=\"resetButton\"<br>              type=\"button\"<br>              onClick={handleResetButtonClick}<br>            /&gt;<br>          &lt;/Flex&gt;<br>        &lt;/FormControl&gt;<br>      &lt;/Box&gt;<br>    &lt;/Flex&gt;<br>  );<br>}<br></code></p></pre><p></p><ol>\n<li>리액트 훅: 선언 명을 기준, 알파벳 순으로 정렬합니다.</li>\n<li>커스텀 훅: 선언 명을 기준, 알파벳 순으로 정렬합니다.</li>\n<li>useState: 첫 번째 상태변수를 기준, 알파벳 순으로 정렬합니다.</li>\n<li>function: 선언 명을 기준, 알파벳 순으로 정렬합니다.</li>\n<li>useEffect</li>\n<li>watch 함수</li>\n</ol>\n</li>\n<li>\n<p>defaultProps</p>\n<pre><code class=\"language-jsx\">SearchPanel.defaultProps = defaultProps;\n</code></pre>\n</li>\n<li>\n<p>export default</p>\n<pre><code class=\"language-jsx\">export default SearchPanel;\n</code></pre>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"heading-9\">2.8. 에러 처리</h3>\n<p>애플리케이션에서 발생하는 에러를 적절히 처리하는 것은 안정성과 예외 상황에 대한 대응력을 향상시킵니다. 아래는 에러 처리에 대한 가이드라인입니다.</p>\n<ol>\n<li>예외 처리: 예외 상황이 발생할 수 있는 코드 블록에는 적절한 예외 처리를 구현합니다. 이는 try-catch 문을 사용하여 예외를 캐치하고, 적절한 로그 메시지를 출력하거나 사용자에게 에러 메시지를 표시하는 등의 처리를 수행합니다.</li>\n<li>에러 핸들링: 애플리케이션의 최상위 수준에서 에러 핸들링을 구현합니다. 이는 예상치 못한 예외 상황이 발생했을 때 알림을 표시하고, 사용자에게 적절한 안내를 제공하는 등의 처리를 수행합니다.</li>\n<li>로깅: 에러 발생 시 로그를 기록하고 추적 가능한 정보를 포함시킵니다. 이는 디버깅과 문제 해결에 도움을 줄 수 있습니다.</li>\n<li>사용자 피드백: 에러 발생 시 사용자에게 적절한 피드백을 제공합니다. 이는 사용자가 문제 상황을 이해하고 대처할 수 있도록 도움을 줄 수 있습니다.</li>\n<li>예외 처리 모듈: 애플리케이션에서 공통적으로 발생하는 예외 상황에 대한 처리를 모듈화하여 재사용성을 높일 수 있습니다.</li>\n</ol>\n<p>애플리케이션에서 발생할 수 있는 예외 상황을 사전에 고려하고, 적절한 에러 처리를 구현하여 안정성과 사용자 경험을 개선하는 것이 좋습니다.</p>\n<h2 id=\"heading-10\">3. 프로젝트 구조</h2>\n<h3 id=\"heading-11\">3.1. 파일 및 폴더 구조</h3>\n<pre><code class=\"language-jsx\">- `package`: 프로젝트의 루트 디렉토리\n    - `app`: 애플리케이션의 소스 코드와 관련된 디렉토리\n        - `node_modules`: 프로젝트의 의존성 패키지들이 설치되는 디렉토리\n        - `public`: 정적 파일이 위치하는 디렉토리\n        - `src`: 소스 코드가 위치하는 디렉토리입니다.\n            - `api`: 서버 API와 통신하는 코드가 위치하는 디렉토리입니다.\n            - `assets`: 애플리케이션에서 사용되는 정적 리소스(이미지, 아이콘 등)가 위치\n            - `components`: 재사용 가능한 React 컴포넌트들이 위치하는 디렉토리\n            - `features`: 애플리케이션의 기능별로 구성된 모듈이 위치하는 디렉토리\n            - `libs`: 애플리케이션에서 사용되는 유틸리티 함수, 헬퍼 클래스 등이 위치\n            - `redux`: 리덕스의 리듀서, 액션, 미들웨어 등이 포함됩니다.\n            - `routes`: 라우팅과 관련된 코드가 위치하는 디렉토리입니다.\n            - `type`: 타입 정의 파일이 위치하는 디렉토리입니다.\n            - `App.css`: 애플리케이션 전체에 적용되는 CSS 스타일을 정의\n            - `App.test.tsx`: 애플리케이션의 테스트 코드가 위치하는 파일\n            - `index.css`: index.html 파일에서 사용되는 전역 CSS 스타일을 정의하는 파일\n            - `index.tsx`: React DOM 렌더링을 수행하는 코드가 이 파일에 포함됩니다.\n            - `react-app-env.d.ts`: Create React App에 의해 자동 생성되는 TypeScript 환경 설정 파일\n            - `reportWebVitals.ts`: 웹 애플리케이션의 성능 측정을 위한 코드가 위치하는 파일\n            - `setupProxy.js`: 개발 환경에서 프록시 설정을 위한 파일, 개발 서버와 API 서버 간의 통신을 프록시하는데 사용됩니다.\n            - `setupTest.ts`: 테스트 환경 설정을 위한 파일\n            - `theme.ts`: 애플리케이션의 테마 설정을 관리하는 파일\n    - `common`: 재사용되는 코드나 모듈들을 관리하는 디렉토리\n        - `dist`: 재사용되는 코드의 빌드 결과물이 위치하는 디렉토리\n        - `src`: 재사용되는 코드의 소스 파일들이 위치하는 디렉토리\n        - `package.json`: 재사용되는 코드의 의존성 패키지들을 관리하는 파일\n        - `tsconfig.json`: 재사용되는 코드의 TypeScript 환경 설정 파일\n</code></pre>\n<h3 id=\"heading-12\">3.2. 모듈화와 컴포넌트 구성</h3>\n<p>모듈화와 컴포넌트 구성은 코드의 재사용성과 유지보수성을 높이는 중요한 요소입니다. 아래는 모듈화와 컴포넌트 구성에 대한 가이드라인입니다.</p>\n<ol>\n<li>모듈화:\n<ul>\n<li>기능 단위로 모듈을 분리하여 개발합니다. 각 모듈은 특정 기능을 수행하도록 설계되며, 관련된 코드와 리소스를 포함해야 합니다.</li>\n<li>모듈 간의 의존성을 최소화하고, 각 모듈이 독립적으로 작동할 수 있도록 설계합니다. 이는 모듈 간의 결합도를 낮추고 유연성을 높일 수 있습니다.</li>\n<li>모듈의 인터페이스를 명확하게 정의하고, 다른 모듈에서 재사용할 수 있는 API를 제공합니다.</li>\n<li>모듈의 구현을 추상화하고, 내부 구현의 변경에 유연하게 대처할 수 있도록 설계합니다.</li>\n</ul>\n</li>\n<li>컴포넌트 구성:\n<ul>\n<li>컴포넌트는 UI 요소의 재사용 가능한 조합입니다. 비슷한 동작을 하는 UI 요소들을 하나의 컴포넌트로 추상화하고, 필요에 따라 다양한 속성을 통해 재사용할 수 있도록 설계합니다.</li>\n<li>컴포넌트는 단일 책임 원칙을 준수하고, 가능한 한 작고 재사용 가능한 형태로 구성합니다. 이는 컴포넌트의 이해와 유지보수를 용이하게 합니다.</li>\n<li>컴포넌트 간의 계층 구조를 구성하여, 복잡한 UI를 단순화하고 관리 가능한 단위로 분할합니다. 이는 코드의 가독성과 유지보수성을 향상시킵니다.</li>\n<li>컴포넌트의 인터페이스를 명확하게 정의하고, 다른 컴포넌트와의 상호작용을 규정합니다.</li>\n<li>컴포넌트 간의 상태 공유를 최소화하고, 필요한 데이터는 프로퍼티로 전달하여 컴포넌트 간의 독립성을 유지합니다.</li>\n</ul>\n</li>\n</ol>\n<p>모듈화와 컴포넌트 구성은 코드의 구조를 개선하고, 재사용 가능한 코드의 양을 늘리는데 중요한 역할을 합니다. 적절한 모듈화와 컴포넌트 구성을 통해 개발 생산성과 코드 품질을 향상시킬 수 있습니다.</p>\n<h3 id=\"heading-13\">3.3. 상태 관리</h3>\n<p>상태 관리는 애플리케이션에서 데이터의 상태를 효과적으로 관리하는 것을 의미합니다. 아래는 상태 관리에 대한 가이드라인입니다.</p>\n<ol>\n<li>단일 소스로 상태 관리하기:\n<ul>\n<li>애플리케이션의 모든 상태를 단일한 곳에서 관리하는 것이 중요합니다. 이를 통해 상태의 일관성을 유지하고, 데이터의 중복을 피할 수 있습니다.</li>\n<li>상태 관리 라이브러리인 Redux 사용하여 상태를 중앙 집중화합니다.</li>\n</ul>\n</li>\n<li>상태의 불변성 유지:\n<ul>\n<li>상태는 불변성을 유지해야 합니다. 이는 상태를 직접 수정하지 않고 새로운 상태를 생성하여 업데이트하는 방식으로 작업해야 함을 의미합니다.</li>\n</ul>\n</li>\n<li>컴포넌트와 상태의 연결:\n<ul>\n<li>상태 관리 라이브러리를 활용하면 컴포넌트와 상태를 쉽게 연결할 수 있습니다. 이를 통해 상태의 변경을 자동으로 감지하고 컴포넌트를 업데이트할 수 있습니다.</li>\n<li>React의 Context API, ReactQuery 등을 활용하여 컴포넌트와 상태를 연결하고 패칭합니다.</li>\n</ul>\n</li>\n<li>비동기 상태 관리:\n<ul>\n<li>비동기 작업과 관련된 상태를 효과적으로 관리해야 합니다. API 호출, 비동기 데이터 로딩 등의 작업을 처리하는데 있어서 상태 관리 라이브러리의 비동기 처리 기능을 활용할 수 있습니다.</li>\n<li>Redux-Thunk를 사용하여 비동기 작업을 처리합니다.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"heading-14\">3.4. 라우팅</h3>\n<p>라우팅은 사용자가 애플리케이션 내에서 다른 페이지 또는 뷰로 이동할 수 있는 기능을 제공하는 것입니다. 아래는 라우팅에 대한 가이드라인입니다.</p>\n<ol>\n<li>라우팅 라이브러리 선택:\n<ul>\n<li>React 애플리케이션에서 라우팅을 구현하기 위해 React Router 라우팅 라이브러리를 사용합니다.</li>\n</ul>\n</li>\n<li>라우팅 구성:\n<ul>\n<li>라우팅은 URL 경로와 해당 경로에 연결된 컴포넌트를 매핑하는 방식으로 구성됩니다.</li>\n<li>라우터 컴포넌트를 사용하여 URL 경로와 컴포넌트를 매핑하고, 필요에 따라 중첩된 라우트와 파라미터를 처리할 수 있습니다.</li>\n</ul>\n</li>\n<li>네비게이션:\n<ul>\n<li>사용자가 다른 페이지로 이동할 수 있도록 네비게이션 기능을 구현합니다.</li>\n<li>useNavigate와 react-router-dom의 Navigate를 사용하여 라우터를 조작하여 네비게이션을 처리합니다.</li>\n</ul>\n</li>\n<li>보안과 권한 관리:\n<ul>\n<li>라우팅 시 보안 및 권한 관리가 필요한 경우, 인증 여부를 확인하고 접근 권한을 제어합니다.\n<ul>\n<li>AppLayout: 토큰인증이 요구되는 접근 영역</li>\n<li>NonAuthenticationLayout: 비인증 상태 접근 영역</li>\n</ul>\n</li>\n<li>보호된 라우트, 권한 검사 및 리다이렉션과 같은 기능을 구현하여 보안과 권한 관리를 처리할 수 있습니다.</li>\n</ul>\n</li>\n</ol>\n<p>라우팅은 사용자 경험을 향상시키고, 애플리케이션 내의 다양한 기능과 페이지 간의 이동을 가능하게 합니다. 적절한 라우팅 구현은 사용자의 효율성과 편의성을 높이는 데 중요한 역할을 합니다.</p>\n<h2 id=\"heading-15\">4. 리소스 관리</h2>\n<h3 id=\"heading-16\">4.1. 이미지 및 아이콘</h3>\n<p>이미지 및 아이콘은 애플리케이션에서 시각적인 요소를 추가하고 사용자 경험을 향상시키는 데 중요한 역할을 합니다. 아래는 이미지 및 아이콘 사용에 대한 가이드라인입니다.</p>\n<ol>\n<li>이미지 사용:\n<ul>\n<li>애플리케이션에서 이미지를 사용하여 콘텐츠를 시각적으로 표현할 수 있습니다.</li>\n<li>이미지를 삽입할 때는 최적화된 이미지를 사용하여 로딩 속도를 개선하고, 반응형 디자인에 맞게 이미지 크기를 조정해야 합니다.</li>\n<li>이미지에 대체 텍스트를 제공하여 시각 장애인이나 이미지 로딩에 실패한 경우에도 콘텐츠를 이해할 수 있도록 해야 합니다.</li>\n</ul>\n</li>\n<li>아이콘 사용:\n<ul>\n<li>아이콘은 작고 간결한 그래픽 요소로서 애플리케이션에서 기능이나 상태를 시각적으로 나타내는 데 유용합니다.</li>\n<li>아이콘 라이브러리로 Font Awesome를 사용합니다.</li>\n<li>아이콘은 의미를 명확하게 전달해야 하므로, 사용 시 해당 아이콘의 의미와 사용 범위를 이해하고 적절하게 활용해야 합니다.</li>\n</ul>\n</li>\n<li>이미지 및 아이콘 관리:\n<ul>\n<li>이미지 및 아이콘은 프로젝트의 assets 디렉토리에서 관리됩니다.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"heading-17\">4.2. 스타일시트.</h3>\n<p>스타일시트는 애플리케이션의 외관과 레이아웃을 결정하는 중요한 요소입니다. Chakra UI와 같은 스타일시트 라이브러리를 사용하면 일관된 디자인 시스템을 구축하고 UI 개발을 효율적으로 진행할 수 있습니다. 아래는 Chakra UI를 사용한 스타일시트 작성에 대한 가이드라인입니다.</p>\n<ol>\n<li>Chakra UI:\n<ul>\n<li>프로젝트에 Chakra UI가 설치되어있습니다.</li>\n<li>ChakraProvider는 애플리케이션의 최상위에 Chakra UI가 적용되어 있습니다.</li>\n</ul>\n</li>\n<li>컴포넌트 스타일링:\n<ul>\n<li>Chakra UI는 다양한 사전 정의된 컴포넌트와 스타일 프로퍼티를 제공합니다. 이를 활용하여 컴포넌트를 스타일링할 수 있습니다.</li>\n<li>스타일 프로퍼티를 사용하여 컴포넌트의 스타일을 변경하거나 커스터마이징할 수 있습니다.</li>\n<li>Chakra UI의 ThemeProvider를 사용하여 테마 설정을 관리하고 커스텀 테마를 적용할 수 있습니다.</li>\n</ul>\n</li>\n<li>반응형 디자인:\n<ul>\n<li>Chakra UI는 반응형 디자인을 지원하여 다양한 장치와 화면 크기에 대응할 수 있습니다.</li>\n<li>\"@chakra-ui/media-query\" 모듈을 사용하여 미디어 쿼리를 활용할 수 있습니다. 이를 활용하여 특정 화면 크기에 대한 스타일 조정합니다.</li>\n</ul>\n</li>\n<li>커스텀 컴포넌트:\n<ul>\n<li>필요에 따라 Chakra UI의 컴포넌트를 확장하여 커스텀 컴포넌트를 생성합니다.</li>\n<li>커스텀 컴포넌트를 생성하여 재사용성과 코드 유지 보수성을 향상킵니다.</li>\n</ul>\n</li>\n</ol>\n<p>Chakra UI를 사용하여 스타일시트를 작성하면 일관된 디자인 시스템을 구축하고 개발 생산성을 높일 수 있습니다. 적절하게 활용하여 사용자 인터페이스를 구성하고 디자인 요소를 일관되게 관리해야 합니다.</p>\n<h3 id=\"heading-18\">4.3. 외부 라이브러리와 의존성 관리</h3>\n<p>모던한 프론트엔드 애플리케이션 개발에는 종종 외부 라이브러리와 의존성이 필요합니다. 이러한 라이브러리와 의존성을 효율적으로 관리하고 활용하는 것이 중요합니다. 아래는 몇 가지 널리 사용되는 라이브러리와 의존성에 대한 간단한 소개입니다:</p>\n<ol>\n<li>emotion:\n<ul>\n<li>emotion은 CSS-in-JS 라이브러리로, JavaScript 코드 내에서 CSS 스타일을 작성할 수 있습니다. 컴포넌트 단위로 스타일을 캡슐화하여 유지보수 및 재사용성을 높일 수 있습니다.</li>\n</ul>\n</li>\n<li>reduxjs:\n<ul>\n<li>reduxjs는 상태 관리 라이브러리로, 애플리케이션의 상태를 중앙에서 관리하고 예측 가능한 상태 변화를 제공합니다. redux를 사용하여 복잡한 애플리케이션 상태를 효과적으로 관리할 수 있습니다.</li>\n</ul>\n</li>\n<li>ag-grid-react:\n<ul>\n<li>ag-grid-react는 강력한 그리드 컴포넌트 라이브러리로, 테이블 형태의 데이터를 표시하고 조작할 수 있습니다. 유연한 기능과 다양한 커스터마이징 옵션을 제공하여 데이터 그리드를 구축할 수 있습니다.</li>\n</ul>\n</li>\n<li>axios:\n<ul>\n<li>axios는 HTTP 클라이언트 라이브러리로, 비동기적으로 서버와 데이터 통신을 할 수 있습니다. REST API와의 상호작용이나 데이터 요청 처리에 유용합니다.</li>\n</ul>\n</li>\n<li>date-fns:\n<ul>\n<li>date-fns는 JavaScript 날짜 유틸리티 라이브러리로, 날짜와 시간 관련 작업을 쉽게 처리할 수 있습니다. 날짜 형식 변환, 날짜 계산, 로컬라이징 등 다양한 기능을 제공합니다.</li>\n</ul>\n</li>\n<li>framer-motion:\n<ul>\n<li>framer-motion은 React용 모션 및 애니메이션 라이브러리로, 화면 전환 및 요소 애니메이션을 부드럽게 구현할 수 있습니다. 유연한 애니메이션 효과와 상호작용을 제공합니다.</li>\n</ul>\n</li>\n<li>lodash:\n<ul>\n<li>lodash는 JavaScript 유틸리티 라이브러리로, 다양한 유용한 함수들을 제공합니다. 배열, 객체, 함수 등을 다루는 다양한 작업에 활용할 수 있습니다.</li>\n</ul>\n</li>\n<li>quill:\n<ul>\n<li>quill은 리치 텍스트 에디터 라이브러리로, 사용자가 서식 있는 텍스트를 작성하고 편집할 수 있는 기능을 제공합니다. 이미지, 표, 링크 등을 삽입할 수 있는 다양한 기능을 제공합니다.</li>\n</ul>\n</li>\n<li>react-datepicker:\n<ul>\n<li>react-datepicker는 React용 날짜 선택 컴포넌트 라이브러리로, 사용자가 날짜를 선택하고 입력할 수 있는 기능을 제공합니다. 다양한 날짜 형식과 옵션을 설정할 수 있습니다.</li>\n</ul>\n</li>\n<li>web-vitals:\n<ul>\n<li>web-vitals는 웹 애플리케이션의 성능 지표를 측정하는 라이브러리로, 사용자 경험을 평가하고 개선하는 데 도움을 줍니다. 측정된 지표를 통해 성능 최적화에 대한 통찰력을 얻을 수 있습니다.</li>\n</ul>\n</li>\n<li>xlsx:\n<ul>\n<li>xlsx는 Excel 파일을 다루는 라이브러리로, 데이터를 읽고 쓰는 기능을 제공합니다. Excel 파일 형식을 다루는 다양한 작업을 수행할 수 있습니다.</li>\n</ul>\n</li>\n<li>monaco-editor:\n<ul>\n<li>monaco-editor는 웹 기반의 텍스트 편집기 라이브러리로, 문법 강조, 자동 완성, 신택스 검증 등 다양한 기능을 제공합니다. 개발자용 IDE나 코드 에디터에 적용할 수 있습니다.</li>\n</ul>\n</li>\n</ol>\n<p>이러한 외부 라이브러리와 의존성을 적절하게 활용하여 개발 생산성을 향상시키고 애플리케이션에 필요한 기능을 구현할 수 있습니다. 의존성 관리와 버전 업데이트에 주의하여 안정성과 호환성을 유지하는 것이 중요합니다. 6. framer-motion:</p>\n<ul>\n<li>framer-motion은 React용 모션 및 애니메이션 라이브러리로, 화면 전환 및 요소 애니메이션을 부드럽게 구현할 수 있습니다. 유연한 애니메이션 효과와 상호작용을 제공합니다.</li>\n</ul>\n<ol start=\"7\">\n<li>lodash:\n<ul>\n<li>lodash는 JavaScript 유틸리티 라이브러리로, 다양한 유용한 함수들을 제공합니다. 배열, 객체, 함수 등을 다루는 다양한 작업에 활용할 수 있습니다.</li>\n</ul>\n</li>\n<li>quill:\n<ul>\n<li>quill은 리치 텍스트 에디터 라이브러리로, 사용자가 서식 있는 텍스트를 작성하고 편집할 수 있는 기능을 제공합니다. 이미지, 표, 링크 등을 삽입할 수 있는 다양한 기능을 제공합니다.</li>\n</ul>\n</li>\n<li>react-datepicker:\n<ul>\n<li>react-datepicker는 React용 날짜 선택 컴포넌트 라이브러리로, 사용자가 날짜를 선택하고 입력할 수 있는 기능을 제공합니다. 다양한 날짜 형식과 옵션을 설정할 수 있습니다.</li>\n</ul>\n</li>\n<li>web-vitals:\n<ul>\n<li>web-vitals는 웹 애플리케이션의 성능 지표를 측정하는 라이브러리로, 사용자 경험을 평가하고 개선하는 데 도움을 줍니다. 측정된 지표를 통해 성능 최적화에 대한 통찰력을 얻을 수 있습니다.</li>\n</ul>\n</li>\n<li>xlsx:\n<ul>\n<li>xlsx는 Excel 파일을 다루는 라이브러리로, 데이터를 읽고 쓰는 기능을 제공합니다. Excel 파일 형식을 다루는 다양한 작업을 수행할 수 있습니다.</li>\n</ul>\n</li>\n<li>monaco-editor:\n<ul>\n<li>monaco-editor는 웹 기반의 텍스트 편집기 라이브러리로, 문법 강조, 자동 완성, 신택스 검증 등 다양한 기능을 제공합니다. 개발자용 IDE나 코드 에디터에 적용할 수 있습니다.</li>\n</ul>\n</li>\n</ol>\n<p>이러한 외부 라이브러리와 의존성을 적절하게 활용하여 개발 생산성을 향상시키고 애플리케이션에 필요한 기능을 구현할 수 있습니다. 의존성 관리와 버전 업데이트에 주의하여 안정성과 호환성을 유지하는 것이 중요합니다.</p>\n",
    "date": "2024-03-20",
    "category": "frontend",
    "tags": [
      "Convention",
      "Document"
    ],
    "description": "개발 규칙",
    "thumbnail": "/images/convention.png",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "1. 목적",
        "level": 2,
        "isMainTopic": true,
        "position": 19.9140625
      },
      {
        "id": "heading-1",
        "text": "2. 코딩 스타일 가이드",
        "level": 2,
        "isMainTopic": true,
        "position": 205.7421875
      },
      {
        "id": "heading-2",
        "text": "2.1. 들여쓰기",
        "level": 3,
        "isMainTopic": false,
        "position": 254.65625
      },
      {
        "id": "heading-3",
        "text": "2.2. 변수와 상수",
        "level": 3,
        "isMainTopic": false,
        "position": 334.59375
      },
      {
        "id": "heading-4",
        "text": "2.3. 함수와 메서드",
        "level": 3,
        "isMainTopic": false,
        "position": 778.03125
      },
      {
        "id": "heading-5",
        "text": "2.4. 컴포넌트",
        "level": 3,
        "isMainTopic": false,
        "position": 1337.46875
      },
      {
        "id": "heading-6",
        "text": "2.5. 주석",
        "level": 3,
        "isMainTopic": false,
        "position": 1761.40625
      },
      {
        "id": "heading-7",
        "text": "2.6. 네이밍 규칙",
        "level": 3,
        "isMainTopic": false,
        "position": 2107.34375
      },
      {
        "id": "heading-8",
        "text": "2.7. 코드 포맷팅",
        "level": 3,
        "isMainTopic": false,
        "position": 2783.78125
      },
      {
        "id": "heading-9",
        "text": "2.8. 에러 처리",
        "level": 3,
        "isMainTopic": false,
        "position": 6342.21875
      },
      {
        "id": "heading-10",
        "text": "3. 프로젝트 구조",
        "level": 2,
        "isMainTopic": true,
        "position": 6728.3515625
      },
      {
        "id": "heading-11",
        "text": "3.1. 파일 및 폴더 구조",
        "level": 3,
        "isMainTopic": false,
        "position": 6777.265625
      },
      {
        "id": "heading-12",
        "text": "3.2. 모듈화와 컴포넌트 구성",
        "level": 3,
        "isMainTopic": false,
        "position": 7269.703125
      },
      {
        "id": "heading-13",
        "text": "3.3. 상태 관리",
        "level": 3,
        "isMainTopic": false,
        "position": 7771.640625
      },
      {
        "id": "heading-14",
        "text": "3.4. 라우팅",
        "level": 3,
        "isMainTopic": false,
        "position": 8179.578125
      },
      {
        "id": "heading-15",
        "text": "4. 리소스 관리",
        "level": 2,
        "isMainTopic": true,
        "position": 8643.7109375
      },
      {
        "id": "heading-16",
        "text": "4.1. 이미지 및 아이콘",
        "level": 3,
        "isMainTopic": false,
        "position": 8692.625
      },
      {
        "id": "heading-17",
        "text": "4.2. 스타일시트.",
        "level": 3,
        "isMainTopic": false,
        "position": 9081.0625
      },
      {
        "id": "heading-18",
        "text": "4.3. 외부 라이브러리와 의존성 관리",
        "level": 3,
        "isMainTopic": false,
        "position": 9562.5
      }
    ],
    "imageHeights": {}
  },
  {
    "id": "cursor_ai",
    "title": "Cursor AI",
    "content": "<hr>\n<p>이번에 작성한 글은 Cursor를 빨리 익히기 위해 정보들을 모아봤습니다.</p>\n<p>알아두면 진짜 좋은 기능들도 있으니 한번 공부해보시는걸 추천합니다.</p>\n<hr>\n<h2 id=\"heading-0\"><strong>#1 VSCode 연동</strong></h2>\n<p>Cursor는 VSCode를 포크 떠서 만든 IDE기 떄문에 기존에 VSCode에서 사용하던 확장들을 가져올 수 있습니다.</p>\n<p>Cursor Settings&nbsp;&gt;&nbsp;General&nbsp;&gt;&nbsp;Account</p>\n<p>로 가셔서 설정할 수 있습니다.</p>\n<p><strong>Cursor Settings를 못찾겠다면 Ctrl + Shift + J를 누르셔서 여시면 됩니다.</strong></p>\n<h2 id=\"heading-1\"><strong>#2 주요 커맨드 ( 단축키 )</strong></h2>\n<p>Cursor에서는 아래 3가지 기능을 단축키로 외워두시면 80퍼센트 알게된거라 보시면 됩니다.</p>\n<p><strong>1. Tab</strong></p>\n<p>에디터에서 약 1초간 가만히 있으면 Cursor Copilot++이 AI로&nbsp;<strong>코드를 자동완성</strong>&nbsp;해줍니다.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/cdDb18/btsJ4eATVwU/hvckbgbLoex5JEeOo5UKG0/img.png\" alt=\"1\"></p>\n<p>코드 자동 예측해서 완성</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/cRoxgk/btsJ5fTbJeO/s6G0KkwOoU6ZsaJCzPkkn0/img.png\" alt=\"2\"></p>\n<p>다른 줄의 패턴에 따라 자동 완성\n다른 줄의 패턴에 따라 자동 완성</p>\n<p><strong>2. Ctrl + K</strong></p>\n<p>Ctrl + K를 사용하면 AI로&nbsp;<strong>바로바로 코드를 편집</strong>하고 작성할 수 있습니다.</p>\n<p>이걸 쓰는 이유는 특정 범위 또는 줄만 바로 프롬포트로 수정하거나 질문 가능하기때문입니다.</p>\n<p>완전히 새로운 코드를 생성하려면 아무 것도 선택하지 않고 Ctrl K만 입력하면 됩니다.</p>\n<p>@Codebase, @Docs, @Web 등 여러 가지 심볼 설정을 똑같이 사용가능합니다.</p>\n<p>심볼에 관해선 아래 #3 에 설명</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/GTFbL/btsJ3XMKOBh/ZJRPnbzrqi0EbExZGmQjgK/img.png\" alt=\"3\"></p>\n<p>코드에 Ctrl + K를 사용하면 미니 팝업이 뜹니다.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/cEzQo2/btsJ6cOZUZc/ORWKTYcniTMSg7xunqKN01/img.png\" alt=\"4\"></p>\n<p>코드를 생성하거나 수정요청할 수 있으며 바뀌는걸 Ctrl + shift + Y로 수락, Ctrl + N로 거부</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/bH7nMH/btsJ6fZfVhl/auMcvlKPV3Zbu0sKPHHk71/img.png\" alt=\"5\"></p>\n<p>미니팝업에 질문을 쓰고 Alt + Enter를 입력하면 바로 해당 코드에 질문 가능합니다</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/HHXcp/btsJ303JNcn/GPk9Jue2AqkAOMbjiUq04k/img.png\" alt=\"6\"></p>\n<p>또한 VSCode 내부 CMD 커맨드 터미널에도 사용 가능합니다</p>\n<p><strong>3. Ctrl + L</strong></p>\n<p>Ctrl + L를 사용하면 에디터 화면 오른쪽에 LLM과&nbsp;<strong>Chat을 할 수 있는 탭</strong>이 열립니다.</p>\n<p>Chat을 통해 현재 열린 코드 파일을 보는 AI와 대화할 수 있습니다.</p>\n<p>채팅에서는 항상 현재 파일과 커서를 볼 수 있으므로 \"지금 코드에 버그가 있나요?\"와 같은 질문을 할 수 있습니다.</p>\n<p>@Codebase, @Docs, @Web 등 여러 가지 심볼 설정을 똑같이 사용가능합니다.</p>\n<p>심볼에 관해선 아래 #3 에 설명</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/cWeTgN/btsJ6V61F8p/QHZY7X7fSTtvreM8Wfp2O0/img.png\" alt=\"7\"></p>\n<p>Ctrl+Shift+L&nbsp;또는&nbsp;\"@\"을&nbsp;사용하여&nbsp;특정&nbsp;코드&nbsp;블록을&nbsp;컨텍스트에&nbsp;추가할&nbsp;수&nbsp;있습니다.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/Td96H/btsJ6pggIG3/QEJHTBjc8Vd5N97QhZqOdk/img.png\" alt=\"8\"></p>\n<p>Ctrl+Enter를 눌러 전체 코드베이스와 채팅할 수 있습니다. 스캔에 조금 시간 걸립니다.</p>\n<hr>\n<h2 id=\"heading-2\"><strong>#3 심볼 @</strong></h2>\n<p>Cursor에는 Chat이나 미니 프롬프트에 챗을 사용할 때 심볼로 검색 기능을 바꿀 수 있습니다.</p>\n<p>\"@\" 기호를 입력시 여러 검색 기능을 볼 수 있으며 원하는 검색 방식을 선택할 수 있습니다.</p>\n<p><strong>@Codebase</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/bkYI3Z/btsJ6H2hFeI/MPnqVe6Khe0JnrvTEYutTK/img.png\" alt=\"9\"></p>\n<p>@Codebase 를 입력시 전체 코드베이스를 스캔하여 답변을 합니다.</p>\n<p>프로젝트 전체적으로 훑어보고 싶으시거나 파일 전체를 대상으로 질문하고 싶을 때 사용을 추천합니다.</p>\n<p><strong>@Docs</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/cUcSsm/btsJ6jm0xDQ/GCIQq5JQGnSF3WkHaxCqc0/img.png\" alt=\"10\"></p>\n<p>@Docs 탭</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/sMKQt/btsJ3Y5YZT1/jCKqjgW61O1y5U2tqKDgoK/img.png\" alt=\"11\"></p>\n<p>Docs 탭을 선택 후 뜨는 입력창, 원하시는 문서 링크를 넣으시고 Confirm 눌러주세요</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/kCIHe/btsJ418wVBx/3Jgmyu3bIBLvgBMVZ8O9H1/img.png\" alt=\"12\"></p>\n<p>문서를 제대로 받아온 모습</p>\n<p>@Docs 를 입력시 인기 있는 라이브러리를 참조하거나 @Docs → Add new doc 를 사용하여</p>\n<p>원하시는 문서의 웹사이트 링크를 입력하여 참조가능합니다. 참조한 문서는 계속 사용 가능합니다.</p>\n<p>참조한 문서를 토대로 AI가 답변을 해줍니다.</p>\n<p><strong>@Web</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/FRGN9/btsJ5BIhtqh/2wFJe1MGlngfokGK8R0LA0/img.png\" alt=\"13\"></p>\n<p>@Web 를 입력시 AI가 인터넷에서 최신 정보를 검색하여 요약한 내용을 바탕으로 답변을 해줍니다.</p>\n<p>이렇게 심볼을 상황에 맞게 잘 선택하여 써주시면 됩니다.</p>\n<p>근데 @Web은 써보니까 그냥 제가 검색하는게 나을것 같은 성능이네요.</p>\n<hr>\n<h2 id=\"heading-3\"><strong>#4 AI 모델 추천, 어떤 모델을 써야할까?</strong></h2>\n<p><img src=\"https://blog.kakaocdn.net/dn/dHnTx9/btsJ5B9lOeZ/jWocrv6PoagJEpkKuqLOG1/img.png\" alt=\"14\"></p>\n<p>2024.10.15 날짜 기준으로 Hobby(기본) 요금제를 사용하고 있는 제 화면에는 이렇게 모델들이 있습니다.</p>\n<p>상황에 따라 다른 모델을 쓰는것을 추천합니다.</p>\n<p><strong>일반적인 상황</strong></p>\n<p><strong>claude-3.5-sonnet</strong>이 추론 능력이라던지 일반적인 상황에선 쓰기 가장 좋았습니다.</p>\n<p><strong>복잡한 코드나 에러 분석해야할 때</strong></p>\n<p><strong>o1-mini</strong>가 가장 전문적인 것 같아 쓰기 좋았습니다.</p>\n<p>참고 : 모델 교체할 때는 ctrl + / 키를 누르시면 단축키로 바로 모델 교체 가능합니다.</p>\n<p>모델 교체 메뉴를 바로 여는 단축키는 ctrl + alt + / 키입니다.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/yFAmD/btsJ4da1zkb/4Klu0kxgIi5E6KhgyWKVk0/img.png\" alt=\"15\"></p>\n<p>이외에도 따로 쓰고 싶으신 모델은 Cursor Settings 설정에 가셔서 토글하실 수 있고 원하는 모델을 추가할 수 있습니다.</p>\n<hr>\n<h2 id=\"heading-4\"><strong>#5 AI 규칙 설정</strong></h2>\n<p><img src=\"https://blog.kakaocdn.net/dn/dBWkCU/btsJ4fNc1KA/Xm3nE1yAqFcrX09RiauX9k/img.png\" alt=\"16\"></p>\n<p>Cursor Settings -&gt; General -&gt; Rules for AI</p>\n<p>Cursor Settings(Ctrl + Shift + J)를 들어가보시면 AI 규칙을 설정할 수 있습니다.</p>\n<p>그냥 써도 기본으로 최대한 한국어로 답변하라는 규칙이 설정되어있을겁니다.</p>\n<p>이걸 조금 더 가공해서 더 퀄리티 높은 답변을 할 수 있도록하는 규칙을 공유해드리겠습니다.</p>\n<p><strong>닫기</strong></p>\n<p>you&nbsp;are&nbsp;an&nbsp;expert&nbsp;AI&nbsp;programming&nbsp;assistant&nbsp;in&nbsp;VSCode&nbsp;that&nbsp;primarily&nbsp;focuses&nbsp;on&nbsp;producing&nbsp;clear,&nbsp;readable&nbsp;code.</p>\n<p>You&nbsp;are&nbsp;thoughtful,&nbsp;give&nbsp;nuanced&nbsp;answers,&nbsp;and&nbsp;are&nbsp;brilliant&nbsp;at&nbsp;reasoning.</p>\n<p>You&nbsp;carefully&nbsp;provide&nbsp;accurate,&nbsp;factual,&nbsp;and&nbsp;thoughtful&nbsp;answers,&nbsp;and&nbsp;you&nbsp;are&nbsp;a&nbsp;genius&nbsp;at&nbsp;reasoning.</p>\n<p>1.&nbsp;Follow&nbsp;the&nbsp;user's&nbsp;requirements&nbsp;carefully&nbsp;and&nbsp;precisely.</p>\n<p>2.&nbsp;First,&nbsp;think&nbsp;step-by-step&nbsp;–&nbsp;describe&nbsp;your&nbsp;plan&nbsp;for&nbsp;what&nbsp;to&nbsp;build&nbsp;in&nbsp;pseudocode,&nbsp;written&nbsp;out&nbsp;in&nbsp;great&nbsp;detail.</p>\n<p>3.&nbsp;Confirm,&nbsp;then&nbsp;write&nbsp;the&nbsp;code!</p>\n<p>4.&nbsp;Always&nbsp;write&nbsp;correct,&nbsp;up-to-date,&nbsp;bug-free,&nbsp;fully&nbsp;functional&nbsp;and&nbsp;working,&nbsp;secure,&nbsp;performant,&nbsp;and&nbsp;efficient&nbsp;code.</p>\n<p>5.&nbsp;Focus&nbsp;on&nbsp;<strong>readability</strong>&nbsp;over&nbsp;performance.</p>\n<p>6.&nbsp;Fully&nbsp;implement&nbsp;all&nbsp;requested&nbsp;functionality.</p>\n<p>7.&nbsp;Leave&nbsp;<strong>NO</strong>&nbsp;to-dos,&nbsp;placeholders,&nbsp;or&nbsp;missing&nbsp;pieces.</p>\n<p>8.&nbsp;Ensure&nbsp;the&nbsp;code&nbsp;is&nbsp;complete!&nbsp;Thoroughly&nbsp;verify&nbsp;the&nbsp;final&nbsp;version.</p>\n<p>9.&nbsp;Include&nbsp;all&nbsp;required&nbsp;<strong>imports</strong>,&nbsp;and&nbsp;ensure&nbsp;proper&nbsp;naming&nbsp;of&nbsp;key&nbsp;components.</p>\n<p>10.&nbsp;Be&nbsp;concise.&nbsp;Minimize&nbsp;any&nbsp;unnecessary&nbsp;explanations.</p>\n<p>11.&nbsp;If&nbsp;you&nbsp;think&nbsp;there&nbsp;might&nbsp;not&nbsp;be&nbsp;a&nbsp;correct&nbsp;answer,&nbsp;say&nbsp;so.&nbsp;If&nbsp;you&nbsp;do&nbsp;not&nbsp;know&nbsp;the&nbsp;answer,&nbsp;admit&nbsp;it&nbsp;instead&nbsp;of&nbsp;guessing.</p>\n<p>12.&nbsp;Always&nbsp;provide&nbsp;concise&nbsp;answers.</p>\n<p>13.&nbsp;Please&nbsp;answer&nbsp;in&nbsp;Korean</p>\n<p>혹시나 현재 사용하고 계신 언어에 맞게 또는 원하는 플랫폼에 맞는 AI 답변을 원할 경우</p>\n<p>아래 링크에서 다른 규칙도 찾아보시는걸 추천 드립니다.</p>\n<p>https://cursor.directory/</p>\n<p><a href=\"https://cursor.directory/\"><strong>Cursor Directory</strong>\nFind the best cursor rules for your framework and language\ncursor.directory</a></p>\n<hr>\n<h2 id=\"heading-5\"><strong>#6 노트패드 기능 (베타)</strong></h2>\n<p>Cursor에서도 노트패드를 관리할 수 있습니다.</p>\n<p>Ctrl + i 키 또는 맥에선 Cmd + i 키를 누르셔서 Composer 탭을 열어주신 뒤(아마 작을겁니다)</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/bYjCvy/btsJ4KlQRZ4/SBt6wNNBs3KpFbiiO8okqk/img.png\" alt=\"17\"></p>\n<p>오른쪽 상단에 Open Control Panel 버튼을 눌러주시면 노트패드가 열립니다.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/cHyWbo/btsJ5ovExHi/hQT95gHW0IwY0hLYH3HKM1/img.png\" alt=\"18\"></p>\n<p>노트패드창에서 왼쪽탭 상단에 더하기 버튼이 있을텐데 이 버튼을 눌러서 노트 하나 생성합시다.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/QC5AR/btsJ3Z3P8F5/rTCtSsUwyDVa5aSqluyxsk/img.png\" alt=\"19\"></p>\n<p>노트 내용에 아무거나 쓰신 뒤 Ctrl + L 키를 눌러 프롬프트에 들고 갑시다.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/bKlwOE/btsJ4YYtlhY/uHMukld8JLY9qIvuBqQlKK/img.png\" alt=\"20\"></p>\n<p>이런식으로 방금 만든 노트패드가 @로 추적이 가능합니다.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/c6cglp/btsJ5CNZZlJ/8k4TMMZSMR25xODbkCT1K0/img.png\" alt=\"21\"></p>\n<p>노트패드를 프롬프트에 포함시켜 이런식으로 결과물을 받아올 수도 있긴하지만</p>\n<p>노트패드 작성시에 AI 기능이 있었다면 더 좋지 않을까 싶네요 아직 베타니까 기다려봅시다.</p>\n<hr>\n<h2 id=\"heading-6\"><strong>#7 프로젝트 5분만에 분석하는 법</strong></h2>\n<p>Cursor를 이용해 5분 만에 프로젝트 구조를 파악하는 방법을 알려드리겠습니다.</p>\n<blockquote>\n<ol>\n<li>Ctrl + L 을 눌러 Cursor 채팅 패널을 엽니다.</li>\n</ol>\n<p><a href=\"http://www.mermaidchart.com/\">http://www.mermaidchart.com</a></p>\n</blockquote>\n<p>https://kimyir.tistory.com/97</p>\n<p><a href=\"https://kimyir.tistory.com/97\"><strong>Cursor로 5분만에 프로젝트 분석하기</strong>\n프로젝트 5분만에 분석하는 법&nbsp;Cursor를&nbsp;이용해&nbsp;5분&nbsp;만에&nbsp;프로젝트&nbsp;구조를&nbsp;파악하는&nbsp;방법을&nbsp;알려드리겠습니다. 1.&nbsp;Ctrl&nbsp;+&nbsp;L&nbsp;을&nbsp;눌러&nbsp;Cursor&nbsp;채팅&nbsp;패널을&nbsp;엽니다. 2.&nbsp;\"Normal&nbsp;chat\"에서&nbsp;\"Long&nbsp;Co\nkimyir.tistory.com</a></p>\n<hr>\n<p>이상 Cursor의 기본 사용 방법과 꿀팁을 정리해보았습니다.</p>\n<p>VSCode를 바탕으로 만들어서 그런지 접근하기 쉬웠고 쓰기도 편한 것 같습니다.</p>\n<p>물론 기능이 많은 만큼 IDE 속도가 느려진 것 같지만 능률을 위해서라면 그래도 쓸 것 같네요.</p>\n<p>내 코드가 혹시나 AI가 학습하지 않을까 걱정되신다면</p>\n<p>Cursor Settings -&gt; General -&gt; Privacy mode 탭에 가셔서 enabled로 설정해주시면 됩니다.</p>\n<p>코드가 외부에 유출안되지만 AI 답변 품질이 떨어질 순 있습니다.</p>\n<p><strong>번외) 다른 유용한 AI 추천</strong></p>\n<p>터미널 AI 도우미</p>\n<p>https://github.com/Aider-AI/aider</p>\n",
    "date": "2024-03-20",
    "category": "projects",
    "tags": [
      "Cursor",
      "AI",
      "VSCode"
    ],
    "description": "Cursor AI 사용법",
    "thumbnail": "/images/cursor.png",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "#1 VSCode 연동",
        "level": 2,
        "isMainTopic": true,
        "position": 118.9140625
      },
      {
        "id": "heading-1",
        "text": "#2 주요 커맨드 ( 단축키 )",
        "level": 2,
        "isMainTopic": true,
        "position": 312.7421875
      },
      {
        "id": "heading-2",
        "text": "#3 심볼 @",
        "level": 2,
        "isMainTopic": true,
        "position": 0
      },
      {
        "id": "heading-3",
        "text": "#4 AI 모델 추천, 어떤 모델을 써야할까?",
        "level": 2,
        "isMainTopic": true,
        "position": 0
      },
      {
        "id": "heading-4",
        "text": "#5 AI 규칙 설정",
        "level": 2,
        "isMainTopic": true,
        "position": 0
      },
      {
        "id": "heading-5",
        "text": "#6 노트패드 기능 (베타)",
        "level": 2,
        "isMainTopic": true,
        "position": 0
      },
      {
        "id": "heading-6",
        "text": "#7 프로젝트 5분만에 분석하는 법",
        "level": 2,
        "isMainTopic": true,
        "position": 0
      }
    ],
    "imageHeights": {
      "img-2": 650,
      "img-3": 526,
      "img-4": 122,
      "img-5": 141,
      "img-6": 394,
      "img-7": 150,
      "img-8": 325,
      "img-9": 369,
      "img-11": 310,
      "img-12": 188,
      "img-13": 231,
      "img-14": 505,
      "img-15": 178,
      "img-17": 540,
      "img-18": 554,
      "img-20": 744,
      "img-22": 633,
      "img-23": 942,
      "img-24": 941,
      "img-25": 298,
      "img-26": 801
    }
  },
  {
    "id": "entasis",
    "title": "Entasis",
    "content": "<h2 id=\"heading-0\">1.소개</h2>\n<ul>\n<li>프로젝트 명 : ENTASIS]</li>\n<li>Github 링크 : <a href=\"https://github.com/codestates-beb/BEB-07-final-entasis\">GitHub - codestates-beb/BEB-07-final-entasis</a></li>\n<li>블록체인 네트워크 주소 : <a href=\"http://18.183.252.200:8545/\">http://18.183.252.200:8545</a> 체인ID : 1337</li>\n</ul>\n<h3 id=\"heading-1\">윤수빈</h3>\n<ul>\n<li>포지션 : PM / Full Stack / Design</li>\n<li>개인 깃허브 : https://github.com/Russ481-k</li>\n<li>활용 스택 : Figma / Javascript / React/ HTML / CSS / MySQL / Sequelize / Node.js / Scale-Liner / Axios</li>\n<li>구현 기능 :\n<ul>\n<li>프로젝트 기획&amp;관리</li>\n<li>디자인 구상 및 구현</li>\n<li>프론트엔드 UI, UX 구현</li>\n<li>차트 구현</li>\n<li>서버 제공 API를 통한 데이터 요청</li>\n<li>서버 실시간 데이터 생성 기능 구현</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"heading-2\">2. 프로젝트 소개</h2>\n<p>[ STO 거래소 “ENTASIS” ]\n<img src=\"/images/entasis/entasis_trade.gif\" alt=\"거래\"></p>\n<p>투자자의 입장에서 STO가 무엇이고, 어떤 기능이 있으며, 어떻게 투자할 수 있는지를\n이 프로젝트를 통해 이해하도록 도움으로써 증권형 토큰에 대한 투자를 확대시키는 것이\n이 프로젝트의 목표다.</p>\n<p><a href=\"https://www.youtube.com/watch?v=0fmODCTVs0g\">래리핑크 인터뷰</a></p>\n<p>글로벌 자산운용사 블랙록의 대표 래리핑크는 2022. 12. 1. 인터뷰에서\nSTO를 통해 현재 증권 거래 비용에 포함된 브로커들의 수수료를 매매 당사자들에게 나누어주며\n수수료가 낮아질 것이고 투표 또한 ST 소유자들이 할 수 있게 될 것이라고 말했다.</p>\n<p>래리핑크의 STO에 대한 인식은 프로젝트 주제 선정에 결정에 도움을 주었다.</p>\n<p><a href=\"https://www.youtube.com/watch?v=PSVpth7uqb4&amp;t=650s\">STO 설명 영상</a></p>\n<p>우리가 흔히 알고 있는 토큰은 ICO를 기반한 '유틸리티 토큰' 이다.</p>\n<p>그렇다면 STO란 무엇일까?</p>\n<p><img src=\"/images/entasis/entasis_sto.png\" alt=\"STO 설명\"></p>\n<p>우선 STO의 기반이 되는 “증권형 토큰(Secturity Token)”이 무엇인지에 대해 이해할 필요가 있다.</p>\n<p>증권형 토큰(일명 ST)은 기업이 주식, 채권 대신 암호화폐 형태로 발행하는 유가 증권이다.\n이 증권형 토큰은 블록체인 플랫폼이 제공하는 서비스를 활용할 권리 대신 주식과 마찬가지로\n기업의 법적 소유권을 가졌음을 의미한다.</p>\n<p>때문에 증권형 토큰을 보유하고 있으면 기업 또는 기업의 블록체인 플랫폼이 낸 수익이나\n자산의 일부를 배당받을 수 있다.</p>\n<p>증권형 토큰은 그 용도가 주식, 채권 등 유가증권과 동일하기 때문에 법과 정책의 개입과 규제를 받아야만 한다.\n상법에 정해진 절차에 따라 주식을 발행하듯 관련 법에 따라 증권형 토큰을 발행해야 한다는 것이다.</p>\n<p>이 증권형 토큰을 IPO와 같이 상장하여 거래가 이루어지도록 하는 것이 STO 라고 할 수 있다.</p>\n<p><img src=\"/images/entasis/entasis_sto2.png\" alt=\"STO 설명 2\"></p>\n<p>[ About Service ]\nEntasis는 실제 STO 거래소의 기능을 일부 축소하여 상대적으로 기업보다 STO에 대해 접근을 어려워 할 개인 투자자들에게 실제 ST에 투자를 해봄으로써 증권형 토큰에 대해서 더 쉽게 이해하고 접근할 수 있도록 도와주는 “STO 거래소 튜토리얼” 이다.</p>\n<h2 id=\"heading-3\">3.기본 환경 조성</h2>\n<h3 id=\"heading-4\">토큰 가격 형성 및 변동성</h3>\n<p>실제 거래소에서 Market Maker &amp; Market Taker 와 토큰 매매를 통해 가격이 형성이 되지만,\n이 프로젝트를 진행하는데 있어서 튜토리얼이라는 점과 대규모의 트래픽이 기대되지 않는다는 점으로 인해\n실제 거래소에서 가격 형성이 되는 방식으로 구현하는 것은 제한된다고 판단하였다.</p>\n<p>그에 따라 난수를 통해 가격을 형성하고 주기적으로 가격이 변동할 수 있도록 구현하였다.\n단기 변동성과 중장기 변동성, 기업의 당기순이익 발표의 값이 난수로 설정되어 각각 3 개의 ST시장을 형성했다.\n또한 당기순이익에 배당률을 적용하여 기업의 이익을 지분에 따라 배당한다.\n토큰 소유자는 지분율에 따라 투표를 할 수 있다.</p>\n<h3 id=\"heading-5\">블록체인</h3>\n<p>이더리움 : EC2 인스턴스에서 백그라운드로 가나슈 네트워크를 실행시켰으며, 트러플을 이용하여 컨트랙트를 배포하였다.\n근본적으로 토큰 거래 기능을 위해 ERC20을 사용하였으며, 증권형 토큰의 기능 일부를 추가하기 위해 ERC1400의 운영자 및 제어자 변수와 거래제한 함수를 발췌하였다.\n투자자 입장에서 다양한 토큰에 대해서 분석하고 거래를 할 필요가 있다고 판단하여 3개의 기업으로 다양화하여 3개의 컨트랙트를 배포하였으며, 토큰 거래가 이루어질 때마다 해당 토큰 보유자 배열에 저장하여 배당금을 분배할 때 토큰 보유 여부를 확인할 수 있도록 하였다.\n스테이킹시 토큰 매매 제한을 강제하기 위해서 스테이킹의 모든 기능은 컨트랙트 내에서 구현하였으며, 만료일을 계산하는 데에는 block.timestamp 를 이용하여 만료 여부를 확인할 수 있도록 하였다.</p>\n<h2 id=\"heading-6\">4.프로젝트 기록</h2>\n<p>Project Entasis를 4F 방식으로 기록하고자 한다.</p>\n<ul>\n<li>사실(Fact) : 프로젝트를 통해 어떤 내용을 고민했고 어떤 방법으로 개념을 이해하고 문제를 해결했는지 작성</li>\n<li>감정(Feeling) : 프로젝트를 진행하면서 느꼈던 감정을 솔직하게 기록발견</li>\n<li>(Finding) : 문제를 해결하면서 무엇을 깨달았고, 시도해본 해결 방법에 대해서 개선이 필요한 부분을 발견했다면 발견 항목에 기록다음주를 위한 행동</li>\n<li>(Future Action) : 위의 회고를 통해서 당장 다음 프로젝트에 적용해 볼 학습 방법이나 조금 더 고민이 필요한 내용, 커뮤니케이션 방식 등을 기록</li>\n</ul>\n<h3 id=\"heading-7\">Fact</h3>\n<p>주요 기능</p>\n<ul>\n<li><strong>1초마다 실시간으로 가격 변동이 일어나는 차트 중심의 한 메인 페이지</strong>\n<ul>\n<li>차트는 1분 15분 1시간 4시간 1일 1주 단위로 캔들 단위를 조정하여 볼 수 있도록 한다.</li>\n<li>차트에 포커스 된 경우, 스크롤 값은 캔들의 넓이에 값을 주어 페이지 높이가 아닌 차트 범위를 조정할 수 있도록 한다.</li>\n<li>차트에 포커스 된 경우, 십자 좌표를 표시하며, 시세와 거래량 각각의 영역에 포인트 값에 따라 우측에 해당 높이에 대한 값을 출력한다.</li>\n<li></li>\n</ul>\n</li>\n<li><strong>메타 마스크를 통한 지갑 등록</strong></li>\n</ul>\n<p><img src=\"/images/entasis/entasis_metamask.png\" alt=\"메타마스크 연동\"></p>\n<ul>\n<li>\n<p>WEB3.0을 지향하여 지갑을 위주로 유저의 상태를 관리한다.</p>\n</li>\n<li>\n<p>회원가입을 따로 진행할 필요가 없으며, 메타마스크로 지갑등록을 하면 자동으로 로그인한다.</p>\n</li>\n<li>\n<p>메타마스크가 설치되어있지 않은 경우 메타마스크 설치 링크로 유도한다.</p>\n</li>\n<li>\n<p>처음 로그인을 하는 메타마스크 지갑인 경우 DB에 등록한다.</p>\n</li>\n<li>\n<p><strong>튜토리얼 및 이용법 설명</strong>\n<img src=\"/images/entasis/entasis_tutorial.gif\" alt=\"튜토리얼\"></p>\n<ul>\n<li>CSS의 transition을 활용하여 모달을 이동하며 서비스의 전체적인 이용방법을 사용자에게 전달한다.</li>\n<li>실제 매매를 일으키며 유저에게 거래 경험을 제공하려 하였으나 손익에 대한 경험을 강제적으로 실행하는 것이 바람직하지 않다고 여겨 모달 프로세스 형태로 튜토리얼을 구현한다.</li>\n</ul>\n</li>\n<li>\n<p><strong>FAUCET : 초기 자본금 50ETH 부여</strong></p>\n</li>\n</ul>\n<p><img src=\"/images/entasis/entasis_tutorial.gif\" alt=\"튜토리얼 과정\"></p>\n<p><img src=\"/images/entasis/entasis_faucet.png\" alt=\"파우셋\"></p>\n<ul>\n<li>\n<p>튜토리얼을 완료하면 자동으로 faucet 기능을 통해 50ETH가 부여한다.</p>\n</li>\n<li>\n<p>faucet은 1회로 제한한다.</p>\n</li>\n<li>\n<p><strong>ETH를 통한 증권형 토큰 구매 및 판매</strong></p>\n</li>\n</ul>\n<p><img src=\"/images/entasis/entasis_sign.png\" alt=\"거래 수수료\"></p>\n<ul>\n<li>실시간으로 변하는 가격을 보고 토큰을 구매 및 판매할 수 있다.</li>\n<li>투자자가 토큰 거래를 할 경우 메타마스크를 통해 서명한다.</li>\n</ul>\n<p><img src=\"/images/entasis/entasis_fee.png\" alt=\"거래 수수료\"></p>\n<ul>\n<li>\n<p>거래 수수료는 거래대금의 0.04%로 자동으로 계산한다.</p>\n</li>\n<li>\n<p><strong>배당금 투표</strong></p>\n</li>\n</ul>\n<p><img src=\"/images/entasis/entasis_vote.gif\" alt=\"투표\"></p>\n<ul>\n<li>\n<p>10분에 한 번씩 지급되는 배당금에 대한 배당률을 결정하기 위해 배당률 투표를 진행한다.</p>\n</li>\n<li>\n<p>투표를 하지 않더라도 배당금을 지급 받는다.</p>\n</li>\n<li>\n<p><strong>배당금 지급</strong>\n<img src=\"/images/entasis/entasis_dividend.gif\" alt=\"배당금\"></p>\n<ul>\n<li>토큰 별로 totalSupply 대비 투자자가 보유하고 있는 토큰양에 따라 배당금이 지불한다.</li>\n</ul>\n</li>\n</ul>\n<p>[배당금 지급 전 거래내역]\n<img src=\"/images/entasis/entasis_trade.gif\" alt=\"거래 내역\"></p>\n<p>[배당금 지급 후 거래내역]\n<img src=\"/images/entasis/entasis_after_trade.png\" alt=\"거래 후 내역\"></p>\n<p>웹사이트 상단 로고 아래에 있는 배당금 지급 시간이 모두 지나면 자동으로 배당금이 지급되며, 그 내역이 History에 표시된다.</p>\n<ul>\n<li><strong>거래제한(Circuit Breaker)</strong></li>\n</ul>\n<p><img src=\"/images/entasis/entasis_circuit_breaker.png\" alt=\"서킷 브레이커\"></p>\n<ul>\n<li>\n<p>극단적인 가격 변동률이 발생할 경우 모든 토큰에 거래를 제한한다.</p>\n</li>\n<li>\n<p>1분간 거래가 불가능해지며 이에 따라 토큰 가격도 1분간 정지된다.</p>\n</li>\n<li>\n<p>본 프로젝트에서는 극단적인 가격 변동이 일어날 일이 없는 점으로 인해\n거래 제한 기능을 보여주기 위하여 Circuit Breaker 버튼을 누를 경우 거래 제한이 발동하도록 구현한다.\n[거래 제한 발동]\n<img src=\"/images/entasis/entasis_circuit.gif\" alt=\"서킷 브레이커 발동\"></p>\n<p>[거래 제한 해제]\n<img src=\"/images/entasis/entasis_circuit_end.gif\" alt=\"서킷 브레이커 해제\"></p>\n</li>\n<li>\n<p><strong>스테이킹 기능(Staking)</strong>\n<img src=\"/images/entasis/entasis_staking.png\" alt=\"스테이킹\"></p>\n<ul>\n<li>스테이킹은 본인이 보유하고 있는 디지털자산을 블록체인 네트워크에 맡기는 방식으로 현금을 은행에 맡기는 예금과 구조가 유사하다.</li>\n<li>보유한 디지털 자산을 블록체인 검증에 활용하도록 맡기는 것을 뜻한다.</li>\n<li>스테이킹을 할 경우 일정기간동안 토큰을 거래소에 맡기고 기간이 만료되면 상대적으로 높은 이율에 따른 보상과 함께 토큰을 돌려받게 된다.</li>\n<li>단, 스테이킹 기간동안에는 해당 토큰을 사용할 수 없기 때문에, 토큰 가격이 변동으로 인해 토큰을 돌려 받고 싶어도 해당 기간동안에는 돌려 받을 수 없다.\n[스테이킹 요청시]\n<img src=\"/images/entasis/entasis_staking_1.png\" alt=\"스테이킹 화면 1\"></li>\n<li>사용자는 Staking 버튼을 눌러 메타마스크를 통해 서명한 데이터를 원하는 ST 컨트랙트에 보내 스테이킹을 진행한다.</li>\n<li>이 때, 이미 스테이킹이 되어있거나 기입한 Amount(수량)보다 토큰 보유량이 적을 시 에러를 반환한다.</li>\n<li>토큰이 문제없이 스테이킹이 된다면 우측 Amount List와 Reward List가 갱신되고 하단 Reward Time에 보상 인출까지 남은 기간이 표시한다.\n[보상 인출시]\n<img src=\"/images/entasis/entasis_staking_2.png\" alt=\"스테이킹 화면 2\"></li>\n<li>Reward Time이 Able로 변경되어 보상 인출이 가능해지면, 사용자는 Reward 버튼을 눌러 보상 인출 함수를 실행하는 데이터를 메타마스크로 서명해 컨트랙트에 보낸다.</li>\n<li>컨트랙트에서 만료일을 확인한 후, 문제가 없다면 사용자에게 스테이킹한 Amount에 Reward를 합한 토큰을 사용자에게 전송한다.\n<ul>\n<li>만료일이 지나지 않았을 경우 Reward 버튼이 비활성화</li>\n</ul>\n</li>\n<li>토큰과 보상이 사용자에게 전송되면 다시 Amount List와 Reward List가 0으로 초기화한다.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"heading-8\">[ A**bout Dev ]**</h1>\n<h2 id=\"heading-9\"><strong>기술 스택</strong></h2>\n<p><img src=\"/images/entasis/entasis_tech_stack.png\" alt=\"기술 스택\"></p>\n<h2 id=\"heading-10\">와이어프레임</h2>\n<p>https://www.figma.com/embed?embed_host=notion&amp;url=https%3A%2F%2Fwww.figma.com%2Ffile%2FHP5FZix2FedecrcLWhUsb7%2FProject_Entasis%3Fnode-id%3D0%253A1%26t%3DL4XWojmyo6BCQvJK-1</p>\n<h2 id=\"heading-11\">플로우 차트</h2>\n<ul>\n<li><strong>Chart Data Flow</strong></li>\n</ul>\n<p>https://www.figma.com/embed?embed_host=notion&amp;url=https%3A%2F%2Fwww.figma.com%2Ffile%2FjC6wwRAyBiQJ8Y0nB6iyiH%2FUntitled%3Fnode-id%3D0%253A1%26t%3DrlPZeEHfPYzyxIO4-1</p>\n<h2 id=\"heading-12\">아키텍처</h2>\n<p><img src=\"/images/entasis/entasis_arch.png\" alt=\"아키텍처\"></p>\n<p>아키텍처의 경우 S3를 이용한 정적 호스트 페이지와 EC2를 이용한 서비스 서버, Database 클라우드 서버, 그리고 블록체인 네트워크 서버로 구성되어 있다.</p>\n<ul>\n<li>먼저 배포과정에서는 Github Actions 를 활용하여 CI/CD 파이프라인을 구성하여 Github에서 push가 발생할 때마다 배포중인 서비스에 반영되어 자동 배포가 실행된다.</li>\n<li>클라이언트는 AWS IAM를 통해 S3에 접근하여 배포하였으며, 블록체인 네트워크의 경우 AWS EC2의 인스턴스 내에서 가나슈 네트워크를 백그라운드로 실행하여 네트워크가 지속 가능하도록 설정하였다.</li>\n<li>서버 부분은 EC2를 이용하여 Docker와 Github Container Registry를 사용하여 EC2내에서 백그라운드로 자동서비스를 실행할 수 있도록 설계하였다.</li>\n</ul>\n<h2 id=\"heading-13\"><strong>데이터베이스 스키마 다이어그램</strong></h2>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7a81b8d5-5578-4f17-9037-10eedb81a23a/Untitled.png\" alt=\"Untitled\"></p>\n<h2 id=\"heading-14\">API 문서</h2>\n<p><a href=\"https://www.notion.so/API-feb98146eeb4481193df2505f966b9c6?pvs=21\">API 문서</a></p>\n<h2 id=\"heading-15\">스마트 컨트랙트 및 토큰 이코노미 설계</h2>\n<p><a href=\"https://www.notion.so/ebe74ce3e9af4b7db5edf7ae39c7728e?pvs=21\">스마트 컨트랙트 설계</a></p>\n<h2 id=\"heading-16\">Feeling</h2>\n<p>4주간의 시간동안 변동성과 시장의 형태를 구현할 수 있어서 의미있는 시간이었다. 시장의 형태를 구현하여 팀원들이 각자 수익률을 공유하며 자산을 늘려가는 즐거움을 공유했던 것이 가장 기억에 남는다.</p>\n<p>NFT와 선물 옵션 등 파생상품 시장 또한 다루어 보고 싶었지만, 시간이 넉넉하지 않았던 것에 아쉬움이 남았다</p>\n<p>스스로 서비스를 구현할수 있다는 것을 알게 되었고. 그것을 위해 내게 필요한 기술이 무엇인지 또한 알 수 있었던 소중한 시간이었다.</p>\n<h2 id=\"heading-17\">Finding</h2>\n<ol>\n<li>최소 단위기간에 1인이 감당할 수 있는 작업량에 대해 명확한 기준이 없이 무리하게 기능을 추가하여 4주라는 시간 대비 과한 범위를 적용하였고 그 범위를 재설정하는 것에 적지 않은 시간이 소요되었다.</li>\n<li>차트 이외에 트렌젝션 데이터와 유저 수익률 및 트랜잭션 데이터를 검색엔진에 노출되기 어려운 CSR형태로 구현하였다.</li>\n<li>상태관리 라이브러리를 활용하지 못하여 실시간 가격(currentPrice)이 자식 컴포넌트로 깊게 내려가는 props drilling 현상이 발생했다.</li>\n<li>잘못된 접근을 알리는 404페이지를 구현하였으나, 지갑이 등록 되었을 경우에만 접근할 수 있는 페이지로 구분하지 못했다.</li>\n<li>서버와의 통신을 HTTP요청을 통해 구현하여 대규모 트래픽에 대비하지 못했다.</li>\n</ol>\n<h2 id=\"heading-18\">Future Action</h2>\n<ol>\n<li>프로젝트를 진행함에 따라 그 기간을 어떻게 설정해야 적절한지 알 수 있었고 그것을 측정하는 것 또한 프로젝트의 중요한 부분이라는 점을 알 수 있었다. 프로젝트 초기부터 CPM을 설정하여 진행상황 평가를 공유하며 작업 진도에 대한 합의를 하는 것이 필요하다는 것을 알 수 있었다.</li>\n<li>NEXTJS를 통해 SSR을 구현, SEO를 실현할 수 있는, 사용자들에게 노출될 수 있는 웹 서비스로 구현해야겠다.</li>\n<li>효율적인 컴포넌트 구조를 찾기 위해 Redux, Mobx, Recoil 등의 상태관리 라이브러리와 리액트의 컴포지션, 컨택스트, 포탈을 사용을 고려하여 데이터 흐름 최적화에 대한 고민을 해야겠다.</li>\n<li>지갑의 등록되었을 경우에만 볼 수 있는 버튼을 구현함으로 유저데이터를 안전하게 관리하는 접근 영역이 명료한 웹 서비스로 리팩토링해야겠다.</li>\n<li>데이터 처리에 대한 피드백 받은 내용을 토대로 실시간 데이터 연동 웹소켓을 적용해야겠다.</li>\n</ol>\n<h2 id=\"heading-19\"><strong>기술적 문제 해결</strong></h2>\n<ul>\n<li><strong>랜더링 최적화</strong>에 문제가 있었다. <strong>프로젝트 종료 3일 전</strong>에 거래 토큰 다양화 과정에서 실시간 차트 <strong>데이터 요청이 기하급수로 늘어나는 것</strong>을 보았다. <strong>웹은 시간이 갈수록 무거워졌고 DB의 용량이 무한히 커졌으며 체인 네트워크는 수 시간 만에 8G의 용량을 소진해 버렸다.</strong> 같은 내용을 랜더링 하지 않는 <strong>useMemo</strong>나 랜더링을 최소화하기 위해 상태를 전역으로 관리하는 <strong>Redux</strong> 사용을 고려 하였으나, 우선 기존의 작성되었던 모든 <strong>useEffect의 디펜던시</strong>를 확인 해 보았다. 차트 데이터, 실시간 데이터, 실시간 데이터들의 일정시간 경과 후 차트 배열에 축적 시키는 과정에서 useEffect의 디펜던시에 해당 <strong>요소 값</strong>이 전부 들어가 있었다. 즉 <strong>차트에 포함되는 함수와 배열이 변경될 때 마다 관련된 모든 컴포넌트에서 리랜더링이 일어났던 것</strong>이다. 해당 디펜던시에 난수 적용 <strong>단위 기간과 같은 간격으로 비동기 처리</strong>를 할 수 있도록 했더니 기하급수 리랜더링 문제는 해결되었다.</li>\n<li><strong>캔들 차트</strong>에서 <strong>스크롤 이벤트</strong>에 대한 이해 없이 작업을 진행하다 보니, 차트를 제외한 페이지와의 <strong>스크롤 값 충돌</strong> 문제와 <strong>마우스 포인터의 값</strong>을 구하는 작업에 어려움을 느꼈다. 입력되는 스크롤 값에 대해 차트 컴포넌트와 메인페이지와의 입력 값의 구분이 필요했고 <strong>스크롤을 제한하고 제한을 푸는 작업</strong>이 필요하다 생각했다. 해당 키워드로 검색해보니, <strong>document.body.style.overflow의 값을 unset과 hidden으로 독립</strong>시킬 수 있다는 것을 알게 되었고, 메인페이지에서 스크롤을 할 때마다 차트에 영향을 주는 문제를 해결했다.</li>\n<li><strong>SVG</strong>를 통해 차트의 가격 높이 값과 거래량 높이 값을 설정해 준 후 <strong>마우스 포인터의 위치에 비례한 값</strong>을 보여주는 것에서 어려움이 있었다. 분명 해당 가격의 소수점 둘째 자리까지 <strong>정확히</strong> 맞아 떨어지는 것을 확인했는데, 며칠 뒤에 그 값이 <strong>음수</strong>로 바뀌어 있었다. 당혹스러웠지만 다시 살펴 보았다. 차트의 위치 값은 위로 <strong>올라갈수록</strong> 커지지만 마우스의 위치 값은 <strong>아래로 내려올수록</strong> 커진다는 것에서 값이 반전되거나 음수를 출력하는 문제가 발생한 것이었다. <strong>방정식</strong>으로 정확한 값을 구할 수 있었으나 잘못된 식을 대입했었고 <strong>차트와 거래량 간의 값 차이</strong>를 생각하지 않고 동일한 요소 값을 설정 했던 것에서 문제가 발생했음을 깨닫고 <strong>캔들은 최댓값과 최솟값</strong>이 달라질 수 있지만 <strong>거래량은 최솟값이 0으로 고정</strong>인 것을 이해하여 오류를 해결했다.</li>\n</ul>\n<h3 id=\"heading-20\">프로젝트를 마치며</h3>\n<p>NEXTjs를 통해 SSR을 구현하여 SEO를 구현하기를 바란다.</p>\n<p>서버의 차트데이터 로직 구현 외 백엔드와 컨트랙트 부분에 역할을 맡지 못한 점 또한 추후 솔로 프로젝트로 구현해야겠다.</p>\n",
    "date": "2024-03-20",
    "category": "projects",
    "tags": [
      "React",
      "Express",
      "MySQL",
      "Web3.js",
      "AWS",
      "Ganache",
      "Truffle",
      "ERC20",
      "MetaMask",
      "Figma"
    ],
    "description": "가상자산 거래소 개발",
    "thumbnail": "/images/entasis/entasis_circuit.gif",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "1.소개",
        "level": 2,
        "isMainTopic": true,
        "position": 19.9140625
      },
      {
        "id": "heading-1",
        "text": "윤수빈",
        "level": 3,
        "isMainTopic": false,
        "position": 146.046875
      },
      {
        "id": "heading-2",
        "text": "2. 프로젝트 소개",
        "level": 2,
        "isMainTopic": true,
        "position": 402.6796875
      },
      {
        "id": "heading-3",
        "text": "3.기본 환경 조성",
        "level": 2,
        "isMainTopic": true,
        "position": 0
      },
      {
        "id": "heading-4",
        "text": "토큰 가격 형성 및 변동성",
        "level": 3,
        "isMainTopic": false,
        "position": 0
      },
      {
        "id": "heading-5",
        "text": "블록체인",
        "level": 3,
        "isMainTopic": false,
        "position": 0
      },
      {
        "id": "heading-6",
        "text": "4.프로젝트 기록",
        "level": 2,
        "isMainTopic": true,
        "position": 1199.0078125
      },
      {
        "id": "heading-7",
        "text": "Fact",
        "level": 3,
        "isMainTopic": false,
        "position": 1247.921875
      },
      {
        "id": "heading-8",
        "text": "[ A**bout Dev ]**",
        "level": 1,
        "isMainTopic": true,
        "position": 1441.359375
      },
      {
        "id": "heading-9",
        "text": "기술 스택",
        "level": 2,
        "isMainTopic": true,
        "position": 1639.4921875
      },
      {
        "id": "heading-10",
        "text": "와이어프레임",
        "level": 2,
        "isMainTopic": true,
        "position": 1879.125
      },
      {
        "id": "heading-11",
        "text": "플로우 차트",
        "level": 2,
        "isMainTopic": true,
        "position": 0
      },
      {
        "id": "heading-12",
        "text": "아키텍처",
        "level": 2,
        "isMainTopic": true,
        "position": 0
      },
      {
        "id": "heading-13",
        "text": "데이터베이스 스키마 다이어그램",
        "level": 2,
        "isMainTopic": true,
        "position": 0
      },
      {
        "id": "heading-14",
        "text": "API 문서",
        "level": 2,
        "isMainTopic": true,
        "position": 0
      },
      {
        "id": "heading-15",
        "text": "스마트 컨트랙트 및 토큰 이코노미 설계",
        "level": 2,
        "isMainTopic": true,
        "position": 0
      },
      {
        "id": "heading-16",
        "text": "Feeling",
        "level": 2,
        "isMainTopic": true,
        "position": 0
      },
      {
        "id": "heading-17",
        "text": "Finding",
        "level": 2,
        "isMainTopic": true,
        "position": 0
      },
      {
        "id": "heading-18",
        "text": "Future Action",
        "level": 2,
        "isMainTopic": true,
        "position": 0
      },
      {
        "id": "heading-19",
        "text": "기술적 문제 해결",
        "level": 2,
        "isMainTopic": true,
        "position": 0
      },
      {
        "id": "heading-20",
        "text": "프로젝트를 마치며",
        "level": 3,
        "isMainTopic": false,
        "position": 0
      }
    ],
    "imageHeights": {
      "img-3": 19.5,
      "img-4": 19.5,
      "img-5": 19.5,
      "img-11": 19.5,
      "img-12": 19.5,
      "img-13": 19.5,
      "img-14": 19.5,
      "img-15": 19.5,
      "img-16": 19.5,
      "img-17": 19.5,
      "img-18": 19.5,
      "img-19": 19.5,
      "img-20": 19.5,
      "img-21": 19.5,
      "img-22": 19.5,
      "img-23": 19.5,
      "img-24": 19.5,
      "img-25": 19.5,
      "img-26": 19.5,
      "img-29": 19.5,
      "img-33": 19.5,
      "img-35": 18.5
    }
  },
  {
    "id": "entasis_engin_1",
    "title": "Entasis Engine - 가상자산 데이터 분석 및 AI 연동 솔루션",
    "content": "<h1 id=\"heading-0\">금융 데이터 분석 및 AI 연동 솔루션 – 기술 스택 선정과 시스템 아키텍처</h1>\n<h2 id=\"heading-1\">🚀 프로젝트 개요</h2>\n<p>금융 시장에서 데이터 기반 의사결정의 중요성이 날로 증가하고 있습니다. 특히 현물, 선물, 옵션 시장의 데이터를 통합적으로 분석하고 AI를 활용한 시장 예측은 현대 트레이딩의 핵심 요소가 되었습니다.</p>\n<p>이 프로젝트는 <strong>실시간 데이터 수집 → 고성능 데이터 처리 → AI 기반 분석 → 실시간 대시보드 제공</strong>의 전체 프로세스를 자동화하여 사용자에게 데이터 기반의 투자 인사이트를 제공합니다.</p>\n<h3 id=\"heading-2\">핵심 목표</h3>\n<ul>\n<li>실시간 금융 데이터 통합 및 분석</li>\n<li>AI 기반 시장 예측 모델 구현</li>\n<li>포지션별 기대 수익률 계산</li>\n<li>리스크 관리 지표 제공</li>\n<li>사용자 친화적 대시보드 구현</li>\n</ul>\n<hr>\n<h2 id=\"heading-3\">🛠️ 기술 스택 및 아키텍처</h2>\n<h3 id=\"heading-4\">1. 데이터 파이프라인</h3>\n<ul>\n<li><strong>데이터 수집</strong>: CCXT, Deribit API</li>\n<li><strong>데이터 처리</strong>: Java, Apache Spark</li>\n<li><strong>저장소</strong>: PostgreSQL, TimescaleDB</li>\n<li><strong>워크플로우</strong>: Apache Airflow</li>\n</ul>\n<h3 id=\"heading-5\">2. 분석 엔진</h3>\n<ul>\n<li><strong>AI/ML</strong>: Python, TensorFlow, Scikit-learn</li>\n<li><strong>금융공학</strong>: Pandas, NumPy</li>\n<li><strong>분석 모델</strong>:\n<ul>\n<li>블랙숄즈 모델 (옵션 가격 평가)</li>\n<li>Heston 모델 (변동성 분석)</li>\n<li>LSTM 네트워크 (시계열 예측)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"heading-6\">3. 프론트엔드</h3>\n<ul>\n<li><strong>프레임워크</strong>: Next.js</li>\n<li><strong>시각화</strong>: D3.js</li>\n<li><strong>실시간 통신</strong>: WebSocket</li>\n</ul>\n<h2 id=\"heading-7\">📊 시스템 아키텍처</h2>\n<pre><code class=\"language-plaintext\">+-------------------+       +-------------------+       +-------------------+\n|   Data Sources    |       |   Backend (AI &amp;   |       |   Frontend (User   |\n|-------------------|       | Financial Models) |       |     Interface)    |\n| Binance API       | ----&gt; | Python (Pandas,   | ----&gt; | Next.js           |\n| Bybit API         | ----&gt; | TensorFlow)       | ----&gt; | D3.js             |\n| Deribit API       | ----&gt; |                   | ----&gt; | Interactive Charts|\n+-------------------+       +-------------------+       +-------------------+\n\n<p>+-------------------+</p><table>\n<thead>\n<tr>\n<th>Database</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PostgreSQL</td>\n</tr>\n<tr>\n<td>TimescaleDB</td>\n</tr>\n<tr>\n<td>+-------------------+</td>\n</tr>\n</tbody></table>\n<p>+--------------------------------------------+</p><table>\n<thead>\n<tr>\n<th>Workflow Orchestration</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Apache Airflow</td>\n</tr>\n<tr>\n<td>+--------------------------------------------+</td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"heading-8\">💡 주요 기능 및 구현</h2>\n<h3 id=\"heading-9\">1. 데이터 통합 시스템</h3>\n<ul>\n<li>멀티 거래소 실시간 데이터 수집</li>\n<li>시계열 데이터 최적화 저장</li>\n<li>분산 처리 기반 대용량 데이터 처리</li>\n</ul>\n<h3 id=\"heading-10\">2. AI 기반 분석 엔진</h3>\n<ul>\n<li>딥러닝 기반 가격 예측 모델</li>\n<li>변동성 예측 및 리스크 분석</li>\n<li>포트폴리오 최적화 알고리즘</li>\n</ul>\n<h3 id=\"heading-11\">3. 투자 전략 시스템</h3>\n<ul>\n<li>실시간 포지션 분석</li>\n<li>리스크-리턴 프로파일 생성</li>\n<li>백테스팅 및 시나리오 분석</li>\n</ul>\n<h3 id=\"heading-12\">4. 실시간 모니터링</h3>\n<ul>\n<li>대화형 차트 및 지표</li>\n<li>실시간 알림 시스템</li>\n<li>커스텀 대시보드 구성</li>\n</ul>\n<hr>\n<h2 id=\"heading-13\">🔄 워크플로우 상세</h2>\n<ol>\n<li>\n<p><strong>데이터 수집 단계</strong></p>\n<ul>\n<li>거래소 API 연동 및 데이터 수집</li>\n<li>WebSocket을 통한 실시간 데이터 스트리밍</li>\n<li>데이터 정합성 검증</li>\n</ul>\n</li>\n<li>\n<p><strong>전처리 및 저장 단계</strong></p>\n<ul>\n<li>Apache Spark 기반 대규모 데이터 처리</li>\n<li>시계열 데이터 최적화 저장</li>\n<li>파생 변수 계산 (변동성, 그리스 지표 등)</li>\n</ul>\n</li>\n<li>\n<p><strong>분석 및 예측 단계</strong></p>\n<ul>\n<li>머신러닝 모델 학습 및 예측</li>\n<li>금융공학 모델 적용</li>\n<li>리스크 지표 계산</li>\n</ul>\n</li>\n<li>\n<p><strong>시각화 및 제공 단계</strong></p>\n<ul>\n<li>실시간 대시보드 업데이트</li>\n<li>사용자 맞춤형 보고서 생성</li>\n<li>알림 및 통지 발송</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"heading-14\">🎁 기대 효과</h2>\n<h3 id=\"heading-15\">1. 운영 효율성</h3>\n<ul>\n<li>자동화된 데이터 수집 및 분석</li>\n<li>실시간 시장 모니터링</li>\n<li>신속한 의사결정 지원</li>\n</ul>\n<h3 id=\"heading-16\">2. 리스크 관리</h3>\n<ul>\n<li>포트폴리오 리스크 실시간 모니터링</li>\n<li>시나리오 기반 스트레스 테스트</li>\n<li>손실 제한 전략 자동화</li>\n</ul>\n<h3 id=\"heading-17\">3. 투자 성과</h3>\n<ul>\n<li>데이터 기반 투자 전략 수립</li>\n<li>AI 기반 시장 예측</li>\n<li>체계적인 포트폴리오 관리</li>\n</ul>\n<hr>\n<h2 id=\"heading-18\">🚀 향후 발전 방향</h2>\n<ol>\n<li>\n<p><strong>기능 확장</strong></p>\n<ul>\n<li>추가 자산군 지원</li>\n<li>고급 AI 모델 도입</li>\n<li>소셜 트레이딩 기능</li>\n</ul>\n</li>\n<li>\n<p><strong>성능 개선</strong></p>\n<ul>\n<li>처리 속도 최적화</li>\n<li>확장성 강화</li>\n<li>보안 강화</li>\n</ul>\n</li>\n<li>\n<p><strong>사용자 경험</strong></p>\n<ul>\n<li>모바일 앱 개발</li>\n<li>맞춤형 알림 시스템</li>\n<li>API 서비스 제공</li>\n</ul>\n</li>\n</ol>\n<p>이 프로젝트는 금융 시장의 데이터를 효과적으로 분석하고 AI와 결합하여 실질적인 투자 인사이트를 제공하는 종합 솔루션을 목표로 합니다. 🎯</p>\n</code></pre>",
    "date": "2025-02-10",
    "category": "projects",
    "tags": [
      "Java",
      "Python",
      "PostgreSQL",
      "TimescaleDB",
      "Next.js",
      "D3.js",
      "Apache Spark",
      "TensorFlow",
      "Apache Airflow",
      "CCXT",
      "금융공학",
      "머신러닝"
    ],
    "description": "현물/선물/옵션 데이터 통합 분석 및 AI 기반 투자 전략 제공 시스템",
    "thumbnail": "/images/cryptocurrency.jpg",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "금융 데이터 분석 및 AI 연동 솔루션 – 기술 스택 선정과 시스템 아키텍처",
        "level": 1,
        "isMainTopic": true,
        "position": 19.9140625
      },
      {
        "id": "heading-1",
        "text": "🚀 프로젝트 개요",
        "level": 2,
        "isMainTopic": true,
        "position": 68.828125
      },
      {
        "id": "heading-2",
        "text": "핵심 목표",
        "level": 3,
        "isMainTopic": false,
        "position": 232.9609375
      },
      {
        "id": "heading-3",
        "text": "🛠️ 기술 스택 및 아키텍처",
        "level": 2,
        "isMainTopic": true,
        "position": 410.09375
      },
      {
        "id": "heading-4",
        "text": "1. 데이터 파이프라인",
        "level": 3,
        "isMainTopic": false,
        "position": 461.5078125
      },
      {
        "id": "heading-5",
        "text": "2. 분석 엔진",
        "level": 3,
        "isMainTopic": false,
        "position": 599.9453125
      },
      {
        "id": "heading-6",
        "text": "3. 프론트엔드",
        "level": 3,
        "isMainTopic": false,
        "position": 776.3828125
      },
      {
        "id": "heading-7",
        "text": "📊 시스템 아키텍처",
        "level": 2,
        "isMainTopic": true,
        "position": 896.515625
      },
      {
        "id": "heading-8",
        "text": "💡 주요 기능 및 구현",
        "level": 2,
        "isMainTopic": true,
        "position": 1367.109375
      },
      {
        "id": "heading-9",
        "text": "1. 데이터 통합 시스템",
        "level": 3,
        "isMainTopic": false,
        "position": 1438.9921875
      },
      {
        "id": "heading-10",
        "text": "2. AI 기반 분석 엔진",
        "level": 3,
        "isMainTopic": false,
        "position": 1651.8984375
      },
      {
        "id": "heading-11",
        "text": "3. 투자 전략 시스템",
        "level": 3,
        "isMainTopic": false,
        "position": 1864.8046875
      },
      {
        "id": "heading-12",
        "text": "4. 실시간 모니터링",
        "level": 3,
        "isMainTopic": false,
        "position": 2077.7109375
      },
      {
        "id": "heading-13",
        "text": "🔄 워크플로우 상세",
        "level": 2,
        "isMainTopic": true,
        "position": 2321.59375
      },
      {
        "id": "heading-14",
        "text": "🎁 기대 효과",
        "level": 2,
        "isMainTopic": true,
        "position": 3320.453125
      },
      {
        "id": "heading-15",
        "text": "1. 운영 효율성",
        "level": 3,
        "isMainTopic": false,
        "position": 3392.3359375
      },
      {
        "id": "heading-16",
        "text": "2. 리스크 관리",
        "level": 3,
        "isMainTopic": false,
        "position": 3605.2421875
      },
      {
        "id": "heading-17",
        "text": "3. 투자 성과",
        "level": 3,
        "isMainTopic": false,
        "position": 3818.1484375
      },
      {
        "id": "heading-18",
        "text": "🚀 향후 발전 방향",
        "level": 2,
        "isMainTopic": true,
        "position": 4062.03125
      }
    ],
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_10",
    "title": "Entasis Engine - 테스트 계획서",
    "content": "<h1 id=\"heading-0\">금융 데이터 분석 시스템 테스트 계획서</h1>\n<h2 id=\"heading-1\">🎯 테스트 전략 개요</h2>\n<h3 id=\"heading-2\">1. 테스트 범위</h3>\n<pre><code class=\"language-mermaid\">graph TD\n    A[단위 테스트] --&gt; B[통합 테스트]\n    B --&gt; C[시스템 테스트]\n    C --&gt; D[성능 테스트]\n    D --&gt; E[보안 테스트]\n    E --&gt; F[사용자 수용 테스트]\n</code></pre>\n<h3 id=\"heading-3\">2. 테스트 환경</h3>\n<pre><code class=\"language-yaml\">environments:\n  development:\n    type: local\n    database: h2\n    cache: local-redis\n\n<p>  testing:<br>    type: kubernetes<br>    namespace: test<br>    database: test-timescaledb<br>    cache: test-redis</p><p>  staging:<br>    type: kubernetes<br>    namespace: staging<br>    database: staging-timescaledb<br>    cache: staging-redis</p></code><p><code class=\"language-yaml\">  production:<br>    type: kubernetes<br>    namespace: production<br>    database: prod-timescaledb<br>    cache: prod-redis<br></code></p></pre><p></p><h2 id=\"heading-4\">🧪 단위 테스트</h2>\n<h3 id=\"heading-5\">1. 백엔드 테스트</h3>\n<pre><code class=\"language-java\">@Test\npublic void testMarketDataProcessing() {\n    // Given\n    MarketData data = new MarketData(\n        \"BTC-USDT\",\n        new BigDecimal(\"50000.00\"),\n        new BigDecimal(\"100.0\"),\n        LocalDateTime.now()\n    );\n\n<pre><code>// When\nProcessedData result = marketDataService.process(data);\n\n// Then\nassertNotNull(result);\nassertEquals(data.getSymbol(), result.getSymbol());\nassertTrue(result.isValid());\n</code></pre>\n</code><p><code class=\"language-java\">}<br></code></p></pre><p></p><h3 id=\"heading-6\">2. AI 모델 테스트</h3>\n<pre><code class=\"language-python\">def test_price_prediction():\n    # Given\n    model = PricePredictionModel()\n    test_data = load_test_data()\n\n<pre><code># When\npredictions = model.predict(test_data)\n\n# Then\nassert predictions.shape == (len(test_data), 1)\nassert np.all(predictions &gt; 0)  # 가격은 항상 양수\nassert calculate_mape(test_data.y, predictions) &amp;#x3C; 0.1  # MAPE &amp;#x3C; 10%\n</code></pre>\n</code><p><code class=\"language-python\"></code></p></pre><p></p><h2 id=\"heading-7\">🔄 통합 테스트</h2>\n<h3 id=\"heading-8\">1. API 테스트</h3>\n<pre><code class=\"language-typescript\">describe(\"Trading API Integration Tests\", () =&gt; {\n  it(\"should place market order successfully\", async () =&gt; {\n    // Given\n    const order = {\n      symbol: \"BTC-USDT\",\n      type: \"MARKET\",\n      side: \"BUY\",\n      quantity: \"0.1\",\n    };\n\n<pre><code>// When\nconst response = await api.post(\"/v1/orders\", order);\n\n// Then\nexpect(response.status).toBe(201);\nexpect(response.data.orderId).toBeDefined();\nexpect(response.data.status).toBe(\"FILLED\");\n</code></pre>\n</code><p><code class=\"language-typescript\">  });<br>});<br></code></p></pre><p></p><h3 id=\"heading-9\">2. 데이터 파이프라인 테스트</h3>\n<pre><code class=\"language-python\">def test_data_pipeline_integration():\n    # Given\n    test_data = generate_test_market_data()\n\n<pre><code># When\npipeline.process(test_data)\n\n# Then\nprocessed_data = db.query_latest_data()\nassert_data_integrity(test_data, processed_data)\nassert_processing_latency() &amp;#x3C; timedelta(milliseconds=100)\n</code></pre>\n</code><p><code class=\"language-python\"></code></p></pre><p></p><h2 id=\"heading-10\">📊 성능 테스트</h2>\n<h3 id=\"heading-11\">1. 부하 테스트</h3>\n<pre><code class=\"language-javascript\">import { check } from \"k6\";\nimport http from \"k6/http\";\n\n<p>export const options = {<br>  scenarios: {<br>    market_data: {<br>      executor: \"ramping-vus\",<br>      startVUs: 0,<br>      stages: [<br>        { duration: \"2m\", target: 100 },<br>        { duration: \"5m\", target: 100 },<br>        { duration: \"2m\", target: 0 },<br>      ],<br>      gracefulRampDown: \"30s\",<br>    },<br>  },<br>  thresholds: {<br>    http_req_duration: [\"p(95)&lt;500\"],<br>  },<br>};</p></code><p><code class=\"language-javascript\">export default function () {<br>  const response = http.get(\"<a href=\"http://api.example.com/v1/market/price/BTC-USDT\">http://api.example.com/v1/market/price/BTC-USDT</a>\");<br>  check(response, {<br>    \"is status 200\": (r) =&gt; r.status === 200,<br>    \"response time &lt; 500ms\": (r) =&gt; r.timings.duration &lt; 500,<br>  });<br>}<br></code></p></pre><p></p><h3 id=\"heading-12\">2. 스트레스 테스트</h3>\n<pre><code class=\"language-yaml\">stress_test_scenarios:\n  - name: \"급격한 시장 변동 시뮬레이션\"\n    duration: \"30m\"\n    data_rate: \"10000 events/second\"\n    expectations:\n      - max_latency: 100ms\n      - error_rate: &lt; 0.1%\n      - cpu_usage: &lt; 80%\n      - memory_usage: &lt; 85%\n</code></pre>\n<h2 id=\"heading-13\">🔒 보안 테스트</h2>\n<h3 id=\"heading-14\">1. 취약점 스캔</h3>\n<pre><code class=\"language-yaml\">security_scan:\n  tools:\n    - name: \"OWASP ZAP\"\n      target: \"https://api.example.com\"\n      rules:\n        - sql-injection\n        - xss\n        - csrf\n\n<pre><code>- name: \"SonarQube\"\n  target: \"source-code\"\n  quality_gates:\n    security_rating: A\n    security_review_rating: A\n</code></pre>\n</code><p><code class=\"language-yaml\"></code></p></pre><p></p><h3 id=\"heading-15\">2. 침투 테스트</h3>\n<pre><code class=\"language-yaml\">penetration_test:\n  scenarios:\n    - name: \"인증 우회 시도\"\n      steps:\n        - jwt_token_manipulation\n        - session_hijacking\n        - brute_force_attack\n\n<pre><code>- name: \"권한 상승 시도\"\n  steps:\n    - role_manipulation\n    - horizontal_privilege_escalation\n</code></pre>\n</code><p><code class=\"language-yaml\"></code></p></pre><p></p><h2 id=\"heading-16\">📱 사용자 수용 테스트</h2>\n<h3 id=\"heading-17\">1. 시나리오 테스트</h3>\n<pre><code class=\"language-typescript\">describe(\"Trading Workflow\", () =&gt; {\n  it(\"should complete basic trading cycle\", async () =&gt; {\n    // 1. 로그인\n    await user.login();\n\n<pre><code>// 2. 시장 데이터 확인\nconst marketData = await dashboard.getMarketData();\nexpect(marketData).toBeValid();\n\n// 3. 매매 신호 확인\nconst signal = await analysis.getTradingSignal();\nexpect(signal.confidence).toBeGreaterThan(0.7);\n\n// 4. 주문 실행\nconst order = await trading.placeOrder(signal);\nexpect(order.status).toBe(\"SUCCESS\");\n</code></pre>\n</code><p><code class=\"language-typescript\">  });<br>});<br></code></p></pre><p></p><h3 id=\"heading-18\">2. 사용성 테스트</h3>\n<pre><code class=\"language-yaml\">usability_test_cases:\n  - scenario: \"첫 거래 실행\"\n    user_group: \"초보 트레이더\"\n    success_criteria:\n      - max_time: 5분\n      - max_clicks: 7\n      - error_rate: 0%\n\n</code><ul><code class=\"language-yaml\">\n</code><li><code class=\"language-yaml\">scenario: \"포트폴리오 분석\"<br>user_group: \"전문 트레이더\"<br>success_criteria:</code><ul><code class=\"language-yaml\">\n<li>data_accuracy: 100%</li>\n<li>refresh_rate: &lt; 1초</li>\n</code><li><code class=\"language-yaml\">analysis_depth: 모든 지표 포함<br></code></li></ul></li></ul></pre><h2 id=\"heading-19\">📈 품질 메트릭</h2>\n<h3 id=\"heading-20\">1. 코드 품질</h3>\n<pre><code class=\"language-yaml\">quality_metrics:\n  code_coverage:\nunit_tests: &gt; 80%\nintegration_tests: &gt; 70%\n\n\n\n<p>  complexity:<br>    cyclomatic: &lt; 15<br>    cognitive: &lt; 10</p></code><p><code class=\"language-yaml\">  duplication:<br>    threshold: &lt; 5%<br></code></p></pre><p></p><h3 id=\"heading-21\">2. 성능 지표</h3>\n<pre><code class=\"language-yaml\">performance_metrics:\n  api_response_time:\n    p95: &lt; 500ms\n    p99: &lt; 1000ms\n\n<p>  data_processing:<br>    latency: &lt; 100ms<br>    throughput: &gt; 5000 events/second</p></code><p><code class=\"language-yaml\">  model_inference:<br>    latency: &lt; 200ms<br>    accuracy: &gt; 85%<br></code></p></pre><p></p><p>이 문서는 금융 데이터 분석 시스템의 테스트 전략과 품질 보증 계획을 제공합니다. 시스템의 안정성과 신뢰성을 보장하기 위해 지속적으로 업데이트됩니다. 🚀</p>\n",
    "date": "2025-02-13",
    "category": "projects",
    "tags": [
      "testing",
      "qa",
      "unit-test",
      "integration-test",
      "performance-test",
      "security-test",
      "automation"
    ],
    "description": "가상자산 데이터 분석 시스템의 테스트 전략 및 품질 보증 계획",
    "thumbnail": "/images/cryptocurrency.jpg",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "금융 데이터 분석 시스템 테스트 계획서",
        "level": 1,
        "isMainTopic": true,
        "position": 19.9140625
      },
      {
        "id": "heading-1",
        "text": "🎯 테스트 전략 개요",
        "level": 2,
        "isMainTopic": true,
        "position": 68.828125
      },
      {
        "id": "heading-2",
        "text": "1. 테스트 범위",
        "level": 3,
        "isMainTopic": false,
        "position": 120.2421875
      },
      {
        "id": "heading-3",
        "text": "2. 테스트 환경",
        "level": 3,
        "isMainTopic": false,
        "position": 275.6796875
      },
      {
        "id": "heading-4",
        "text": "🧪 단위 테스트",
        "level": 2,
        "isMainTopic": true,
        "position": 691.3125
      },
      {
        "id": "heading-5",
        "text": "1. 백엔드 테스트",
        "level": 3,
        "isMainTopic": false,
        "position": 742.7265625
      },
      {
        "id": "heading-6",
        "text": "2. AI 모델 테스트",
        "level": 3,
        "isMainTopic": false,
        "position": 1127.1640625
      },
      {
        "id": "heading-7",
        "text": "🔄 통합 테스트",
        "level": 2,
        "isMainTopic": true,
        "position": 1410.796875
      },
      {
        "id": "heading-8",
        "text": "1. API 테스트",
        "level": 3,
        "isMainTopic": false,
        "position": 1462.2109375
      },
      {
        "id": "heading-9",
        "text": "2. 데이터 파이프라인 테스트",
        "level": 3,
        "isMainTopic": false,
        "position": 1861.6484375
      },
      {
        "id": "heading-10",
        "text": "📊 성능 테스트",
        "level": 2,
        "isMainTopic": true,
        "position": 2129.28125
      },
      {
        "id": "heading-11",
        "text": "1. 부하 테스트",
        "level": 3,
        "isMainTopic": false,
        "position": 2180.6953125
      },
      {
        "id": "heading-12",
        "text": "2. 스트레스 테스트",
        "level": 3,
        "isMainTopic": false,
        "position": 2672.1328125
      },
      {
        "id": "heading-13",
        "text": "🔒 보안 테스트",
        "level": 2,
        "isMainTopic": true,
        "position": 2869.765625
      },
      {
        "id": "heading-14",
        "text": "1. 취약점 스캔",
        "level": 3,
        "isMainTopic": false,
        "position": 2921.1796875
      },
      {
        "id": "heading-15",
        "text": "2. 침투 테스트",
        "level": 3,
        "isMainTopic": false,
        "position": 3232.6171875
      },
      {
        "id": "heading-16",
        "text": "📱 사용자 수용 테스트",
        "level": 2,
        "isMainTopic": true,
        "position": 3517.25
      },
      {
        "id": "heading-17",
        "text": "1. 시나리오 테스트",
        "level": 3,
        "isMainTopic": false,
        "position": 3568.6640625
      },
      {
        "id": "heading-18",
        "text": "2. 사용성 테스트",
        "level": 3,
        "isMainTopic": false,
        "position": 3957.1015625
      },
      {
        "id": "heading-19",
        "text": "📈 품질 메트릭",
        "level": 2,
        "isMainTopic": true,
        "position": 4308.734375
      },
      {
        "id": "heading-20",
        "text": "1. 코드 품질",
        "level": 3,
        "isMainTopic": false,
        "position": 4360.1484375
      },
      {
        "id": "heading-21",
        "text": "2. 성능 지표",
        "level": 3,
        "isMainTopic": false,
        "position": 4626.5859375
      }
    ],
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_11",
    "title": "Entasis Engine - 운영 매뉴얼",
    "content": "<h1 id=\"heading-0\">금융 데이터 분석 시스템 운영 매뉴얼</h1>\n<h2 id=\"heading-1\">📊 시스템 모니터링</h2>\n<h3 id=\"heading-2\">1. 핵심 메트릭 모니터링</h3>\n<pre><code class=\"language-yaml\">monitoring_metrics:\n  system_health:\n    - cpu_usage:\n        warning: 70%\n        critical: 85%\n    - memory_usage:\n        warning: 75%\n        critical: 90%\n    - disk_usage:\n        warning: 80%\n        critical: 90%\n\n</code><p><code class=\"language-yaml\">  application_metrics:<br>    - api_latency:<br>        p95_threshold: 500ms<br>        p99_threshold: 1000ms<br>    - error_rate:<br>        threshold: 0.1%<br>    - request_rate:<br>        min: 100/s<br>        max: 10000/s<br></code></p></pre><p></p><h3 id=\"heading-3\">2. 알림 설정</h3>\n<pre><code class=\"language-yaml\">alert_rules:\n  high_priority:\n    - condition: \"error_rate &gt; 1%\"\n      duration: \"5m\"\n      channels:\n        - slack: \"#alerts-critical\"\n        - pagerduty: \"trading-team\"\n\n<p>  medium_priority:<br>    - condition: \"api_latency_p95 &gt; 500ms\"<br>      duration: \"10m\"<br>      channels:<br>        - slack: \"#alerts-warning\"</p></code><p><code class=\"language-yaml\">  low_priority:<br>    - condition: \"cpu_usage &gt; 70%\"<br>      duration: \"15m\"<br>      channels:<br>        - slack: \"#alerts-info\"<br></code></p></pre><p></p><h2 id=\"heading-4\">🔄 일상 운영 작업</h2>\n<h3 id=\"heading-5\">1. 데이터베이스 관리</h3>\n<pre><code class=\"language-sql\">-- 일일 유지보수 쿼리\n-- 1. 인덱스 재구축\nREINDEX DATABASE trading_db;\n\n<p>-- 2. 통계 업데이트<br>ANALYZE VERBOSE;</p><p>-- 3. 오래된 데이터 아카이빙<br>INSERT INTO market_data_archive<br>SELECT * FROM market_data<br>WHERE timestamp &lt; NOW() - INTERVAL '3 months';</p></code><p><code class=\"language-sql\">DELETE FROM market_data<br>WHERE timestamp &lt; NOW() - INTERVAL '3 months';<br></code></p></pre><p></p><h3 id=\"heading-6\">2. 로그 관리</h3>\n<pre><code class=\"language-yaml\">log_rotation:\n  application_logs:\n    retention: 30d\n    max_size: 10GB\n    compression: true\n\n<p>  system_logs:<br>    retention: 90d<br>    max_size: 50GB<br>    compression: true</p></code><p><code class=\"language-yaml\">  audit_logs:<br>    retention: 365d<br>    max_size: 100GB<br>    compression: true<br>    encryption: true<br></code></p></pre><p></p><h2 id=\"heading-7\">🚨 장애 대응</h2>\n<h3 id=\"heading-8\">1. 장애 레벨 정의</h3>\n<pre><code class=\"language-yaml\">incident_levels:\n  p1_critical:\n    description: \"서비스 완전 중단\"\n    response_time: \"15분 이내\"\n    resolution_time: \"2시간 이내\"\n    escalation:\n      - devops_lead\n      - system_architect\n      - cto\n\n<p>  p2_major:<br>    description: \"주요 기능 장애\"<br>    response_time: \"30분 이내\"<br>    resolution_time: \"4시간 이내\"<br>    escalation:<br>      - devops_engineer<br>      - team_lead</p></code><p><code class=\"language-yaml\">  p3_minor:<br>    description: \"부분 기능 장애\"<br>    response_time: \"2시간 이내\"<br>    resolution_time: \"8시간 이내\"<br>    escalation:<br>      - on_call_engineer<br></code></p></pre><p></p><h3 id=\"heading-9\">2. 장애 대응 절차</h3>\n<pre><code class=\"language-mermaid\">graph TD\n    A[장애 감지] --&gt; B{심각도 판단}\n    B --&gt;|P1| C[긴급 대응팀 소집]\n    B --&gt;|P2| D[담당자 할당]\n    B --&gt;|P3| E[일반 처리]\n    C --&gt; F[상황 보고]\n    D --&gt; F\n    E --&gt; F\n    F --&gt; G[원인 분석]\n    G --&gt; H[해결 방안 실행]\n    H --&gt; I[복구 확인]\n    I --&gt; J[사후 분석]\n</code></pre>\n<h2 id=\"heading-10\">💾 백업 및 복구</h2>\n<h3 id=\"heading-11\">1. 백업 정책</h3>\n<pre><code class=\"language-yaml\">backup_policy:\n  full_backup:\n    schedule: \"매주 일요일 01:00\"\n    retention: \"4주\"\n    type: \"스냅샷\"\n\n<p>  incremental_backup:<br>    schedule: \"매일 01:00\"<br>    retention: \"7일\"<br>    type: \"WAL\"</p></code><p><code class=\"language-yaml\">  transaction_logs:<br>    archive: true<br>    retention: \"30일\"<br></code></p></pre><p></p><h3 id=\"heading-12\">2. 복구 절차</h3>\n<pre><code class=\"language-bash\">#!/bin/bash\n\n<h1 id=\"heading-13\">1. 서비스 중지</h1>\n<p>kubectl scale deployment trading-api --replicas=0</p><h1 id=\"heading-14\">2. 데이터베이스 복구</h1>\n<p>pg_restore -h $DB_HOST -U $DB_USER -d trading_db backup.dump</p><h1 id=\"heading-15\">3. 데이터 정합성 검증</h1>\n<p>python verify_data_integrity.py</p><h1 id=\"heading-16\">4. 서비스 재시작</h1>\n<p>kubectl scale deployment trading-api --replicas=3</p><h1 id=\"heading-17\">5. 상태 확인</h1>\n</code><p><code class=\"language-bash\">kubectl get pods -l app=trading-api<br></code></p></pre><p></p><h2 id=\"heading-18\">🔒 보안 관리</h2>\n<h3 id=\"heading-19\">1. 접근 제어</h3>\n<pre><code class=\"language-yaml\">access_control:\n  production:\n    ssh_access:\n      - role: admin\n        auth: public_key + 2FA\n      - role: developer\n        auth: public_key + 2FA\n        restrictions:\n          - read_only\n          - audit_logging\n\n<pre><code>kubernetes:\n  - role: cluster-admin\n    users: [\"devops-lead\"]\n  - role: developer\n    users: [\"dev-team\"]\n    namespace: [\"dev\", \"staging\"]\n</code></pre>\n</code><p><code class=\"language-yaml\"></code></p></pre><p></p><h3 id=\"heading-20\">2. 보안 점검</h3>\n<pre><code class=\"language-yaml\">security_checks:\n  daily:\n    - vulnerability_scan\n    - auth_log_review\n    - failed_login_attempts\n\n<p>  weekly:<br>    - dependency_updates<br>    - ssl_cert_check<br>    - firewall_rule_review</p></code><p><code class=\"language-yaml\">  monthly:<br>    - penetration_test<br>    - security_policy_review<br>    - access_right_audit<br></code></p></pre><p></p><h2 id=\"heading-21\">📈 성능 최적화</h2>\n<h3 id=\"heading-22\">1. 캐시 관리</h3>\n<pre><code class=\"language-yaml\">cache_strategy:\n  market_data:\n    ttl: 60s\n    max_size: 1GB\n    eviction: LRU\n\n<p>  user_portfolio:<br>    ttl: 300s<br>    max_size: 500MB<br>    eviction: LFU</p></code><p><code class=\"language-yaml\">  trading_signals:<br>    ttl: 30s<br>    max_size: 200MB<br>    eviction: FIFO<br></code></p></pre><p></p><h3 id=\"heading-23\">2. 리소스 최적화</h3>\n<pre><code class=\"language-yaml\">resource_optimization:\n  autoscaling:\n    cpu_target: 70%\n    memory_target: 75%\n    min_replicas: 3\n    max_replicas: 10\n\n</code><p><code class=\"language-yaml\">  pod_resources:<br>    requests:<br>      cpu: 1<br>      memory: 2Gi<br>    limits:<br>      cpu: 2<br>      memory: 4Gi<br></code></p></pre><p></p><p>이 문서는 금융 데이터 분석 시스템의 운영 및 유지보수 가이드를 제공합니다. 시스템의 안정적인 운영을 위해 지속적으로 업데이트됩니다. 🚀</p>\n",
    "date": "2025-02-13",
    "category": "projects",
    "tags": [
      "operation",
      "maintenance",
      "monitoring",
      "troubleshooting",
      "backup",
      "recovery",
      "sre"
    ],
    "description": "가상자산 데이터 분석 시스템의 운영 및 유지보수 가이드",
    "thumbnail": "/images/cryptocurrency.jpg",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "금융 데이터 분석 시스템 운영 매뉴얼",
        "level": 1,
        "isMainTopic": true,
        "position": 19.9140625
      },
      {
        "id": "heading-1",
        "text": "📊 시스템 모니터링",
        "level": 2,
        "isMainTopic": true,
        "position": 68.828125
      },
      {
        "id": "heading-2",
        "text": "1. 핵심 메트릭 모니터링",
        "level": 3,
        "isMainTopic": false,
        "position": 120.2421875
      },
      {
        "id": "heading-3",
        "text": "2. 알림 설정",
        "level": 3,
        "isMainTopic": false,
        "position": 508.6796875
      },
      {
        "id": "heading-4",
        "text": "🔄 일상 운영 작업",
        "level": 2,
        "isMainTopic": true,
        "position": 866.3125
      },
      {
        "id": "heading-5",
        "text": "1. 데이터베이스 관리",
        "level": 3,
        "isMainTopic": false,
        "position": 917.7265625
      },
      {
        "id": "heading-6",
        "text": "2. 로그 관리",
        "level": 3,
        "isMainTopic": false,
        "position": 1201.1640625
      },
      {
        "id": "heading-7",
        "text": "🚨 장애 대응",
        "level": 2,
        "isMainTopic": true,
        "position": 1513.796875
      },
      {
        "id": "heading-8",
        "text": "1. 장애 레벨 정의",
        "level": 3,
        "isMainTopic": false,
        "position": 1565.2109375
      },
      {
        "id": "heading-9",
        "text": "2. 장애 대응 절차",
        "level": 3,
        "isMainTopic": false,
        "position": 2005.6484375
      },
      {
        "id": "heading-10",
        "text": "💾 백업 및 복구",
        "level": 2,
        "isMainTopic": true,
        "position": 2256.28125
      },
      {
        "id": "heading-11",
        "text": "1. 백업 정책",
        "level": 3,
        "isMainTopic": false,
        "position": 2307.6953125
      },
      {
        "id": "heading-12",
        "text": "2. 복구 절차",
        "level": 3,
        "isMainTopic": false,
        "position": 2595.1328125
      },
      {
        "id": "heading-13",
        "text": "1. 서비스 중지",
        "level": 1,
        "isMainTopic": true,
        "position": 2683.03125
      },
      {
        "id": "heading-14",
        "text": "2. 데이터베이스 복구",
        "level": 1,
        "isMainTopic": true,
        "position": 2782.390625
      },
      {
        "id": "heading-15",
        "text": "3. 데이터 정합성 검증",
        "level": 1,
        "isMainTopic": true,
        "position": 2881.75
      },
      {
        "id": "heading-16",
        "text": "4. 서비스 재시작",
        "level": 1,
        "isMainTopic": true,
        "position": 2981.109375
      },
      {
        "id": "heading-17",
        "text": "5. 상태 확인",
        "level": 1,
        "isMainTopic": true,
        "position": 3080.46875
      },
      {
        "id": "heading-18",
        "text": "🔒 보안 관리",
        "level": 2,
        "isMainTopic": true,
        "position": 3183.5625
      },
      {
        "id": "heading-19",
        "text": "1. 접근 제어",
        "level": 3,
        "isMainTopic": false,
        "position": 3234.9765625
      },
      {
        "id": "heading-20",
        "text": "2. 보안 점검",
        "level": 3,
        "isMainTopic": false,
        "position": 3591.4140625
      },
      {
        "id": "heading-21",
        "text": "📈 성능 최적화",
        "level": 2,
        "isMainTopic": true,
        "position": 3889.046875
      },
      {
        "id": "heading-22",
        "text": "1. 캐시 관리",
        "level": 3,
        "isMainTopic": false,
        "position": 3940.4609375
      },
      {
        "id": "heading-23",
        "text": "2. 리소스 최적화",
        "level": 3,
        "isMainTopic": false,
        "position": 4236.8984375
      }
    ],
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_12",
    "title": "Entasis Engine - 데이터베이스 구축",
    "content": "<h1 id=\"heading-0\">PostgreSQL + TimescaleDB를 활용한 금융 데이터베이스 구축</h1>\n<p>안녕하세요! 이번 포스트에서는 <strong>PostgreSQL과 TimescaleDB</strong>를 활용해 금융 데이터베이스를 구축한 과정을 공유하려고 합니다. 최근 금융 데이터를 효율적으로 저장하고 조회하는 것이 점점 더 중요해지고 있는데요. 특히 실시간 시장 데이터를 다룰 때는 <strong>TimescaleDB의 하이퍼테이블 기능</strong>이 큰 도움이 됩니다. 그럼 하나씩 살펴보겠습니다! 🚀</p>\n<hr>\n<h2 id=\"heading-1\">📌 1. 기본 테이블 구조 설정 (V1init_tables.sql)</h2>\n<p>우선, 금융 데이터를 체계적으로 저장하기 위해 <strong>거래소 정보와 거래 심볼 정보를 저장할 테이블</strong>을 만들었습니다.</p>\n<h3 id=\"heading-2\">🔹 exchanges 테이블 (거래소 정보)</h3>\n<p>거래소마다 고유한 정보를 저장하는 테이블입니다. 기본적인 거래소 ID, 이름, API URL 등을 포함합니다.</p>\n<pre><code class=\"language-sql\">CREATE TABLE exchanges (\n    id SERIAL PRIMARY KEY,\n    name TEXT NOT NULL,\n    api_url TEXT NOT NULL,\n    created_at TIMESTAMP DEFAULT now()\n);\n</code></pre>\n<h3 id=\"heading-3\">🔹 symbols 테이블 (거래 심볼 정보)</h3>\n<p>거래소마다 지원하는 심볼(예: BTC/USDT, ETH/USDT 등)을 저장하는 테이블입니다.</p>\n<pre><code class=\"language-sql\">CREATE TABLE symbols (\n    id SERIAL PRIMARY KEY,\n    exchange_id INTEGER REFERENCES exchanges(id) ON DELETE CASCADE,\n    symbol TEXT NOT NULL,\n    base_currency TEXT NOT NULL,\n    quote_currency TEXT NOT NULL,\n    created_at TIMESTAMP DEFAULT now()\n);\n</code></pre>\n<hr>\n<h2 id=\"heading-4\">📌 2. 현물 시장 데이터 테이블 생성 (V2create_market_tables.sql)</h2>\n<p>현물 시장 데이터를 저장하기 위해 <strong>spot_market_data</strong> 테이블을 생성하고, 이를 TimescaleDB 하이퍼테이블로 변환했습니다.</p>\n<h3 id=\"heading-5\">🔹 spot_market_data 테이블</h3>\n<p>이 테이블은 실시간 가격 변동을 저장하는 역할을 합니다.</p>\n<pre><code class=\"language-sql\">CREATE TABLE spot_market_data (\n    time TIMESTAMPTZ NOT NULL,\n    symbol_id INTEGER REFERENCES symbols(id) ON DELETE CASCADE,\n    price DECIMAL(18, 8) NOT NULL,\n    volume DECIMAL(18, 8) NOT NULL,\n    created_at TIMESTAMP DEFAULT now(),\n    PRIMARY KEY (time, symbol_id)\n);\n</code></pre>\n<h3 id=\"heading-6\">🔹 TimescaleDB 하이퍼테이블 변환</h3>\n<p>하이퍼테이블을 생성하면, 시계열 데이터에 최적화된 성능을 제공할 수 있습니다.</p>\n<pre><code class=\"language-sql\">SELECT create_hypertable('spot_market_data', 'time');\n</code></pre>\n<h3 id=\"heading-7\">🔹 인덱스 생성</h3>\n<p>데이터 조회 속도를 높이기 위해 필요한 인덱스를 추가했습니다.</p>\n<pre><code class=\"language-sql\">CREATE INDEX ON spot_market_data (symbol_id, time DESC);\n</code></pre>\n<hr>\n<h2 id=\"heading-8\">📌 3. 선물 시장 데이터 테이블 생성 (V3create_futures_tables.sql)</h2>\n<p>선물 시장 데이터는 현물보다 저장해야 할 정보가 많습니다. 특히 <strong>미결제약정(open_interest), 펀딩 비율(funding_rate), 마크 가격(mark_price), 지수 가격(index_price)</strong> 같은 추가적인 정보가 포함됩니다.</p>\n<h3 id=\"heading-9\">🔹 futures_market_data 테이블</h3>\n<pre><code class=\"language-sql\">CREATE TABLE futures_market_data (\n    time TIMESTAMPTZ NOT NULL,\n    symbol_id INTEGER REFERENCES symbols(id) ON DELETE CASCADE,\n    price DECIMAL(18, 8) NOT NULL,\n    volume DECIMAL(18, 8) NOT NULL,\n    open_interest DECIMAL(18, 8),\n    funding_rate DECIMAL(18, 8),\n    mark_price DECIMAL(18, 8),\n    index_price DECIMAL(18, 8),\n    created_at TIMESTAMP DEFAULT now(),\n    PRIMARY KEY (time, symbol_id)\n);\n</code></pre>\n<h3 id=\"heading-10\">🔹 TimescaleDB 하이퍼테이블 변환</h3>\n<pre><code class=\"language-sql\">SELECT create_hypertable('futures_market_data', 'time');\n</code></pre>\n<h3 id=\"heading-11\">🔹 인덱스 생성</h3>\n<pre><code class=\"language-sql\">CREATE INDEX ON futures_market_data (symbol_id, time DESC);\n</code></pre>\n<hr>\n<h2 id=\"heading-12\">📌 마무리하며</h2>\n<p>이렇게 해서 <strong>현물 및 선물 시장 데이터를 저장하는 기본 데이터베이스 구조를 구축</strong>했습니다. PostgreSQL의 안정성과 TimescaleDB의 강력한 시계열 데이터 처리 기능을 활용하면 <strong>빠른 조회와 확장성을 동시에 확보할 수 있습니다.</strong> 💡</p>\n<p>다음 포스트에서는 <strong>실제 데이터를 수집하고 저장하는 과정</strong>을 다룰 예정이니 기대해주세요! 🤗</p>\n",
    "date": "2025-02-13",
    "category": "projects",
    "tags": [
      "database",
      "postgresql",
      "timescaledb",
      "schema",
      "sql",
      "data-modeling",
      "optimization"
    ],
    "description": "가상자산 데이터베이스 구축 및 TimescaleDB 활용 가이드",
    "thumbnail": "/images/cryptocurrency.jpg",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "PostgreSQL + TimescaleDB를 활용한 금융 데이터베이스 구축",
        "level": 1,
        "isMainTopic": true,
        "position": 19.9140625
      },
      {
        "id": "heading-1",
        "text": "📌 1. 기본 테이블 구조 설정 (V1init_tables.sql)",
        "level": 2,
        "isMainTopic": true,
        "position": 186.2421875
      },
      {
        "id": "heading-2",
        "text": "🔹 exchanges 테이블 (거래소 정보)",
        "level": 3,
        "isMainTopic": false,
        "position": 275.875
      },
      {
        "id": "heading-3",
        "text": "🔹 symbols 테이블 (거래 심볼 정보)",
        "level": 3,
        "isMainTopic": false,
        "position": 463.3125
      },
      {
        "id": "heading-4",
        "text": "📌 2. 현물 시장 데이터 테이블 생성 (V2create_market_tables.sql)",
        "level": 2,
        "isMainTopic": true,
        "position": 696.9453125
      },
      {
        "id": "heading-5",
        "text": "🔹 spot_market_data 테이블",
        "level": 3,
        "isMainTopic": false,
        "position": 806.078125
      },
      {
        "id": "heading-6",
        "text": "🔹 TimescaleDB 하이퍼테이블 변환",
        "level": 3,
        "isMainTopic": false,
        "position": 1023.515625
      },
      {
        "id": "heading-7",
        "text": "🔹 인덱스 생성",
        "level": 3,
        "isMainTopic": false,
        "position": 1135.953125
      },
      {
        "id": "heading-8",
        "text": "📌 3. 선물 시장 데이터 테이블 생성 (V3create_futures_tables.sql)",
        "level": 2,
        "isMainTopic": true,
        "position": 1264.5859375
      },
      {
        "id": "heading-9",
        "text": "🔹 futures_market_data 테이블",
        "level": 3,
        "isMainTopic": false,
        "position": 1373.71875
      },
      {
        "id": "heading-10",
        "text": "🔹 TimescaleDB 하이퍼테이블 변환",
        "level": 3,
        "isMainTopic": false,
        "position": 1615.65625
      },
      {
        "id": "heading-11",
        "text": "🔹 인덱스 생성",
        "level": 3,
        "isMainTopic": false,
        "position": 1692.59375
      },
      {
        "id": "heading-12",
        "text": "📌 마무리하며",
        "level": 2,
        "isMainTopic": true,
        "position": 1785.7265625
      }
    ],
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_13",
    "title": "Entasis Engine - 데이터 수집기 구현",
    "content": "<p>안녕하세요, 동료 여러분! 😊</p>\n<p>오늘은 <strong>Spring Boot</strong> 기반으로 바이낸스의 현물과 선물 시장 데이터를 실시간으로 수집하여 <strong>TimescaleDB</strong>에 저장하는 데이터 수집기를 어떻게 구현했는지 공유해보려고 해요. 이 글에서는 시스템 아키텍처, API 호출 방법, 서비스 레이어 구성, 에러 처리 등 다양한 구현 포인트를 친근하게 풀어드릴게요!</p>\n<hr>\n<h2 id=\"heading-0\">시스템 개요</h2>\n<p>우리 시스템은 아래와 같은 역할을 수행합니다:</p>\n<ul>\n<li><strong>데이터 수집기</strong>\n<ul>\n<li><strong>BinanceExchange</strong>: 바이낸스의 <strong>현물 시장</strong> 데이터(BTC/USDT, ETH/USDT) 수집</li>\n<li><strong>BinanceFuturesExchange</strong>: 바이낸스의 <strong>선물 시장</strong> 데이터(BTCUSDT, ETHUSDT) 수집</li>\n</ul>\n</li>\n<li><strong>API 호출</strong>: <code>WebClient</code>를 사용해 바이낸스 API를 호출합니다.</li>\n<li><strong>서비스 레이어</strong>\n<ul>\n<li><code>SpotMarketDataServiceImpl</code>: 현물 시장 데이터 처리</li>\n<li><code>FuturesMarketDataServiceImpl</code>: 선물 시장 데이터 처리</li>\n<li><code>ExchangeRepository</code>: 거래소 정보 관리 및 TimescaleDB 저장</li>\n</ul>\n</li>\n<li><strong>데이터 수집 주기</strong>: 1초 간격으로 데이터 수집 및 저장</li>\n<li><strong>에러 처리</strong>: API 응답 null 체크, 예외 처리 및 로깅, 데이터베이스 제약조건 관련 오류 처리</li>\n</ul>\n<hr>\n<h2 id=\"heading-1\">주요 구현 포인트</h2>\n<h3 id=\"heading-2\">1. WebClient를 활용한 API 호출</h3>\n<p>비동기 방식의 <strong>WebClient</strong>를 이용하여 바이낸스 API로부터 데이터를 호출합니다. 아래는 <code>BinanceExchange</code> 클래스의 예시입니다:</p>\n<pre><code class=\"language-java\">@Service\npublic class BinanceExchange {\n\n<pre><code>private static final Logger log = LoggerFactory.getLogger(BinanceExchange.class);\nprivate final WebClient webClient = WebClient.create(\"https://api.binance.com\");\n\npublic Mono&amp;#x3C;JsonNode&gt; getSpotMarketData(String symbol) {\n    return webClient.get()\n        .uri(uriBuilder -&gt; uriBuilder\n            .path(\"/api/v3/ticker/price\")\n            .queryParam(\"symbol\", symbol)\n            .build())\n        .retrieve()\n        .bodyToMono(JsonNode.class)\n        .doOnError(e -&gt; log.error(\"API 호출 중 에러 발생: {}\", e.getMessage()))\n        .onErrorReturn(null);\n}\n</code></pre>\n</code><p><code class=\"language-java\">}<br></code></p></pre><p></p><blockquote>\n<p><strong>Tip:</strong> 에러 발생 시 로깅을 통해 문제를 쉽게 파악할 수 있고, <code>onErrorReturn(null)</code>을 사용해 null 체크로 이어지는 처리를 간편하게 했어요. 😉</p>\n</blockquote>\n<hr>\n<h3 id=\"heading-3\">2. 서비스 레이어 구현</h3>\n<p>각 시장별 데이터를 처리하는 서비스 레이어에서는 API로부터 받은 데이터를 가공 후 저장하는 역할을 합니다. 예를 들어, <code>SpotMarketDataServiceImpl</code> 클래스는 다음과 같이 구성됩니다:</p>\n<pre><code class=\"language-java\">@Service\npublic class SpotMarketDataServiceImpl implements SpotMarketDataService {\n\n<pre><code>private static final Logger log = LoggerFactory.getLogger(SpotMarketDataServiceImpl.class);\nprivate final BinanceExchange binanceExchange;\nprivate final ExchangeRepository exchangeRepository;\n\npublic SpotMarketDataServiceImpl(BinanceExchange binanceExchange,\n                                 ExchangeRepository exchangeRepository) {\n    this.binanceExchange = binanceExchange;\n    this.exchangeRepository = exchangeRepository;\n}\n\n@Override\npublic void collectData() {\n    // 현물 시장: BTC/USDT, ETH/USDT 데이터를 수집합니다.\n    List&amp;#x3C;String&gt; symbols = Arrays.asList(\"BTCUSDT\", \"ETHUSDT\");\n    for (String symbol : symbols) {\n        try {\n            JsonNode response = binanceExchange.getSpotMarketData(symbol).block();\n            if (response != null) {\n                String price = response.get(\"price\").asText();\n                ExchangeData data = new ExchangeData(symbol, price, LocalDateTime.now());\n                exchangeRepository.save(data);\n                log.info(\"데이터 저장 성공 - {}: {}\", symbol, price);\n            } else {\n                log.warn(\"API 응답이 null입니다. symbol: {}\", symbol);\n            }\n        } catch (Exception e) {\n            log.error(\"데이터 수집 중 예외 발생: {}\", e.getMessage());\n        }\n    }\n}\n</code></pre>\n</code><p><code class=\"language-java\">}<br></code></p></pre><p></p><blockquote>\n<p><strong>참고:</strong> 선물 시장 데이터 처리는 <code>FuturesMarketDataServiceImpl</code>에서 비슷한 로직으로 구현되며, 바이낸스의 선물 API 엔드포인트를 호출하도록 구성되어 있어요.</p>\n</blockquote>\n<hr>\n<h3 id=\"heading-4\">3. 스케줄러를 통한 주기적 데이터 수집</h3>\n<p>데이터를 1초 간격으로 수집하기 위해 Spring의 <code>@Scheduled</code> 애노테이션을 활용했습니다:</p>\n<pre><code class=\"language-java\">@Component\npublic class MarketDataScheduler {\n\n<pre><code>private final SpotMarketDataService spotMarketDataService;\nprivate final FuturesMarketDataService futuresMarketDataService;\n\npublic MarketDataScheduler(SpotMarketDataService spotMarketDataService,\n                           FuturesMarketDataService futuresMarketDataService) {\n    this.spotMarketDataService = spotMarketDataService;\n    this.futuresMarketDataService = futuresMarketDataService;\n}\n\n@Scheduled(fixedRate = 1000)\npublic void collectMarketData() {\n    spotMarketDataService.collectData();\n    futuresMarketDataService.collectData();\n}\n</code></pre>\n</code><p><code class=\"language-java\">}<br></code></p></pre><p></p><blockquote>\n<p><strong>노하우:</strong> 주기적 데이터 수집 시, 반드시 예외 처리를 통해 스케줄러가 중단되지 않도록 하는 것이 중요해요. 😊</p>\n</blockquote>\n<hr>\n<h2 id=\"heading-5\">에러 처리 및 로깅</h2>\n<ul>\n<li><strong>API 응답 null 체크:</strong> 응답이 null인 경우 적절한 경고 로깅을 수행하여 문제를 파악합니다.</li>\n<li><strong>예외 처리:</strong> try-catch 블록을 통해 예외 발생 시 로깅하고, 시스템 전체에 영향이 없도록 합니다.</li>\n<li><strong>데이터베이스 제약조건 오류:</strong> 저장 시 발생할 수 있는 제약조건 오류를 사전에 확인하고, 필요한 경우 트랜잭션 처리를 통해 안정성을 보장합니다.</li>\n</ul>\n<hr>\n<h2 id=\"heading-6\">마치며</h2>\n<p>이와 같이 구현함으로써 <strong>바이낸스</strong>의 현물 및 선물 시장 데이터를 실시간으로 안정적으로 수집하고 <strong>TimescaleDB</strong>에 저장할 수 있게 되었어요. 이 과정에서 <code>WebClient</code>, 스케줄링, 에러 처리, 로깅 등 다양한 Spring Boot의 기능들을 활용하였는데요, 여러분의 프로젝트에도 도움이 되길 바랍니다! 🚀</p>\n<p>궁금한 점이나 의견이 있으시면 언제든지 편하게 이야기해 주세요! 좋은 하루 보내세요! 😄</p>\n<p>Happy Coding!</p>\n",
    "date": "2025-02-14",
    "category": "projects",
    "tags": [
      "spring-boot",
      "binance-api",
      "webclient",
      "scheduler",
      "timescaledb",
      "data-collection",
      "error-handling"
    ],
    "description": "가상자산 거래소 데이터 수집 및 저장 시스템 구현 가이드",
    "thumbnail": "/images/cryptocurrency.jpg",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "시스템 개요",
        "level": 2,
        "isMainTopic": true,
        "position": 149.4140625
      },
      {
        "id": "heading-1",
        "text": "주요 구현 포인트",
        "level": 2,
        "isMainTopic": true,
        "position": 466.7421875
      },
      {
        "id": "heading-2",
        "text": "1. WebClient를 활용한 API 호출",
        "level": 3,
        "isMainTopic": false,
        "position": 515.65625
      },
      {
        "id": "heading-3",
        "text": "2. 서비스 레이어 구현",
        "level": 3,
        "isMainTopic": false,
        "position": 1030.59375
      },
      {
        "id": "heading-4",
        "text": "3. 스케줄러를 통한 주기적 데이터 수집",
        "level": 3,
        "isMainTopic": false,
        "position": 1787.03125
      },
      {
        "id": "heading-5",
        "text": "에러 처리 및 로깅",
        "level": 2,
        "isMainTopic": true,
        "position": 2282.6640625
      },
      {
        "id": "heading-6",
        "text": "마치며",
        "level": 2,
        "isMainTopic": true,
        "position": 2447.4921875
      }
    ],
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_2",
    "title": "Entasis Engine - 개발 계획서",
    "content": "<h1 id=\"heading-0\">금융 데이터 분석 및 AI 연동 솔루션 개발 계획서</h1>\n<h2 id=\"heading-1\">📋 개발 단계 개요</h2>\n<h3 id=\"heading-2\">Phase 1: 기반 시스템 구축 (1-2개월)</h3>\n<ol>\n<li>\n<p><strong>데이터 파이프라인 구축</strong></p>\n<ul>\n<li>PostgreSQL + TimescaleDB 설정</li>\n<li>기본 데이터 스키마 설계</li>\n<li>CCXT 연동 및 데이터 수집 구현</li>\n</ul>\n</li>\n<li>\n<p><strong>백엔드 기초 시스템</strong></p>\n<ul>\n<li>Java + Spring Boot 기반 서버 구축</li>\n<li>RESTful API 설계</li>\n<li>기본 인증/인가 시스템 구현</li>\n</ul>\n</li>\n<li>\n<p><strong>프론트엔드 기초 작업</strong></p>\n<ul>\n<li>Next.js 프로젝트 설정</li>\n<li>기본 UI/UX 디자인</li>\n<li>컴포넌트 구조 설계</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"heading-3\">Phase 2: 핵심 기능 개발 (2-3개월)</h3>\n<ol>\n<li>\n<p><strong>데이터 처리 시스템</strong></p>\n<ul>\n<li>Apache Spark 기반 데이터 처리</li>\n<li>실시간 데이터 스트리밍</li>\n<li>데이터 정제 및 가공</li>\n</ul>\n</li>\n<li>\n<p><strong>AI 모델 개발</strong></p>\n<ul>\n<li>기본 예측 모델 구현</li>\n<li>백테스팅 시스템 구축</li>\n<li>모델 평가 및 최적화</li>\n</ul>\n</li>\n<li>\n<p><strong>시각화 구현</strong></p>\n<ul>\n<li>D3.js 차트 구현</li>\n<li>실시간 데이터 업데이트</li>\n<li>대시보드 레이아웃 구성</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"heading-4\">Phase 3: 고도화 및 최적화 (2-3개월)</h3>\n<ol>\n<li>\n<p><strong>AI 모델 고도화</strong></p>\n<ul>\n<li>고급 예측 모델 추가</li>\n<li>앙상블 모델 구현</li>\n<li>실시간 학습 시스템</li>\n</ul>\n</li>\n<li>\n<p><strong>성능 최적화</strong></p>\n<ul>\n<li>데이터베이스 쿼리 최적화</li>\n<li>캐싱 시스템 구현</li>\n<li>분산 처리 시스템 보완</li>\n</ul>\n</li>\n<li>\n<p><strong>사용자 경험 개선</strong></p>\n<ul>\n<li>반응형 UI 개선</li>\n<li>성능 모니터링 추가</li>\n<li>에러 처리 강화</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"heading-5\">🎯 스프린트 계획</h2>\n<h3 id=\"heading-6\">Sprint 1-2: 기반 시스템 (4주)</h3>\n<ul>\n<li>데이터베이스 설계 및 구축</li>\n<li>기본 API 서버 구현</li>\n<li>프론트엔드 프로젝트 셋업</li>\n</ul>\n<h3 id=\"heading-7\">Sprint 3-4: 데이터 파이프라인 (4주)</h3>\n<ul>\n<li>CCXT 연동 구현</li>\n<li>실시간 데이터 수집</li>\n<li>기본 데이터 처리 로직</li>\n</ul>\n<h3 id=\"heading-8\">Sprint 5-6: AI 모델 기초 (4주)</h3>\n<ul>\n<li>기본 예측 모델 개발</li>\n<li>백테스팅 시스템</li>\n<li>모델 평가 지표</li>\n</ul>\n<h3 id=\"heading-9\">Sprint 7-8: 시각화 (4주)</h3>\n<ul>\n<li>차트 컴포넌트 개발</li>\n<li>대시보드 구현</li>\n<li>실시간 업데이트</li>\n</ul>\n<h3 id=\"heading-10\">Sprint 9-10: 고도화 (4주)</h3>\n<ul>\n<li>AI 모델 개선</li>\n<li>성능 최적화</li>\n<li>UI/UX 개선</li>\n</ul>\n<h2 id=\"heading-11\">📊 마일스톤</h2>\n<h3 id=\"heading-12\">Milestone 1: MVP 출시 (2개월)</h3>\n<ul>\n<li>[x] 기본 데이터 수집</li>\n<li>[x] 단순 예측 모델</li>\n<li>[x] 기본 대시보드</li>\n</ul>\n<h3 id=\"heading-13\">Milestone 2: 베타 버전 (4개월)</h3>\n<ul>\n<li>[ ] 실시간 데이터 처리</li>\n<li>[ ] 고급 AI 모델</li>\n<li>[ ] 완성된 대시보드</li>\n</ul>\n<h3 id=\"heading-14\">Milestone 3: 정식 버전 (6개월)</h3>\n<ul>\n<li>[ ] 전체 기능 구현</li>\n<li>[ ] 성능 최적화</li>\n<li>[ ] 안정성 확보</li>\n</ul>\n<h2 id=\"heading-15\">🛠 개발 환경 및 도구</h2>\n<h3 id=\"heading-16\">개발 환경</h3>\n<ul>\n<li>IDE: IntelliJ IDEA, VSCode</li>\n<li>버전 관리: Git, GitHub</li>\n<li>CI/CD: Jenkins, GitHub Actions</li>\n</ul>\n<h3 id=\"heading-17\">모니터링 도구</h3>\n<ul>\n<li>서버 모니터링: Prometheus, Grafana</li>\n<li>로그 관리: ELK Stack</li>\n<li>성능 분석: JProfiler</li>\n</ul>\n<h2 id=\"heading-18\">📈 품질 관리</h2>\n<h3 id=\"heading-19\">테스트 전략</h3>\n<ol>\n<li>\n<p>단위 테스트</p>\n<ul>\n<li>JUnit, Jest</li>\n<li>코드 커버리지 80% 이상</li>\n</ul>\n</li>\n<li>\n<p>통합 테스트</p>\n<ul>\n<li>API 테스트</li>\n<li>E2E 테스트</li>\n</ul>\n</li>\n<li>\n<p>성능 테스트</p>\n<ul>\n<li>부하 테스트</li>\n<li>스트레스 테스트</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"heading-20\">코드 품질</h3>\n<ul>\n<li>ESLint, Prettier</li>\n<li>SonarQube</li>\n<li>코드 리뷰 프로세스</li>\n</ul>\n<h2 id=\"heading-21\">🔄 배포 전략</h2>\n<h3 id=\"heading-22\">개발 환경</h3>\n<ul>\n<li>로컬 개발 환경</li>\n<li>개발 서버</li>\n<li>스테이징 서버</li>\n<li>프로덕션 서버</li>\n</ul>\n<h3 id=\"heading-23\">배포 프로세스</h3>\n<ol>\n<li>개발 환경 테스트</li>\n<li>스테이징 환경 검증</li>\n<li>프로덕션 배포</li>\n<li>모니터링 및 롤백 계획</li>\n</ol>\n<h2 id=\"heading-24\">⚠️ 리스크 관리</h2>\n<h3 id=\"heading-25\">예상 리스크</h3>\n<ol>\n<li>데이터 처리 지연</li>\n<li>AI 모델 정확도</li>\n<li>시스템 확장성</li>\n</ol>\n<h3 id=\"heading-26\">대응 전략</h3>\n<ol>\n<li>캐싱 및 최적화</li>\n<li>모델 평가 및 개선</li>\n<li>확장 가능한 아키텍처</li>\n</ol>\n<h2 id=\"heading-27\">📝 문서화</h2>\n<h3 id=\"heading-28\">개발 문서</h3>\n<ul>\n<li>API 문서 (Swagger)</li>\n<li>시스템 아키텍처 문서</li>\n<li>데이터베이스 스키마</li>\n</ul>\n<h3 id=\"heading-29\">사용자 문서</h3>\n<ul>\n<li>사용자 가이드</li>\n<li>API 사용 설명서</li>\n<li>트러블슈팅 가이드</li>\n</ul>\n<p>이 프로젝트는 6개월간의 개발 기간을 통해 완성도 높은 금융 데이터 분석 시스템을 구축하는 것을 목표로 합니다. 각 단계별 세부 계획을 통해 체계적인 개발을 진행하겠습니다. 🚀</p>\n",
    "date": "2025-02-11",
    "category": "projects",
    "tags": [
      "Project Management",
      "Development Planning",
      "System Design",
      "Roadmap",
      "Agile",
      "Sprint",
      "Milestone"
    ],
    "description": "현물/선물/옵션 데이터 통합 분석 시스템 개발 로드맵",
    "thumbnail": "/images/cryptocurrency.jpg",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "금융 데이터 분석 및 AI 연동 솔루션 개발 계획서",
        "level": 1,
        "isMainTopic": true,
        "position": 19.9140625
      },
      {
        "id": "heading-1",
        "text": "📋 개발 단계 개요",
        "level": 2,
        "isMainTopic": true,
        "position": 68.828125
      },
      {
        "id": "heading-2",
        "text": "Phase 1: 기반 시스템 구축 (1-2개월)",
        "level": 3,
        "isMainTopic": false,
        "position": 120.2421875
      },
      {
        "id": "heading-3",
        "text": "Phase 2: 핵심 기능 개발 (2-3개월)",
        "level": 3,
        "isMainTopic": false,
        "position": 494.6796875
      },
      {
        "id": "heading-4",
        "text": "Phase 3: 고도화 및 최적화 (2-3개월)",
        "level": 3,
        "isMainTopic": false,
        "position": 869.1171875
      },
      {
        "id": "heading-5",
        "text": "🎯 스프린트 계획",
        "level": 2,
        "isMainTopic": true,
        "position": 1244.75
      },
      {
        "id": "heading-6",
        "text": "Sprint 1-2: 기반 시스템 (4주)",
        "level": 3,
        "isMainTopic": false,
        "position": 1296.1640625
      },
      {
        "id": "heading-7",
        "text": "Sprint 3-4: 데이터 파이프라인 (4주)",
        "level": 3,
        "isMainTopic": false,
        "position": 1415.1015625
      },
      {
        "id": "heading-8",
        "text": "Sprint 5-6: AI 모델 기초 (4주)",
        "level": 3,
        "isMainTopic": false,
        "position": 1534.0390625
      },
      {
        "id": "heading-9",
        "text": "Sprint 7-8: 시각화 (4주)",
        "level": 3,
        "isMainTopic": false,
        "position": 1652.9765625
      },
      {
        "id": "heading-10",
        "text": "Sprint 9-10: 고도화 (4주)",
        "level": 3,
        "isMainTopic": false,
        "position": 1771.9140625
      },
      {
        "id": "heading-11",
        "text": "📊 마일스톤",
        "level": 2,
        "isMainTopic": true,
        "position": 1892.046875
      },
      {
        "id": "heading-12",
        "text": "Milestone 1: MVP 출시 (2개월)",
        "level": 3,
        "isMainTopic": false,
        "position": 1943.4609375
      },
      {
        "id": "heading-13",
        "text": "Milestone 2: 베타 버전 (4개월)",
        "level": 3,
        "isMainTopic": false,
        "position": 2062.3984375
      },
      {
        "id": "heading-14",
        "text": "Milestone 3: 정식 버전 (6개월)",
        "level": 3,
        "isMainTopic": false,
        "position": 2181.3359375
      },
      {
        "id": "heading-15",
        "text": "🛠 개발 환경 및 도구",
        "level": 2,
        "isMainTopic": true,
        "position": 2301.46875
      },
      {
        "id": "heading-16",
        "text": "개발 환경",
        "level": 3,
        "isMainTopic": false,
        "position": 2352.8828125
      },
      {
        "id": "heading-17",
        "text": "모니터링 도구",
        "level": 3,
        "isMainTopic": false,
        "position": 2469.8203125
      },
      {
        "id": "heading-18",
        "text": "📈 품질 관리",
        "level": 2,
        "isMainTopic": true,
        "position": 2589.953125
      },
      {
        "id": "heading-19",
        "text": "테스트 전략",
        "level": 3,
        "isMainTopic": false,
        "position": 2641.3671875
      },
      {
        "id": "heading-20",
        "text": "코드 품질",
        "level": 3,
        "isMainTopic": false,
        "position": 2956.3046875
      },
      {
        "id": "heading-21",
        "text": "🔄 배포 전략",
        "level": 2,
        "isMainTopic": true,
        "position": 3074.4375
      },
      {
        "id": "heading-22",
        "text": "개발 환경",
        "level": 3,
        "isMainTopic": false,
        "position": 3125.8515625
      },
      {
        "id": "heading-23",
        "text": "배포 프로세스",
        "level": 3,
        "isMainTopic": false,
        "position": 3264.2890625
      },
      {
        "id": "heading-24",
        "text": "⚠️ 리스크 관리",
        "level": 2,
        "isMainTopic": true,
        "position": 3403.921875
      },
      {
        "id": "heading-25",
        "text": "예상 리스크",
        "level": 3,
        "isMainTopic": false,
        "position": 3455.3359375
      },
      {
        "id": "heading-26",
        "text": "대응 전략",
        "level": 3,
        "isMainTopic": false,
        "position": 3574.2734375
      },
      {
        "id": "heading-27",
        "text": "📝 문서화",
        "level": 2,
        "isMainTopic": true,
        "position": 3694.40625
      },
      {
        "id": "heading-28",
        "text": "개발 문서",
        "level": 3,
        "isMainTopic": false,
        "position": 3745.8203125
      },
      {
        "id": "heading-29",
        "text": "사용자 문서",
        "level": 3,
        "isMainTopic": false,
        "position": 3864.7578125
      }
    ],
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_3",
    "title": "Entasis Engine - 세부 기능 정의",
    "content": "<h1 id=\"heading-0\">금융 데이터 분석 시스템 세부 기능 정의</h1>\n<h2 id=\"heading-1\">📊 핵심 기능 상세</h2>\n<h3 id=\"heading-2\">1. 데이터 수집 시스템</h3>\n<h4 id=\"heading-3\">1.1 거래소 연동</h4>\n<ul>\n<li>[ ] Binance API 연동 구현\n<ul>\n<li>WebSocket 실시간 데이터 수신</li>\n<li>REST API 히스토리 데이터 수집</li>\n</ul>\n</li>\n<li>[ ] Bybit API 연동 구현\n<ul>\n<li>선물 거래 데이터 수집</li>\n<li>레버리지 정보 수집</li>\n</ul>\n</li>\n<li>[ ] Deribit API 연동 구현\n<ul>\n<li>옵션 데이터 수집</li>\n<li>그리스 지표 계산</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"heading-4\">1.2 데이터 정제</h4>\n<ul>\n<li>[ ] 실시간 데이터 정규화</li>\n<li>[ ] 이상치 탐지 및 제거</li>\n<li>[ ] 누락 데이터 처리</li>\n</ul>\n<h3 id=\"heading-5\">2. AI 분석 엔진</h3>\n<h4 id=\"heading-6\">2.1 시계열 예측</h4>\n<ul>\n<li>[ ] LSTM 모델 구현\n<ul>\n<li>가격 예측 모델</li>\n<li>변동성 예측 모델</li>\n</ul>\n</li>\n<li>[ ] 앙상블 모델 구현\n<ul>\n<li>Random Forest</li>\n<li>XGBoost</li>\n<li>LightGBM</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"heading-7\">2.2 포트폴리오 최적화</h4>\n<ul>\n<li>[ ] Modern Portfolio Theory 구현</li>\n<li>[ ] Risk Parity 전략 구현</li>\n<li>[ ] 동적 자산 배분 알고리즘</li>\n</ul>\n<h3 id=\"heading-8\">3. 리스크 관리 시스템</h3>\n<h4 id=\"heading-9\">3.1 리스크 지표 계산</h4>\n<ul>\n<li>[ ] Value at Risk (VaR) 계산</li>\n<li>[ ] Expected Shortfall 계산</li>\n<li>[ ] 변동성 지표 모니터링</li>\n</ul>\n<h4 id=\"heading-10\">3.2 포지션 관리</h4>\n<ul>\n<li>[ ] 레버리지 최적화</li>\n<li>[ ] 스탑로스 자동화</li>\n<li>[ ] 마진 콜 알림</li>\n</ul>\n<h3 id=\"heading-11\">4. 대시보드 UI</h3>\n<h4 id=\"heading-12\">4.1 차트 시스템</h4>\n<ul>\n<li>[ ] 캔들스틱 차트 구현</li>\n<li>[ ] 기술적 지표 표시</li>\n<li>[ ] 실시간 업데이트</li>\n</ul>\n<h4 id=\"heading-13\">4.2 포트폴리오 뷰</h4>\n<ul>\n<li>[ ] 자산 배분 현황</li>\n<li>[ ] 수익률 트래킹</li>\n<li>[ ] 리스크 지표 시각화</li>\n</ul>\n<hr>\n<h2 id=\"heading-14\">📋 칸반보드 구성</h2>\n<h3 id=\"heading-15\">🎯 백로그 (Backlog)</h3>\n<h4 id=\"heading-16\">우선순위: 높음</h4>\n<ul>\n<li>[ ] 데이터베이스 스키마 설계</li>\n<li>[ ] API 서버 기본 구조 구축</li>\n<li>[ ] 사용자 인증 시스템 구현</li>\n<li>[ ] 기본 대시보드 레이아웃</li>\n</ul>\n<h4 id=\"heading-17\">우선순위: 중간</h4>\n<ul>\n<li>[ ] 백테스팅 엔진 구현</li>\n<li>[ ] 알림 시스템 구축</li>\n<li>[ ] 포트폴리오 분석 도구</li>\n<li>[ ] 리포트 생성 시스템</li>\n</ul>\n<h4 id=\"heading-18\">우선순위: 낮음</h4>\n<ul>\n<li>[ ] 소셜 트레이딩 기능</li>\n<li>[ ] 모바일 앱 개발</li>\n<li>[ ] API 문서화</li>\n<li>[ ] 튜토리얼 시스템</li>\n</ul>\n<h3 id=\"heading-19\">🏃 진행 중 (In Progress)</h3>\n<h4 id=\"heading-20\">Sprint 1: 기반 시스템</h4>\n<ul>\n<li>[ ] PostgreSQL 데이터베이스 설정</li>\n<li>[ ] Spring Boot 프로젝트 셋업</li>\n<li>[ ] Next.js 프로젝트 초기화</li>\n</ul>\n<h4 id=\"heading-21\">Sprint 2: 데이터 파이프라인</h4>\n<ul>\n<li>[ ] CCXT 라이브러리 연동</li>\n<li>[ ] 실시간 데이터 수집 구현</li>\n<li>[ ] 데이터 정제 파이프라인</li>\n</ul>\n<h3 id=\"heading-22\">✅ 완료 (Done)</h3>\n<h4 id=\"heading-23\">초기 설정</h4>\n<ul>\n<li>[x] 프로젝트 요구사항 정의</li>\n<li>[x] 기술 스택 선정</li>\n<li>[x] 개발 환경 구성</li>\n</ul>\n<hr>\n<h2 id=\"heading-24\">📅 스프린트별 작업 항목</h2>\n<h3 id=\"heading-25\">Sprint 1 (1-2주차)</h3>\n<pre><code class=\"language-plaintext\">+------------------+     +------------------+     +------------------+\n|      To Do       |     |   In Progress    |     |      Done        |\n+------------------+     +------------------+     +------------------+\n| - DB 스키마 설계 |     | - 개발환경 설정  |     | - 요구사항 정의  |\n| - API 구조 설계  |     | - Git 저장소     |     | - 팀 구성        |\n+------------------+     +------------------+     +------------------+\n</code></pre>\n<h3 id=\"heading-26\">Sprint 2 (3-4주차)</h3>\n<pre><code class=\"language-plaintext\">+------------------+     +------------------+     +------------------+\n|      To Do       |     |   In Progress    |     |      Done        |\n+------------------+     +------------------+     +------------------+\n| - 데이터 정제    |     | - DB 구축        |     | - 스키마 설계    |\n| - API 구현       |     | - 기본 API 개발  |     | - 환경 설정      |\n+------------------+     +------------------+     +------------------+\n</code></pre>\n<hr>\n<h2 id=\"heading-27\">🔄 작업 추적</h2>\n<h3 id=\"heading-28\">현재 진행상황</h3>\n<ul>\n<li>전체 진행률: 15%</li>\n<li>주요 마일스톤: MVP 개발 단계</li>\n<li>예상 완료일: 2024년 9월</li>\n</ul>\n<h3 id=\"heading-29\">다음 단계 준비사항</h3>\n<ol>\n<li>스프린트 1 회고</li>\n<li>스프린트 2 계획 수립</li>\n<li>리스크 요소 점검</li>\n</ol>\n<p>이 문서는 프로젝트의 진행 상황을 추적하고 관리하기 위한 기준으로 사용됩니다. 각 기능과 작업은 우선순위와 의존성을 고려하여 순차적으로 구현될 예정입니다. 🚀</p>\n",
    "date": "2025-02-11",
    "category": "projects",
    "tags": [
      "기능 정의",
      "칸반보드",
      "태스크 관리",
      "백로그",
      "스프린트",
      "작업 추적"
    ],
    "description": "금융 데이터 분석 시스템의 세부 기능 정의 및 칸반보드",
    "thumbnail": "/images/cryptocurrency.jpg",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "금융 데이터 분석 시스템 세부 기능 정의",
        "level": 1,
        "isMainTopic": true,
        "position": 19.9140625
      },
      {
        "id": "heading-1",
        "text": "📊 핵심 기능 상세",
        "level": 2,
        "isMainTopic": true,
        "position": 68.828125
      },
      {
        "id": "heading-2",
        "text": "1. 데이터 수집 시스템",
        "level": 3,
        "isMainTopic": false,
        "position": 120.2421875
      },
      {
        "id": "heading-3",
        "text": "1.1 거래소 연동",
        "level": 4,
        "isMainTopic": false,
        "position": 164.515625
      },
      {
        "id": "heading-4",
        "text": "1.2 데이터 정제",
        "level": 4,
        "isMainTopic": false,
        "position": 402.0625
      },
      {
        "id": "heading-5",
        "text": "2. AI 분석 엔진",
        "level": 3,
        "isMainTopic": false,
        "position": 520.0546875
      },
      {
        "id": "heading-6",
        "text": "2.1 시계열 예측",
        "level": 4,
        "isMainTopic": false,
        "position": 564.328125
      },
      {
        "id": "heading-7",
        "text": "2.2 포트폴리오 최적화",
        "level": 4,
        "isMainTopic": false,
        "position": 759.875
      },
      {
        "id": "heading-8",
        "text": "3. 리스크 관리 시스템",
        "level": 3,
        "isMainTopic": false,
        "position": 877.8671875
      },
      {
        "id": "heading-9",
        "text": "3.1 리스크 지표 계산",
        "level": 4,
        "isMainTopic": false,
        "position": 922.140625
      },
      {
        "id": "heading-10",
        "text": "3.2 포지션 관리",
        "level": 4,
        "isMainTopic": false,
        "position": 1042.6875
      },
      {
        "id": "heading-11",
        "text": "4. 대시보드 UI",
        "level": 3,
        "isMainTopic": false,
        "position": 1160.6796875
      },
      {
        "id": "heading-12",
        "text": "4.1 차트 시스템",
        "level": 4,
        "isMainTopic": false,
        "position": 1204.953125
      },
      {
        "id": "heading-13",
        "text": "4.2 포트폴리오 뷰",
        "level": 4,
        "isMainTopic": false,
        "position": 1325.5
      },
      {
        "id": "heading-14",
        "text": "📋 칸반보드 구성",
        "level": 2,
        "isMainTopic": true,
        "position": 1462.6875
      },
      {
        "id": "heading-15",
        "text": "🎯 백로그 (Backlog)",
        "level": 3,
        "isMainTopic": false,
        "position": 1514.1015625
      },
      {
        "id": "heading-16",
        "text": "우선순위: 높음",
        "level": 4,
        "isMainTopic": false,
        "position": 1559.875
      },
      {
        "id": "heading-17",
        "text": "우선순위: 중간",
        "level": 4,
        "isMainTopic": false,
        "position": 1699.921875
      },
      {
        "id": "heading-18",
        "text": "우선순위: 낮음",
        "level": 4,
        "isMainTopic": false,
        "position": 1839.96875
      },
      {
        "id": "heading-19",
        "text": "🏃 진행 중 (In Progress)",
        "level": 3,
        "isMainTopic": false,
        "position": 1977.4609375
      },
      {
        "id": "heading-20",
        "text": "Sprint 1: 기반 시스템",
        "level": 4,
        "isMainTopic": false,
        "position": 2023.234375
      },
      {
        "id": "heading-21",
        "text": "Sprint 2: 데이터 파이프라인",
        "level": 4,
        "isMainTopic": false,
        "position": 2143.78125
      },
      {
        "id": "heading-22",
        "text": "✅ 완료 (Done)",
        "level": 3,
        "isMainTopic": false,
        "position": 2261.7734375
      },
      {
        "id": "heading-23",
        "text": "초기 설정",
        "level": 4,
        "isMainTopic": false,
        "position": 2307.546875
      },
      {
        "id": "heading-24",
        "text": "📅 스프린트별 작업 항목",
        "level": 2,
        "isMainTopic": true,
        "position": 2444.734375
      },
      {
        "id": "heading-25",
        "text": "Sprint 1 (1-2주차)",
        "level": 3,
        "isMainTopic": false,
        "position": 2496.1484375
      },
      {
        "id": "heading-26",
        "text": "Sprint 2 (3-4주차)",
        "level": 3,
        "isMainTopic": false,
        "position": 2648.5859375
      },
      {
        "id": "heading-27",
        "text": "🔄 작업 추적",
        "level": 2,
        "isMainTopic": true,
        "position": 2817.21875
      },
      {
        "id": "heading-28",
        "text": "현재 진행상황",
        "level": 3,
        "isMainTopic": false,
        "position": 2868.6328125
      },
      {
        "id": "heading-29",
        "text": "다음 단계 준비사항",
        "level": 3,
        "isMainTopic": false,
        "position": 2987.5703125
      }
    ],
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_4",
    "title": "Entasis Engine - 세부 기능 정의",
    "content": "<h1 id=\"heading-0\">금융 데이터 분석 시스템 세부 기능 정의</h1>\n<h2 id=\"heading-1\">📊 핵심 기능 상세</h2>\n<h3 id=\"heading-2\">1. 데이터 수집 시스템</h3>\n<h4 id=\"heading-3\">1.1 거래소 연동</h4>\n<ul>\n<li>[ ] Binance API 연동 구현\n<ul>\n<li>WebSocket 실시간 데이터 수신</li>\n<li>REST API 히스토리 데이터 수집</li>\n</ul>\n</li>\n<li>[ ] Bybit API 연동 구현\n<ul>\n<li>선물 거래 데이터 수집</li>\n<li>레버리지 정보 수집</li>\n</ul>\n</li>\n<li>[ ] Deribit API 연동 구현\n<ul>\n<li>옵션 데이터 수집</li>\n<li>그리스 지표 계산</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"heading-4\">1.2 데이터 정제</h4>\n<ul>\n<li>[ ] 실시간 데이터 정규화</li>\n<li>[ ] 이상치 탐지 및 제거</li>\n<li>[ ] 누락 데이터 처리</li>\n</ul>\n<h3 id=\"heading-5\">2. AI 분석 엔진</h3>\n<h4 id=\"heading-6\">2.1 시계열 예측</h4>\n<ul>\n<li>[ ] LSTM 모델 구현\n<ul>\n<li>가격 예측 모델</li>\n<li>변동성 예측 모델</li>\n</ul>\n</li>\n<li>[ ] 앙상블 모델 구현\n<ul>\n<li>Random Forest</li>\n<li>XGBoost</li>\n<li>LightGBM</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"heading-7\">2.2 포트폴리오 최적화</h4>\n<ul>\n<li>[ ] Modern Portfolio Theory 구현</li>\n<li>[ ] Risk Parity 전략 구현</li>\n<li>[ ] 동적 자산 배분 알고리즘</li>\n</ul>\n<h3 id=\"heading-8\">3. 리스크 관리 시스템</h3>\n<h4 id=\"heading-9\">3.1 리스크 지표 계산</h4>\n<ul>\n<li>[ ] Value at Risk (VaR) 계산</li>\n<li>[ ] Expected Shortfall 계산</li>\n<li>[ ] 변동성 지표 모니터링</li>\n</ul>\n<h4 id=\"heading-10\">3.2 포지션 관리</h4>\n<ul>\n<li>[ ] 레버리지 최적화</li>\n<li>[ ] 스탑로스 자동화</li>\n<li>[ ] 마진 콜 알림</li>\n</ul>\n<h3 id=\"heading-11\">4. 대시보드 UI</h3>\n<h4 id=\"heading-12\">4.1 차트 시스템</h4>\n<ul>\n<li>[ ] 캔들스틱 차트 구현</li>\n<li>[ ] 기술적 지표 표시</li>\n<li>[ ] 실시간 업데이트</li>\n</ul>\n<h4 id=\"heading-13\">4.2 포트폴리오 뷰</h4>\n<ul>\n<li>[ ] 자산 배분 현황</li>\n<li>[ ] 수익률 트래킹</li>\n<li>[ ] 리스크 지표 시각화</li>\n</ul>\n<hr>\n<h2 id=\"heading-14\">📋 칸반보드 구성</h2>\n<h3 id=\"heading-15\">🎯 백로그 (Backlog)</h3>\n<h4 id=\"heading-16\">우선순위: 높음</h4>\n<ul>\n<li>[ ] 데이터베이스 스키마 설계</li>\n<li>[ ] API 서버 기본 구조 구축</li>\n<li>[ ] 사용자 인증 시스템 구현</li>\n<li>[ ] 기본 대시보드 레이아웃</li>\n</ul>\n<h4 id=\"heading-17\">우선순위: 중간</h4>\n<ul>\n<li>[ ] 백테스팅 엔진 구현</li>\n<li>[ ] 알림 시스템 구축</li>\n<li>[ ] 포트폴리오 분석 도구</li>\n<li>[ ] 리포트 생성 시스템</li>\n</ul>\n<h4 id=\"heading-18\">우선순위: 낮음</h4>\n<ul>\n<li>[ ] 소셜 트레이딩 기능</li>\n<li>[ ] 모바일 앱 개발</li>\n<li>[ ] API 문서화</li>\n<li>[ ] 튜토리얼 시스템</li>\n</ul>\n<h3 id=\"heading-19\">🏃 진행 중 (In Progress)</h3>\n<h4 id=\"heading-20\">Sprint 1: 기반 시스템</h4>\n<ul>\n<li>[ ] PostgreSQL 데이터베이스 설정</li>\n<li>[ ] Spring Boot 프로젝트 셋업</li>\n<li>[ ] Next.js 프로젝트 초기화</li>\n</ul>\n<h4 id=\"heading-21\">Sprint 2: 데이터 파이프라인</h4>\n<ul>\n<li>[ ] CCXT 라이브러리 연동</li>\n<li>[ ] 실시간 데이터 수집 구현</li>\n<li>[ ] 데이터 정제 파이프라인</li>\n</ul>\n<h3 id=\"heading-22\">✅ 완료 (Done)</h3>\n<h4 id=\"heading-23\">초기 설정</h4>\n<ul>\n<li>[x] 프로젝트 요구사항 정의</li>\n<li>[x] 기술 스택 선정</li>\n<li>[x] 개발 환경 구성</li>\n</ul>\n<hr>\n<h2 id=\"heading-24\">📅 스프린트별 작업 항목</h2>\n<h3 id=\"heading-25\">Sprint 1 (1-2주차)</h3>\n<pre><code class=\"language-plaintext\">+------------------+     +------------------+     +------------------+\n|      To Do       |     |   In Progress    |     |      Done        |\n+------------------+     +------------------+     +------------------+\n| - DB 스키마 설계    |     | - 개발환경 설정     |     | - 요구사항 정의      |\n| - API 구조 설계     |     | - Git 저장소      |     | - 팀 구성          |\n+------------------+     +------------------+     +------------------+\n</code></pre>\n<h3 id=\"heading-26\">Sprint 2 (3-4주차)</h3>\n<pre><code class=\"language-plaintext\">+------------------+     +------------------+     +------------------+\n|      To Do       |     |   In Progress    |     |      Done        |\n+------------------+     +------------------+     +------------------+\n| - 데이터 정제       |     | - DB 구축         |     | - 스키마 설계       |\n| - API 구현        |     | - 기본 API 개발    |     | - 환경 설정         |\n+------------------+     +------------------+     +------------------+\n</code></pre>\n<hr>\n<h2 id=\"heading-27\">🔄 작업 추적</h2>\n<h3 id=\"heading-28\">현재 진행상황</h3>\n<ul>\n<li>전체 진행률: 15%</li>\n<li>주요 마일스톤: MVP 개발 단계</li>\n<li>예상 완료일: 2024년 9월</li>\n</ul>\n<h3 id=\"heading-29\">다음 단계 준비사항</h3>\n<ol>\n<li>스프린트 1 회고</li>\n<li>스프린트 2 계획 수립</li>\n<li>리스크 요소 점검</li>\n</ol>\n<p>이 문서는 프로젝트의 진행 상황을 추적하고 관리하기 위한 기준으로 사용됩니다. 각 기능과 작업은 우선순위와 의존성을 고려하여 순차적으로 구현될 예정입니다. 🚀</p>\n",
    "date": "2025-02-12",
    "category": "projects",
    "tags": [
      "definition",
      "kanban",
      "task",
      "backlog",
      "sprint",
      "tracking"
    ],
    "description": "가상자산 데이터 분석 시스템의 세부 기능 정의 및 칸반보드",
    "thumbnail": "/images/cryptocurrency.jpg",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "금융 데이터 분석 시스템 세부 기능 정의",
        "level": 1,
        "isMainTopic": true,
        "position": 19.9140625
      },
      {
        "id": "heading-1",
        "text": "📊 핵심 기능 상세",
        "level": 2,
        "isMainTopic": true,
        "position": 68.828125
      },
      {
        "id": "heading-2",
        "text": "1. 데이터 수집 시스템",
        "level": 3,
        "isMainTopic": false,
        "position": 120.2421875
      },
      {
        "id": "heading-3",
        "text": "1.1 거래소 연동",
        "level": 4,
        "isMainTopic": false,
        "position": 164.515625
      },
      {
        "id": "heading-4",
        "text": "1.2 데이터 정제",
        "level": 4,
        "isMainTopic": false,
        "position": 402.0625
      },
      {
        "id": "heading-5",
        "text": "2. AI 분석 엔진",
        "level": 3,
        "isMainTopic": false,
        "position": 520.0546875
      },
      {
        "id": "heading-6",
        "text": "2.1 시계열 예측",
        "level": 4,
        "isMainTopic": false,
        "position": 564.328125
      },
      {
        "id": "heading-7",
        "text": "2.2 포트폴리오 최적화",
        "level": 4,
        "isMainTopic": false,
        "position": 759.875
      },
      {
        "id": "heading-8",
        "text": "3. 리스크 관리 시스템",
        "level": 3,
        "isMainTopic": false,
        "position": 877.8671875
      },
      {
        "id": "heading-9",
        "text": "3.1 리스크 지표 계산",
        "level": 4,
        "isMainTopic": false,
        "position": 922.140625
      },
      {
        "id": "heading-10",
        "text": "3.2 포지션 관리",
        "level": 4,
        "isMainTopic": false,
        "position": 1042.6875
      },
      {
        "id": "heading-11",
        "text": "4. 대시보드 UI",
        "level": 3,
        "isMainTopic": false,
        "position": 1160.6796875
      },
      {
        "id": "heading-12",
        "text": "4.1 차트 시스템",
        "level": 4,
        "isMainTopic": false,
        "position": 1204.953125
      },
      {
        "id": "heading-13",
        "text": "4.2 포트폴리오 뷰",
        "level": 4,
        "isMainTopic": false,
        "position": 1325.5
      },
      {
        "id": "heading-14",
        "text": "📋 칸반보드 구성",
        "level": 2,
        "isMainTopic": true,
        "position": 1462.6875
      },
      {
        "id": "heading-15",
        "text": "🎯 백로그 (Backlog)",
        "level": 3,
        "isMainTopic": false,
        "position": 1514.1015625
      },
      {
        "id": "heading-16",
        "text": "우선순위: 높음",
        "level": 4,
        "isMainTopic": false,
        "position": 1559.875
      },
      {
        "id": "heading-17",
        "text": "우선순위: 중간",
        "level": 4,
        "isMainTopic": false,
        "position": 1699.921875
      },
      {
        "id": "heading-18",
        "text": "우선순위: 낮음",
        "level": 4,
        "isMainTopic": false,
        "position": 1839.96875
      },
      {
        "id": "heading-19",
        "text": "🏃 진행 중 (In Progress)",
        "level": 3,
        "isMainTopic": false,
        "position": 1977.4609375
      },
      {
        "id": "heading-20",
        "text": "Sprint 1: 기반 시스템",
        "level": 4,
        "isMainTopic": false,
        "position": 2023.234375
      },
      {
        "id": "heading-21",
        "text": "Sprint 2: 데이터 파이프라인",
        "level": 4,
        "isMainTopic": false,
        "position": 2143.78125
      },
      {
        "id": "heading-22",
        "text": "✅ 완료 (Done)",
        "level": 3,
        "isMainTopic": false,
        "position": 2261.7734375
      },
      {
        "id": "heading-23",
        "text": "초기 설정",
        "level": 4,
        "isMainTopic": false,
        "position": 2307.546875
      },
      {
        "id": "heading-24",
        "text": "📅 스프린트별 작업 항목",
        "level": 2,
        "isMainTopic": true,
        "position": 2444.734375
      },
      {
        "id": "heading-25",
        "text": "Sprint 1 (1-2주차)",
        "level": 3,
        "isMainTopic": false,
        "position": 2496.1484375
      },
      {
        "id": "heading-26",
        "text": "Sprint 2 (3-4주차)",
        "level": 3,
        "isMainTopic": false,
        "position": 2648.5859375
      },
      {
        "id": "heading-27",
        "text": "🔄 작업 추적",
        "level": 2,
        "isMainTopic": true,
        "position": 2817.21875
      },
      {
        "id": "heading-28",
        "text": "현재 진행상황",
        "level": 3,
        "isMainTopic": false,
        "position": 2868.6328125
      },
      {
        "id": "heading-29",
        "text": "다음 단계 준비사항",
        "level": 3,
        "isMainTopic": false,
        "position": 2987.5703125
      }
    ],
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_5",
    "title": "Entasis Engine - 데이터베이스 설계",
    "content": "<h1 id=\"heading-0\">금융 데이터 분석 시스템 데이터베이스 설계</h1>\n<h2 id=\"heading-1\">📊 데이터베이스 아키텍처</h2>\n<h3 id=\"heading-2\">1. 데이터베이스 선정 이유</h3>\n<ul>\n<li><strong>PostgreSQL</strong>: 안정성과 확장성이 검증된 RDBMS</li>\n<li><strong>TimescaleDB</strong>: 시계열 데이터 처리에 최적화된 확장</li>\n<li><strong>파티셔닝</strong>: 대용량 데이터의 효율적 관리</li>\n</ul>\n<h3 id=\"heading-3\">2. 핵심 테이블 구조</h3>\n<h4 id=\"heading-4\">2.1 Market Data Tables</h4>\n<pre><code class=\"language-sql\">-- 실시간 시장 데이터\nCREATE TABLE market_data (\n    id BIGSERIAL PRIMARY KEY,\n    symbol VARCHAR(20) NOT NULL,\n    exchange VARCHAR(20) NOT NULL,\n    timestamp TIMESTAMPTZ NOT NULL,\n    price DECIMAL(20,8) NOT NULL,\n    volume DECIMAL(20,8) NOT NULL,\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\n) PARTITION BY RANGE (timestamp);\n\n</code><p><code class=\"language-sql\">-- 옵션 데이터<br>CREATE TABLE option_data (<br>    id BIGSERIAL PRIMARY KEY,<br>    underlying VARCHAR(20) NOT NULL,<br>    strike_price DECIMAL(20,8) NOT NULL,<br>    expiry_date TIMESTAMPTZ NOT NULL,<br>    option_type VARCHAR(4) NOT NULL,<br>    iv DECIMAL(10,4),<br>    delta DECIMAL(10,4),<br>    gamma DECIMAL(10,4),<br>    theta DECIMAL(10,4),<br>    vega DECIMAL(10,4),<br>    timestamp TIMESTAMPTZ NOT NULL<br>) PARTITION BY RANGE (timestamp);<br></code></p></pre><p></p><h4 id=\"heading-5\">2.2 분석 데이터 테이블</h4>\n<pre><code class=\"language-sql\">-- AI 모델 예측 결과\nCREATE TABLE predictions (\n    id BIGSERIAL PRIMARY KEY,\n    model_id VARCHAR(50) NOT NULL,\n    symbol VARCHAR(20) NOT NULL,\n    prediction_type VARCHAR(20) NOT NULL,\n    predicted_value DECIMAL(20,8) NOT NULL,\n    confidence DECIMAL(5,4) NOT NULL,\n    timestamp TIMESTAMPTZ NOT NULL\n);\n\n</code><p><code class=\"language-sql\">-- 포트폴리오 상태<br>CREATE TABLE portfolio_status (<br>    id BIGSERIAL PRIMARY KEY,<br>    user_id UUID NOT NULL,<br>    asset_type VARCHAR(20) NOT NULL,<br>    position_size DECIMAL(20,8) NOT NULL,<br>    entry_price DECIMAL(20,8) NOT NULL,<br>    current_price DECIMAL(20,8) NOT NULL,<br>    pnl DECIMAL(20,8) NOT NULL,<br>    timestamp TIMESTAMPTZ NOT NULL<br>);<br></code></p></pre><p></p><h3 id=\"heading-6\">3. 인덱싱 전략</h3>\n<h4 id=\"heading-7\">3.1 시장 데이터 인덱스</h4>\n<pre><code class=\"language-sql\">-- 시장 데이터 조회 최적화\nCREATE INDEX idx_market_data_symbol_timestamp ON market_data (symbol, timestamp DESC);\nCREATE INDEX idx_market_data_exchange_timestamp ON market_data (exchange, timestamp DESC);\n\n</code><p><code class=\"language-sql\">-- 옵션 데이터 조회 최적화<br>CREATE INDEX idx_option_data_underlying_expiry ON option_data (underlying, expiry_date);<br>CREATE INDEX idx_option_data_strike_type ON option_data (strike_price, option_type);<br></code></p></pre><p></p><h4 id=\"heading-8\">3.2 분석 데이터 인덱스</h4>\n<pre><code class=\"language-sql\">-- 예측 데이터 조회 최적화\nCREATE INDEX idx_predictions_model_symbol ON predictions (model_id, symbol);\nCREATE INDEX idx_predictions_timestamp ON predictions (timestamp DESC);\n\n</code><p><code class=\"language-sql\">-- 포트폴리오 조회 최적화<br>CREATE INDEX idx_portfolio_user_timestamp ON portfolio_status (user_id, timestamp DESC);<br></code></p></pre><p></p><h3 id=\"heading-9\">4. 파티셔닝 전략</h3>\n<h4 id=\"heading-10\">4.1 시계열 데이터 파티셔닝</h4>\n<pre><code class=\"language-sql\">-- 월별 파티션 생성\nCREATE TABLE market_data_y2024m01 PARTITION OF market_data\n    FOR VALUES FROM ('2024-01-01') TO ('2024-02-01');\nCREATE TABLE market_data_y2024m02 PARTITION OF market_data\n    FOR VALUES FROM ('2024-02-01') TO ('2024-03-01');\n</code></pre>\n<h4 id=\"heading-11\">4.2 보관 정책</h4>\n<ul>\n<li>실시간 데이터: 최근 3개월</li>\n<li>집계 데이터: 최근 1년</li>\n<li>히스토리 데이터: S3 아카이브</li>\n</ul>\n<h2 id=\"heading-12\">📈 성능 최적화</h2>\n<h3 id=\"heading-13\">1. 쿼리 최적화</h3>\n<h4 id=\"heading-14\">1.1 자주 사용되는 쿼리</h4>\n<pre><code class=\"language-sql\">-- 특정 기간의 OHLCV 데이터 조회\nCREATE MATERIALIZED VIEW mv_ohlcv_1h AS\nSELECT\n    symbol,\n    date_trunc('hour', timestamp) as timeframe,\n    first(price) as open,\n    max(price) as high,\n    min(price) as low,\n    last(price) as close,\n    sum(volume) as volume\nFROM market_data\nGROUP BY symbol, timeframe;\n</code></pre>\n<h4 id=\"heading-15\">1.2 캐싱 전략</h4>\n<ul>\n<li>Redis 캐싱 레이어 구현</li>\n<li>실시간 데이터 메모리 캐싱</li>\n<li>집계 데이터 캐시 갱신 주기 설정</li>\n</ul>\n<h3 id=\"heading-16\">2. 백업 전략</h3>\n<h4 id=\"heading-17\">2.1 정기 백업</h4>\n<ul>\n<li>일일 증분 백업</li>\n<li>주간 전체 백업</li>\n<li>월간 아카이브</li>\n</ul>\n<h4 id=\"heading-18\">2.2 복구 계획</h4>\n<ul>\n<li>Point-in-Time Recovery 설정</li>\n<li>장애 복구 시나리오 문서화</li>\n<li>복구 테스트 계획</li>\n</ul>\n<h2 id=\"heading-19\">🔄 데이터 흐름</h2>\n<h3 id=\"heading-20\">1. 데이터 수집</h3>\n<pre><code class=\"language-mermaid\">graph LR\n    A[거래소 API] --&gt; B[데이터 수집기]\n    B --&gt; C[데이터 정제]\n    C --&gt; D[TimescaleDB]\n    D --&gt; E[분석 엔진]\n</code></pre>\n<h3 id=\"heading-21\">2. 데이터 처리</h3>\n<ul>\n<li>실시간 스트림 처리</li>\n<li>배치 처리</li>\n<li>이상치 탐지 및 처리</li>\n</ul>\n<h2 id=\"heading-22\">⚡ 확장성 고려사항</h2>\n<h3 id=\"heading-23\">1. 수평적 확장</h3>\n<ul>\n<li>읽기 전용 복제본 구성</li>\n<li>샤딩 전략 수립</li>\n<li>로드 밸런싱 설정</li>\n</ul>\n<h3 id=\"heading-24\">2. 수직적 확장</h3>\n<ul>\n<li>리소스 모니터링</li>\n<li>성능 지표 설정</li>\n<li>스케일 업 임계값 정의</li>\n</ul>\n<p>이 문서는 금융 데이터 분석 시스템의 데이터베이스 설계 기준을 제공합니다. 시스템의 요구사항과 성능을 고려하여 지속적으로 업데이트될 예정입니다. 🚀</p>\n",
    "date": "2025-02-12",
    "category": "projects",
    "tags": [
      "database",
      "schema",
      "postgresql",
      "timescaledb",
      "erd",
      "indexing",
      "partitioning"
    ],
    "description": "가상자산 데이터 분석 시스템의 데이터베이스 스키마 및 설계 문서",
    "thumbnail": "/images/cryptocurrency.jpg",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "금융 데이터 분석 시스템 데이터베이스 설계",
        "level": 1,
        "isMainTopic": true,
        "position": 19.9140625
      },
      {
        "id": "heading-1",
        "text": "📊 데이터베이스 아키텍처",
        "level": 2,
        "isMainTopic": true,
        "position": 68.828125
      },
      {
        "id": "heading-2",
        "text": "1. 데이터베이스 선정 이유",
        "level": 3,
        "isMainTopic": false,
        "position": 120.2421875
      },
      {
        "id": "heading-3",
        "text": "2. 핵심 테이블 구조",
        "level": 3,
        "isMainTopic": false,
        "position": 239.1796875
      },
      {
        "id": "heading-4",
        "text": "2.1 Market Data Tables",
        "level": 4,
        "isMainTopic": false,
        "position": 283.453125
      },
      {
        "id": "heading-5",
        "text": "2.2 분석 데이터 테이블",
        "level": 4,
        "isMainTopic": false,
        "position": 734.5
      },
      {
        "id": "heading-6",
        "text": "3. 인덱싱 전략",
        "level": 3,
        "isMainTopic": false,
        "position": 1138.9921875
      },
      {
        "id": "heading-7",
        "text": "3.1 시장 데이터 인덱스",
        "level": 4,
        "isMainTopic": false,
        "position": 1183.265625
      },
      {
        "id": "heading-8",
        "text": "3.2 분석 데이터 인덱스",
        "level": 4,
        "isMainTopic": false,
        "position": 1365.3125
      },
      {
        "id": "heading-9",
        "text": "4. 파티셔닝 전략",
        "level": 3,
        "isMainTopic": false,
        "position": 1529.8046875
      },
      {
        "id": "heading-10",
        "text": "4.1 시계열 데이터 파티셔닝",
        "level": 4,
        "isMainTopic": false,
        "position": 1574.078125
      },
      {
        "id": "heading-11",
        "text": "4.2 보관 정책",
        "level": 4,
        "isMainTopic": false,
        "position": 1712.125
      },
      {
        "id": "heading-12",
        "text": "📈 성능 최적화",
        "level": 2,
        "isMainTopic": true,
        "position": 1831.3125
      },
      {
        "id": "heading-13",
        "text": "1. 쿼리 최적화",
        "level": 3,
        "isMainTopic": false,
        "position": 1882.7265625
      },
      {
        "id": "heading-14",
        "text": "1.1 자주 사용되는 쿼리",
        "level": 4,
        "isMainTopic": false,
        "position": 1927
      },
      {
        "id": "heading-15",
        "text": "1.2 캐싱 전략",
        "level": 4,
        "isMainTopic": false,
        "position": 2170.046875
      },
      {
        "id": "heading-16",
        "text": "2. 백업 전략",
        "level": 3,
        "isMainTopic": false,
        "position": 2288.0390625
      },
      {
        "id": "heading-17",
        "text": "2.1 정기 백업",
        "level": 4,
        "isMainTopic": false,
        "position": 2332.3125
      },
      {
        "id": "heading-18",
        "text": "2.2 복구 계획",
        "level": 4,
        "isMainTopic": false,
        "position": 2452.859375
      },
      {
        "id": "heading-19",
        "text": "🔄 데이터 흐름",
        "level": 2,
        "isMainTopic": true,
        "position": 2572.046875
      },
      {
        "id": "heading-20",
        "text": "1. 데이터 수집",
        "level": 3,
        "isMainTopic": false,
        "position": 2623.4609375
      },
      {
        "id": "heading-21",
        "text": "2. 데이터 처리",
        "level": 3,
        "isMainTopic": false,
        "position": 2761.8984375
      },
      {
        "id": "heading-22",
        "text": "⚡ 확장성 고려사항",
        "level": 2,
        "isMainTopic": true,
        "position": 2882.03125
      },
      {
        "id": "heading-23",
        "text": "1. 수평적 확장",
        "level": 3,
        "isMainTopic": false,
        "position": 2933.4453125
      },
      {
        "id": "heading-24",
        "text": "2. 수직적 확장",
        "level": 3,
        "isMainTopic": false,
        "position": 3052.3828125
      }
    ],
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_6",
    "title": "Entasis Engine - API 명세서",
    "content": "<h1 id=\"heading-0\">금융 데이터 분석 시스템 API 명세서</h1>\n<h2 id=\"heading-1\">🔐 인증 및 보안</h2>\n<h3 id=\"heading-2\">1. 인증 방식</h3>\n<h4 id=\"heading-3\">1.1 JWT 인증</h4>\n<pre><code class=\"language-json\">{\n  \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}\n</code></pre>\n<h4 id=\"heading-4\">1.2 API Key 인증</h4>\n<pre><code class=\"language-json\">{\n  \"X-API-Key\": \"your-api-key-here\"\n}\n</code></pre>\n<h3 id=\"heading-5\">2. 보안 정책</h3>\n<ul>\n<li>Rate Limiting: 1000 requests/minute</li>\n<li>IP Whitelisting 지원</li>\n<li>SSL/TLS 필수</li>\n</ul>\n<h2 id=\"heading-6\">📡 RESTful API 엔드포인트</h2>\n<h3 id=\"heading-7\">1. 시장 데이터 API</h3>\n<h4 id=\"heading-8\">1.1 실시간 시세 조회</h4>\n<pre><code class=\"language-http\">GET /api/v1/market/price/{symbol}\n\n</code><p><code class=\"language-http\">Response 200:<br>{<br>  \"symbol\": \"BTC-USDT\",<br>  \"price\": \"65432.10\",<br>  \"timestamp\": \"2024-03-21T09:30:00Z\",<br>  \"volume\": \"123.45\",<br>  \"exchange\": \"binance\"<br>}<br></code></p></pre><p></p><h4 id=\"heading-9\">1.2 과거 데이터 조회</h4>\n<pre><code class=\"language-http\">GET /api/v1/market/history/{symbol}\nParameters:\n  - interval: \"1m\" | \"5m\" | \"1h\" | \"1d\"\n  - start: ISO8601\n  - end: ISO8601\n\n</code><p><code class=\"language-http\">Response 200:<br>{<br>  \"symbol\": \"BTC-USDT\",<br>  \"data\": [<br>    {<br>      \"timestamp\": \"2024-03-21T09:00:00Z\",<br>      \"open\": \"65000.00\",<br>      \"high\": \"65100.00\",<br>      \"low\": \"64900.00\",<br>      \"close\": \"65050.00\",<br>      \"volume\": \"234.56\"<br>    }<br>  ]<br>}<br></code></p></pre><p></p><h3 id=\"heading-10\">2. 포트폴리오 API</h3>\n<h4 id=\"heading-11\">2.1 포지션 조회</h4>\n<pre><code class=\"language-http\">GET /api/v1/portfolio/positions\n\n</code><p><code class=\"language-http\">Response 200:<br>{<br>  \"positions\": [<br>    {<br>      \"symbol\": \"BTC-USDT\",<br>      \"size\": \"1.5\",<br>      \"entry_price\": \"64000.00\",<br>      \"current_price\": \"65000.00\",<br>      \"pnl\": \"1500.00\",<br>      \"timestamp\": \"2024-03-21T09:30:00Z\"<br>    }<br>  ]<br>}<br></code></p></pre><p></p><h4 id=\"heading-12\">2.2 포지션 생성</h4>\n<pre><code class=\"language-http\">POST /api/v1/portfolio/positions\nRequest:\n{\n  \"symbol\": \"BTC-USDT\",\n  \"size\": \"1.5\",\n  \"type\": \"long\",\n  \"leverage\": \"1\"\n}\n\n</code><p><code class=\"language-http\">Response 201:<br>{<br>  \"position_id\": \"pos_123456\",<br>  \"status\": \"success\",<br>  \"timestamp\": \"2024-03-21T09:30:00Z\"<br>}<br></code></p></pre><p></p><h3 id=\"heading-13\">3. AI 분석 API</h3>\n<h4 id=\"heading-14\">3.1 가격 예측</h4>\n<pre><code class=\"language-http\">GET /api/v1/analysis/prediction/{symbol}\nParameters:\n  - timeframe: \"1h\" | \"4h\" | \"1d\"\n  - model: \"lstm\" | \"ensemble\"\n\n</code><p><code class=\"language-http\">Response 200:<br>{<br>  \"symbol\": \"BTC-USDT\",<br>  \"prediction\": \"66000.00\",<br>  \"confidence\": 0.85,<br>  \"timeframe\": \"1h\",<br>  \"model\": \"ensemble\",<br>  \"timestamp\": \"2024-03-21T09:30:00Z\"<br>}<br></code></p></pre><p></p><h4 id=\"heading-15\">3.2 리스크 분석</h4>\n<pre><code class=\"language-http\">GET /api/v1/analysis/risk/{symbol}\n\n</code><p><code class=\"language-http\">Response 200:<br>{<br>  \"symbol\": \"BTC-USDT\",<br>  \"var_95\": \"3200.00\",<br>  \"expected_shortfall\": \"3800.00\",<br>  \"volatility\": \"0.45\",<br>  \"timestamp\": \"2024-03-21T09:30:00Z\"<br>}<br></code></p></pre><p></p><h2 id=\"heading-16\">🔄 WebSocket API</h2>\n<h3 id=\"heading-17\">1. 시장 데이터 스트림</h3>\n<h4 id=\"heading-18\">1.1 실시간 시세 구독</h4>\n<pre><code class=\"language-javascript\">// 연결\nws://api.example.com/ws/market\n\n<p>// 구독 메시지<br>{<br>  \"action\": \"subscribe\",<br>  \"channel\": \"market\",<br>  \"symbols\": [\"BTC-USDT\", \"ETH-USDT\"]<br>}</p></code><p><code class=\"language-javascript\">// 수신 데이터<br>{<br>  \"symbol\": \"BTC-USDT\",<br>  \"price\": \"65432.10\",<br>  \"timestamp\": \"2024-03-21T09:30:00.123Z\",<br>  \"volume\": \"1.23\"<br>}<br></code></p></pre><p></p><h4 id=\"heading-19\">1.2 주문북 구독</h4>\n<pre><code class=\"language-javascript\">// 구독 메시지\n{\n  \"action\": \"subscribe\",\n  \"channel\": \"orderbook\",\n  \"symbol\": \"BTC-USDT\",\n  \"depth\": 10\n}\n\n</code><p><code class=\"language-javascript\">// 수신 데이터<br>{<br>  \"symbol\": \"BTC-USDT\",<br>  \"bids\": [<br>    [\"65000.00\", \"1.234\"],<br>    [\"64999.00\", \"2.345\"]<br>  ],<br>  \"asks\": [<br>    [\"65001.00\", \"1.234\"],<br>    [\"65002.00\", \"2.345\"]<br>  ],<br>  \"timestamp\": \"2024-03-21T09:30:00.123Z\"<br>}<br></code></p></pre><p></p><h2 id=\"heading-20\">📊 에러 코드</h2>\n<h3 id=\"heading-21\">1. HTTP 상태 코드</h3>\n<pre><code class=\"language-json\">{\n  \"400\": \"잘못된 요청\",\n  \"401\": \"인증 실패\",\n  \"403\": \"권한 없음\",\n  \"404\": \"리소스 없음\",\n  \"429\": \"요청 한도 초과\",\n  \"500\": \"서버 내부 오류\"\n}\n</code></pre>\n<h3 id=\"heading-22\">2. 비즈니스 에러 코드</h3>\n<pre><code class=\"language-json\">{\n  \"MARKET_001\": \"유효하지 않은 심볼\",\n  \"MARKET_002\": \"거래소 연결 실패\",\n  \"PORT_001\": \"잔액 부족\",\n  \"PORT_002\": \"포지션 한도 초과\",\n  \"AI_001\": \"모델 로딩 실패\",\n  \"AI_002\": \"예측 실패\"\n}\n</code></pre>\n<h2 id=\"heading-23\">📝 API 사용 예시</h2>\n<h3 id=\"heading-24\">1. REST API 호출</h3>\n<pre><code class=\"language-python\">import requests\n\n<h1 id=\"heading-25\">시장 데이터 조회</h1>\n<p>def get_market_price(symbol):<br>    url = f\"<a href=\"https://api.example.com/v1/market/price/%7Bsymbol%7D\">https://api.example.com/v1/market/price/{symbol}</a>\"<br>    headers = {<br>        \"Authorization\": f\"Bearer {token}\",<br>        \"X-API-Key\": \"your-api-key\"<br>    }<br>    response = requests.get(url, headers=headers)<br>    return response.json()</p><h1 id=\"heading-26\">포지션 생성</h1>\n</code><p><code class=\"language-python\">def create_position(symbol, size):<br>    url = \"<a href=\"https://api.example.com/v1/portfolio/positions\">https://api.example.com/v1/portfolio/positions</a>\"<br>    data = {<br>        \"symbol\": symbol,<br>        \"size\": size,<br>        \"type\": \"long\"<br>    }<br>    response = requests.post(url, json=data, headers=headers)<br>    return response.json()<br></code></p></pre><p></p><h3 id=\"heading-27\">2. WebSocket 연결</h3>\n<pre><code class=\"language-javascript\">const ws = new WebSocket(\"ws://api.example.com/ws/market\");\n\n<p>ws.onopen = () =&gt; {<br>  ws.send(<br>    JSON.stringify({<br>      action: \"subscribe\",<br>      channel: \"market\",<br>      symbols: [\"BTC-USDT\"],<br>    })<br>  );<br>};</p></code><p><code class=\"language-javascript\">ws.onmessage = (event) =&gt; {<br>  const data = JSON.parse(event.data);<br>  console.log(<code>${data.symbol}: ${data.price}</code>);<br>};<br></code></p></pre><p></p><p>이 문서는 금융 데이터 분석 시스템의 API 명세를 제공합니다. API는 지속적으로 업데이트되며, 최신 버전은 Swagger UI를 통해 확인할 수 있습니다. 🚀</p>\n",
    "date": "2025-02-12",
    "category": "projects",
    "tags": [
      "api",
      "rest",
      "websocket",
      "swagger",
      "endpoint",
      "authentication",
      "documentation"
    ],
    "description": "가상자산 데이터 분석 시스템의 RESTful API 및 WebSocket 명세",
    "thumbnail": "/images/cryptocurrency.jpg",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "금융 데이터 분석 시스템 API 명세서",
        "level": 1,
        "isMainTopic": true,
        "position": 19.9140625
      },
      {
        "id": "heading-1",
        "text": "🔐 인증 및 보안",
        "level": 2,
        "isMainTopic": true,
        "position": 68.828125
      },
      {
        "id": "heading-2",
        "text": "1. 인증 방식",
        "level": 3,
        "isMainTopic": false,
        "position": 120.2421875
      },
      {
        "id": "heading-3",
        "text": "1.1 JWT 인증",
        "level": 4,
        "isMainTopic": false,
        "position": 164.515625
      },
      {
        "id": "heading-4",
        "text": "1.2 API Key 인증",
        "level": 4,
        "isMainTopic": false,
        "position": 271.5625
      },
      {
        "id": "heading-5",
        "text": "2. 보안 정책",
        "level": 3,
        "isMainTopic": false,
        "position": 376.0546875
      },
      {
        "id": "heading-6",
        "text": "📡 RESTful API 엔드포인트",
        "level": 2,
        "isMainTopic": true,
        "position": 495.1875
      },
      {
        "id": "heading-7",
        "text": "1. 시장 데이터 API",
        "level": 3,
        "isMainTopic": false,
        "position": 546.6015625
      },
      {
        "id": "heading-8",
        "text": "1.1 실시간 시세 조회",
        "level": 4,
        "isMainTopic": false,
        "position": 590.875
      },
      {
        "id": "heading-9",
        "text": "1.2 과거 데이터 조회",
        "level": 4,
        "isMainTopic": false,
        "position": 815.921875
      },
      {
        "id": "heading-10",
        "text": "2. 포트폴리오 API",
        "level": 3,
        "isMainTopic": false,
        "position": 1188.4140625
      },
      {
        "id": "heading-11",
        "text": "2.1 포지션 조회",
        "level": 4,
        "isMainTopic": false,
        "position": 1232.6875
      },
      {
        "id": "heading-12",
        "text": "2.2 포지션 생성",
        "level": 4,
        "isMainTopic": false,
        "position": 1532.734375
      },
      {
        "id": "heading-13",
        "text": "3. AI 분석 API",
        "level": 3,
        "isMainTopic": false,
        "position": 1830.2265625
      },
      {
        "id": "heading-14",
        "text": "3.1 가격 예측",
        "level": 4,
        "isMainTopic": false,
        "position": 1874.5
      },
      {
        "id": "heading-15",
        "text": "3.2 리스크 분석",
        "level": 4,
        "isMainTopic": false,
        "position": 2159.546875
      },
      {
        "id": "heading-16",
        "text": "🔄 WebSocket API",
        "level": 2,
        "isMainTopic": true,
        "position": 2383.234375
      },
      {
        "id": "heading-17",
        "text": "1. 시장 데이터 스트림",
        "level": 3,
        "isMainTopic": false,
        "position": 2434.6484375
      },
      {
        "id": "heading-18",
        "text": "1.1 실시간 시세 구독",
        "level": 4,
        "isMainTopic": false,
        "position": 2478.921875
      },
      {
        "id": "heading-19",
        "text": "1.2 주문북 구독",
        "level": 4,
        "isMainTopic": false,
        "position": 2809.96875
      },
      {
        "id": "heading-20",
        "text": "📊 에러 코드",
        "level": 2,
        "isMainTopic": true,
        "position": 3200.65625
      },
      {
        "id": "heading-21",
        "text": "1. HTTP 상태 코드",
        "level": 3,
        "isMainTopic": false,
        "position": 3252.0703125
      },
      {
        "id": "heading-22",
        "text": "2. 비즈니스 에러 코드",
        "level": 3,
        "isMainTopic": false,
        "position": 3438.5078125
      },
      {
        "id": "heading-23",
        "text": "📝 API 사용 예시",
        "level": 2,
        "isMainTopic": true,
        "position": 3626.140625
      },
      {
        "id": "heading-24",
        "text": "1. REST API 호출",
        "level": 3,
        "isMainTopic": false,
        "position": 3677.5546875
      },
      {
        "id": "heading-25",
        "text": "시장 데이터 조회",
        "level": 1,
        "isMainTopic": true,
        "position": 3765.453125
      },
      {
        "id": "heading-26",
        "text": "포지션 생성",
        "level": 1,
        "isMainTopic": true,
        "position": 3969.8125
      },
      {
        "id": "heading-27",
        "text": "2. WebSocket 연결",
        "level": 3,
        "isMainTopic": false,
        "position": 4191.7109375
      }
    ],
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_7",
    "title": "Entasis Engine - AI 모델 설계",
    "content": "<h1 id=\"heading-0\">금융 데이터 분석 시스템 AI 모델 설계</h1>\n<h2 id=\"heading-1\">📊 모델 아키텍처 개요</h2>\n<h3 id=\"heading-2\">1. 예측 모델 구조</h3>\n<h4 id=\"heading-3\">1.1 LSTM 기반 시계열 예측</h4>\n<pre><code class=\"language-python\">class PricePredictionLSTM(nn.Module):\n    def __init__(self, input_dim, hidden_dim, num_layers, output_dim):\n        super().__init__()\n        self.lstm = nn.LSTM(\n            input_dim,\n            hidden_dim,\n            num_layers,\n            batch_first=True,\n            dropout=0.2\n        )\n        self.fc = nn.Linear(hidden_dim, output_dim)\n\n<pre><code>def forward(self, x):\n    lstm_out, _ = self.lstm(x)\n    predictions = self.fc(lstm_out[:, -1, :])\n    return predictions\n</code></pre>\n</code><p><code class=\"language-python\"></code></p></pre><p></p><h4 id=\"heading-4\">1.2 앙상블 모델 구성</h4>\n<pre><code class=\"language-python\">class EnsembleModel:\n    def __init__(self):\n        self.models = {\n            'lstm': PricePredictionLSTM(...),\n            'random_forest': RandomForestRegressor(...),\n            'xgboost': XGBRegressor(...),\n            'lightgbm': LGBMRegressor(...)\n        }\n        self.weights = {\n            'lstm': 0.4,\n            'random_forest': 0.2,\n            'xgboost': 0.2,\n            'lightgbm': 0.2\n        }\n</code></pre>\n<h3 id=\"heading-5\">2. 특징 엔지니어링</h3>\n<h4 id=\"heading-6\">2.1 기술적 지표</h4>\n<pre><code class=\"language-python\">def calculate_technical_indicators(df):\n    # 이동평균\n    df['sma_20'] = df['close'].rolling(window=20).mean()\n    df['sma_50'] = df['close'].rolling(window=50).mean()\n\n<pre><code># RSI\ndelta = df['close'].diff()\ngain = (delta.where(delta &gt; 0, 0)).rolling(window=14).mean()\nloss = (-delta.where(delta &amp;#x3C; 0, 0)).rolling(window=14).mean()\ndf['rsi'] = 100 - (100 / (1 + gain/loss))\n\n# MACD\nexp1 = df['close'].ewm(span=12, adjust=False).mean()\nexp2 = df['close'].ewm(span=26, adjust=False).mean()\ndf['macd'] = exp1 - exp2\ndf['signal'] = df['macd'].ewm(span=9, adjust=False).mean()\n\nreturn df\n</code></pre>\n</code><p><code class=\"language-python\"></code></p></pre><p></p><h4 id=\"heading-7\">2.2 시장 감성 분석</h4>\n<pre><code class=\"language-python\">def analyze_market_sentiment(text_data):\n    sentiment_model = pipeline(\n        \"sentiment-analysis\",\n        model=\"finbert-sentiment\"\n    )\n    scores = sentiment_model(text_data)\n    return aggregate_sentiment_scores(scores)\n</code></pre>\n<h2 id=\"heading-8\">🔄 학습 파이프라인</h2>\n<h3 id=\"heading-9\">1. 데이터 전처리</h3>\n<h4 id=\"heading-10\">1.1 시계열 데이터 준비</h4>\n<pre><code class=\"language-python\">def prepare_time_series(data, sequence_length):\n    sequences = []\n    targets = []\n\n<pre><code>for i in range(len(data) - sequence_length):\n    seq = data[i:(i + sequence_length)]\n    target = data[i + sequence_length]\n    sequences.append(seq)\n    targets.append(target)\n\nreturn np.array(sequences), np.array(targets)\n</code></pre>\n</code><p><code class=\"language-python\"></code></p></pre><p></p><h4 id=\"heading-11\">1.2 데이터 정규화</h4>\n<pre><code class=\"language-python\">def normalize_features(data):\n    scaler = MinMaxScaler()\n    normalized_data = scaler.fit_transform(data)\n    return normalized_data, scaler\n</code></pre>\n<h3 id=\"heading-12\">2. 모델 학습</h3>\n<h4 id=\"heading-13\">2.1 LSTM 학습 프로세스</h4>\n<pre><code class=\"language-python\">def train_lstm_model(model, train_loader, val_loader, epochs):\n    optimizer = optim.Adam(model.parameters())\n    criterion = nn.MSELoss()\n\n<pre><code>for epoch in range(epochs):\n    model.train()\n    for batch_X, batch_y in train_loader:\n        optimizer.zero_grad()\n        outputs = model(batch_X)\n        loss = criterion(outputs, batch_y)\n        loss.backward()\n        optimizer.step()\n\n    # 검증\n    model.eval()\n    val_loss = validate_model(model, val_loader, criterion)\n    print(f'Epoch {epoch}: Val Loss = {val_loss:.4f}')\n</code></pre>\n</code><p><code class=\"language-python\"></code></p></pre><p></p><h4 id=\"heading-14\">2.2 앙상블 모델 통합</h4>\n<pre><code class=\"language-python\">def ensemble_predict(models, weights, X):\n    predictions = []\n    for model_name, model in models.items():\n        pred = model.predict(X)\n        predictions.append(pred * weights[model_name])\n    return np.sum(predictions, axis=0)\n</code></pre>\n<h2 id=\"heading-15\">📈 성능 평가</h2>\n<h3 id=\"heading-16\">1. 평가 메트릭</h3>\n<h4 id=\"heading-17\">1.1 예측 정확도 평가</h4>\n<pre><code class=\"language-python\">def evaluate_predictions(y_true, y_pred):\n    metrics = {\n        'mse': mean_squared_error(y_true, y_pred),\n        'mae': mean_absolute_error(y_true, y_pred),\n        'r2': r2_score(y_true, y_pred),\n        'mape': mean_absolute_percentage_error(y_true, y_pred)\n    }\n    return metrics\n</code></pre>\n<h4 id=\"heading-18\">1.2 백테스팅</h4>\n<pre><code class=\"language-python\">def backtest_strategy(model, historical_data, initial_capital=10000):\n    portfolio = Portfolio(initial_capital)\n    signals = generate_trading_signals(model, historical_data)\n\n<pre><code>for timestamp, signal in signals.items():\n    if signal &gt; 0:\n        portfolio.long_position(timestamp)\n    elif signal &amp;#x3C; 0:\n        portfolio.short_position(timestamp)\n\nreturn portfolio.calculate_returns()\n</code></pre>\n</code><p><code class=\"language-python\"></code></p></pre><p></p><h2 id=\"heading-19\">🔍 리스크 관리</h2>\n<h3 id=\"heading-20\">1. 리스크 모니터링</h3>\n<h4 id=\"heading-21\">1.1 Value at Risk (VaR) 계산</h4>\n<pre><code class=\"language-python\">def calculate_var(returns, confidence_level=0.95):\n    return np.percentile(returns, (1 - confidence_level) * 100)\n</code></pre>\n<h4 id=\"heading-22\">1.2 Expected Shortfall</h4>\n<pre><code class=\"language-python\">def calculate_expected_shortfall(returns, var):\n    return returns[returns &lt;= var].mean()\n</code></pre>\n<h3 id=\"heading-23\">2. 포지션 사이징</h3>\n<pre><code class=\"language-python\">def calculate_position_size(prediction, confidence, account_size):\n    base_size = account_size * 0.02  # 2% 리스크 룰\n    adjusted_size = base_size * confidence\n    return min(adjusted_size, account_size * 0.05)  # 최대 5% 제한\n</code></pre>\n<h2 id=\"heading-24\">🚀 배포 및 모니터링</h2>\n<h3 id=\"heading-25\">1. 모델 서빙</h3>\n<h4 id=\"heading-26\">1.1 모델 직렬화</h4>\n<pre><code class=\"language-python\">def save_model(model, path):\n    torch.save({\n        'model_state_dict': model.state_dict(),\n        'hyperparameters': model.hyperparameters,\n        'scaler': model.scaler\n    }, path)\n</code></pre>\n<h4 id=\"heading-27\">1.2 실시간 추론</h4>\n<pre><code class=\"language-python\">@app.route('/predict', methods=['POST'])\ndef predict():\n    data = request.json\n    prediction = model.predict(preprocess_data(data))\n    confidence = calculate_prediction_confidence(prediction)\n    return jsonify({\n        'prediction': prediction,\n        'confidence': confidence\n    })\n</code></pre>\n<h3 id=\"heading-28\">2. 성능 모니터링</h3>\n<pre><code class=\"language-python\">def monitor_model_performance(predictions, actuals):\n    metrics = calculate_metrics(predictions, actuals)\n    alert_if_degraded(metrics)\n    log_performance(metrics)\n</code></pre>\n<p>이 문서는 금융 데이터 분석 시스템의 AI 모델 설계 및 구현 상세를 제공합니다. 모델은 지속적으로 개선되며, 성능 메트릭과 리스크 관리 전략도 함께 업데이트됩니다. 🚀</p>\n",
    "date": "2025-02-13",
    "category": "projects",
    "tags": [
      "ai",
      "machine-learning",
      "deep-learning",
      "lstm",
      "ensemble",
      "prediction",
      "risk-analysis"
    ],
    "description": "가상자산 데이터 분석 시스템의 AI 모델 아키텍처 및 구현 상세",
    "thumbnail": "/images/cryptocurrency.jpg",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "금융 데이터 분석 시스템 AI 모델 설계",
        "level": 1,
        "isMainTopic": true,
        "position": 19.9140625
      },
      {
        "id": "heading-1",
        "text": "📊 모델 아키텍처 개요",
        "level": 2,
        "isMainTopic": true,
        "position": 68.828125
      },
      {
        "id": "heading-2",
        "text": "1. 예측 모델 구조",
        "level": 3,
        "isMainTopic": false,
        "position": 120.2421875
      },
      {
        "id": "heading-3",
        "text": "1.1 LSTM 기반 시계열 예측",
        "level": 4,
        "isMainTopic": false,
        "position": 164.515625
      },
      {
        "id": "heading-4",
        "text": "1.2 앙상블 모델 구성",
        "level": 4,
        "isMainTopic": false,
        "position": 507.5625
      },
      {
        "id": "heading-5",
        "text": "2. 특징 엔지니어링",
        "level": 3,
        "isMainTopic": false,
        "position": 777.0546875
      },
      {
        "id": "heading-6",
        "text": "2.1 기술적 지표",
        "level": 4,
        "isMainTopic": false,
        "position": 821.328125
      },
      {
        "id": "heading-7",
        "text": "2.2 시장 감성 분석",
        "level": 4,
        "isMainTopic": false,
        "position": 1195.375
      },
      {
        "id": "heading-8",
        "text": "🔄 학습 파이프라인",
        "level": 2,
        "isMainTopic": true,
        "position": 1361.0625
      },
      {
        "id": "heading-9",
        "text": "1. 데이터 전처리",
        "level": 3,
        "isMainTopic": false,
        "position": 1412.4765625
      },
      {
        "id": "heading-10",
        "text": "1.1 시계열 데이터 준비",
        "level": 4,
        "isMainTopic": false,
        "position": 1456.75
      },
      {
        "id": "heading-11",
        "text": "1.2 데이터 정규화",
        "level": 4,
        "isMainTopic": false,
        "position": 1724.796875
      },
      {
        "id": "heading-12",
        "text": "2. 모델 학습",
        "level": 3,
        "isMainTopic": false,
        "position": 1844.2890625
      },
      {
        "id": "heading-13",
        "text": "2.1 LSTM 학습 프로세스",
        "level": 4,
        "isMainTopic": false,
        "position": 1888.5625
      },
      {
        "id": "heading-14",
        "text": "2.2 앙상블 모델 통합",
        "level": 4,
        "isMainTopic": false,
        "position": 2247.609375
      },
      {
        "id": "heading-15",
        "text": "📈 성능 평가",
        "level": 2,
        "isMainTopic": true,
        "position": 2398.296875
      },
      {
        "id": "heading-16",
        "text": "1. 평가 메트릭",
        "level": 3,
        "isMainTopic": false,
        "position": 2449.7109375
      },
      {
        "id": "heading-17",
        "text": "1.1 예측 정확도 평가",
        "level": 4,
        "isMainTopic": false,
        "position": 2493.984375
      },
      {
        "id": "heading-18",
        "text": "1.2 백테스팅",
        "level": 4,
        "isMainTopic": false,
        "position": 2676.03125
      },
      {
        "id": "heading-19",
        "text": "🔍 리스크 관리",
        "level": 2,
        "isMainTopic": true,
        "position": 2942.71875
      },
      {
        "id": "heading-20",
        "text": "1. 리스크 모니터링",
        "level": 3,
        "isMainTopic": false,
        "position": 2994.1328125
      },
      {
        "id": "heading-21",
        "text": "1.1 Value at Risk (VaR) 계산",
        "level": 4,
        "isMainTopic": false,
        "position": 3038.40625
      },
      {
        "id": "heading-22",
        "text": "1.2 Expected Shortfall",
        "level": 4,
        "isMainTopic": false,
        "position": 3130.453125
      },
      {
        "id": "heading-23",
        "text": "2. 포지션 사이징",
        "level": 3,
        "isMainTopic": false,
        "position": 3218.9453125
      },
      {
        "id": "heading-24",
        "text": "🚀 배포 및 모니터링",
        "level": 2,
        "isMainTopic": true,
        "position": 3342.578125
      },
      {
        "id": "heading-25",
        "text": "1. 모델 서빙",
        "level": 3,
        "isMainTopic": false,
        "position": 3393.9921875
      },
      {
        "id": "heading-26",
        "text": "1.1 모델 직렬화",
        "level": 4,
        "isMainTopic": false,
        "position": 3438.265625
      },
      {
        "id": "heading-27",
        "text": "1.2 실시간 추론",
        "level": 4,
        "isMainTopic": false,
        "position": 3590.3125
      },
      {
        "id": "heading-28",
        "text": "2. 성능 모니터링",
        "level": 3,
        "isMainTopic": false,
        "position": 3784.8046875
      }
    ],
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_8",
    "title": "Entasis Engine - UI/UX 디자인 가이드",
    "content": "<h1 id=\"heading-0\">금융 데이터 분석 시스템 UI/UX 디자인 가이드</h1>\n<h2 id=\"heading-1\">🎨 디자인 시스템</h2>\n<h3 id=\"heading-2\">1. 색상 팔레트</h3>\n<pre><code class=\"language-css\">:root {\n  /* 주요 색상 */\n  --primary-100: #e3f2fd;\n  --primary-500: #2196f3;\n  --primary-900: #0d47a1;\n\n<p>  /* 보조 색상 */<br>  --secondary-100: #f3e5f5;<br>  --secondary-500: #9c27b0;<br>  --secondary-900: #4a148c;</p><p>  /* 상태 색상 */<br>  --success: #4caf50;<br>  --warning: #ffc107;<br>  --error: #f44336;<br>  --info: #2196f3;</p></code><p><code class=\"language-css\">  /* 중립 색상 */<br>  --neutral-100: #f5f5f5;<br>  --neutral-300: #e0e0e0;<br>  --neutral-500: #9e9e9e;<br>  --neutral-700: #616161;<br>  --neutral-900: #212121;<br>}<br></code></p></pre><p></p><h3 id=\"heading-3\">2. 타이포그래피</h3>\n<pre><code class=\"language-css\">:root {\n  /* 폰트 패밀리 */\n  --font-primary: \"Inter\", sans-serif;\n  --font-secondary: \"Roboto Mono\", monospace;\n\n<p>  /* 폰트 크기 <em>/<br>  --text-xs: 0.75rem; /</em> 12px <em>/<br>  --text-sm: 0.875rem; /</em> 14px <em>/<br>  --text-base: 1rem; /</em> 16px <em>/<br>  --text-lg: 1.125rem; /</em> 18px <em>/<br>  --text-xl: 1.25rem; /</em> 20px <em>/<br>  --text-2xl: 1.5rem; /</em> 24px */</p></code><p><code class=\"language-css\">  /* 폰트 두께 */<br>  --font-light: 300;<br>  --font-regular: 400;<br>  --font-medium: 500;<br>  --font-bold: 700;<br>}<br></code></p></pre><p></p><h3 id=\"heading-4\">3. 그리드 시스템</h3>\n<pre><code class=\"language-css\">.container {\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  gap: var(--spacing-4);\n\n</code><p><code class=\"language-css\">  @media (max-width: 768px) {<br>    grid-template-columns: repeat(4, 1fr);<br>  }<br>}<br></code></p></pre><p></p><h2 id=\"heading-5\">📱 컴포넌트 라이브러리</h2>\n<h3 id=\"heading-6\">1. 차트 컴포넌트</h3>\n<h4 id=\"heading-7\">1.1 캔들스틱 차트</h4>\n<pre><code class=\"language-typescript\">interface CandlestickProps {\n  data: {\n    timestamp: string;\n    open: number;\n    high: number;\n    low: number;\n    close: number;\n  }[];\n  width?: number;\n  height?: number;\n  theme?: \"light\" | \"dark\";\n}\n\n</code><p><code class=\"language-typescript\">const Candlestick: React.FC&lt;CandlestickProps&gt; = ({<br>  data,<br>  width = 800,<br>  height = 400,<br>  theme = \"light\",<br>}) =&gt; {<br>  // 차트 구현<br>};<br></code></p></pre><p></p><h4 id=\"heading-8\">1.2 기술적 지표</h4>\n<pre><code class=\"language-typescript\">interface TechnicalIndicatorProps {\n  type: \"MA\" | \"RSI\" | \"MACD\";\n  data: number[];\n  parameters: {\n    period?: number;\n    signal?: number;\n  };\n}\n</code></pre>\n<h3 id=\"heading-9\">2. 대시보드 레이아웃</h3>\n<pre><code class=\"language-typescript\">interface DashboardLayoutProps {\n  sidebar?: React.ReactNode;\n  header?: React.ReactNode;\n  main: React.ReactNode;\n  footer?: React.ReactNode;\n}\n\n</code><p><code class=\"language-typescript\">const DashboardLayout: React.FC&lt;DashboardLayoutProps&gt; = ({<br>  sidebar,<br>  header,<br>  main,<br>  footer,<br>}) =&gt; (<br>  &lt;div className=\"dashboard-layout\"&gt;<br>    {sidebar &amp;&amp; &lt;aside className=\"sidebar\"&gt;{sidebar}&lt;/aside&gt;}<br>    &lt;div className=\"main-content\"&gt;<br>      {header &amp;&amp; &lt;header className=\"header\"&gt;{header}&lt;/header&gt;}<br>      &lt;main className=\"main\"&gt;{main}&lt;/main&gt;<br>      {footer &amp;&amp; &lt;footer className=\"footer\"&gt;{footer}&lt;/footer&gt;}<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>);<br></code></p></pre><p></p><h2 id=\"heading-10\">🔄 사용자 플로우</h2>\n<h3 id=\"heading-11\">1. 트레이딩 플로우</h3>\n<pre><code class=\"language-mermaid\">graph TD\n    A[대시보드 진입] --&gt; B[시장 데이터 확인]\n    B --&gt; C{분석 도구 선택}\n    C --&gt;|기술적 분석| D[지표 설정]\n    C --&gt;|AI 예측| E[모델 선택]\n    D --&gt; F[매매 신호 확인]\n    E --&gt; F\n    F --&gt; G[포지션 설정]\n    G --&gt; H[주문 실행]\n    H --&gt; I[모니터링]\n</code></pre>\n<h3 id=\"heading-12\">2. 포트폴리오 관리</h3>\n<pre><code class=\"language-mermaid\">graph TD\n    A[포트폴리오 뷰] --&gt; B[자산 배분 확인]\n    B --&gt; C[리스크 분석]\n    C --&gt; D{조정 필요?}\n    D --&gt;|Yes| E[리밸런싱]\n    D --&gt;|No| F[모니터링 유지]\n    E --&gt; G[주문 실행]\n    G --&gt; F\n</code></pre>\n<h2 id=\"heading-13\">📐 반응형 디자인</h2>\n<h3 id=\"heading-14\">1. 브레이크포인트</h3>\n<pre><code class=\"language-scss\">$breakpoints: (\n  \"mobile\": 320px,\n  \"tablet\": 768px,\n  \"desktop\": 1024px,\n  \"wide\": 1440px,\n);\n\n</code><p><code class=\"language-scss\">@mixin respond-to($breakpoint) {<br>  @if map-has-key($breakpoints, $breakpoint) {<br>    @media (min-width: map-get($breakpoints, $breakpoint)) {<br>      @content;<br>    }<br>  }<br>}<br></code></p></pre><p></p><h3 id=\"heading-15\">2. 레이아웃 조정</h3>\n<pre><code class=\"language-scss\">.trading-view {\n  display: grid;\n  gap: 1rem;\n\n<p>  @include respond-to(\"mobile\") {<br>    grid-template-columns: 1fr;<br>  }</p><p>  @include respond-to(\"tablet\") {<br>    grid-template-columns: repeat(2, 1fr);<br>  }</p></code><p><code class=\"language-scss\">  @include respond-to(\"desktop\") {<br>    grid-template-columns: repeat(3, 1fr);<br>  }<br>}<br></code></p></pre><p></p><h2 id=\"heading-16\">♿ 접근성</h2>\n<h3 id=\"heading-17\">1. ARIA 레이블</h3>\n<pre><code class=\"language-typescript\">const PriceAlert: React.FC = () =&gt; (\n  &lt;div role=\"alert\" aria-live=\"polite\" aria-atomic=\"true\"&gt;\n    &lt;span className=\"price-change\"&gt;+5.23%&lt;/span&gt;\n  &lt;/div&gt;\n);\n</code></pre>\n<h3 id=\"heading-18\">2. 키보드 네비게이션</h3>\n<pre><code class=\"language-typescript\">const TradingPanel: React.FC = () =&gt; {\n  const handleKeyPress = (e: KeyboardEvent) =&gt; {\n    switch (e.key) {\n      case \"ArrowUp\":\n        incrementPrice();\n        break;\n      case \"ArrowDown\":\n        decrementPrice();\n        break;\n      case \"Enter\":\n        submitOrder();\n        break;\n    }\n  };\n\n</code><p><code class=\"language-typescript\">  return (<br>    &lt;div<br>      tabIndex={0}<br>      onKeyDown={handleKeyPress}<br>      role=\"region\"<br>      aria-label=\"거래 패널\"<br>    &gt;<br>      {/* 거래 패널 내용 */}<br>    &lt;/div&gt;<br>  );<br>};<br></code></p></pre><p></p><h2 id=\"heading-19\">🎯 사용성 테스트</h2>\n<h3 id=\"heading-20\">1. 테스트 시나리오</h3>\n<pre><code class=\"language-typescript\">const usabilityTests = [\n  {\n    name: \"기본 거래 플로우\",\n    steps: [\n      \"대시보드 접속\",\n      \"차트 분석\",\n      \"주문 설정\",\n      \"주문 실행\",\n      \"결과 확인\",\n    ],\n    success_criteria: [\n      \"3분 이내 완료\",\n      \"오류 없는 실행\",\n      \"사용자 만족도 4/5 이상\",\n    ],\n  },\n];\n</code></pre>\n<h3 id=\"heading-21\">2. 피드백 수집</h3>\n<pre><code class=\"language-typescript\">interface UserFeedback {\n  task: string;\n  completion_time: number;\n  error_count: number;\n  satisfaction: number;\n  comments: string;\n}\n</code></pre>\n<p>이 문서는 금융 데이터 분석 시스템의 UI/UX 디자인 가이드를 제공합니다. 사용자 경험을 최적화하기 위해 지속적으로 업데이트되며, 피드백을 반영하여 개선됩니다. 🚀</p>\n",
    "date": "2025-02-13",
    "category": "projects",
    "tags": [
      "ui",
      "ux",
      "design",
      "wireframe",
      "component",
      "responsive",
      "accessibility"
    ],
    "description": "가상자산 데이터 분석 시스템의 사용자 인터페이스 및 경험 디자인 가이드",
    "thumbnail": "/images/cryptocurrency.jpg",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "금융 데이터 분석 시스템 UI/UX 디자인 가이드",
        "level": 1,
        "isMainTopic": true,
        "position": 19.9140625
      },
      {
        "id": "heading-1",
        "text": "🎨 디자인 시스템",
        "level": 2,
        "isMainTopic": true,
        "position": 68.828125
      },
      {
        "id": "heading-2",
        "text": "1. 색상 팔레트",
        "level": 3,
        "isMainTopic": false,
        "position": 120.2421875
      },
      {
        "id": "heading-3",
        "text": "2. 타이포그래피",
        "level": 3,
        "isMainTopic": false,
        "position": 553.6796875
      },
      {
        "id": "heading-4",
        "text": "3. 그리드 시스템",
        "level": 3,
        "isMainTopic": false,
        "position": 913.1171875
      },
      {
        "id": "heading-5",
        "text": "📱 컴포넌트 라이브러리",
        "level": 2,
        "isMainTopic": true,
        "position": 1122.75
      },
      {
        "id": "heading-6",
        "text": "1. 차트 컴포넌트",
        "level": 3,
        "isMainTopic": false,
        "position": 1174.1640625
      },
      {
        "id": "heading-7",
        "text": "1.1 캔들스틱 차트",
        "level": 4,
        "isMainTopic": false,
        "position": 1218.4375
      },
      {
        "id": "heading-8",
        "text": "1.2 기술적 지표",
        "level": 4,
        "isMainTopic": false,
        "position": 1609.484375
      },
      {
        "id": "heading-9",
        "text": "2. 대시보드 레이아웃",
        "level": 3,
        "isMainTopic": false,
        "position": 1788.9765625
      },
      {
        "id": "heading-10",
        "text": "🔄 사용자 플로우",
        "level": 2,
        "isMainTopic": true,
        "position": 2193.609375
      },
      {
        "id": "heading-11",
        "text": "1. 트레이딩 플로우",
        "level": 3,
        "isMainTopic": false,
        "position": 2245.0234375
      },
      {
        "id": "heading-12",
        "text": "2. 포트폴리오 관리",
        "level": 3,
        "isMainTopic": false,
        "position": 2463.4609375
      },
      {
        "id": "heading-13",
        "text": "📐 반응형 디자인",
        "level": 2,
        "isMainTopic": true,
        "position": 2651.09375
      },
      {
        "id": "heading-14",
        "text": "1. 브레이크포인트",
        "level": 3,
        "isMainTopic": false,
        "position": 2702.5078125
      },
      {
        "id": "heading-15",
        "text": "2. 레이아웃 조정",
        "level": 3,
        "isMainTopic": false,
        "position": 2985.9453125
      },
      {
        "id": "heading-16",
        "text": "♿ 접근성",
        "level": 2,
        "isMainTopic": true,
        "position": 3296.578125
      },
      {
        "id": "heading-17",
        "text": "1. ARIA 레이블",
        "level": 3,
        "isMainTopic": false,
        "position": 3347.9921875
      },
      {
        "id": "heading-18",
        "text": "2. 키보드 네비게이션",
        "level": 3,
        "isMainTopic": false,
        "position": 3483.4296875
      },
      {
        "id": "heading-19",
        "text": "🎯 사용성 테스트",
        "level": 2,
        "isMainTopic": true,
        "position": 3950.0625
      },
      {
        "id": "heading-20",
        "text": "1. 테스트 시나리오",
        "level": 3,
        "isMainTopic": false,
        "position": 4001.4765625
      },
      {
        "id": "heading-21",
        "text": "2. 피드백 수집",
        "level": 3,
        "isMainTopic": false,
        "position": 4325.9140625
      }
    ],
    "imageHeights": {}
  },
  {
    "id": "entasis_engin_9",
    "title": "Entasis Engine - 인프라 구성도",
    "content": "<h1 id=\"heading-0\">금융 데이터 분석 시스템 인프라 구성도</h1>\n<h2 id=\"heading-1\">🏗️ 시스템 아키텍처</h2>\n<h3 id=\"heading-2\">1. 전체 구성도</h3>\n<pre><code class=\"language-mermaid\">graph TB\n    subgraph External[외부 시스템]\n        API1[거래소 API]\n        API2[데이터 피드]\n    end\n\n<pre><code>subgraph LoadBalancer[로드 밸런서]\n    LB1[AWS ALB]\n    LB2[내부 L4]\nend\n\nsubgraph ServiceMesh[서비스 메시]\n    direction TB\n    subgraph DataCollection[데이터 수집 계층]\n        DC1[Collector-1]\n        DC2[Collector-2]\n    end\n\n    subgraph Processing[처리 계층]\n        P1[Spark Cluster]\n        P2[Stream Processing]\n    end\n\n    subgraph AI[AI 분석 계층]\n        AI1[Model Serving]\n        AI2[Training Pipeline]\n    end\n\n    subgraph API[API 계층]\n        API3[REST API]\n        API4[WebSocket]\n    end\nend\n\nsubgraph Storage[스토리지]\n    DB1[(TimescaleDB)]\n    DB2[(Redis)]\n    S3[Object Storage]\nend\n\nsubgraph Monitoring[모니터링]\n    M1[Prometheus]\n    M2[Grafana]\n    M3[ELK Stack]\nend\n\nExternal --&gt; LoadBalancer\nLoadBalancer --&gt; ServiceMesh\nServiceMesh --&gt; Storage\nServiceMesh --&gt; Monitoring\n</code></pre>\n</code><p><code class=\"language-mermaid\"></code></p></pre><p></p><h2 id=\"heading-3\">🌐 네트워크 구성</h2>\n<h3 id=\"heading-4\">1. 네트워크 세그먼트</h3>\n<pre><code class=\"language-plaintext\">+------------------------+     +------------------------+\n|     Public Subnet      |     |    Private Subnet      |\n|------------------------|     |------------------------|\n| - Load Balancer        |     | - Application Servers  |\n| - Bastion Host         |     | - Database Clusters    |\n| - NAT Gateway          |     | - Cache Servers        |\n+------------------------+     +------------------------+\n           |                              |\n           |        VPC Peering           |\n           +------------------------------+\n</code></pre>\n<h3 id=\"heading-5\">2. 보안 그룹 설정</h3>\n<pre><code class=\"language-yaml\">security_groups:\n  frontend:\n    inbound:\n      - port: 80\n        source: 0.0.0.0/0\n      - port: 443\n        source: 0.0.0.0/0\n\n<p>  application:<br>    inbound:<br>      - port: 8080<br>        source: frontend_sg<br>      - port: 9000<br>        source: monitoring_sg</p></code><p><code class=\"language-yaml\">  database:<br>    inbound:<br>      - port: 5432<br>        source: application_sg<br>      - port: 6379<br>        source: application_sg<br></code></p></pre><p></p><h2 id=\"heading-6\">🚀 쿠버네티스 클러스터</h2>\n<h3 id=\"heading-7\">1. 노드 구성</h3>\n<pre><code class=\"language-yaml\">node_pools:\n  - name: general\n    instance_type: c5.2xlarge\n    min_size: 3\n    max_size: 10\n    labels:\n      role: general\n\n</code><ul><code class=\"language-yaml\">\n<li><p>name: ai-inference<br>instance_type: g4dn.xlarge<br>min_size: 2<br>max_size: 5<br>labels:<br>  role: ai-inference</p></li>\n</code><li><code class=\"language-yaml\"></code><p><code class=\"language-yaml\">name: data-processing<br>instance_type: r5.2xlarge<br>min_size: 2<br>max_size: 8<br>labels:<br>  role: data-processing<br></code></p></li></ul></pre><p></p><h3 id=\"heading-8\">2. 서비스 배포</h3>\n<pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: trading-api\nspec:\n  replicas: 3\n  selector:\nmatchLabels:\n  app: trading-api\n  template:\nmetadata:\n  labels:\n    app: trading-api\nspec:\n  containers:\n    - name: trading-api\n      image: trading-api:1.0.0\n      resources:\n        requests:\n          cpu: 1\n          memory: 2Gi\n        limits:\n          cpu: 2\n          memory: 4Gi\n\n</code><p><code class=\"language-yaml\"></code></p></pre><p></p><h2 id=\"heading-9\">📊 모니터링 시스템</h2>\n<h3 id=\"heading-10\">1. 메트릭 수집</h3>\n<pre><code class=\"language-yaml\">prometheus:\n  scrape_configs:\n    - job_name: \"kubernetes-pods\"\n      kubernetes_sd_configs:\n        - role: pod\n      relabel_configs:\n        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n          action: keep\n          regex: true\n\n<pre><code>- job_name: \"trading-metrics\"\n  static_configs:\n    - targets: [\"trading-api:9090\"]\n</code></pre>\n</code><p><code class=\"language-yaml\"></code></p></pre><p></p><h3 id=\"heading-11\">2. 알림 설정</h3>\n<pre><code class=\"language-yaml\">alertmanager:\n  config:\n    route:\n      receiver: \"slack\"\n      group_wait: 30s\n      group_interval: 5m\n      repeat_interval: 4h\n\n<pre><code>receivers:\n  - name: \"slack\"\n    slack_configs:\n      - channel: \"#alerts\"\n        send_resolved: true\n</code></pre>\n</code><p><code class=\"language-yaml\"></code></p></pre><p></p><h2 id=\"heading-12\">🔒 보안 설정</h2>\n<h3 id=\"heading-13\">1. 네트워크 정책</h3>\n<pre><code class=\"language-yaml\">apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: api-network-policy\nspec:\n  podSelector:\n    matchLabels:\n      app: trading-api\n  policyTypes:\n    - Ingress\n    - Egress\n  ingress:\n    - from:\n        - podSelector:\n            matchLabels:\n              role: frontend\n      ports:\n        - protocol: TCP\n          port: 8080\n</code></pre>\n<h3 id=\"heading-14\">2. 암호화 설정</h3>\n<pre><code class=\"language-yaml\">encryption:\n  - resources:\n      - secrets\n    providers:\n      - aescbc:\n          keys:\n            - name: key1\n              secret: &lt;base64-encoded-key&gt;\n      - identity: {}\n</code></pre>\n<h2 id=\"heading-15\">🔄 스케일링 전략</h2>\n<h3 id=\"heading-16\">1. 수평적 확장</h3>\n<pre><code class=\"language-yaml\">apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: trading-api-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: trading-api\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n    - type: Resource\n      resource:\n        name: cpu\n        target:\n          type: Utilization\n          averageUtilization: 70\n</code></pre>\n<h3 id=\"heading-17\">2. 수직적 확장</h3>\n<pre><code class=\"language-yaml\">apiVersion: autoscaling.k8s.io/v1\nkind: VerticalPodAutoscaler\nmetadata:\n  name: trading-api-vpa\nspec:\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: trading-api\n  updatePolicy:\n    updateMode: Auto\n</code></pre>\n<h2 id=\"heading-18\">🔧 운영 관리</h2>\n<h3 id=\"heading-19\">1. 로깅 설정</h3>\n<pre><code class=\"language-yaml\">filebeat:\n  inputs:\n    - type: container\n      paths:\n        - /var/log/containers/*.log\n      processors:\n        - add_kubernetes_metadata:\n            host: ${NODE_NAME}\n            matchers:\n              - logs_path:\n                  logs_path: \"/var/log/containers/\"\n</code></pre>\n<h3 id=\"heading-20\">2. 백업 정책</h3>\n<pre><code class=\"language-yaml\">backup:\n  schedule: \"0 1 * * *\" # 매일 01:00\n  retention:\n    hourly: 24\n    daily: 7\n    weekly: 4\n    monthly: 12\n  storage:\n    type: s3\n    bucket: backup-bucket\n    region: ap-northeast-2\n</code></pre>\n<p>이 문서는 금융 데이터 분석 시스템의 인프라 구성을 상세히 설명합니다. 시스템의 안정성과 확장성을 보장하기 위해 지속적으로 업데이트됩니다. 🚀</p>\n",
    "date": "2025-02-13",
    "category": "projects",
    "tags": [
      "infrastructure",
      "cloud",
      "kubernetes",
      "devops",
      "security",
      "monitoring",
      "scaling"
    ],
    "description": "가상자산 데이터 분석 시스템의 인프라 아키텍처 및 구성 상세",
    "thumbnail": "/images/cryptocurrency.jpg",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "금융 데이터 분석 시스템 인프라 구성도",
        "level": 1,
        "isMainTopic": true,
        "position": 19.9140625
      },
      {
        "id": "heading-1",
        "text": "🏗️ 시스템 아키텍처",
        "level": 2,
        "isMainTopic": true,
        "position": 68.828125
      },
      {
        "id": "heading-2",
        "text": "1. 전체 구성도",
        "level": 3,
        "isMainTopic": false,
        "position": 120.2421875
      },
      {
        "id": "heading-3",
        "text": "🌐 네트워크 구성",
        "level": 2,
        "isMainTopic": true,
        "position": 984.875
      },
      {
        "id": "heading-4",
        "text": "1. 네트워크 세그먼트",
        "level": 3,
        "isMainTopic": false,
        "position": 1036.2890625
      },
      {
        "id": "heading-5",
        "text": "2. 보안 그룹 설정",
        "level": 3,
        "isMainTopic": false,
        "position": 1246.7265625
      },
      {
        "id": "heading-6",
        "text": "🚀 쿠버네티스 클러스터",
        "level": 2,
        "isMainTopic": true,
        "position": 1634.359375
      },
      {
        "id": "heading-7",
        "text": "1. 노드 구성",
        "level": 3,
        "isMainTopic": false,
        "position": 1685.7734375
      },
      {
        "id": "heading-8",
        "text": "2. 서비스 배포",
        "level": 3,
        "isMainTopic": false,
        "position": 2128.2109375
      },
      {
        "id": "heading-9",
        "text": "📊 모니터링 시스템",
        "level": 2,
        "isMainTopic": true,
        "position": 2564.84375
      },
      {
        "id": "heading-10",
        "text": "1. 메트릭 수집",
        "level": 3,
        "isMainTopic": false,
        "position": 2616.2578125
      },
      {
        "id": "heading-11",
        "text": "2. 알림 설정",
        "level": 3,
        "isMainTopic": false,
        "position": 2912.6953125
      },
      {
        "id": "heading-12",
        "text": "🔒 보안 설정",
        "level": 2,
        "isMainTopic": true,
        "position": 3210.328125
      },
      {
        "id": "heading-13",
        "text": "1. 네트워크 정책",
        "level": 3,
        "isMainTopic": false,
        "position": 3261.7421875
      },
      {
        "id": "heading-14",
        "text": "2. 암호화 설정",
        "level": 3,
        "isMainTopic": false,
        "position": 3607.1796875
      },
      {
        "id": "heading-15",
        "text": "🔄 스케일링 전략",
        "level": 2,
        "isMainTopic": true,
        "position": 3803.8125
      },
      {
        "id": "heading-16",
        "text": "1. 수평적 확장",
        "level": 3,
        "isMainTopic": false,
        "position": 3855.2265625
      },
      {
        "id": "heading-17",
        "text": "2. 수직적 확장",
        "level": 3,
        "isMainTopic": false,
        "position": 4185.6640625
      },
      {
        "id": "heading-18",
        "text": "🔧 운영 관리",
        "level": 2,
        "isMainTopic": true,
        "position": 4412.296875
      },
      {
        "id": "heading-19",
        "text": "1. 로깅 설정",
        "level": 3,
        "isMainTopic": false,
        "position": 4463.7109375
      },
      {
        "id": "heading-20",
        "text": "2. 백업 정책",
        "level": 3,
        "isMainTopic": false,
        "position": 4689.1484375
      }
    ],
    "imageHeights": {}
  },
  {
    "id": "entasys",
    "title": "Entasis",
    "content": "<h2 id=\"heading-0\">1. 프로젝트 개요</h2>\n<h3 id=\"heading-1\">프로젝트 명</h3>\n<ul>\n<li>ENTASYS (엔타시스) SIEM 솔루션</li>\n</ul>\n<h3 id=\"heading-2\">프로젝트 목적</h3>\n<ul>\n<li>기업의 보안 위협을 실시간으로 탐지하고 대응하는 통합 보안 관제 시스템 구축</li>\n<li>다양한 보안 장비와 시스템의 로그를 수집/분석하여 보안 위협 조기 발견</li>\n<li>AI/ML 기반의 지능형 위협 탐지 및 대응 체계 구현</li>\n</ul>\n<h3 id=\"heading-3\">핵심 기능</h3>\n<ol>\n<li>\n<p>통합 로그 수집 및 관리</p>\n<ul>\n<li>방화벽, IPS, WAF 등 보안장비 로그 수집</li>\n<li>서버, 네트워크 장비, 애플리케이션 로그 통합</li>\n<li>실시간 로그 정규화 및 상관분석</li>\n<li>로그 원본 보관 및 위/변조 방지</li>\n</ul>\n</li>\n<li>\n<p>실시간 위협 탐지</p>\n<ul>\n<li>AI 기반 이상행위 탐지(User/Entity Behavior Analytics)</li>\n<li>알려진/알려지지 않은 위협 탐지</li>\n<li>취약점 스캐닝 및 모니터링</li>\n<li>실시간 위협 인텔리전스 연동</li>\n</ul>\n</li>\n<li>\n<p>보안 대시보드 및 분석</p>\n<ul>\n<li>직관적인 통합 보안 대시보드</li>\n<li>실시간 보안 이벤트 모니터링</li>\n<li>드릴다운 분석 및 포렌식 기능</li>\n<li>맞춤형 보고서 자동 생성</li>\n</ul>\n</li>\n<li>\n<p>자동화된 대응체계</p>\n<ul>\n<li>위협 탐지시 자동 차단/격리</li>\n<li>담당자 알림 및 티켓팅 연동</li>\n<li>플레이북 기반 대응 자동화</li>\n<li>보안장비 연동 및 제어</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"heading-4\">시스템 아키텍처</h2>\n<h3 id=\"heading-5\">수집 계층</h3>\n<ul>\n<li>분산 로그 수집기(Collector) 구조</li>\n<li>초당 50,000 EPS 처리 성능</li>\n<li>로그 필터링 및 정규화</li>\n<li>데이터 압축 및 암호화 전송</li>\n</ul>\n<h3 id=\"heading-6\">저장 계층</h3>\n<ul>\n<li>분산 스토리지(Elasticsearch) 기반</li>\n<li>실시간/장기 보관 이원화</li>\n<li>데이터 암호화 저장</li>\n<li>자동 백업 및 복구</li>\n</ul>\n<h3 id=\"heading-7\">분석 계층</h3>\n<ul>\n<li>실시간 상관분석 엔진</li>\n<li>ML 기반 이상행위 탐지</li>\n<li>위협 인텔리전스 연동</li>\n<li>규칙 기반 탐지</li>\n</ul>\n<h3 id=\"heading-8\">표현 계층</h3>\n<ul>\n<li>HTML5 기반 웹 콘솔</li>\n<li>반응형 대시보드</li>\n<li>드릴다운 분석 도구</li>\n<li>맞춤형 보고서</li>\n</ul>\n<h2 id=\"heading-9\">구축 요구사항</h2>\n<h3 id=\"heading-10\">하드웨어</h3>\n<ul>\n<li>수집서버: 최소 8코어/32GB RAM</li>\n<li>분석서버: 최소 16코어/64GB RAM</li>\n<li>저장장치: 최소 10TB SSD</li>\n</ul>\n<h3 id=\"heading-11\">소프트웨어</h3>\n<ul>\n<li>OS: RHEL/CentOS 7 이상</li>\n<li>Docker/Kubernetes</li>\n<li>Elasticsearch 7.x</li>\n<li>Node.js 16.x</li>\n</ul>\n<h2 id=\"heading-12\">향후 로드맵</h2>\n<h3 id=\"heading-13\">2024년 하반기</h3>\n<ul>\n<li>AI 엔진 고도화</li>\n<li>클라우드 네이티브 아키텍처 전환</li>\n<li>글로벌 위협 인텔리전스 연동 확대</li>\n</ul>\n<h3 id=\"heading-14\">2025년</h3>\n<ul>\n<li>제로트러스트 보안 프레임워크 적용</li>\n<li>블록체인 기반 로그 무결성 검증</li>\n<li>멀티클라우드 통합 모니터링</li>\n</ul>\n",
    "date": "2024-03-20",
    "category": "projects",
    "tags": [
      "React",
      "Express",
      "MySQL",
      "Web3.js",
      "AWS",
      "Ganache",
      "Truffle",
      "ERC20",
      "MetaMask",
      "Figma"
    ],
    "description": "가상자산 거래소 개발",
    "thumbnail": "/images/entasis/entasis_circuit.gif",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "1. 프로젝트 개요",
        "level": 2,
        "isMainTopic": true,
        "position": 19.9140625
      },
      {
        "id": "heading-1",
        "text": "프로젝트 명",
        "level": 3,
        "isMainTopic": false,
        "position": 68.828125
      },
      {
        "id": "heading-2",
        "text": "프로젝트 목적",
        "level": 3,
        "isMainTopic": false,
        "position": 148.765625
      },
      {
        "id": "heading-3",
        "text": "핵심 기능",
        "level": 3,
        "isMainTopic": false,
        "position": 267.703125
      },
      {
        "id": "heading-4",
        "text": "시스템 아키텍처",
        "level": 2,
        "isMainTopic": true,
        "position": 831.3359375
      },
      {
        "id": "heading-5",
        "text": "수집 계층",
        "level": 3,
        "isMainTopic": false,
        "position": 880.25
      },
      {
        "id": "heading-6",
        "text": "저장 계층",
        "level": 3,
        "isMainTopic": false,
        "position": 1018.6875
      },
      {
        "id": "heading-7",
        "text": "분석 계층",
        "level": 3,
        "isMainTopic": false,
        "position": 1157.125
      },
      {
        "id": "heading-8",
        "text": "표현 계층",
        "level": 3,
        "isMainTopic": false,
        "position": 1295.5625
      },
      {
        "id": "heading-9",
        "text": "구축 요구사항",
        "level": 2,
        "isMainTopic": true,
        "position": 1435.1953125
      },
      {
        "id": "heading-10",
        "text": "하드웨어",
        "level": 3,
        "isMainTopic": false,
        "position": 1484.109375
      },
      {
        "id": "heading-11",
        "text": "소프트웨어",
        "level": 3,
        "isMainTopic": false,
        "position": 1603.046875
      },
      {
        "id": "heading-12",
        "text": "향후 로드맵",
        "level": 2,
        "isMainTopic": true,
        "position": 1739.6796875
      },
      {
        "id": "heading-13",
        "text": "2024년 하반기",
        "level": 3,
        "isMainTopic": false,
        "position": 1788.59375
      },
      {
        "id": "heading-14",
        "text": "2025년",
        "level": 3,
        "isMainTopic": false,
        "position": 1907.53125
      }
    ],
    "imageHeights": {}
  },
  {
    "id": "fds",
    "title": "FDS 기획",
    "content": "<h2 id=\"heading-0\">시스템 개요</h2>\n<p>가상자산 이상 거래 탐지 시스템(Virtual Asset FDS, VA-FDS)은 블록체인 네트워크에서 발생하는 비정상적인 거래 패턴을 실시간으로 감지하고 대응하는 시스템입니다.</p>\n<h3 id=\"heading-1\">주요 특징</h3>\n<ol>\n<li>\n<p><strong>블록체인 특화 데이터 수집</strong></p>\n<ul>\n<li>온체인 트랜잭션 데이터</li>\n<li>지갑 주소 행위 패턴</li>\n<li>스마트 컨트랙트 인터랙션</li>\n<li>DEX/CEX 거래 데이터</li>\n</ul>\n</li>\n<li>\n<p><strong>하이브리드 분석 방식</strong></p>\n<ul>\n<li>룰 기반 탐지 (Rule-based Detection)</li>\n<li>머신러닝 기반 이상 탐지</li>\n<li>온체인 데이터 분석</li>\n<li>크로스체인 추적</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"heading-2\">핵심 기능</h2>\n<p><img src=\"/images/fds.jpeg\" alt=\"Profile Image 1\"></p>\n<h3 id=\"heading-3\">1. 실시간 트랜잭션 모니터링</h3>\n<ul>\n<li>대량 송금 패턴 감지</li>\n<li>이상 거래 금액 탐지</li>\n<li>의심스러운 지갑 주소 추적</li>\n<li>스마트 컨트랙트 취약점 분석</li>\n</ul>\n<h3 id=\"heading-4\">2. 크로스체인 추적 시스템</h3>\n<ul>\n<li>브리지 트랜잭션 모니터링</li>\n<li>체인 간 자금 흐름 추적</li>\n<li>크로스체인 세탁 패턴 감지</li>\n<li>브리지 해킹 위험 감지</li>\n</ul>\n<h3 id=\"heading-5\">3. AI 기반 패턴 분석</h3>\n<ul>\n<li>지도학습: RandomForest, XGBoost</li>\n<li>비지도학습: Isolation Forest</li>\n<li>딥러닝: LSTM, GNN</li>\n<li>앙상블 기법 적용</li>\n</ul>\n<h2 id=\"heading-6\">기술 스택</h2>\n<h3 id=\"heading-7\">Backend</h3>\n<ul>\n<li>Node.js/Python</li>\n<li>PostgreSQL (트랜잭션 데이터)</li>\n<li>Redis (실시간 캐싱)</li>\n<li>Kafka (스트림 처리)</li>\n</ul>\n<h3 id=\"heading-8\">Blockchain</h3>\n<ul>\n<li>Web3.js/Ethers.js</li>\n<li>The Graph (데이터 인덱싱)</li>\n<li>Chainlink (오라클)</li>\n</ul>\n<h3 id=\"heading-9\">AI/ML</h3>\n<ul>\n<li>TensorFlow/PyTorch</li>\n<li>scikit-learn</li>\n<li>NetworkX (그래프 분석)</li>\n</ul>\n<h2 id=\"heading-10\">시스템 아키텍처</h2>\n<pre><code class=\"language-plaintext\">[블록체인 네트워크]\n    │\n    ├─ [이더리움 노드] ─── [The Graph 인덱서]\n    ├─ [바이낸스 노드] ─── [체인 브릿지 모니터]\n    └─ [기타 체인 노드] ── [크로스체인 트래커]\n              │\n              ▼\n[데이터 수집 레이어]\n    │\n    ├─ [트랜잭션 콜렉터] ── (실시간 거래 데이터)\n    ├─ [컨트랙트 스캐너] ── (스마트 컨트랙트 호출)\n    └─ [이벤트 리스너] ──── (체인 이벤트 로그)\n              │\n              ▼\n[스트림 프로세싱]\n    │\n    ├─ [Kafka 프로듀서] ─── (실시간 데이터 스트림)\n    ├─ [Redis 캐시] ─────── (고속 데이터 처리)\n    └─ [데이터 파서] ────── (정형/비정형 데이터 변환)\n              │\n              ▼\n[분석 엔진]\n    │\n    ├─ [룰 기반 엔진] ────── (정적 규칙 검사)\n    │      └─ [임계값 체크] ─ (거래량/금액 분석)\n    │\n    ├─ [ML 엔진]\n    │      ├─ [지도학습 모델] ── (이상 패턴 분류)\n    │      ├─ [비지도학습 모델] ─ (이상치 탐지)\n    │      └─ [앙상블 모델] ──── (통합 예측)\n    │\n    └─ [그래프 분석기]\n           ├─ [주소 클러스터링] ── (연관 지갑 그룹화)\n           └─ [자금 흐름 추적] ─── (거래 경로 분석)\n              │\n              ▼\n[실시간 모니터링]\n    │\n    ├─ [알림 시스템]\n    │      ├─ [우선순위 분류기] ── (위험도 평가)\n    │      └─ [알림 디스패처] ─── (채널별 알림 발송)\n    │\n    └─ [대응 시스템]\n           ├─ [자동화 대응] ────── (거래 차단/제한)\n           ├─ [수동 검토] ─────── (분석가 확인)\n           └─ [보고서 생성] ───── (감사 추적)\n</code></pre>\n<h3 id=\"heading-11\">주요 컴포넌트 설명</h3>\n<ol>\n<li>\n<p><strong>블록체인 네트워크 레이어</strong></p>\n<ul>\n<li>다중 체인 노드 운영</li>\n<li>실시간 블록 데이터 수집</li>\n<li>크로스체인 브릿지 모니터링</li>\n</ul>\n</li>\n<li>\n<p><strong>데이터 수집 레이어</strong></p>\n<ul>\n<li>트랜잭션 데이터 실시간 수집</li>\n<li>스마트 컨트랙트 인터랙션 분석</li>\n<li>체인 이벤트 로그 추적</li>\n</ul>\n</li>\n<li>\n<p><strong>스트림 프로세싱 레이어</strong></p>\n<ul>\n<li>대용량 실시간 데이터 처리</li>\n<li>인메모리 캐싱</li>\n<li>데이터 정규화 및 변환</li>\n</ul>\n</li>\n<li>\n<p><strong>분석 엔진 레이어</strong></p>\n<ul>\n<li>다중 분석 모델 운영</li>\n<li>실시간 패턴 매칭</li>\n<li>머신러닝 기반 예측</li>\n</ul>\n</li>\n<li>\n<p><strong>모니터링 및 대응 레이어</strong></p>\n<ul>\n<li>실시간 위험 평가</li>\n<li>자동화된 대응 체계</li>\n<li>감사 추적 시스템</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"heading-12\">구현 계획</h2>\n<h3 id=\"heading-13\">Phase 1: 기본 인프라 구축</h3>\n<ul>\n<li>데이터 수집 파이프라인 구축</li>\n<li>기본 룰 기반 탐지 시스템 구현</li>\n<li>실시간 모니터링 대시보드 개발</li>\n</ul>\n<h3 id=\"heading-14\">Phase 2: AI 모델 개발</h3>\n<ul>\n<li>지도학습 모델 훈련</li>\n<li>비지도학습 모델 구현</li>\n<li>앙상블 시스템 구축</li>\n</ul>\n<h3 id=\"heading-15\">Phase 3: 크로스체인 확장</h3>\n<ul>\n<li>멀티체인 데이터 수집</li>\n<li>크로스체인 추적 시스템</li>\n<li>통합 대시보드 개발</li>\n</ul>\n<h2 id=\"heading-16\">기대 효과</h2>\n<ol>\n<li>\n<p><strong>보안성 강화</strong></p>\n<ul>\n<li>해킹 시도 조기 감지</li>\n<li>자금 세탁 방지</li>\n<li>사기 거래 예방</li>\n</ul>\n</li>\n<li>\n<p><strong>운영 효율성</strong></p>\n<ul>\n<li>자동화된 모니터링</li>\n<li>실시간 대응 체계</li>\n<li>리스크 관리 강화</li>\n</ul>\n</li>\n<li>\n<p><strong>사용자 신뢰도</strong></p>\n<ul>\n<li>안전한 거래 환경</li>\n<li>투명한 모니터링</li>\n<li>신속한 이상 거래 대응</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"heading-17\">향후 발전 방향</h2>\n<ol>\n<li>\n<p><strong>탈중앙화 FDS</strong></p>\n<ul>\n<li>DAO 기반 거버넌스</li>\n<li>탈중앙화 신고 시스템</li>\n<li>커뮤니티 기반 검증</li>\n</ul>\n</li>\n<li>\n<p><strong>AI 고도화</strong></p>\n<ul>\n<li>제로샷 러닝 도입</li>\n<li>강화학습 모델 적용</li>\n<li>연합학습 시스템</li>\n</ul>\n</li>\n<li>\n<p><strong>생태계 확장</strong></p>\n<ul>\n<li>DeFi 프로토콜 연동</li>\n<li>CEX 협력 체계</li>\n<li>규제기관 협력</li>\n</ul>\n</li>\n</ol>\n",
    "date": "2024-03-20",
    "category": "projects",
    "tags": [
      "Blockchain",
      "FDS",
      "Security",
      "AI"
    ],
    "description": "블록체인 기반 가상자산 거래의 이상 탐지 시스템 설계",
    "thumbnail": "/images/solidity.webp",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "시스템 개요",
        "level": 2,
        "isMainTopic": true,
        "position": 19.9140625
      },
      {
        "id": "heading-1",
        "text": "주요 특징",
        "level": 3,
        "isMainTopic": false,
        "position": 126.546875
      },
      {
        "id": "heading-2",
        "text": "핵심 기능",
        "level": 2,
        "isMainTopic": true,
        "position": 431.1796875
      },
      {
        "id": "heading-3",
        "text": "1. 실시간 트랜잭션 모니터링",
        "level": 3,
        "isMainTopic": false,
        "position": 0
      },
      {
        "id": "heading-4",
        "text": "2. 크로스체인 추적 시스템",
        "level": 3,
        "isMainTopic": false,
        "position": 517.3125
      },
      {
        "id": "heading-5",
        "text": "3. AI 기반 패턴 분석",
        "level": 3,
        "isMainTopic": false,
        "position": 655.75
      },
      {
        "id": "heading-6",
        "text": "기술 스택",
        "level": 2,
        "isMainTopic": true,
        "position": 794.1875
      },
      {
        "id": "heading-7",
        "text": "Backend",
        "level": 3,
        "isMainTopic": false,
        "position": 933.8203125
      },
      {
        "id": "heading-8",
        "text": "Blockchain",
        "level": 3,
        "isMainTopic": false,
        "position": 982.734375
      },
      {
        "id": "heading-9",
        "text": "AI/ML",
        "level": 3,
        "isMainTopic": false,
        "position": 1118.671875
      },
      {
        "id": "heading-10",
        "text": "시스템 아키텍처",
        "level": 2,
        "isMainTopic": true,
        "position": 1235.109375
      },
      {
        "id": "heading-11",
        "text": "주요 컴포넌트 설명",
        "level": 3,
        "isMainTopic": false,
        "position": 1351.7421875
      },
      {
        "id": "heading-12",
        "text": "구현 계획",
        "level": 2,
        "isMainTopic": true,
        "position": 2139.375
      },
      {
        "id": "heading-13",
        "text": "Phase 1: 기본 인프라 구축",
        "level": 3,
        "isMainTopic": false,
        "position": 2735.0078125
      },
      {
        "id": "heading-14",
        "text": "Phase 2: AI 모델 개발",
        "level": 3,
        "isMainTopic": false,
        "position": 2783.921875
      },
      {
        "id": "heading-15",
        "text": "Phase 3: 크로스체인 확장",
        "level": 3,
        "isMainTopic": false,
        "position": 2902.859375
      },
      {
        "id": "heading-16",
        "text": "기대 효과",
        "level": 2,
        "isMainTopic": true,
        "position": 3021.796875
      },
      {
        "id": "heading-17",
        "text": "향후 발전 방향",
        "level": 2,
        "isMainTopic": true,
        "position": 3141.9296875
      }
    ],
    "imageHeights": {
      "img-3": 18.5
    }
  },
  {
    "id": "gig_crawler_1",
    "title": "FastAPI와 PostgreSQL을 활용한 아웃소싱 크롤러 개발",
    "content": "<h1 id=\"heading-0\">프로젝트 시작하기: FastAPI와 PostgreSQL 환경 설정 🛠️</h1>\n<p>안녕하세요! 오늘은 프리랜서 프로젝트 크롤러 개발을 시작하면서 FastAPI와 PostgreSQL 환경을 어떻게 설정했는지 공유해볼게요.</p>\n<h3 id=\"heading-1\"><strong>FastAPI와 PostgreSQL을 연동하는 가장 쉬운 방법! 🚀</strong></h3>\n<p>안녕하세요! 이번에는 <strong>FastAPI</strong>와 <strong>PostgreSQL</strong>을 연결하는 방법을 쉽게 설명해드릴게요.<br>\n혹시 <strong>FastAPI</strong>를 처음 써보신다면? 너무 걱정하지 마세요! 차근차근 따라오시면 금방 이해하실 거예요. 😃</p>\n<hr>\n<h2 id=\"heading-2\"><strong>1. 프로젝트 기본 구조 만들기</strong></h2>\n<p>먼저, 프로젝트 폴더를 아래처럼 구성해볼게요.</p>\n<pre><code>backend/\n├── .env                  # 환경 변수 설정\n├── requirements.txt      # 필요한 패키지 리스트\n└── app/\n    ├── main.py          # FastAPI 메인 애플리케이션\n    ├── config.py        # 설정 파일\n    ├── models/          # SQLAlchemy 모델 파일들\n    ├── schemas/         # Pydantic 스키마 파일들\n    ├── api/             # API 엔드포인트\n    └── db/              # 데이터베이스 관련 파일\n</code></pre>\n<p>이제 하나씩 설정해봅시다! 😊</p>\n<hr>\n<h2 id=\"heading-3\"><strong>2. 필요한 패키지 설치하기</strong></h2>\n<p>FastAPI와 PostgreSQL을 연동하려면 몇 가지 패키지가 필요해요.<br>\n먼저 <code>requirements.txt</code> 파일을 만들어서 아래 내용을 추가해주세요.</p>\n<pre><code class=\"language-text\">fastapi==0.104.1\nuvicorn==0.24.0\nsqlalchemy==2.0.23\npydantic==2.5.2\npydantic-settings==2.1.0\npython-dotenv==1.0.0\npsycopg2-binary==2.9.9\n</code></pre>\n<p>그리고 터미널에서 아래 명령어를 실행하면 한 번에 설치됩니다! 🎯</p>\n<pre><code class=\"language-bash\">pip install -r requirements.txt\n</code></pre>\n<hr>\n<h2 id=\"heading-4\"><strong>3. 환경 변수 설정 (.env 파일 만들기)</strong></h2>\n<p>PostgreSQL 연결 정보를 <code>.env</code> 파일에 저장할 거예요.<br>\n<code>.env</code> 파일을 만들어서 아래 내용을 입력해주세요.</p>\n<pre><code class=\"language-env\">POSTGRES_USER=postgres\nPOSTGRES_PASSWORD=postgres123\nPOSTGRES_HOST=localhost\nPOSTGRES_PORT=5432\nPOSTGRES_DB=gig_crawler\n</code></pre>\n<p><strong>✅ 왜 이렇게 설정할까요?</strong><br>\n👉 보안과 유지보수를 위해 코드에 직접 DB 정보를 적지 않고 환경 변수로 관리하는 게 좋아요!</p>\n<hr>\n<h2 id=\"heading-5\"><strong>4. 설정 관리 (config.py 만들기)</strong></h2>\n<p>이제 <code>.env</code> 파일에 있는 환경 변수를 가져올 수 있도록 <code>config.py</code> 파일을 만들어봅시다.</p>\n<pre><code class=\"language-python\">from pydantic_settings import BaseSettings\n\n<p>class Settings(BaseSettings):<br>    POSTGRES_USER: str<br>    POSTGRES_PASSWORD: str<br>    POSTGRES_HOST: str<br>    POSTGRES_PORT: str<br>    POSTGRES_DB: str</p><pre><code>class Config:\n    env_file = \".env\"\n</code></pre>\n</code><p><code class=\"language-python\">settings = Settings()<br></code></p></pre><p></p><p>이제 <code>settings.POSTGRES_USER</code> 이런 식으로 환경 변수를 불러올 수 있어요! 🎉</p>\n<hr>\n<h2 id=\"heading-6\"><strong>5. 데이터베이스 연결 설정 (database.py 만들기)</strong></h2>\n<p>이제 본격적으로 <strong>PostgreSQL</strong>과 연결할 <code>database.py</code> 파일을 만들어볼게요.</p>\n<pre><code class=\"language-python\">from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nfrom ..config import settings\nfrom urllib.parse import quote_plus\n\n<h1 id=\"heading-7\">URL 인코딩을 사용한 DB 연결 문자열 만들기</h1>\n<p>password = quote_plus(settings.POSTGRES_PASSWORD)<br>DATABASE_URL = f\"postgresql://{settings.POSTGRES_USER}:{password}@{settings.POSTGRES_HOST}:{settings.POSTGRES_PORT}/{settings.POSTGRES_DB}\"</p><h1 id=\"heading-8\">SQLAlchemy 엔진 생성</h1>\n<p>engine = create_engine(<br>    DATABASE_URL,<br>    echo=True,  # SQL 쿼리 로그 확인용<br>    pool_pre_ping=True,<br>    connect_args={'application_name': 'gig_crawler'}<br>)</p></code><p><code class=\"language-python\">SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)<br>Base = declarative_base()<br></code></p></pre><p></p><hr>\n<h2 id=\"heading-9\"><strong>6. FastAPI 앱 설정 (main.py 만들기)</strong></h2>\n<p>이제 FastAPI 서버를 실행할 <code>main.py</code> 파일을 만들어봅시다.</p>\n<pre><code class=\"language-python\">from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\n<p>app = FastAPI(title=\"Project Crawler API\")</p><h1 id=\"heading-10\">CORS 설정</h1>\n<p>app.add_middleware(<br>    CORSMiddleware,<br>    allow_origins=[\"<a href=\"http://localhost:3000%22%5D\">http://localhost:3000\"]</a>,  # 프론트엔드 도메인<br>    allow_credentials=True,<br>    allow_methods=[\"<em>\"],<br>    allow_headers=[\"</em>\"],<br>)</p></code><p><code class=\"language-python\">@app.get(\"/\")<br>def read_root():<br>    return {\"message\": \"Hello, FastAPI &amp; PostgreSQL!\"}<br></code></p></pre><p></p><p>이제 <code>http://localhost:8000/</code> 에 접속하면 <strong>\"Hello, FastAPI &amp; PostgreSQL!\"</strong> 메시지가 나와야 해요!</p>\n<hr>\n<h2 id=\"heading-11\"><strong>7. PostgreSQL 데이터베이스 생성하기</strong></h2>\n<p>이제 PostgreSQL에서 사용할 데이터베이스를 만들어봅시다.<br>\n터미널에서 <code>psql</code>을 실행한 다음, 아래 명령어를 입력하세요.</p>\n<pre><code class=\"language-sql\">CREATE DATABASE gig_crawler WITH ENCODING 'UTF8' LC_COLLATE='Korean_Korea.949' LC_CTYPE='Korean_Korea.949';\n</code></pre>\n<p>이제 데이터베이스가 준비되었습니다! 🎉</p>\n<hr>\n<h2 id=\"heading-12\"><strong>8. 서버 실행하기! 🚀</strong></h2>\n<p>이제 마지막 단계입니다!<br>\n아래 명령어를 실행해서 FastAPI 서버를 켜볼까요?</p>\n<pre><code class=\"language-bash\">uvicorn app.main:app --reload\n</code></pre>\n<p>터미널에 <strong>\"Uvicorn running on http://127.0.0.1:8000\"</strong> 이런 메시지가 나오면 성공이에요!<br>\n이제 브라우저에서 <code>http://127.0.0.1:8000/docs</code> 로 들어가면 API 문서도 자동으로 생성된 걸 확인할 수 있어요.</p>\n<hr>\n<h2 id=\"heading-13\"><strong>마무리 🎯</strong></h2>\n<p>지금까지 <strong>FastAPI + PostgreSQL</strong> 연동을 설정해봤어요!<br>\n혹시 실행하면서 문제가 생기면 아래 사항을 다시 확인해보세요.</p>\n<p>✅ <code>.env</code> 파일을 UTF-8로 저장했나요?<br>\n✅ PostgreSQL 서버가 실행 중인가요?<br>\n✅ 데이터베이스가 생성되어 있나요?<br>\n✅ <code>uvicorn app.main:app --reload</code> 명령어를 실행했나요?</p>\n<p>이제 여기에 <strong>CRUD API</strong>를 추가해서 원하는 프로젝트를 만들어보세요! 💡<br>\n궁금한 점 있으면 언제든지 질문하세요~! 😃</p>\n",
    "date": "2025-02-12",
    "category": "backend",
    "tags": [
      "FastAPI",
      "PostgreSQL",
      "Python",
      "Crawler",
      "asyncio",
      "SQLAlchemy",
      "비동기처리",
      "데이터수집",
      "실시간처리"
    ],
    "description": "FastAPI와 PostgreSQL을 사용하여 국내외 프리랜서 플랫폼의 프로젝트 정보를 수집하는 크롤러 시스템 구축 프로젝트",
    "thumbnail": "/images/fastapi.png",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "프로젝트 시작하기: FastAPI와 PostgreSQL 환경 설정 🛠️",
        "level": 1,
        "isMainTopic": true,
        "position": 19.9140625
      },
      {
        "id": "heading-1",
        "text": "FastAPI와 PostgreSQL을 연동하는 가장 쉬운 방법! 🚀",
        "level": 3,
        "isMainTopic": false,
        "position": 129.046875
      },
      {
        "id": "heading-2",
        "text": "1. 프로젝트 기본 구조 만들기",
        "level": 2,
        "isMainTopic": true,
        "position": 250.6796875
      },
      {
        "id": "heading-3",
        "text": "2. 필요한 패키지 설치하기",
        "level": 2,
        "isMainTopic": true,
        "position": 568.0078125
      },
      {
        "id": "heading-4",
        "text": "3. 환경 변수 설정 (.env 파일 만들기)",
        "level": 2,
        "isMainTopic": true,
        "position": 879.8359375
      },
      {
        "id": "heading-5",
        "text": "4. 설정 관리 (config.py 만들기)",
        "level": 2,
        "isMainTopic": true,
        "position": 1154.6640625
      },
      {
        "id": "heading-6",
        "text": "5. 데이터베이스 연결 설정 (database.py 만들기)",
        "level": 2,
        "isMainTopic": true,
        "position": 1545.9921875
      },
      {
        "id": "heading-7",
        "text": "URL 인코딩을 사용한 DB 연결 문자열 만들기",
        "level": 1,
        "isMainTopic": true,
        "position": 1736.5859375
      },
      {
        "id": "heading-8",
        "text": "SQLAlchemy 엔진 생성",
        "level": 1,
        "isMainTopic": true,
        "position": 1850.9453125
      },
      {
        "id": "heading-9",
        "text": "6. FastAPI 앱 설정 (main.py 만들기)",
        "level": 2,
        "isMainTopic": true,
        "position": 2091.0390625
      },
      {
        "id": "heading-10",
        "text": "CORS 설정",
        "level": 1,
        "isMainTopic": true,
        "position": 2264.6328125
      },
      {
        "id": "heading-11",
        "text": "7. PostgreSQL 데이터베이스 생성하기",
        "level": 2,
        "isMainTopic": true,
        "position": 2570.2265625
      },
      {
        "id": "heading-12",
        "text": "8. 서버 실행하기! 🚀",
        "level": 2,
        "isMainTopic": true,
        "position": 2764.0546875
      },
      {
        "id": "heading-13",
        "text": "마무리 🎯",
        "level": 2,
        "isMainTopic": true,
        "position": 2978.3828125
      }
    ],
    "imageHeights": {}
  },
  {
    "id": "gig_crawler_2",
    "title": "FastAPI와 PostgreSQL을 활용한 아웃소싱 크롤러 개발",
    "content": "<h1 id=\"heading-0\">SQLAlchemy로 데이터베이스 비동기 처리 구현하기 🔄</h1>\n<p>안녕하세요! 오늘은 FastAPI 크롤러 프로젝트에서 <strong>데이터베이스 비동기 처리</strong>를 어떻게 구현했는지 자세히 공유해볼게요.</p>\n<h2 id=\"heading-1\">1. 들어가며 🎯</h2>\n<p>요즘 웹 개발에서 비동기 처리는 정말 중요한 요소가 되었어요. 특히 크롤러처럼 데이터를 많이 다루는 애플리케이션에서는 더욱 그렇죠! 이번 글에서는 제가 SQLAlchemy를 사용해서 비동기 데이터베이스 처리를 구현한 경험을 나눠볼게요.</p>\n<h2 id=\"heading-2\">2. 왜 비동기 처리가 필요했나요? 🤔</h2>\n<p>기존에 동기 방식으로 처리했을 때 몇 가지 문제점이 있었어요:</p>\n<ol>\n<li><strong>응답 지연</strong>: 데이터베이스 응답을 기다리는 동안 다른 작업을 못했어요</li>\n<li><strong>자원 낭비</strong>: 서버 리소스가 효율적으로 사용되지 못했죠</li>\n<li><strong>확장성 한계</strong>: 동시에 많은 요청이 들어오면 처리가 힘들었어요</li>\n</ol>\n<p>이런 문제들을 해결하기 위해 비동기 처리 도입이 필요했답니다!</p>\n<hr>\n<h2 id=\"heading-3\">3. SQLAlchemy 비동기 설정</h2>\n<h3 id=\"heading-4\">3.1 기존 동기 방식의 문제점</h3>\n<p>일반적으로 SQLAlchemy는 동기 방식으로 작동합니다. 하지만 동기 방식의 문제점은 다음과 같습니다.</p>\n<ul>\n<li><strong>I/O 블로킹</strong>: 데이터베이스에서 응답을 받을 때까지 애플리케이션이 대기해야 함</li>\n<li><strong>성능 저하</strong>: 많은 요청이 동시에 들어오면 응답 시간이 길어짐</li>\n<li><strong>확장성 부족</strong>: 다중 작업을 효과적으로 처리하기 어려움</li>\n</ul>\n<p>이를 해결하기 위해 <strong>SQLAlchemy 비동기 모드</strong>를 활용할 수 있습니다.</p>\n<hr>\n<h3 id=\"heading-5\">3.2 SQLAlchemy 비동기 설정 방법</h3>\n<h4 id=\"heading-6\">1) 비동기 엔진 생성 (<code>create_async_engine</code>)</h4>\n<pre><code class=\"language-python\">from sqlalchemy.ext.asyncio import create_async_engine\n\n</code><p><code class=\"language-python\">DATABASE_URL = \"postgresql+asyncpg://user:password@localhost/dbname\"<br>engine = create_async_engine(DATABASE_URL, echo=True)<br></code></p></pre><p></p><h4 id=\"heading-7\">2) 비동기 세션 생성 (<code>async_session</code>)</h4>\n<pre><code class=\"language-python\">from sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.orm import sessionmaker\n\n</code><p><code class=\"language-python\">async_session = sessionmaker(<br>    bind=engine,<br>    class_=AsyncSession,<br>    expire_on_commit=False<br>)<br></code></p></pre><p></p><h4 id=\"heading-8\">3) 데이터베이스 작업 예제 (비동기 방식)</h4>\n<pre><code class=\"language-python\">from models import User  # 가정한 모델\n\n</code><p><code class=\"language-python\">async def get_user_by_id(user_id: int):<br>    async with async_session() as session:<br>        result = await session.get(User, user_id)<br>        return result<br></code></p></pre><p></p><p>위 예제에서는 <code>async_session</code>을 사용하여 비동기적으로 데이터베이스에서 사용자를 조회합니다.</p>\n<hr>\n<h2 id=\"heading-9\">4. 기존 동기 방식과 비교</h2>\n<p>| 방식                  | 장점                        | 단점                        |\n| --------------------- | --------------------------- | --------------------------- |\n| 동기 (Synchronous)    | 간단한 코드, 익숙한 패턴    | 응답 속도 저하, 확장성 부족 |\n| 비동기 (Asynchronous) | 빠른 응답, 높은 동시성 처리 | 설정이 다소 복잡함          |</p>\n<p>비동기 방식은 특히 <strong>대량의 요청을 처리하는 API 서버</strong>나 <strong>크롤러</strong>를 운영할 때 매우 유용합니다.</p>\n<hr>\n<h2 id=\"heading-10\">5. 마치며</h2>\n<p>이번 글에서는 SQLAlchemy의 비동기 설정 방법을 살펴보았습니다. 다음 글에서는 <code>database.py</code>를 비동기 방식으로 변경하고, <strong>세션 관리 코드 통합</strong>에 대해 다뤄보겠습니다! ��</p>\n<p>다음 글에서 만나요! 😊</p>\n",
    "date": "2025-02-12",
    "category": "backend",
    "tags": [
      "FastAPI",
      "PostgreSQL",
      "Python",
      "Crawler",
      "asyncio",
      "SQLAlchemy",
      "비동기처리",
      "데이터수집",
      "실시간처리"
    ],
    "description": "프리랜서 플랫폼의 프로젝트 정보를 실시간으로 수집하고 분석하는 크롤러를 만들어보았어요. FastAPI의 비동기 처리와 PostgreSQL의 강력한 기능을 활용해서 효율적인 시스템을 구축했답니다! 🚀",
    "thumbnail": "/images/fastapi.png",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "SQLAlchemy로 데이터베이스 비동기 처리 구현하기 🔄",
        "level": 1,
        "isMainTopic": true,
        "position": 19.9140625
      },
      {
        "id": "heading-1",
        "text": "1. 들어가며 🎯",
        "level": 2,
        "isMainTopic": true,
        "position": 130.2421875
      },
      {
        "id": "heading-2",
        "text": "2. 왜 비동기 처리가 필요했나요? 🤔",
        "level": 2,
        "isMainTopic": true,
        "position": 260.0703125
      },
      {
        "id": "heading-3",
        "text": "3. SQLAlchemy 비동기 설정",
        "level": 2,
        "isMainTopic": true,
        "position": 478.8984375
      },
      {
        "id": "heading-4",
        "text": "3.1 기존 동기 방식의 문제점",
        "level": 3,
        "isMainTopic": false,
        "position": 527.8125
      },
      {
        "id": "heading-5",
        "text": "3.2 SQLAlchemy 비동기 설정 방법",
        "level": 3,
        "isMainTopic": false,
        "position": 735.75
      },
      {
        "id": "heading-6",
        "text": "1) 비동기 엔진 생성 (create_async_engine)",
        "level": 4,
        "isMainTopic": false,
        "position": 780.0234375
      },
      {
        "id": "heading-7",
        "text": "2) 비동기 세션 생성 (async_session)",
        "level": 4,
        "isMainTopic": false,
        "position": 915.0703125
      },
      {
        "id": "heading-8",
        "text": "3) 데이터베이스 작업 예제 (비동기 방식)",
        "level": 4,
        "isMainTopic": false,
        "position": 1110.1171875
      },
      {
        "id": "heading-9",
        "text": "4. 기존 동기 방식과 비교",
        "level": 2,
        "isMainTopic": true,
        "position": 1328.3046875
      },
      {
        "id": "heading-10",
        "text": "5. 마치며",
        "level": 2,
        "isMainTopic": true,
        "position": 1509.1328125
      }
    ],
    "imageHeights": {}
  },
  {
    "id": "gig_crawler_3",
    "title": "FastAPI와 PostgreSQL을 활용한 아웃소싱 크롤러 개발",
    "content": "<h1 id=\"heading-0\">database.py를 비동기 방식으로 변경하고 세션 관리 통합하기</h1>\n<p>안녕하세요, 여러분!<br>\n지난 번 글에서는 SQLAlchemy의 비동기 설정에 대해 알아보았는데요, 오늘은 그 연장선상에서 <strong>database.py</strong> 파일을 어떻게 비동기 방식으로 변경하고, <strong>세션 관리 코드를 통합</strong>할 수 있는지 자세히 설명해 드리려고 해요.</p>\n<p>비동기 처리를 도입하면 데이터베이스 작업 시 기다리는 시간을 줄이고, 여러 요청을 동시에 효율적으로 처리할 수 있답니다. 한 번 차근차근 살펴볼게요!</p>\n<hr>\n<h2 id=\"heading-1\">1. 왜 비동기 방식일까요?</h2>\n<p>먼저, 동기 방식과 비동기 방식의 차이를 간단히 짚어보겠습니다.</p>\n<ul>\n<li><strong>동기 방식:</strong><br>\n데이터베이스에 요청하면 결과가 반환될 때까지 기다리게 됩니다. 그래서 요청이 많은 경우, 한 작업이 끝날 때까지 다른 작업이 대기하는 문제가 발생할 수 있어요.</li>\n<li><strong>비동기 방식:</strong><br>\n데이터베이스 요청을 보낸 후에도 다른 작업을 동시에 진행할 수 있습니다. 즉, 한 작업이 끝날 때까지 기다리지 않고, 효율적으로 여러 작업을 처리할 수 있게 해줍니다.</li>\n</ul>\n<p>비동기 처리를 통해 우리 애플리케이션의 응답 속도와 동시 처리 능력을 크게 향상시킬 수 있어요!</p>\n<hr>\n<h2 id=\"heading-2\">2. 기존 동기 방식의 database.py</h2>\n<p>우리의 기존 <strong>database.py</strong>는 동기 방식으로 작성되어 있었어요. 예를 들어, 아래와 같이 데이터베이스 엔진과 세션을 생성했었죠:</p>\n<pre><code class=\"language-python\"># 기존 database.py (동기 방식)\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\n<p>DATABASE_URL = \"postgresql://user:password@localhost/dbname\"</p><p>engine = create_engine(DATABASE_URL, echo=True)<br>SessionLocal = sessionmaker(bind=engine)</p></code><p><code class=\"language-python\">def get_db():<br>    db = SessionLocal()<br>    try:<br>        yield db<br>    finally:<br>        db.close()<br></code></p></pre><p></p><p>이 방식은 구현이 간단하다는 장점이 있지만, 많은 요청이 들어올 때는 <strong>I/O 블로킹</strong> 현상이 발생하여 성능 저하의 원인이 되곤 합니다.</p>\n<hr>\n<h2 id=\"heading-3\">3. 비동기 방식으로 변경하기</h2>\n<p>이제 비동기 방식으로 전환해 볼 건데요, 주요 변경 사항을 하나씩 짚어보겠습니다.</p>\n<h3 id=\"heading-4\">3.1. 비동기 엔진 생성하기</h3>\n<p>동기 방식 대신 <code>sqlalchemy.ext.asyncio</code> 모듈의 <code>create_async_engine</code> 함수를 사용하여 비동기 엔진을 생성합니다.<br>\n먼저 데이터베이스 URL에 <code>+asyncpg</code>를 추가해서 비동기 드라이버를 사용하도록 합니다.</p>\n<pre><code class=\"language-python\">from sqlalchemy.ext.asyncio import create_async_engine\n\n</code><p><code class=\"language-python\">DATABASE_URL = \"postgresql+asyncpg://user:password@localhost/dbname\"<br>engine = create_async_engine(DATABASE_URL, echo=True)<br></code></p></pre><p></p><p>이제 엔진은 비동기 처리를 위해 최적화되어 준비되었어요!</p>\n<h3 id=\"heading-5\">3.2. 비동기 세션 생성 및 통합</h3>\n<p>다음으로, 비동기 세션을 생성하기 위해 <code>AsyncSession</code>과 <code>sessionmaker</code>를 활용합니다.<br>\n동기 코드와는 달리 <code>class_</code> 매개변수에 <code>AsyncSession</code>을 지정해주고, <code>expire_on_commit=False</code> 옵션을 사용해 세션의 만료를 방지합니다.</p>\n<pre><code class=\"language-python\">from sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.orm import sessionmaker\n\n</code><p><code class=\"language-python\">async_session = sessionmaker(<br>    bind=engine,<br>    class_=AsyncSession,<br>    expire_on_commit=False<br>)<br></code></p></pre><p></p><p>이제 모든 데이터베이스 요청은 이 <strong>비동기 세션</strong>을 사용하게 됩니다.</p>\n<h3 id=\"heading-6\">3.3. 비동기 세션 관리 함수 구현하기</h3>\n<p>비동기 방식에서는 <code>async with</code> 구문을 활용해 세션을 안전하게 열고 닫는 것이 중요해요.<br>\n아래와 같이 <code>get_db</code> 함수를 비동기 제너레이터로 변경하여, 세션을 열고 사용 후 자동으로 종료하도록 구현할 수 있습니다.</p>\n<pre><code class=\"language-python\">async def get_db():\n    async with async_session() as session:\n        yield session\n</code></pre>\n<p>이 코드는 데이터베이스 작업이 끝나면 <code>async with</code> 블록이 종료되면서 세션을 깔끔하게 닫아줘요.<br>\n예외가 발생하더라도 자동으로 리소스가 정리되므로, 안정적인 운영이 가능합니다.</p>\n<hr>\n<h2 id=\"heading-7\">4. 통합 세션 관리의 장점</h2>\n<p>이번에 세션 관리 코드를 통합하면서 얻을 수 있는 이점은 다음과 같습니다:</p>\n<ul>\n<li><strong>코드의 간결함:</strong><br>\n모든 데이터베이스 접근 시 동일한 비동기 세션 관리 로직을 사용하므로, 코드가 훨씬 깔끔해졌습니다.</li>\n<li><strong>안정성 강화:</strong><br>\n<code>async with</code>를 사용하면, 예외가 발생해도 세션이 자동으로 종료되어 리소스 누수가 없어요.</li>\n<li><strong>유지보수 용이성:</strong><br>\n세션 관리 코드가 한 곳에 모여 있으니, 향후 수정이나 확장이 필요할 때 한 곳만 관리하면 됩니다.</li>\n</ul>\n<hr>\n<h2 id=\"heading-8\">5. 마치며</h2>\n<p>오늘은 <strong>database.py</strong> 파일을 비동기 방식으로 전환하고, 세션 관리 코드를 통합하는 방법을 살펴보았습니다.<br>\n이렇게 변경하면, 앞으로 API 서버나 크롤러에서 발생하는 데이터베이스 I/O 작업을 훨씬 더 효율적으로 처리할 수 있게 됩니다.</p>\n<p>다음 글에서는 <strong>프로젝트 모델 개선 및 필드 업데이트</strong>에 대해 다룰 예정이에요.</p>\n<p>여러분의 피드백이 큰 힘이 됩니다. 다음 글에서 또 만나요! 🚀</p>\n<hr>\n<p>이 글이 도움이 되었길 바라며, 앞으로도 지속적으로 개선된 기술들을 공유할 예정입니다. 감사합니다!</p>\n",
    "date": "2025-02-12",
    "category": "backend",
    "tags": [
      "FastAPI",
      "PostgreSQL",
      "Python",
      "Crawler",
      "asyncio",
      "SQLAlchemy",
      "비동기처리",
      "데이터수집",
      "실시간처리"
    ],
    "description": "프리랜서 플랫폼의 프로젝트 정보를 실시간으로 수집하고 분석하는 크롤러를 만들어보았어요. FastAPI의 비동기 처리와 PostgreSQL의 강력한 기능을 활용해서 효율적인 시스템을 구축했답니다! 🚀",
    "thumbnail": "/images/fastapi.png",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "database.py를 비동기 방식으로 변경하고 세션 관리 통합하기",
        "level": 1,
        "isMainTopic": true,
        "position": 19.9140625
      },
      {
        "id": "heading-1",
        "text": "1. 왜 비동기 방식일까요?",
        "level": 2,
        "isMainTopic": true,
        "position": 220.2421875
      },
      {
        "id": "heading-2",
        "text": "2. 기존 동기 방식의 database.py",
        "level": 2,
        "isMainTopic": true,
        "position": 495.0703125
      },
      {
        "id": "heading-3",
        "text": "3. 비동기 방식으로 변경하기",
        "level": 2,
        "isMainTopic": true,
        "position": 926.8984375
      },
      {
        "id": "heading-4",
        "text": "3.1. 비동기 엔진 생성하기",
        "level": 3,
        "isMainTopic": false,
        "position": 1014.03125
      },
      {
        "id": "heading-5",
        "text": "3.2. 비동기 세션 생성 및 통합",
        "level": 3,
        "isMainTopic": false,
        "position": 1257.46875
      },
      {
        "id": "heading-6",
        "text": "3.3. 비동기 세션 관리 함수 구현하기",
        "level": 3,
        "isMainTopic": false,
        "position": 1560.90625
      },
      {
        "id": "heading-7",
        "text": "4. 통합 세션 관리의 장점",
        "level": 2,
        "isMainTopic": true,
        "position": 1815.0390625
      },
      {
        "id": "heading-8",
        "text": "5. 마치며",
        "level": 2,
        "isMainTopic": true,
        "position": 2054.3671875
      }
    ],
    "imageHeights": {}
  },
  {
    "id": "gig_crawler_4",
    "title": "FastAPI와 PostgreSQL을 활용한 아웃소싱 크롤러 개발",
    "content": "<h1 id=\"heading-0\">프로젝트 모델 개선: 구조 및 필드 정리하기</h1>\n<p>안녕하세요, 여러분!<br>\n이전 글들에서는 데이터베이스의 비동기 처리와 세션 관리 통합에 대해 알아보았는데요, 이번 글에서는 <strong>프로젝트 모델 개선</strong>에 대해 이야기해보려고 합니다. 데이터 모델은 애플리케이션의 핵심인데, 잘 정리된 모델은 유지보수와 확장에 큰 도움을 줍니다. 그럼 차근차근 개선 포인트를 살펴볼까요?</p>\n<hr>\n<h2 id=\"heading-1\">1. 왜 모델 개선이 필요할까요?</h2>\n<p>기존 모델을 사용하면서 몇 가지 문제점을 발견했어요. 예를 들어:</p>\n<ul>\n<li>\n<p><strong>budget 필드 하나로 관리:</strong><br>\n한 번에 예산 정보를 관리하려다 보니, 최소/최대 예산 값을 따로 활용하기 어려웠어요.</p>\n</li>\n<li>\n<p><strong>metadata라는 필드명:</strong><br>\nSQLAlchemy에서는 <code>metadata</code>가 예약어로 사용되어, 다른 용도로 사용하면 충돌 위험이 있었습니다.</p>\n</li>\n<li>\n<p><strong>새로운 요구사항 반영:</strong><br>\n프로젝트 정보에 추가적으로 <code>currency</code>, <code>posted_date</code>, <code>deadline</code>, <code>skills</code> 등의 정보가 필요해졌습니다.</p>\n</li>\n</ul>\n<p>이러한 이유로, 모델을 좀 더 세분화하고 명확하게 개선하고자 했어요.</p>\n<hr>\n<h2 id=\"heading-2\">2. 구체적인 개선 내용</h2>\n<h3 id=\"heading-3\">2.1 예산 필드 분리: budget_min &amp; budget_max</h3>\n<p>기존에는 하나의 <code>budget</code> 필드로 예산 정보를 저장했다면,<br>\n이제는 최소 예산과 최대 예산을 별도의 필드로 관리할 거예요.<br>\n이렇게 하면 검색, 필터링, 정렬 등에서 더 세밀하게 활용할 수 있습니다.</p>\n<pre><code class=\"language-python\">from sqlalchemy import Column, Integer\n\n<p>class Project(Base):<br>    <strong>tablename</strong> = 'projects'</p><pre><code>id = Column(Integer, primary_key=True, index=True)\n# 기존 budget 필드 -&gt; 두 개로 분리\nbudget_min = Column(Integer, nullable=False)\nbudget_max = Column(Integer, nullable=False)\n</code></pre>\n</code><p><code class=\"language-python\"></code></p></pre><p></p><h3 id=\"heading-4\">2.2 예약어 충돌 해결: metadata → project_metadata</h3>\n<p>SQLAlchemy의 예약어인 <code>metadata</code> 대신, 혼동 없이 사용할 수 있도록 <code>project_metadata</code>로 변경합니다.</p>\n<pre><code class=\"language-python\">from sqlalchemy import Column, JSON\n\n<p>class Project(Base):<br>    <strong>tablename</strong> = 'projects'</p><pre><code>id = Column(Integer, primary_key=True, index=True)\n# 예약어 문제 해결을 위해 변경\nproject_metadata = Column(JSON, nullable=True)\n</code></pre>\n</code><p><code class=\"language-python\"></code></p></pre><p></p><h3 id=\"heading-5\">2.3 새로운 필드 추가</h3>\n<p>프로젝트의 세부 정보를 더욱 풍부하게 표현하기 위해 몇 가지 새로운 필드를 추가했습니다.</p>\n<ul>\n<li><strong>currency:</strong> 예산 단위를 나타내는 필드</li>\n<li><strong>posted_date:</strong> 프로젝트가 게시된 날짜</li>\n<li><strong>deadline:</strong> 프로젝트 마감 기한</li>\n<li><strong>skills:</strong> 프로젝트에 필요한 기술 스택 정보</li>\n</ul>\n<pre><code class=\"language-python\">from sqlalchemy import Column, String, DateTime\nimport datetime\n\n<p>class Project(Base):<br>    <strong>tablename</strong> = 'projects'</p><pre><code>id = Column(Integer, primary_key=True, index=True)\nbudget_min = Column(Integer, nullable=False)\nbudget_max = Column(Integer, nullable=False)\nproject_metadata = Column(JSON, nullable=True)\n\n# 추가된 새로운 필드들\ncurrency = Column(String, default='USD')\nposted_date = Column(DateTime, default=datetime.datetime.utcnow)\ndeadline = Column(DateTime, nullable=True)\nskills = Column(String, nullable=True)  # 예: \"Python, JavaScript, SQL\"\n</code></pre>\n</code><p><code class=\"language-python\"></code></p></pre><p></p><p>이렇게 모델을 개선하면, 데이터가 더 구조적이고 명확하게 관리되어 추후 쿼리나 데이터 분석 시에도 큰 도움이 됩니다.</p>\n<hr>\n<h2 id=\"heading-6\">3. 개선된 모델의 장점</h2>\n<ul>\n<li><strong>명확한 데이터 표현:</strong><br>\n예산 정보를 최소/최대 값으로 분리하여 다양한 범위 검색 및 비교가 가능해집니다.</li>\n<li><strong>예약어 충돌 방지:</strong><br>\n<code>project_metadata</code>라는 명확한 필드명을 사용하여 SQLAlchemy 내 예약어와의 충돌을 피했습니다.</li>\n<li><strong>확장성 있는 모델:</strong><br>\n추가 필드를 통해 프로젝트 정보를 더욱 풍부하게 표현할 수 있고, 미래의 요구사항에도 유연하게 대응할 수 있습니다.</li>\n</ul>\n<hr>\n<h2 id=\"heading-7\">4. 마치며</h2>\n<p>이번 글에서는 프로젝트 모델 개선에 대해 자세히 살펴보았습니다.<br>\n데이터베이스 모델을 체계적으로 관리하는 것은 애플리케이션의 장기적인 유지보수와 성능 개선에 큰 영향을 미칩니다.<br>\n앞으로 남은 글에서는 <strong>크롤러 스케줄러 구현</strong> 및 <strong>암호화 시스템 도입</strong> 등, 더 많은 개선 사항들을 소개할 예정이니 많은 기대 부탁드립니다!</p>\n<p>혹시 개선 포인트에 대해 추가로 의견이 있으시거나 질문이 있다면 언제든지 댓글로 남겨주세요. 여러분의 피드백이 큰 힘이 됩니다. 감사합니다! 🚀</p>\n<hr>\n<p>다음 글에서 만나요!</p>\n",
    "date": "2025-02-12",
    "category": "backend",
    "tags": [
      "FastAPI",
      "PostgreSQL",
      "Python",
      "Crawler",
      "asyncio",
      "SQLAlchemy",
      "비동기처리",
      "데이터수집",
      "실시간처리",
      "데이터모델링",
      "리팩토링",
      "ORM",
      "데이터구조"
    ],
    "description": "크롤러 프로젝트의 데이터 모델을 개선하고 구조를 정리해보았어요! 예산 필드 분리, 메타데이터 필드 개선, 그리고 새로운 필드 추가로 더 체계적인 데이터 관리가 가능해졌답니다. 🔧",
    "thumbnail": "/images/fastapi.png",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "프로젝트 모델 개선: 구조 및 필드 정리하기",
        "level": 1,
        "isMainTopic": true,
        "position": 19.9140625
      },
      {
        "id": "heading-1",
        "text": "1. 왜 모델 개선이 필요할까요?",
        "level": 2,
        "isMainTopic": true,
        "position": 184.7421875
      },
      {
        "id": "heading-2",
        "text": "2. 구체적인 개선 내용",
        "level": 2,
        "isMainTopic": true,
        "position": 491.5703125
      },
      {
        "id": "heading-3",
        "text": "2.1 예산 필드 분리: budget_min & budget_max",
        "level": 3,
        "isMainTopic": false,
        "position": 540.484375
      },
      {
        "id": "heading-4",
        "text": "2.2 예약어 충돌 해결: metadata → project_metadata",
        "level": 3,
        "isMainTopic": false,
        "position": 850.421875
      },
      {
        "id": "heading-5",
        "text": "2.3 새로운 필드 추가",
        "level": 3,
        "isMainTopic": false,
        "position": 1106.359375
      },
      {
        "id": "heading-6",
        "text": "3. 개선된 모델의 장점",
        "level": 2,
        "isMainTopic": true,
        "position": 1651.4921875
      },
      {
        "id": "heading-7",
        "text": "4. 마치며",
        "level": 2,
        "isMainTopic": true,
        "position": 1874.8203125
      }
    ],
    "imageHeights": {}
  },
  {
    "id": "gig_crawler_5",
    "title": "FastAPI와 PostgreSQL을 활용한 아웃소싱 크롤러 개발",
    "content": "<p>이번 글에서는 <strong>암호화 시스템 구현</strong>에 대해 자세히 소개할게요!</p>\n<hr>\n<h1 id=\"heading-0\">암호화 시스템 구현: CryptoUtil 클래스와 프로젝트 ID 보호</h1>\n<p>안녕하세요, 여러분!<br>\n이전 글들에서 데이터베이스 비동기 처리, 세션 관리, 모델 개선, 크롤러 스케줄러 등에 대해 다뤘는데요, 이번 글에서는 <strong>암호화 시스템 구현</strong>에 대해 이야기해보려고 합니다.</p>\n<p>우리 프로젝트에서는 보안이 매우 중요한 요소 중 하나입니다. 특히, 프로젝트 ID와 같이 민감한 정보는 암호화를 통해 외부로 노출되지 않도록 보호할 필요가 있죠. 이번 글에서는 <strong>Fernet</strong>을 활용한 대칭키 암호화 방식을 적용하여, 프로젝트 ID의 암호화와 복호화를 구현하는 방법을 소개하겠습니다.</p>\n<hr>\n<h2 id=\"heading-1\">1. 암호화가 필요한 이유</h2>\n<ul>\n<li>\n<p><strong>보안 강화:</strong><br>\n데이터가 외부에 노출되면 악의적인 공격에 취약해집니다. 암호화를 통해 중요한 정보(예: 프로젝트 ID)를 안전하게 보호할 수 있습니다.</p>\n</li>\n<li>\n<p><strong>데이터 무결성 유지:</strong><br>\n암호화된 데이터는 전송 중 변조 여부를 쉽게 확인할 수 있어, 데이터의 신뢰성을 보장할 수 있습니다.</p>\n</li>\n<li>\n<p><strong>규정 준수:</strong><br>\n여러 보안 규제와 컴플라이언스 요건을 만족시키기 위해 민감 정보를 암호화하는 것은 필수적입니다.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"heading-2\">2. Fernet 대칭키 암호화란?</h2>\n<p><strong>Fernet</strong>은 파이썬의 <a href=\"https://cryptography.io/\">cryptography</a> 라이브러리에서 제공하는 대칭키 암호화 방식입니다.</p>\n<ul>\n<li><strong>대칭키 암호화:</strong> 암호화와 복호화에 동일한 키를 사용합니다.</li>\n<li><strong>사용법이 간단:</strong> 몇 줄의 코드로 강력한 암호화 기능을 구현할 수 있습니다.</li>\n<li><strong>안전성:</strong> 암호화된 메시지의 무결성과 인증을 보장합니다.</li>\n</ul>\n<hr>\n<h2 id=\"heading-3\">3. CryptoUtil 클래스 구현</h2>\n<p>이제 실제로 <code>CryptoUtil</code> 클래스를 구현해 보겠습니다. 이 클래스는 암호화와 복호화 기능을 제공하며, 주로 프로젝트 ID와 같은 민감한 데이터를 보호하는 데 사용됩니다.</p>\n<pre><code class=\"language-python\">from cryptography.fernet import Fernet\n\n<p>class CryptoUtil:<br>    def <strong>init</strong>(self, key: str):<br>        \"\"\"<br>        생성자: 암호화에 사용할 Fernet 인스턴스를 초기화합니다.<br>        :param key: Fernet 암호화 키 (문자열)<br>        \"\"\"<br>        self.fernet = Fernet(key)</p><pre><code>def encrypt(self, data: str) -&gt; str:\n    \"\"\"\n    데이터를 암호화합니다.\n    :param data: 암호화할 문자열 데이터\n    :return: 암호화된 문자열 (토큰)\n    \"\"\"\n    return self.fernet.encrypt(data.encode()).decode()\n\ndef decrypt(self, token: str) -&gt; str:\n    \"\"\"\n    암호화된 토큰을 복호화합니다.\n    :param token: 암호화된 문자열 (토큰)\n    :return: 복호화된 원본 문자열\n    \"\"\"\n    return self.fernet.decrypt(token.encode()).decode()\n</code></pre>\n<h1 id=\"heading-4\">예시 사용법</h1>\n<p>if <strong>name</strong> == '<strong>main</strong>':<br>    # 암호화 키는 보통 환경 변수나 설정 파일에서 안전하게 로드합니다.<br>    # 여기서는 예시로 새로운 키를 생성합니다.<br>    key = Fernet.generate_key()<br>    crypto_util = CryptoUtil(key)</p><pre><code>original_id = \"project123\"\nencrypted_id = crypto_util.encrypt(original_id)\ndecrypted_id = crypto_util.decrypt(encrypted_id)\n\nprint(\"원본 프로젝트 ID:\", original_id)\nprint(\"암호화된 프로젝트 ID:\", encrypted_id)\nprint(\"복호화된 프로젝트 ID:\", decrypted_id)\n</code></pre>\n</code><p><code class=\"language-python\"></code></p></pre><p></p><h3 id=\"heading-5\">3.1 코드 설명</h3>\n<ul>\n<li>\n<p><strong>초기화:</strong><br>\n<code>__init__</code> 메서드에서 전달받은 암호화 키로 <code>Fernet</code> 인스턴스를 초기화합니다.</p>\n</li>\n<li>\n<p><strong>encrypt 메서드:</strong><br>\n문자열 데이터를 바이트로 변환한 후 암호화하여, 다시 문자열로 디코딩합니다.</p>\n</li>\n<li>\n<p><strong>decrypt 메서드:</strong><br>\n암호화된 토큰을 바이트로 변환하여 복호화하고, 원래의 문자열로 디코딩합니다.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"heading-6\">4. 설정에 암호화 키 추가하기</h2>\n<p>실제 운영 환경에서는 암호화 키를 코드에 하드코딩하지 않고, 보안 설정 파일이나 환경 변수에서 로드하는 것이 좋습니다. 예를 들어, <code>config.py</code> 파일을 만들어 아래와 같이 작성할 수 있습니다:</p>\n<pre><code class=\"language-python\">import os\n\n<h1 id=\"heading-7\">환경 변수에서 암호화 키를 가져오거나, 기본값을 설정합니다.</h1>\n</code><p><code class=\"language-python\">ENCRYPTION_KEY = os.getenv(\"ENCRYPTION_KEY\", Fernet.generate_key().decode())<br></code></p></pre><p></p><p>이렇게 설정해두면, 운영 환경에서 별도의 암호화 키를 안전하게 관리할 수 있어 보안성이 한층 강화됩니다.</p>\n<hr>\n<h2 id=\"heading-8\">5. 암호화 시스템의 적용</h2>\n<p>이제 API 엔드포인트나 데이터 저장 시, 프로젝트 ID를 직접 노출하는 대신 암호화된 값을 사용하면 됩니다.<br>\n예를 들어, 프로젝트 조회 API에서는 클라이언트에게 암호화된 ID를 제공하고, 이후 클라이언트의 요청 시 해당 암호화된 ID를 복호화하여 내부 데이터베이스에서 조회할 수 있습니다.</p>\n<p>이와 같이 암호화 시스템을 도입하면, 민감 정보의 노출 위험을 줄이고 보안을 강화할 수 있습니다.</p>\n<hr>\n<h2 id=\"heading-9\">6. 마치며</h2>\n<p>오늘은 <strong>암호화 시스템 구현</strong>에 대해 살펴보았습니다.<br>\n<code>CryptoUtil</code> 클래스를 통해 간단하게 암호화와 복호화 기능을 구현할 수 있었고, 이를 통해 프로젝트 ID와 같은 민감한 데이터를 효과적으로 보호할 수 있음을 확인했습니다.</p>\n<p>다음 글에서는 <strong>API 엔드포인트 개선</strong> 및 비동기 데이터베이스 쿼리 적용에 대해 다룰 예정입니다.</p>\n<p>감사합니다. 다음 글에서 또 만나요! 🚀</p>\n<hr>\n",
    "date": "2025-02-12",
    "category": "backend",
    "tags": [
      "FastAPI",
      "PostgreSQL",
      "Python",
      "Crawler",
      "asyncio",
      "SQLAlchemy",
      "비동기처리",
      "데이터수집",
      "실시간처리",
      "암호화",
      "Fernet",
      "보안",
      "cryptography",
      "데이터보호"
    ],
    "description": "크롤러 프로젝트에 암호화 시스템을 도입했어요! Fernet을 활용한 대칭키 암호화로 프로젝트 ID를 안전하게 보호하고, CryptoUtil 클래스로 편리하게 관리할 수 있게 되었답니다. 🔒",
    "thumbnail": "/images/fastapi.png",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "암호화 시스템 구현: CryptoUtil 클래스와 프로젝트 ID 보호",
        "level": 1,
        "isMainTopic": true,
        "position": 73.4140625
      },
      {
        "id": "heading-1",
        "text": "1. 암호화가 필요한 이유",
        "level": 2,
        "isMainTopic": true,
        "position": 293.2421875
      },
      {
        "id": "heading-2",
        "text": "2. Fernet 대칭키 암호화란?",
        "level": 2,
        "isMainTopic": true,
        "position": 548.5703125
      },
      {
        "id": "heading-3",
        "text": "3. CryptoUtil 클래스 구현",
        "level": 2,
        "isMainTopic": true,
        "position": 729.3984375
      },
      {
        "id": "heading-4",
        "text": "예시 사용법",
        "level": 1,
        "isMainTopic": true,
        "position": 1271.4921875
      },
      {
        "id": "heading-5",
        "text": "3.1 코드 설명",
        "level": 3,
        "isMainTopic": false,
        "position": 1584.390625
      },
      {
        "id": "heading-6",
        "text": "4. 설정에 암호화 키 추가하기",
        "level": 2,
        "isMainTopic": true,
        "position": 1813.0234375
      },
      {
        "id": "heading-7",
        "text": "환경 변수에서 암호화 키를 가져오거나, 기본값을 설정합니다.",
        "level": 1,
        "isMainTopic": true,
        "position": 1963.1171875
      },
      {
        "id": "heading-8",
        "text": "5. 암호화 시스템의 적용",
        "level": 2,
        "isMainTopic": true,
        "position": 2119.7109375
      },
      {
        "id": "heading-9",
        "text": "6. 마치며",
        "level": 2,
        "isMainTopic": true,
        "position": 2300.5390625
      }
    ],
    "imageHeights": {}
  },
  {
    "id": "manbok",
    "title": "공인중개 웹사이트",
    "content": "<p><img src=\"/images/manbok/manbok.png\" alt=\"2\"></p>\n<h2 id=\"heading-0\">프로젝트 개요</h2>\n<p>토지, 공장, 창고의 매매/임대를 전문으로 하는 공인중개사무소와 원룸, 상가의 매매/임대를 전문으로 하는 공인중개사무소의 통합 웹 플랫폼을 구축합니다. 빅데이터 기반의 부동산 입지 분석과 AI 기반 매물 추천 시스템을 통해 매수인, 매도인, 임대인, 임차인에게 최적화된 부동산 솔루션을 제공하는 것이 목표입니다.</p>\n<h3 id=\"heading-1\">주요 기능</h3>\n<ol>\n<li>\n<p><strong>스마트 매물 관리 시스템</strong></p>\n<ul>\n<li>실시간 매물 등록/수정/삭제</li>\n<li>AI 기반 매물 가격 산정</li>\n<li>매물 상태 자동 업데이트</li>\n<li>고도화된 검색 및 필터링</li>\n<li>VR/AR 매물 투어</li>\n<li>실시간 시세 정보 연동</li>\n</ul>\n</li>\n<li>\n<p><strong>빅데이터 기반 입지 분석 시스템</strong></p>\n<ul>\n<li>GIS 기반 위치 분석</li>\n<li>교통/물류 접근성 분석</li>\n<li>용도지역/구역 법률 검토</li>\n<li>실시간 경제 지표 연동</li>\n<li>환경영향 평가</li>\n<li>주변 인프라 현황 분석</li>\n<li>수요/공급 예측 모델링</li>\n</ul>\n</li>\n<li>\n<p><strong>통합 고객 관리 시스템 (CRM)</strong></p>\n<ul>\n<li>고객 데이터 통합 관리</li>\n<li>AI 기반 고객 매칭</li>\n<li>상담 이력 자동 기록</li>\n<li>관심 매물 패턴 분석</li>\n<li>계약 진행 자동화</li>\n<li>고객 피드백 관리</li>\n</ul>\n</li>\n<li>\n<p><strong>지능형 컨텐츠 관리 시스템</strong></p>\n<ul>\n<li>AI 기반 컨텐츠 생성</li>\n<li>자동 SEO 최적화</li>\n<li>소셜 미디어 연동</li>\n<li>실시간 부동산 뉴스 피드</li>\n<li>맞춤형 뉴스레터 발송</li>\n<li>컨텐츠 성과 분석</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/manbok/manbok.gif\" alt=\"3\"></p>\n<h3 id=\"heading-2\">기술 스택</h3>\n<ul>\n<li>Frontend: Next.js 14, TypeScript, React Query, Recoil</li>\n<li>Backend: NestJS, GraphQL, TypeORM</li>\n<li>Database: PostgreSQL, Redis, Elasticsearch</li>\n<li>AI/ML: TensorFlow, scikit-learn</li>\n<li>Infrastructure: AWS (ECS, RDS, S3, CloudFront)</li>\n<li>DevOps: Docker, Kubernetes, Jenkins, Prometheus</li>\n<li>Analytics: Google Analytics 4, Amplitude</li>\n</ul>\n<h3 id=\"heading-3\">개발 로드맵</h3>\n<ol>\n<li>\n<p>기획 및 설계 (3주)</p>\n<ul>\n<li>요구사항 상세 분석</li>\n<li>UI/UX 프로토타이핑</li>\n<li>데이터 모델링</li>\n<li>시스템 아키텍처 설계</li>\n<li>API 설계 및 문서화</li>\n</ul>\n</li>\n<li>\n<p>프론트엔드 개발 (6주)</p>\n<ul>\n<li>반응형 메인 페이지 구현</li>\n<li>실시간 매물 관리 시스템</li>\n<li>대시보드 및 분석 도구</li>\n<li>VR/AR 매물 뷰어</li>\n<li>성능 최적화</li>\n</ul>\n</li>\n<li>\n<p>백엔드 개발 (6주)</p>\n<ul>\n<li>MSA 기반 API 서버</li>\n<li>실시간 데이터 동기화</li>\n<li>AI 모델 통합</li>\n<li>보안 시스템 구축</li>\n<li>결제 시스템 연동</li>\n</ul>\n</li>\n<li>\n<p>품질 관리 및 배포 (3주)</p>\n<ul>\n<li>자동화된 테스트 구축</li>\n<li>성능 모니터링 시스템</li>\n<li>CI/CD 파이프라인 구축</li>\n<li>무중단 배포 시스템</li>\n<li>장애 대응 체계 수립</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"heading-4\">기대 효과</h3>\n<ol>\n<li>데이터 기반 의사결정 지원</li>\n<li>업무 효율성 300% 향상</li>\n<li>고객 만족도 증대</li>\n<li>매출 증대 효과</li>\n<li>시장 경쟁력 강화</li>\n<li>디지털 전환 가속화</li>\n</ol>\n",
    "date": "2024-03-20",
    "category": "projects",
    "tags": [
      "React",
      " JavaScript"
    ],
    "description": "공인중개 웹사이트 개발",
    "thumbnail": "/images/manbok/manbok.gif",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "프로젝트 개요",
        "level": 2,
        "isMainTopic": true,
        "position": 0
      },
      {
        "id": "heading-1",
        "text": "주요 기능",
        "level": 3,
        "isMainTopic": false,
        "position": 54.4140625
      },
      {
        "id": "heading-2",
        "text": "기술 스택",
        "level": 3,
        "isMainTopic": false,
        "position": 180.546875
      },
      {
        "id": "heading-3",
        "text": "개발 로드맵",
        "level": 3,
        "isMainTopic": false,
        "position": 0
      },
      {
        "id": "heading-4",
        "text": "기대 효과",
        "level": 3,
        "isMainTopic": false,
        "position": 952.984375
      }
    ],
    "imageHeights": {
      "img-0": 18.5,
      "img-3": 18.5
    }
  },
  {
    "id": "mobyn",
    "title": "전자고지 시스템 개발",
    "content": "<h2 id=\"heading-0\">시스템 개요</h2>\n<p>전자고지 시스템은 기업이나 기관에서 발행하는 각종 고지서를 카카오, 네이버, KT 등의 플랫폼을 통해 전자문서로 발송하고 관리하는 통합 솔루션입니다.</p>\n<h3 id=\"heading-1\">주요 기능</h3>\n<ol>\n<li><strong>전자고지서 발송 관리</strong>\n<ul>\n<li>대상자 그룹 관리</li>\n<li>발송 이력 추적</li>\n<li>멀티 플랫폼 발송 설정</li>\n<li>발송 상태 모니터링</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/mobyn/mobyn_document_payment.gif\" alt=\"3\">\n(결제 정보 관리 및 처리)</p>\n<ol start=\"2\">\n<li><strong>결제 시스템 연동</strong>\n<ul>\n<li>NICEpay 결제 모듈 통합</li>\n<li>실시간 결제 상태 확인</li>\n<li>결제 이력 관리</li>\n<li>환불 프로세스 지원</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/mobyn/mobyn_stats_1.gif\" alt=\"5\">\n(일별/월별 발송량 통계 분석)</p>\n<p><img src=\"/images/mobyn/mobyn_stats_2.gif\" alt=\"6\">\n(플랫폼별 발송 성공률 분석)</p>\n<p><img src=\"/images/mobyn/mobyn_stats_3.gif\" alt=\"7\">\n(결제 전환율 및 매출 분석)</p>\n<p><img src=\"/images/mobyn/mobyn_stats_4.gif\" alt=\"8\">\n(기간별 상세 통계 리포트)</p>\n<ol start=\"3\">\n<li><strong>통계 대시보드</strong></li>\n</ol>\n<ul>\n<li>발송 현황 분석</li>\n<li>플랫폼별 성공률 추적</li>\n<li>결제 전환율 모니터링</li>\n<li>기간별 통계 리포트</li>\n</ul>\n<p><img src=\"/images/mobyn/mobyn_document_management.gif\" alt=\"2\">\n(문서 템플릿 관리 및 편집)</p>\n<ol start=\"4\">\n<li><strong>발송 관리 시스템</strong>\n<ul>\n<li>대상자 그룹 관리</li>\n<li>발송 이력 추적</li>\n<li>멀티 플랫폼 발송 설정</li>\n<li>발송 상태 모니터링</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/mobyn/mobyn_status.gif\" alt=\"9\">\n(실시간 발송 상태 모니터링)</p>\n<ol start=\"5\">\n<li><strong>발송 제목 및 내용 관리</strong>\n<ul>\n<li>발송 제목 및 내용 관리</li>\n<li>대상자 그룹 관리</li>\n<li>발송 이력 추적</li>\n<li>멀티 플랫폼 발송 설정</li>\n<li>발송 상태 모니터링</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/mobyn/mobyn_subject.gif\" alt=\"10\">\n(발송 제목 및 내용 관리)</p>\n<ol start=\"6\">\n<li><strong>발송 대상자 관리</strong>\n<ul>\n<li>대상자 그룹 관리</li>\n<li>발송 이력 추적</li>\n<li>멀티 플랫폼 발송 설정</li>\n<li>발송 상태 모니터링</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/mobyn/mobyn_send.gif\" alt=\"4\">\n(대량 발송 프로세스 실행)</p>\n<ol start=\"7\">\n<li><strong>발송 예약 관리</strong>\n<ul>\n<li>발송 예약 관리</li>\n<li>발송 이력 추적</li>\n<li>멀티 플랫폼 발송 설정</li>\n<li>발송 상태 모니터링</li>\n</ul>\n</li>\n</ol>\n",
    "date": "2024-03-20",
    "category": "projects",
    "tags": [
      "React",
      "NicePay",
      "TypeScript",
      "React Hook Form"
    ],
    "description": "카카오/네이버/KT 전자문서 발송 및 통계 시스템",
    "thumbnail": "/images/mobyn/mobyn_dashboard.gif",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "시스템 개요",
        "level": 2,
        "isMainTopic": true,
        "position": 19.9140625
      },
      {
        "id": "heading-1",
        "text": "주요 기능",
        "level": 3,
        "isMainTopic": false,
        "position": 126.546875
      }
    ],
    "imageHeights": {
      "img-2": 18.5,
      "img-3": 18.5,
      "img-4": 18.5,
      "img-5": 18.5,
      "img-6": 18.5,
      "img-7": 18.5,
      "img-8": 18.5,
      "img-9": 18.5,
      "img-10": 18.5
    }
  },
  {
    "id": "signage_android_ver_1",
    "title": "React Native Expo APK 빌드 삽질기",
    "content": "<h3 id=\"heading-0\">React Native Expo로 APK 빌드하면서 삽질한 이야기</h3>\n<p>안녕하세요, 여러분! 오늘은 <strong>React Native Expo를 이용해서 APK 빌드를 진행하면서 겪었던 삽질기</strong>를 공유해보려고 합니다. 특히 <code>http://</code> API 사용 문제로 고생했던 경험이 있는데, 혹시 비슷한 문제를 겪고 있는 분이 있다면 참고가 되길 바랍니다. 😊</p>\n<hr>\n<h2 id=\"heading-1\">📦 첫 번째 빌드 – <code>development</code> 빌드</h2>\n<p>처음에는 Expo 공식 문서를 참고하면서 <code>eas build</code>를 진행했어요. <code>eas.json</code>을 아래처럼 설정하고 빌드 명령어를 실행했죠.</p>\n<pre><code class=\"language-json\">{\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\"\n    },\n    \"preview\": {\n      \"distribution\": \"internal\"\n    },\n    \"production\": {}\n  }\n}\n</code></pre>\n<pre><code class=\"language-bash\">eas build --profile development --platform android\n</code></pre>\n<p>빌드 완료 후 Expo.dev에서 APK를 다운로드하고 앱을 실행했더니...<br>\n🤦‍♂️ <strong>\"development build\"라서 Expo Go 환경에서만 실행 가능하네요.</strong><br>\n아, 이런... 이게 아니었죠.</p>\n<p>그래서 <code>development</code>를 빼고 다시 빌드했습니다.</p>\n<pre><code class=\"language-bash\">eas build --platform android\n</code></pre>\n<p>그러나 이번엔 <strong>AAB 파일이 생성</strong>되었습니다.<br>\nAAB는 구글 플레이 스토어에 배포할 때 쓰는 포맷이어서 <strong>로컬에서 APK 설치가 불가능</strong>합니다.<br>\n(저는 단순히 APK를 생성하고 싶었을 뿐인데...)</p>\n<hr>\n<h2 id=\"heading-2\">🛠 두 번째 빌드 – APK 만들기</h2>\n<p>APK를 생성하기 위해 아래와 같이 <code>eas.json</code>을 수정했습니다.</p>\n<pre><code class=\"language-json\">{\n  \"build\": {\n    \"preview\": {\n      \"android\": {\n        \"buildType\": \"apk\"\n      }\n    }\n  }\n}\n</code></pre>\n<p>그리고 다시 빌드!</p>\n<pre><code class=\"language-bash\">eas build -p android --profile preview\n</code></pre>\n<p>드디어 APK가 생성되었습니다! 🎉<br>\n그런데...<br>\n🤦‍♂️ <strong>API에서 데이터를 불러오지 않습니다.</strong><br>\n\"Network Error\"가 발생하면서 데이터가 표시되지 않았어요.</p>\n<hr>\n<h2 id=\"heading-3\">🤔 문제 분석 – <code>http://</code> API 차단?!</h2>\n<p>로그를 찍어보니 <code>AxiosError: Network Error</code>가 발생했더군요.<br>\n구글링과 ChatGPT 검색 결과, <strong>Android 9(Pie) 이상에서는 기본적으로 HTTP 트래픽이 차단</strong>된다는 사실을 알게 됐습니다.</p>\n<p>이를 해결하려면 <strong>AndroidManifest.xml에 <code>android:usesCleartextTraffic=\"true\"</code>를 추가해야 한다</strong>는군요.<br>\nExpo에서는 <code>app.json</code>을 수정해야 합니다.</p>\n<pre><code class=\"language-json\">{\n  \"expo\": {\n    \"android\": {\n      \"useCleartextTraffic\": true,\n      \"permissions\": [\"INTERNET\", \"ACCESS_NETWORK_STATE\"]\n    }\n  }\n}\n</code></pre>\n<p>수정 후 다시 빌드했지만...<br>\n<strong>또 실패</strong>. 😭<br>\n이번에는 <code>fetch</code>로 바꿔도 같은 <code>Network request failed</code> 에러가 발생했습니다.</p>\n<hr>\n<h2 id=\"heading-4\">🔍 최종 해결 – <code>expo-build-properties</code> 플러그인 설치</h2>\n<p>결국 Stack Overflow를 뒤지다 해결 방법을 찾았습니다.<br>\nExpo에서는 <strong><code>expo-build-properties</code> 플러그인을 설치하고, <code>useCleartextTraffic</code> 설정을 추가</strong>해야 한다는 것이었어요.</p>\n<pre><code class=\"language-bash\">npx expo install expo-build-properties\n</code></pre>\n<p>그리고 <code>app.json</code>에서 플러그인을 추가했습니다.</p>\n<pre><code class=\"language-json\">\"plugins\": [\n  [\n    \"expo-build-properties\",\n    {\n      \"android\": {\n        \"usesCleartextTraffic\": true\n      }\n    }\n  ]\n]\n</code></pre>\n<p>다시 빌드 후 APK를 디컴파일(<code>apktool</code> 사용)해서 확인해보니...<br>\n🤯 <strong><code>useCleartextTraffic</code>이 적용되지 않았습니다!!!</strong><br>\n이게 무슨 일이야...</p>\n<p>혹시 철자가 틀렸나 싶어서 다시 보니,<br>\n<code>useCleartextTraffic</code> → <strong><code>usesCleartextTraffic</code>(s 추가됨)</strong></p>\n<p>철자 수정 후 다시 빌드하니...<br>\n🎉 <strong>드디어 성공!!!</strong></p>\n<hr>\n<h2 id=\"heading-5\">🚨 추가 문제 – 에뮬레이터 연결 안됨?!</h2>\n<p>그런데 이걸 해결하고 보니 <strong>에뮬레이터에서 API 요청이 안 되는 문제가 발생</strong>했습니다.<br>\n해결 방법은 아직 찾고 있는 중인데, Expo의 네트워크 설정을 좀 더 살펴봐야 할 것 같습니다.</p>\n<hr>\n<h2 id=\"heading-6\">📌 결론 – 삽질하면서 배운 것</h2>\n<ol>\n<li><strong>APK 빌드는 <code>buildType: \"apk\"</code> 설정을 추가해야 함</strong></li>\n<li><strong>Android 9 이상에서 <code>http://</code> API를 사용하려면 <code>usesCleartextTraffic: true</code> 설정이 필요함</strong></li>\n<li><strong>Expo에서는 <code>expo-build-properties</code> 플러그인을 설치해야 함</strong></li>\n<li><strong>오타 조심... <code>useCleartextTraffic</code>이 아니라 <code>usesCleartextTraffic</code>(s 있음)</strong></li>\n</ol>\n<p>이제야 빌드 과정이 익숙해진 것 같네요.<br>\n혹시 비슷한 문제를 겪고 있다면 참고하셔서 빠르게 해결하길 바랍니다! 😆</p>\n",
    "date": "2025-02-12",
    "category": "mobile",
    "tags": [
      "React Native",
      "Expo",
      "Android",
      "Mobile"
    ],
    "description": "React Native Expo로 APK 빌드 시 HTTP API 사용 문제와 해결 과정에 대한 상세한 가이드",
    "thumbnail": "/images/react-native.png",
    "tocItems": [
      {
        "id": "heading-0",
        "text": "React Native Expo로 APK 빌드하면서 삽질한 이야기",
        "level": 3,
        "isMainTopic": false,
        "position": 18.71875
      },
      {
        "id": "heading-1",
        "text": "📦 첫 번째 빌드 – development 빌드",
        "level": 2,
        "isMainTopic": true,
        "position": 158.3515625
      },
      {
        "id": "heading-2",
        "text": "🛠 두 번째 빌드 – APK 만들기",
        "level": 2,
        "isMainTopic": true,
        "position": 727.6796875
      },
      {
        "id": "heading-3",
        "text": "🤔 문제 분석 – http:// API 차단?!",
        "level": 2,
        "isMainTopic": true,
        "position": 1151.0078125
      },
      {
        "id": "heading-4",
        "text": "🔍 최종 해결 – expo-build-properties 플러그인 설치",
        "level": 2,
        "isMainTopic": true,
        "position": 1565.8359375
      },
      {
        "id": "heading-5",
        "text": "🚨 추가 문제 – 에뮬레이터 연결 안됨?!",
        "level": 2,
        "isMainTopic": true,
        "position": 2133.6640625
      },
      {
        "id": "heading-6",
        "text": "📌 결론 – 삽질하면서 배운 것",
        "level": 2,
        "isMainTopic": true,
        "position": 2261.9921875
      }
    ],
    "imageHeights": {}
  }
]