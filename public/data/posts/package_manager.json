{
  "id": "package_manager",
  "title": "JavaScript 패키지 매니저 비교",
  "content": "\r\n---\r\n\r\n# JavaScript 패키지 매니저 비교: npm, Yarn, pnpm\r\n\r\n안녕하세요, 개발자 여러분! 😊 오늘은 JavaScript 개발에서 필수적으로 사용하는 **패키지 매니저**에 대해 이야기해볼까 합니다. 아마도 대부분의 개발자분들이 `npm install`을 한 번쯤은 실행해보셨을 텐데요. 하지만 최근에는 `Yarn`과 `pnpm`도 많이 사용되고 있어서, 각각의 특징을 제대로 알고 선택하는 것이 중요합니다.\r\n\r\n그래서! **npm, Yarn, pnpm**을 비교하면서 각각의 장점과 단점을 살펴보도록 하겠습니다. 🚀\r\n\r\n---\r\n\r\n## 1. npm (Node Package Manager)\r\n\r\n**npm**은 Node.js를 설치하면 자동으로 함께 설치되는 기본 패키지 매니저입니다. 전 세계에서 가장 널리 사용되며, 수많은 패키지를 손쉽게 설치하고 관리할 수 있습니다.\r\n\r\n### ✅ 장점\r\n\r\n- **Node.js에 기본 내장**되어 있어서 따로 설치할 필요가 없습니다.\r\n- **방대한 생태계**를 가지고 있어, 원하는 패키지를 쉽게 찾을 수 있습니다.\r\n\r\n### ❌ 단점\r\n\r\n- `node_modules` 폴더가 굉장히 커질 수 있어 **프로젝트 관리가 어려워질 수 있음**.\r\n- 패키지 간의 의존성 문제가 발생할 가능성이 있어 **관리의 어려움**이 있음.\r\n\r\n> 📝 **언제 npm을 선택하면 좋을까요?**\r\n>\r\n> - 별도의 패키지 매니저를 설치하고 싶지 않다면.\r\n> - 가장 기본적인 환경에서 개발하고 싶다면.\r\n\r\n---\r\n\r\n## 2. Yarn (Yet Another Resource Negotiator)\r\n\r\n**Yarn**은 npm의 단점을 보완하기 위해 등장한 패키지 매니저입니다. **속도와 보안성**이 강화되어 많은 기업들이 사용하고 있습니다.\r\n\r\n### ✅ 장점\r\n\r\n- **lock 파일 (`yarn.lock`)을 통한 버전 관리**로 안정성이 뛰어납니다.\r\n- **보안성이 향상**되어 신뢰할 수 있는 패키지 설치가 가능.\r\n- **병렬 설치**를 지원하여 패키지를 더 빠르게 다운로드할 수 있음.\r\n\r\n### ❌ 단점\r\n\r\n- `yarn.lock` 파일이 npm과 호환되지 않을 수 있어 **모듈 충돌 가능성이 있음**.\r\n- npm보다 **더 많은 디스크 공간과 메모리를 사용**할 수도 있음.\r\n\r\n> 📝 **언제 Yarn을 선택하면 좋을까요?**\r\n>\r\n> - 대규모 프로젝트에서 **의존성 충돌을 최소화**하고 싶다면.\r\n> - 더 빠르고 안전한 패키지 관리를 원한다면.\r\n\r\n---\r\n\r\n## 3. pnpm (Performant npm)\r\n\r\n**pnpm**은 npm과 Yarn의 단점을 개선하고, 더 효율적인 패키지 관리를 목표로 한 패키지 매니저입니다. 특히 디스크 공간을 절약하면서도 더 빠른 속도를 제공합니다.\r\n\r\n### ✅ 장점\r\n\r\n- **디스크 공간을 절약**하는 구조로 패키지를 설치하여 `node_modules` 폴더가 커지는 문제를 방지.\r\n- npm보다 **약 2배 빠른 설치 속도**를 자랑함.\r\n- **중첩된 `node_modules` 구조**를 활용하여 의존성 문제를 줄일 수 있음.\r\n\r\n### ❌ 단점\r\n\r\n- 상대적으로 npm과 Yarn보다 **사용자가 적어 정보가 부족할 수도 있음**.\r\n\r\n> 📝 **언제 pnpm을 선택하면 좋을까요?**\r\n>\r\n> - **빠르고 가벼운 패키지 매니저**가 필요하다면.\r\n> - 여러 프로젝트에서 패키지를 공유하여 **디스크 공간을 절약하고 싶다면**.\r\n\r\n---\r\n\r\n## 4. 기능 비교\r\n\r\n| 기능                       | pnpm        | Yarn        | npm |\r\n| -------------------------- | ----------- | ----------- | --- |\r\n| 워크스페이스 지원          | ✅          | ✅          | ✅  |\r\n| Isolated node_modules      | ✅ (기본값) | ✅          | ✅  |\r\n| 피어 자동 설치             | ✅          | ❌          | ✅  |\r\n| Plug'n'Play                | ✅          | ✅ (기본값) | ❌  |\r\n| Zero-Installs              | ❌          | ✅          | ❌  |\r\n| 의존성 패치                | ✅          | ✅          | ❌  |\r\n| Content-addressable 저장소 | ✅          | ❌          | ❌  |\r\n\r\n---\r\n\r\n## 5. 결론: 어떤 패키지 매니저를 선택해야 할까?\r\n\r\n**📌 npm을 선택해야 할 때**\r\n\r\n- 추가 설치 없이 기본적인 환경에서 개발하고 싶다면.\r\n- 대규모 생태계를 활용하고 싶다면.\r\n\r\n**📌 Yarn을 선택해야 할 때**\r\n\r\n- 빠르고 안정적인 패키지 관리를 원한다면.\r\n- 팀 프로젝트에서 의존성을 철저하게 관리하고 싶다면.\r\n\r\n**📌 pnpm을 선택해야 할 때**\r\n\r\n- 디스크 공간을 절약하면서 빠르게 설치하고 싶다면.\r\n- 최신 기술을 적극적으로 활용하고 싶다면.\r\n\r\n---\r\n\r\n## 🔥 마무리하며\r\n\r\n각 패키지 매니저는 저마다의 장점과 단점을 가지고 있습니다. 팀 환경, 프로젝트 규모, 그리고 필요한 기능을 고려하여 **가장 적합한 패키지 매니저를 선택하는 것이 중요합니다!** 🚀\r\n",
  "date": "2025-03-20",
  "category": "architecture",
  "tags": [
    "JavaScript",
    "npm",
    "Yarn",
    "pnpm",
    "package manager",
    "Node.js"
  ],
  "thumbnail": "",
  "translations": {
    "ko": {
      "title": "JavaScript 패키지 매니저 비교",
      "description": "npm, Yarn, pnpm 패키지 매니저의 특징과 장단점 비교",
      "content": "<hr>\n<h1 id=\"heading-0\">JavaScript 패키지 매니저 비교: npm, Yarn, pnpm</h1>\n<p>안녕하세요, 개발자 여러분! 😊 오늘은 JavaScript 개발에서 필수적으로 사용하는 <strong>패키지 매니저</strong>에 대해 이야기해볼까 합니다. 아마도 대부분의 개발자분들이 <code>npm install</code>을 한 번쯤은 실행해보셨을 텐데요. 하지만 최근에는 <code>Yarn</code>과 <code>pnpm</code>도 많이 사용되고 있어서, 각각의 특징을 제대로 알고 선택하는 것이 중요합니다.</p>\n<p>그래서! <strong>npm, Yarn, pnpm</strong>을 비교하면서 각각의 장점과 단점을 살펴보도록 하겠습니다. 🚀</p>\n<hr>\n<h2 id=\"heading-1\">1. npm (Node Package Manager)</h2>\n<p><strong>npm</strong>은 Node.js를 설치하면 자동으로 함께 설치되는 기본 패키지 매니저입니다. 전 세계에서 가장 널리 사용되며, 수많은 패키지를 손쉽게 설치하고 관리할 수 있습니다.</p>\n<h3 id=\"heading-2\">✅ 장점</h3>\n<ul>\n<li><strong>Node.js에 기본 내장</strong>되어 있어서 따로 설치할 필요가 없습니다.</li>\n<li><strong>방대한 생태계</strong>를 가지고 있어, 원하는 패키지를 쉽게 찾을 수 있습니다.</li>\n</ul>\n<h3 id=\"heading-3\">❌ 단점</h3>\n<ul>\n<li><code>node_modules</code> 폴더가 굉장히 커질 수 있어 <strong>프로젝트 관리가 어려워질 수 있음</strong>.</li>\n<li>패키지 간의 의존성 문제가 발생할 가능성이 있어 <strong>관리의 어려움</strong>이 있음.</li>\n</ul>\n<blockquote>\n<p>📝 <strong>언제 npm을 선택하면 좋을까요?</strong></p>\n<ul>\n<li>별도의 패키지 매니저를 설치하고 싶지 않다면.</li>\n<li>가장 기본적인 환경에서 개발하고 싶다면.</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"heading-4\">2. Yarn (Yet Another Resource Negotiator)</h2>\n<p><strong>Yarn</strong>은 npm의 단점을 보완하기 위해 등장한 패키지 매니저입니다. <strong>속도와 보안성</strong>이 강화되어 많은 기업들이 사용하고 있습니다.</p>\n<h3 id=\"heading-5\">✅ 장점</h3>\n<ul>\n<li><strong>lock 파일 (<code>yarn.lock</code>)을 통한 버전 관리</strong>로 안정성이 뛰어납니다.</li>\n<li><strong>보안성이 향상</strong>되어 신뢰할 수 있는 패키지 설치가 가능.</li>\n<li><strong>병렬 설치</strong>를 지원하여 패키지를 더 빠르게 다운로드할 수 있음.</li>\n</ul>\n<h3 id=\"heading-6\">❌ 단점</h3>\n<ul>\n<li><code>yarn.lock</code> 파일이 npm과 호환되지 않을 수 있어 <strong>모듈 충돌 가능성이 있음</strong>.</li>\n<li>npm보다 <strong>더 많은 디스크 공간과 메모리를 사용</strong>할 수도 있음.</li>\n</ul>\n<blockquote>\n<p>📝 <strong>언제 Yarn을 선택하면 좋을까요?</strong></p>\n<ul>\n<li>대규모 프로젝트에서 <strong>의존성 충돌을 최소화</strong>하고 싶다면.</li>\n<li>더 빠르고 안전한 패키지 관리를 원한다면.</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"heading-7\">3. pnpm (Performant npm)</h2>\n<p><strong>pnpm</strong>은 npm과 Yarn의 단점을 개선하고, 더 효율적인 패키지 관리를 목표로 한 패키지 매니저입니다. 특히 디스크 공간을 절약하면서도 더 빠른 속도를 제공합니다.</p>\n<h3 id=\"heading-8\">✅ 장점</h3>\n<ul>\n<li><strong>디스크 공간을 절약</strong>하는 구조로 패키지를 설치하여 <code>node_modules</code> 폴더가 커지는 문제를 방지.</li>\n<li>npm보다 <strong>약 2배 빠른 설치 속도</strong>를 자랑함.</li>\n<li><strong>중첩된 <code>node_modules</code> 구조</strong>를 활용하여 의존성 문제를 줄일 수 있음.</li>\n</ul>\n<h3 id=\"heading-9\">❌ 단점</h3>\n<ul>\n<li>상대적으로 npm과 Yarn보다 <strong>사용자가 적어 정보가 부족할 수도 있음</strong>.</li>\n</ul>\n<blockquote>\n<p>📝 <strong>언제 pnpm을 선택하면 좋을까요?</strong></p>\n<ul>\n<li><strong>빠르고 가벼운 패키지 매니저</strong>가 필요하다면.</li>\n<li>여러 프로젝트에서 패키지를 공유하여 <strong>디스크 공간을 절약하고 싶다면</strong>.</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"heading-10\">4. 기능 비교</h2>\n<table class=\"markdown-table\">\n<thead>\n<tr>\n<th>기능</th>\n<th>pnpm</th>\n<th>Yarn</th>\n<th>npm</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>워크스페이스 지원</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>Isolated node_modules</td>\n<td>✅ (기본값)</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>피어 자동 설치</td>\n<td>✅</td>\n<td>❌</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>Plug'n'Play</td>\n<td>✅</td>\n<td>✅ (기본값)</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>Zero-Installs</td>\n<td>❌</td>\n<td>✅</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>의존성 패치</td>\n<td>✅</td>\n<td>✅</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>Content-addressable 저장소</td>\n<td>✅</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"heading-11\">5. 결론: 어떤 패키지 매니저를 선택해야 할까?</h2>\n<p><strong>📌 npm을 선택해야 할 때</strong></p>\n<ul>\n<li>추가 설치 없이 기본적인 환경에서 개발하고 싶다면.</li>\n<li>대규모 생태계를 활용하고 싶다면.</li>\n</ul>\n<p><strong>📌 Yarn을 선택해야 할 때</strong></p>\n<ul>\n<li>빠르고 안정적인 패키지 관리를 원한다면.</li>\n<li>팀 프로젝트에서 의존성을 철저하게 관리하고 싶다면.</li>\n</ul>\n<p><strong>📌 pnpm을 선택해야 할 때</strong></p>\n<ul>\n<li>디스크 공간을 절약하면서 빠르게 설치하고 싶다면.</li>\n<li>최신 기술을 적극적으로 활용하고 싶다면.</li>\n</ul>\n<hr>\n<h2 id=\"heading-12\">🔥 마무리하며</h2>\n<p>각 패키지 매니저는 저마다의 장점과 단점을 가지고 있습니다. 팀 환경, 프로젝트 규모, 그리고 필요한 기능을 고려하여 <strong>가장 적합한 패키지 매니저를 선택하는 것이 중요합니다!</strong> 🚀</p>\n",
      "tocItems": [
        {
          "id": "heading-0",
          "text": "JavaScript 패키지 매니저 비교: npm, Yarn, pnpm",
          "level": 1,
          "isMainTopic": true,
          "position": 0
        },
        {
          "id": "heading-1",
          "text": "1. npm (Node Package Manager)",
          "level": 2,
          "isMainTopic": true,
          "position": 50
        },
        {
          "id": "heading-2",
          "text": "✅ 장점",
          "level": 3,
          "isMainTopic": false,
          "position": 100
        },
        {
          "id": "heading-3",
          "text": "❌ 단점",
          "level": 3,
          "isMainTopic": false,
          "position": 150
        },
        {
          "id": "heading-4",
          "text": "2. Yarn (Yet Another Resource Negotiator)",
          "level": 2,
          "isMainTopic": true,
          "position": 200
        },
        {
          "id": "heading-5",
          "text": "✅ 장점",
          "level": 3,
          "isMainTopic": false,
          "position": 250
        },
        {
          "id": "heading-6",
          "text": "❌ 단점",
          "level": 3,
          "isMainTopic": false,
          "position": 300
        },
        {
          "id": "heading-7",
          "text": "3. pnpm (Performant npm)",
          "level": 2,
          "isMainTopic": true,
          "position": 350
        },
        {
          "id": "heading-8",
          "text": "✅ 장점",
          "level": 3,
          "isMainTopic": false,
          "position": 400
        },
        {
          "id": "heading-9",
          "text": "❌ 단점",
          "level": 3,
          "isMainTopic": false,
          "position": 450
        },
        {
          "id": "heading-10",
          "text": "4. 기능 비교",
          "level": 2,
          "isMainTopic": true,
          "position": 500
        },
        {
          "id": "heading-11",
          "text": "5. 결론: 어떤 패키지 매니저를 선택해야 할까?",
          "level": 2,
          "isMainTopic": true,
          "position": 550
        },
        {
          "id": "heading-12",
          "text": "🔥 마무리하며",
          "level": 2,
          "isMainTopic": true,
          "position": 600
        }
      ]
    },
    "en": {
      "title": "Comparing JavaScript Package Managers",
      "description": "Comparing features and trade-offs of npm, Yarn, and pnpm package managers",
      "content": "<hr>\n<h1 id=\"heading-0\">Comparing JavaScript Package Managers: npm, Yarn, pnpm</h1>\n<p>Hello developers! 😊 Today, let's talk about <strong>package managers</strong> that are essential in JavaScript development. While most developers have probably run <code>npm install</code> at least once, <code>Yarn</code> and <code>pnpm</code> are also becoming increasingly popular. It's important to understand the characteristics of each to make the right choice.</p>\n<p>So! Let's compare <strong>npm, Yarn, and pnpm</strong> by looking at their advantages and disadvantages. 🚀</p>\n<hr>\n<h2 id=\"heading-1\">1. npm (Node Package Manager)</h2>\n<p><strong>npm</strong> is the default package manager that comes bundled with Node.js. It's the most widely used package manager worldwide, allowing easy installation and management of numerous packages.</p>\n<h3 id=\"heading-2\">✅ Advantages</h3>\n<ul>\n<li><strong>Built into Node.js</strong> so no separate installation is needed.</li>\n<li>Has a <strong>vast ecosystem</strong>, making it easy to find desired packages.</li>\n</ul>\n<h3 id=\"heading-3\">❌ Disadvantages</h3>\n<ul>\n<li>The <code>node_modules</code> folder can become very large, making <strong>project management difficult</strong>.</li>\n<li>Potential dependency issues can lead to <strong>management challenges</strong>.</li>\n</ul>\n<blockquote>\n<p>📝 <strong>When should you choose npm?</strong></p>\n<ul>\n<li>When you don't want to install a separate package manager.</li>\n<li>When you want to develop in the most basic environment.</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"heading-4\">2. Yarn (Yet Another Resource Negotiator)</h2>\n<p><strong>Yarn</strong> is a package manager created to address npm's shortcomings. Many companies use it for its enhanced <strong>speed and security</strong>.</p>\n<h3 id=\"heading-5\">✅ Advantages</h3>\n<ul>\n<li>Excellent stability through <strong>version management with lock files</strong> (<code>yarn.lock</code>).</li>\n<li><strong>Enhanced security</strong> enables installation of trusted packages.</li>\n<li>Supports <strong>parallel installation</strong> for faster package downloads.</li>\n</ul>\n<h3 id=\"heading-6\">❌ Disadvantages</h3>\n<ul>\n<li><code>yarn.lock</code> files may not be compatible with npm, leading to <strong>potential module conflicts</strong>.</li>\n<li>May use <strong>more disk space and memory</strong> than npm.</li>\n</ul>\n<blockquote>\n<p>📝 <strong>When should you choose Yarn?</strong></p>\n<ul>\n<li>When you want to <strong>minimize dependency conflicts</strong> in large projects.</li>\n<li>When you need faster and more secure package management.</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"heading-7\">3. pnpm (Performant npm)</h2>\n<p><strong>pnpm</strong> is a package manager aimed at improving upon npm and Yarn's shortcomings, offering more efficient package management. It provides faster speeds while saving disk space.</p>\n<h3 id=\"heading-8\">✅ Advantages</h3>\n<ul>\n<li>Prevents <code>node_modules</code> bloat through a <strong>disk space-saving</strong> structure.</li>\n<li><strong>About twice as fast</strong> as npm for installations.</li>\n<li>Reduces dependency issues using a <strong>nested <code>node_modules</code> structure</strong>.</li>\n</ul>\n<h3 id=\"heading-9\">❌ Disadvantages</h3>\n<ul>\n<li>Having relatively fewer users than npm and Yarn means <strong>potentially less available information</strong>.</li>\n</ul>\n<blockquote>\n<p>📝 <strong>When should you choose pnpm?</strong></p>\n<ul>\n<li>When you need a <strong>fast and lightweight package manager</strong>.</li>\n<li>When you want to <strong>save disk space</strong> by sharing packages across multiple projects.</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"heading-10\">4. Feature Comparison</h2>\n<table class=\"markdown-table\">\n<thead>\n<tr>\n<th>Feature</th>\n<th>pnpm</th>\n<th>Yarn</th>\n<th>npm</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Workspace Support</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>Isolated node_modules</td>\n<td>✅ (default)</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>Auto Peer Installation</td>\n<td>✅</td>\n<td>❌</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>Plug'n'Play</td>\n<td>✅</td>\n<td>✅ (default)</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>Zero-Installs</td>\n<td>❌</td>\n<td>✅</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>Dependency Patching</td>\n<td>✅</td>\n<td>✅</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>Content-addressable Store</td>\n<td>✅</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"heading-11\">5. Conclusion: Which Package Manager Should You Choose?</h2>\n<p><strong>📌 Choose npm when</strong></p>\n<ul>\n<li>You want to develop in a basic environment without additional installations.</li>\n<li>You want to leverage a large ecosystem.</li>\n</ul>\n<p><strong>📌 Choose Yarn when</strong></p>\n<ul>\n<li>You want fast and stable package management.</li>\n<li>You need rigorous dependency management in team projects.</li>\n</ul>\n<p><strong>📌 Choose pnpm when</strong></p>\n<ul>\n<li>You want fast installation while saving disk space.</li>\n<li>You want to actively utilize the latest technology.</li>\n</ul>\n<hr>\n<h2 id=\"heading-12\">🔥 Final Thoughts</h2>\n<p>Each package manager has its own strengths and weaknesses. It's important to <strong>choose the most suitable package manager</strong> considering your team environment, project scale, and required features! 🚀</p>\n",
      "tocItems": [
        {
          "id": "heading-0",
          "text": "Comparing JavaScript Package Managers: npm, Yarn, pnpm",
          "level": 1,
          "isMainTopic": true,
          "position": 0
        },
        {
          "id": "heading-1",
          "text": "1. npm (Node Package Manager)",
          "level": 2,
          "isMainTopic": true,
          "position": 50
        },
        {
          "id": "heading-2",
          "text": "✅ Advantages",
          "level": 3,
          "isMainTopic": false,
          "position": 100
        },
        {
          "id": "heading-3",
          "text": "❌ Disadvantages",
          "level": 3,
          "isMainTopic": false,
          "position": 150
        },
        {
          "id": "heading-4",
          "text": "2. Yarn (Yet Another Resource Negotiator)",
          "level": 2,
          "isMainTopic": true,
          "position": 200
        },
        {
          "id": "heading-5",
          "text": "✅ Advantages",
          "level": 3,
          "isMainTopic": false,
          "position": 250
        },
        {
          "id": "heading-6",
          "text": "❌ Disadvantages",
          "level": 3,
          "isMainTopic": false,
          "position": 300
        },
        {
          "id": "heading-7",
          "text": "3. pnpm (Performant npm)",
          "level": 2,
          "isMainTopic": true,
          "position": 350
        },
        {
          "id": "heading-8",
          "text": "✅ Advantages",
          "level": 3,
          "isMainTopic": false,
          "position": 400
        },
        {
          "id": "heading-9",
          "text": "❌ Disadvantages",
          "level": 3,
          "isMainTopic": false,
          "position": 450
        },
        {
          "id": "heading-10",
          "text": "4. Feature Comparison",
          "level": 2,
          "isMainTopic": true,
          "position": 500
        },
        {
          "id": "heading-11",
          "text": "5. Conclusion: Which Package Manager Should You Choose?",
          "level": 2,
          "isMainTopic": true,
          "position": 550
        },
        {
          "id": "heading-12",
          "text": "🔥 Final Thoughts",
          "level": 2,
          "isMainTopic": true,
          "position": 600
        }
      ]
    }
  },
  "imageHeights": {}
}