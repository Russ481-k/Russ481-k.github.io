{
  "id": "entasys_5",
  "title": "Entasys",
  "content": "\n# 운영 및 디버깅 가이드\n\n## 1. 환경 설정\n\n### 1.1 주요 설정값\n\n```typescript\ninterface SystemConfig {\n  // 다운로드 관련 설정\n  download: {\n    maxConcurrent: number; // 동시 다운로드 수\n    chunkSize: number; // 청크 크기 (bytes)\n    tempDir: string; // 임시 파일 저장 경로\n    timeout: number; // 타임아웃 (ms)\n  };\n\n  // OpenSearch 설정\n  opensearch: {\n    nodes: string[]; // 노드 주소 목록\n    maxRetries: number; // 최대 재시도 횟수\n    requestTimeout: number; // 요청 타임아웃\n    scrollTimeout: string; // 스크롤 타임아웃\n  };\n\n  // 메모리 관련 설정\n  memory: {\n    maxHeapSize: number; // 최대 힙 사이즈\n    gcInterval: number; // GC 간격\n    warningThreshold: number; // 경고 임계값\n  };\n}\n```\n\n### 1.2 환경변수\n\n```bash\n# .env 예시\nNODE_ENV=production\nLOG_LEVEL=info\nMAX_CONCURRENT_DOWNLOADS=5\nCHUNK_SIZE=5242880\nTEMP_DIR=/tmp/downloads\nOPENSEARCH_NODES=[\"http://opensearch1:9200\",\"http://opensearch2:9200\"]\nMAX_HEAP_SIZE=4096\nGC_INTERVAL=30000\n```\n\n## 2. 로깅 전략\n\n### 2.1 로그 설정\n\n```typescript\nconst logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || \"info\",\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.json()\n  ),\n  transports: [\n    new winston.transports.File({\n      filename: \"error.log\",\n      level: \"error\",\n      maxsize: 5242880,\n      maxFiles: 5,\n    }),\n    new winston.transports.File({\n      filename: \"combined.log\",\n      maxsize: 10485760,\n      maxFiles: 10,\n    }),\n  ],\n});\n```\n\n### 2.2 주요 로깅 포인트\n\n```typescript\nclass LoggingPoints {\n  static downloadStart(downloadId: string, params: DownloadParams) {\n    logger.info(\"Download started\", {\n      downloadId,\n      params,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  static chunkProcessing(downloadId: string, chunkId: string, status: string) {\n    logger.debug(\"Chunk processing\", {\n      downloadId,\n      chunkId,\n      status,\n      memoryUsage: process.memoryUsage(),\n    });\n  }\n\n  static error(error: Error, context: string) {\n    logger.error(\"Error occurred\", {\n      error: error.message,\n      stack: error.stack,\n      context,\n      timestamp: new Date().toISOString(),\n    });\n  }\n}\n```\n\n## 3. 모니터링\n\n### 3.1 성능 메트릭\n\n```typescript\nclass PerformanceMonitor {\n  private metrics: Map<string, Metric> = new Map();\n\n  trackMetric(name: string, value: number, tags: Record<string, string>) {\n    const metric = {\n      value,\n      timestamp: Date.now(),\n      tags,\n    };\n\n    this.metrics.set(name, metric);\n    this.reportMetric(name, metric);\n  }\n\n  getMetrics(): Record<string, Metric[]> {\n    return Object.fromEntries(this.metrics);\n  }\n}\n```\n\n### 3.2 헬스체크\n\n```typescript\nclass HealthCheck {\n  async checkSystem(): Promise<HealthStatus> {\n    const checks = await Promise.all([\n      this.checkOpenSearch(),\n      this.checkFileSystem(),\n      this.checkMemory(),\n    ]);\n\n    return {\n      status: checks.every((c) => c.status === \"ok\") ? \"healthy\" : \"unhealthy\",\n      checks,\n      timestamp: new Date().toISOString(),\n    };\n  }\n}\n```\n\n## 4. 문제 해결\n\n### 4.1 일반적인 에러 케이스\n\n```typescript\nclass TroubleshootingGuide {\n  static async diagnose(error: Error): Promise<DiagnosisResult> {\n    const errorPatterns = {\n      ECONNREFUSED: this.handleConnectionError,\n      ETIMEDOUT: this.handleTimeoutError,\n      ENOSPC: this.handleDiskSpaceError,\n      HEAP_OUT_OF_MEMORY: this.handleMemoryError,\n    };\n\n    const handler = errorPatterns[this.getErrorType(error)];\n    return handler ? await handler(error) : this.handleUnknownError(error);\n  }\n}\n```\n\n### 4.2 복구 전략\n\n```typescript\nclass RecoveryStrategy {\n  async recover(downloadId: string, error: Error): Promise<boolean> {\n    const strategy = this.determineStrategy(error);\n\n    switch (strategy) {\n      case \"retry\":\n        return await this.retryDownload(downloadId);\n      case \"cleanup\":\n        return await this.cleanupAndRestart(downloadId);\n      case \"fallback\":\n        return await this.useFallbackMethod(downloadId);\n      default:\n        return false;\n    }\n  }\n}\n```\n\n## 5. 성능 최적화\n\n### 5.1 병목 지점 분석\n\n```typescript\nclass PerformanceAnalyzer {\n  private measurements: Map<string, number[]> = new Map();\n\n  measure(point: string, duration: number) {\n    if (!this.measurements.has(point)) {\n      this.measurements.set(point, []);\n    }\n    this.measurements.get(point)!.push(duration);\n  }\n\n  getBottlenecks(): BottleneckReport[] {\n    return Array.from(this.measurements.entries())\n      .map(([point, durations]) => ({\n        point,\n        avgDuration: this.calculateAverage(durations),\n        p95Duration: this.calculatePercentile(durations, 95),\n        count: durations.length,\n      }))\n      .sort((a, b) => b.avgDuration - a.avgDuration);\n  }\n}\n```\n\n### 5.2 최적화 포인트\n\n```typescript\nclass OptimizationPoints {\n  static readonly MEMORY = {\n    CHUNK_SIZE: \"Adjust chunk size based on available memory\",\n    BUFFER_LIMIT: \"Set buffer limits for streams\",\n    GC_TIMING: \"Optimize garbage collection timing\",\n  };\n\n  static readonly DISK_IO = {\n    WRITE_STRATEGY: \"Use appropriate write strategy\",\n    BUFFER_SIZE: \"Optimize buffer sizes for file operations\",\n    CONCURRENT_OPS: \"Limit concurrent file operations\",\n  };\n\n  static readonly NETWORK = {\n    BATCH_SIZE: \"Optimize batch sizes for network requests\",\n    CONNECTION_POOL: \"Manage connection pool size\",\n    TIMEOUT_VALUES: \"Set appropriate timeout values\",\n  };\n}\n```\n",
  "date": "2024-03-20",
  "category": "projects",
  "tags": [
    "React",
    "Express",
    "MySQL",
    "Web3.js",
    "AWS",
    "Ganache",
    "Truffle",
    "ERC20",
    "MetaMask",
    "Figma"
  ],
  "thumbnail": "/images/entasys/entaasys_download_2.gif",
  "translations": {
    "ko": {
      "title": "Entasys",
      "description": "Development of Virtual Asset Exchange",
      "content": "<h1 id=\"heading-0\">운영 및 디버깅 가이드</h1>\n<h2 id=\"heading-1\">1. 환경 설정</h2>\n<h3 id=\"heading-2\">1.1 주요 설정값</h3>\n<pre><code class=\"language-typescript\">interface SystemConfig {\n  // 다운로드 관련 설정\n  download: {\n    maxConcurrent: number; // 동시 다운로드 수\n    chunkSize: number; // 청크 크기 (bytes)\n    tempDir: string; // 임시 파일 저장 경로\n    timeout: number; // 타임아웃 (ms)\n  };\n\n  // OpenSearch 설정\n  opensearch: {\n    nodes: string[]; // 노드 주소 목록\n    maxRetries: number; // 최대 재시도 횟수\n    requestTimeout: number; // 요청 타임아웃\n    scrollTimeout: string; // 스크롤 타임아웃\n  };\n\n  // 메모리 관련 설정\n  memory: {\n    maxHeapSize: number; // 최대 힙 사이즈\n    gcInterval: number; // GC 간격\n    warningThreshold: number; // 경고 임계값\n  };\n}\n</code></pre>\n<h3 id=\"heading-3\">1.2 환경변수</h3>\n<pre><code class=\"language-bash\"># .env 예시\nNODE_ENV=production\nLOG_LEVEL=info\nMAX_CONCURRENT_DOWNLOADS=5\nCHUNK_SIZE=5242880\nTEMP_DIR=/tmp/downloads\nOPENSEARCH_NODES=[\"http://opensearch1:9200\",\"http://opensearch2:9200\"]\nMAX_HEAP_SIZE=4096\nGC_INTERVAL=30000\n</code></pre>\n<h2 id=\"heading-4\">2. 로깅 전략</h2>\n<h3 id=\"heading-5\">2.1 로그 설정</h3>\n<pre><code class=\"language-typescript\">const logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || \"info\",\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.json()\n  ),\n  transports: [\n    new winston.transports.File({\n      filename: \"error.log\",\n      level: \"error\",\n      maxsize: 5242880,\n      maxFiles: 5,\n    }),\n    new winston.transports.File({\n      filename: \"combined.log\",\n      maxsize: 10485760,\n      maxFiles: 10,\n    }),\n  ],\n});\n</code></pre>\n<h3 id=\"heading-6\">2.2 주요 로깅 포인트</h3>\n<pre><code class=\"language-typescript\">class LoggingPoints {\n  static downloadStart(downloadId: string, params: DownloadParams) {\n    logger.info(\"Download started\", {\n      downloadId,\n      params,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  static chunkProcessing(downloadId: string, chunkId: string, status: string) {\n    logger.debug(\"Chunk processing\", {\n      downloadId,\n      chunkId,\n      status,\n      memoryUsage: process.memoryUsage(),\n    });\n  }\n\n  static error(error: Error, context: string) {\n    logger.error(\"Error occurred\", {\n      error: error.message,\n      stack: error.stack,\n      context,\n      timestamp: new Date().toISOString(),\n    });\n  }\n}\n</code></pre>\n<h2 id=\"heading-7\">3. 모니터링</h2>\n<h3 id=\"heading-8\">3.1 성능 메트릭</h3>\n<pre><code class=\"language-typescript\">class PerformanceMonitor {\n  private metrics: Map&lt;string, Metric&gt; = new Map();\n\n  trackMetric(name: string, value: number, tags: Record&lt;string, string&gt;) {\n    const metric = {\n      value,\n      timestamp: Date.now(),\n      tags,\n    };\n\n    this.metrics.set(name, metric);\n    this.reportMetric(name, metric);\n  }\n\n  getMetrics(): Record&lt;string, Metric[]&gt; {\n    return Object.fromEntries(this.metrics);\n  }\n}\n</code></pre>\n<h3 id=\"heading-9\">3.2 헬스체크</h3>\n<pre><code class=\"language-typescript\">class HealthCheck {\n  async checkSystem(): Promise&lt;HealthStatus&gt; {\n    const checks = await Promise.all([\n      this.checkOpenSearch(),\n      this.checkFileSystem(),\n      this.checkMemory(),\n    ]);\n\n    return {\n      status: checks.every((c) =&gt; c.status === \"ok\") ? \"healthy\" : \"unhealthy\",\n      checks,\n      timestamp: new Date().toISOString(),\n    };\n  }\n}\n</code></pre>\n<h2 id=\"heading-10\">4. 문제 해결</h2>\n<h3 id=\"heading-11\">4.1 일반적인 에러 케이스</h3>\n<pre><code class=\"language-typescript\">class TroubleshootingGuide {\n  static async diagnose(error: Error): Promise&lt;DiagnosisResult&gt; {\n    const errorPatterns = {\n      ECONNREFUSED: this.handleConnectionError,\n      ETIMEDOUT: this.handleTimeoutError,\n      ENOSPC: this.handleDiskSpaceError,\n      HEAP_OUT_OF_MEMORY: this.handleMemoryError,\n    };\n\n    const handler = errorPatterns[this.getErrorType(error)];\n    return handler ? await handler(error) : this.handleUnknownError(error);\n  }\n}\n</code></pre>\n<h3 id=\"heading-12\">4.2 복구 전략</h3>\n<pre><code class=\"language-typescript\">class RecoveryStrategy {\n  async recover(downloadId: string, error: Error): Promise&lt;boolean&gt; {\n    const strategy = this.determineStrategy(error);\n\n    switch (strategy) {\n      case \"retry\":\n        return await this.retryDownload(downloadId);\n      case \"cleanup\":\n        return await this.cleanupAndRestart(downloadId);\n      case \"fallback\":\n        return await this.useFallbackMethod(downloadId);\n      default:\n        return false;\n    }\n  }\n}\n</code></pre>\n<h2 id=\"heading-13\">5. 성능 최적화</h2>\n<h3 id=\"heading-14\">5.1 병목 지점 분석</h3>\n<pre><code class=\"language-typescript\">class PerformanceAnalyzer {\n  private measurements: Map&lt;string, number[]&gt; = new Map();\n\n  measure(point: string, duration: number) {\n    if (!this.measurements.has(point)) {\n      this.measurements.set(point, []);\n    }\n    this.measurements.get(point)!.push(duration);\n  }\n\n  getBottlenecks(): BottleneckReport[] {\n    return Array.from(this.measurements.entries())\n      .map(([point, durations]) =&gt; ({\n        point,\n        avgDuration: this.calculateAverage(durations),\n        p95Duration: this.calculatePercentile(durations, 95),\n        count: durations.length,\n      }))\n      .sort((a, b) =&gt; b.avgDuration - a.avgDuration);\n  }\n}\n</code></pre>\n<h3 id=\"heading-15\">5.2 최적화 포인트</h3>\n<pre><code class=\"language-typescript\">class OptimizationPoints {\n  static readonly MEMORY = {\n    CHUNK_SIZE: \"Adjust chunk size based on available memory\",\n    BUFFER_LIMIT: \"Set buffer limits for streams\",\n    GC_TIMING: \"Optimize garbage collection timing\",\n  };\n\n  static readonly DISK_IO = {\n    WRITE_STRATEGY: \"Use appropriate write strategy\",\n    BUFFER_SIZE: \"Optimize buffer sizes for file operations\",\n    CONCURRENT_OPS: \"Limit concurrent file operations\",\n  };\n\n  static readonly NETWORK = {\n    BATCH_SIZE: \"Optimize batch sizes for network requests\",\n    CONNECTION_POOL: \"Manage connection pool size\",\n    TIMEOUT_VALUES: \"Set appropriate timeout values\",\n  };\n}\n</code></pre>\n",
      "tocItems": [
        {
          "id": "heading-0",
          "text": "운영 및 디버깅 가이드",
          "level": 1,
          "isMainTopic": true,
          "position": 0
        },
        {
          "id": "heading-1",
          "text": "1. 환경 설정",
          "level": 2,
          "isMainTopic": true,
          "position": 50
        },
        {
          "id": "heading-2",
          "text": "1.1 주요 설정값",
          "level": 3,
          "isMainTopic": false,
          "position": 100
        },
        {
          "id": "heading-3",
          "text": "1.2 환경변수",
          "level": 3,
          "isMainTopic": false,
          "position": 150
        },
        {
          "id": "heading-4",
          "text": "2. 로깅 전략",
          "level": 2,
          "isMainTopic": true,
          "position": 200
        },
        {
          "id": "heading-5",
          "text": "2.1 로그 설정",
          "level": 3,
          "isMainTopic": false,
          "position": 250
        },
        {
          "id": "heading-6",
          "text": "2.2 주요 로깅 포인트",
          "level": 3,
          "isMainTopic": false,
          "position": 300
        },
        {
          "id": "heading-7",
          "text": "3. 모니터링",
          "level": 2,
          "isMainTopic": true,
          "position": 350
        },
        {
          "id": "heading-8",
          "text": "3.1 성능 메트릭",
          "level": 3,
          "isMainTopic": false,
          "position": 400
        },
        {
          "id": "heading-9",
          "text": "3.2 헬스체크",
          "level": 3,
          "isMainTopic": false,
          "position": 450
        },
        {
          "id": "heading-10",
          "text": "4. 문제 해결",
          "level": 2,
          "isMainTopic": true,
          "position": 500
        },
        {
          "id": "heading-11",
          "text": "4.1 일반적인 에러 케이스",
          "level": 3,
          "isMainTopic": false,
          "position": 550
        },
        {
          "id": "heading-12",
          "text": "4.2 복구 전략",
          "level": 3,
          "isMainTopic": false,
          "position": 600
        },
        {
          "id": "heading-13",
          "text": "5. 성능 최적화",
          "level": 2,
          "isMainTopic": true,
          "position": 650
        },
        {
          "id": "heading-14",
          "text": "5.1 병목 지점 분석",
          "level": 3,
          "isMainTopic": false,
          "position": 700
        },
        {
          "id": "heading-15",
          "text": "5.2 최적화 포인트",
          "level": 3,
          "isMainTopic": false,
          "position": 750
        }
      ]
    },
    "en": {
      "title": "Entasys",
      "description": "Development of Virtual Asset Exchange",
      "content": "<h1 id=\"heading-0\">Operation and Debugging Guide</h1>\n<h2 id=\"heading-1\">1. Environment Setup</h2>\n<h3 id=\"heading-2\">1.1 Key Settings</h3>\n<pre><code class=\"language-typescript\">interface SystemConfig {\n  // Download-related settings\n  download: {\n    maxConcurrent: number; // Number of concurrent downloads\n    chunkSize: number; // Chunk size (bytes)\n    tempDir: string; // Temporary file storage path\n    timeout: number; // Timeout (ms)\n  };\n\n  // OpenSearch settings\n  opensearch: {\n    nodes: string[]; // List of node addresses\n    maxRetries: number; // Maximum number of retries\n    requestTimeout: number; // Request timeout\n    scrollTimeout: string; // Scroll timeout\n  };\n\n  // Memory-related settings\n  memory: {\n    maxHeapSize: number; // Maximum heap size\n    gcInterval: number; // GC interval\n    warningThreshold: number; // Warning threshold\n  };\n}\n</code></pre>\n<h3 id=\"heading-3\">1.2 Environment Variables</h3>\n<pre><code class=\"language-bash\"># .env example\nNODE_ENV=production\nLOG_LEVEL=info\nMAX_CONCURRENT_DOWNLOADS=5\nCHUNK_SIZE=5242880\nTEMP_DIR=/tmp/downloads\nOPENSEARCH_NODES=[\"http://opensearch1:9200\",\"http://opensearch2:9200\"]\nMAX_HEAP_SIZE=4096\nGC_INTERVAL=30000\n</code></pre>\n<h2 id=\"heading-4\">2. Logging Strategy</h2>\n<h3 id=\"heading-5\">2.1 Logging Configuration</h3>\n<pre><code class=\"language-typescript\">const logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || \"info\",\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.json()\n  ),\n  transports: [\n    new winston.transports.File({\n      filename: \"error.log\",\n      level: \"error\",\n      maxsize: 5242880,\n      maxFiles: 5,\n    }),\n    new winston.transports.File({\n      filename: \"combined.log\",\n      maxsize: 10485760,\n      maxFiles: 10,\n    }),\n  ],\n});\n</code></pre>\n<h3 id=\"heading-6\">2.2 Key Logging Points</h3>\n<pre><code class=\"language-typescript\">class LoggingPoints {\n  static downloadStart(downloadId: string, params: DownloadParams) {\n    logger.info(\"Download started\", {\n      downloadId,\n      params,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  static chunkProcessing(downloadId: string, chunkId: string, status: string) {\n    logger.debug(\"Chunk processing\", {\n      downloadId,\n      chunkId,\n      status,\n      memoryUsage: process.memoryUsage(),\n    });\n  }\n\n  static error(error: Error, context: string) {\n    logger.error(\"Error occurred\", {\n      error: error.message,\n      stack: error.stack,\n      context,\n      timestamp: new Date().toISOString(),\n    });\n  }\n}\n</code></pre>\n<h2 id=\"heading-7\">3. Monitoring</h2>\n<h3 id=\"heading-8\">3.1 Performance Metrics</h3>\n<pre><code class=\"language-typescript\">class PerformanceMonitor {\n  private metrics: Map&lt;string, Metric&gt; = new Map();\n\n  trackMetric(name: string, value: number, tags: Record&lt;string, string&gt;) {\n    const metric = {\n      value,\n      timestamp: Date.now(),\n      tags,\n    };\n\n    this.metrics.set(name, metric);\n    this.reportMetric(name, metric);\n  }\n\n  getMetrics(): Record&lt;string, Metric[]&gt; {\n    return Object.fromEntries(this.metrics);\n  }\n}\n</code></pre>\n<h3 id=\"heading-9\">3.2 Health Check</h3>\n<pre><code class=\"language-typescript\">class HealthCheck {\n  async checkSystem(): Promise&lt;HealthStatus&gt; {\n    const checks = await Promise.all([\n      this.checkOpenSearch(),\n      this.checkFileSystem(),\n      this.checkMemory(),\n    ]);\n\n    return {\n      status: checks.every((c) =&gt; c.status === \"ok\") ? \"healthy\" : \"unhealthy\",\n      checks,\n      timestamp: new Date().toISOString(),\n    };\n  }\n}\n</code></pre>\n<h2 id=\"heading-10\">4. Problem Solving</h2>\n<h3 id=\"heading-11\">4.1 Common Error Cases</h3>\n<pre><code class=\"language-typescript\">class TroubleshootingGuide {\n  static async diagnose(error: Error): Promise&lt;DiagnosisResult&gt; {\n    const errorPatterns = {\n      ECONNREFUSED: this.handleConnectionError,\n      ETIMEDOUT: this.handleTimeoutError,\n      ENOSPC: this.handleDiskSpaceError,\n      HEAP_OUT_OF_MEMORY: this.handleMemoryError,\n    };\n\n    const handler = errorPatterns[this.getErrorType(error)];\n    return handler ? await handler(error) : this.handleUnknownError(error);\n  }\n}\n</code></pre>\n<h3 id=\"heading-12\">4.2 Recovery Strategy</h3>\n<pre><code class=\"language-typescript\">class RecoveryStrategy {\n  async recover(downloadId: string, error: Error): Promise&lt;boolean&gt; {\n    const strategy = this.determineStrategy(error);\n\n    switch (strategy) {\n      case \"retry\":\n        return await this.retryDownload(downloadId);\n      case \"cleanup\":\n        return await this.cleanupAndRestart(downloadId);\n      case \"fallback\":\n        return await this.useFallbackMethod(downloadId);\n      default:\n        return false;\n    }\n  }\n}\n</code></pre>\n<h2 id=\"heading-13\">5. Performance Optimization</h2>\n<h3 id=\"heading-14\">5.1 Bottleneck Analysis</h3>\n<pre><code class=\"language-typescript\">class PerformanceAnalyzer {\n  private measurements: Map&lt;string, number[]&gt; = new Map();\n\n  measure(point: string, duration: number) {\n    if (!this.measurements.has(point)) {\n      this.measurements.set(point, []);\n    }\n    this.measurements.get(point)!.push(duration);\n  }\n\n  getBottlenecks(): BottleneckReport[] {\n    return Array.from(this.measurements.entries())\n      .map(([point, durations]) =&gt; ({\n        point,\n        avgDuration: this.calculateAverage(durations),\n        p95Duration: this.calculatePercentile(durations, 95),\n        count: durations.length,\n      }))\n      .sort((a, b) =&gt; b.avgDuration - a.avgDuration);\n  }\n}\n</code></pre>\n<h3 id=\"heading-15\">5.2 Optimization Points</h3>\n<pre><code class=\"language-typescript\">class OptimizationPoints {\n  static readonly MEMORY = {\n    CHUNK_SIZE: \"Adjust chunk size based on available memory\",\n    BUFFER_LIMIT: \"Set buffer limits for streams\",\n    GC_TIMING: \"Optimize garbage collection timing\",\n  };\n\n  static readonly DISK_IO = {\n    WRITE_STRATEGY: \"Use appropriate write strategy\",\n    BUFFER_SIZE: \"Optimize buffer sizes for file operations\",\n    CONCURRENT_OPS: \"Limit concurrent file operations\",\n  };\n\n  static readonly NETWORK = {\n    BATCH_SIZE: \"Optimize batch sizes for network requests\",\n    CONNECTION_POOL: \"Manage connection pool size\",\n    TIMEOUT_VALUES: \"Set appropriate timeout values\",\n  };\n}\n</code></pre>\n",
      "tocItems": [
        {
          "id": "heading-0",
          "text": "Operation and Debugging Guide",
          "level": 1,
          "isMainTopic": true,
          "position": 0
        },
        {
          "id": "heading-1",
          "text": "1. Environment Setup",
          "level": 2,
          "isMainTopic": true,
          "position": 50
        },
        {
          "id": "heading-2",
          "text": "1.1 Key Settings",
          "level": 3,
          "isMainTopic": false,
          "position": 100
        },
        {
          "id": "heading-3",
          "text": "1.2 Environment Variables",
          "level": 3,
          "isMainTopic": false,
          "position": 150
        },
        {
          "id": "heading-4",
          "text": "2. Logging Strategy",
          "level": 2,
          "isMainTopic": true,
          "position": 200
        },
        {
          "id": "heading-5",
          "text": "2.1 Logging Configuration",
          "level": 3,
          "isMainTopic": false,
          "position": 250
        },
        {
          "id": "heading-6",
          "text": "2.2 Key Logging Points",
          "level": 3,
          "isMainTopic": false,
          "position": 300
        },
        {
          "id": "heading-7",
          "text": "3. Monitoring",
          "level": 2,
          "isMainTopic": true,
          "position": 350
        },
        {
          "id": "heading-8",
          "text": "3.1 Performance Metrics",
          "level": 3,
          "isMainTopic": false,
          "position": 400
        },
        {
          "id": "heading-9",
          "text": "3.2 Health Check",
          "level": 3,
          "isMainTopic": false,
          "position": 450
        },
        {
          "id": "heading-10",
          "text": "4. Problem Solving",
          "level": 2,
          "isMainTopic": true,
          "position": 500
        },
        {
          "id": "heading-11",
          "text": "4.1 Common Error Cases",
          "level": 3,
          "isMainTopic": false,
          "position": 550
        },
        {
          "id": "heading-12",
          "text": "4.2 Recovery Strategy",
          "level": 3,
          "isMainTopic": false,
          "position": 600
        },
        {
          "id": "heading-13",
          "text": "5. Performance Optimization",
          "level": 2,
          "isMainTopic": true,
          "position": 650
        },
        {
          "id": "heading-14",
          "text": "5.1 Bottleneck Analysis",
          "level": 3,
          "isMainTopic": false,
          "position": 700
        },
        {
          "id": "heading-15",
          "text": "5.2 Optimization Points",
          "level": 3,
          "isMainTopic": false,
          "position": 750
        }
      ]
    }
  },
  "imageHeights": {}
}