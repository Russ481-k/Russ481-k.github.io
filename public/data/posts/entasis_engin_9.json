{
  "id": "entasis_engin_9",
  "title": "Entasis Engine - 인프라 구성도",
  "content": "\r\n# 금융 데이터 분석 시스템 인프라 구성도\r\n\r\n## 🏗️ 시스템 아키텍처\r\n\r\n### 1. 전체 구성도\r\n\r\n```mermaid\r\ngraph TB\r\n    subgraph External[외부 시스템]\r\n        API1[거래소 API]\r\n        API2[데이터 피드]\r\n    end\r\n\r\n    subgraph LoadBalancer[로드 밸런서]\r\n        LB1[AWS ALB]\r\n        LB2[내부 L4]\r\n    end\r\n\r\n    subgraph ServiceMesh[서비스 메시]\r\n        direction TB\r\n        subgraph DataCollection[데이터 수집 계층]\r\n            DC1[Collector-1]\r\n            DC2[Collector-2]\r\n        end\r\n\r\n        subgraph Processing[처리 계층]\r\n            P1[Spark Cluster]\r\n            P2[Stream Processing]\r\n        end\r\n\r\n        subgraph AI[AI 분석 계층]\r\n            AI1[Model Serving]\r\n            AI2[Training Pipeline]\r\n        end\r\n\r\n        subgraph API[API 계층]\r\n            API3[REST API]\r\n            API4[WebSocket]\r\n        end\r\n    end\r\n\r\n    subgraph Storage[스토리지]\r\n        DB1[(TimescaleDB)]\r\n        DB2[(Redis)]\r\n        S3[Object Storage]\r\n    end\r\n\r\n    subgraph Monitoring[모니터링]\r\n        M1[Prometheus]\r\n        M2[Grafana]\r\n        M3[ELK Stack]\r\n    end\r\n\r\n    External --> LoadBalancer\r\n    LoadBalancer --> ServiceMesh\r\n    ServiceMesh --> Storage\r\n    ServiceMesh --> Monitoring\r\n```\r\n\r\n## 🌐 네트워크 구성\r\n\r\n### 1. 네트워크 세그먼트\r\n\r\n```plaintext\r\n+------------------------+     +------------------------+\r\n|     Public Subnet      |     |    Private Subnet      |\r\n|------------------------|     |------------------------|\r\n| - Load Balancer        |     | - Application Servers  |\r\n| - Bastion Host         |     | - Database Clusters    |\r\n| - NAT Gateway          |     | - Cache Servers        |\r\n+------------------------+     +------------------------+\r\n           |                              |\r\n           |        VPC Peering           |\r\n           +------------------------------+\r\n```\r\n\r\n### 2. 보안 그룹 설정\r\n\r\n```yaml\r\nsecurity_groups:\r\n  frontend:\r\n    inbound:\r\n      - port: 80\r\n        source: 0.0.0.0/0\r\n      - port: 443\r\n        source: 0.0.0.0/0\r\n\r\n  application:\r\n    inbound:\r\n      - port: 8080\r\n        source: frontend_sg\r\n      - port: 9000\r\n        source: monitoring_sg\r\n\r\n  database:\r\n    inbound:\r\n      - port: 5432\r\n        source: application_sg\r\n      - port: 6379\r\n        source: application_sg\r\n```\r\n\r\n## 🚀 쿠버네티스 클러스터\r\n\r\n### 1. 노드 구성\r\n\r\n```yaml\r\nnode_pools:\r\n  - name: general\r\n    instance_type: c5.2xlarge\r\n    min_size: 3\r\n    max_size: 10\r\n    labels:\r\n      role: general\r\n\r\n  - name: ai-inference\r\n    instance_type: g4dn.xlarge\r\n    min_size: 2\r\n    max_size: 5\r\n    labels:\r\n      role: ai-inference\r\n\r\n  - name: data-processing\r\n    instance_type: r5.2xlarge\r\n    min_size: 2\r\n    max_size: 8\r\n    labels:\r\n      role: data-processing\r\n```\r\n\r\n### 2. 서비스 배포\r\n\r\n```yaml\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: trading-api\r\nspec:\r\n  replicas: 3\r\n  selector:\r\n    matchLabels:\r\n      app: trading-api\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: trading-api\r\n    spec:\r\n      containers:\r\n        - name: trading-api\r\n          image: trading-api:1.0.0\r\n          resources:\r\n            requests:\r\n              cpu: 1\r\n              memory: 2Gi\r\n            limits:\r\n              cpu: 2\r\n              memory: 4Gi\r\n```\r\n\r\n## 📊 모니터링 시스템\r\n\r\n### 1. 메트릭 수집\r\n\r\n```yaml\r\nprometheus:\r\n  scrape_configs:\r\n    - job_name: \"kubernetes-pods\"\r\n      kubernetes_sd_configs:\r\n        - role: pod\r\n      relabel_configs:\r\n        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\r\n          action: keep\r\n          regex: true\r\n\r\n    - job_name: \"trading-metrics\"\r\n      static_configs:\r\n        - targets: [\"trading-api:9090\"]\r\n```\r\n\r\n### 2. 알림 설정\r\n\r\n```yaml\r\nalertmanager:\r\n  config:\r\n    route:\r\n      receiver: \"slack\"\r\n      group_wait: 30s\r\n      group_interval: 5m\r\n      repeat_interval: 4h\r\n\r\n    receivers:\r\n      - name: \"slack\"\r\n        slack_configs:\r\n          - channel: \"#alerts\"\r\n            send_resolved: true\r\n```\r\n\r\n## 🔒 보안 설정\r\n\r\n### 1. 네트워크 정책\r\n\r\n```yaml\r\napiVersion: networking.k8s.io/v1\r\nkind: NetworkPolicy\r\nmetadata:\r\n  name: api-network-policy\r\nspec:\r\n  podSelector:\r\n    matchLabels:\r\n      app: trading-api\r\n  policyTypes:\r\n    - Ingress\r\n    - Egress\r\n  ingress:\r\n    - from:\r\n        - podSelector:\r\n            matchLabels:\r\n              role: frontend\r\n      ports:\r\n        - protocol: TCP\r\n          port: 8080\r\n```\r\n\r\n### 2. 암호화 설정\r\n\r\n```yaml\r\nencryption:\r\n  - resources:\r\n      - secrets\r\n    providers:\r\n      - aescbc:\r\n          keys:\r\n            - name: key1\r\n              secret: <base64-encoded-key>\r\n      - identity: {}\r\n```\r\n\r\n## 🔄 스케일링 전략\r\n\r\n### 1. 수평적 확장\r\n\r\n```yaml\r\napiVersion: autoscaling/v2\r\nkind: HorizontalPodAutoscaler\r\nmetadata:\r\n  name: trading-api-hpa\r\nspec:\r\n  scaleTargetRef:\r\n    apiVersion: apps/v1\r\n    kind: Deployment\r\n    name: trading-api\r\n  minReplicas: 3\r\n  maxReplicas: 10\r\n  metrics:\r\n    - type: Resource\r\n      resource:\r\n        name: cpu\r\n        target:\r\n          type: Utilization\r\n          averageUtilization: 70\r\n```\r\n\r\n### 2. 수직적 확장\r\n\r\n```yaml\r\napiVersion: autoscaling.k8s.io/v1\r\nkind: VerticalPodAutoscaler\r\nmetadata:\r\n  name: trading-api-vpa\r\nspec:\r\n  targetRef:\r\n    apiVersion: apps/v1\r\n    kind: Deployment\r\n    name: trading-api\r\n  updatePolicy:\r\n    updateMode: Auto\r\n```\r\n\r\n## 🔧 운영 관리\r\n\r\n### 1. 로깅 설정\r\n\r\n```yaml\r\nfilebeat:\r\n  inputs:\r\n    - type: container\r\n      paths:\r\n        - /var/log/containers/*.log\r\n      processors:\r\n        - add_kubernetes_metadata:\r\n            host: ${NODE_NAME}\r\n            matchers:\r\n              - logs_path:\r\n                  logs_path: \"/var/log/containers/\"\r\n```\r\n\r\n### 2. 백업 정책\r\n\r\n```yaml\r\nbackup:\r\n  schedule: \"0 1 * * *\" # 매일 01:00\r\n  retention:\r\n    hourly: 24\r\n    daily: 7\r\n    weekly: 4\r\n    monthly: 12\r\n  storage:\r\n    type: s3\r\n    bucket: backup-bucket\r\n    region: ap-northeast-2\r\n```\r\n\r\n이 문서는 금융 데이터 분석 시스템의 인프라 구성을 상세히 설명합니다. 시스템의 안정성과 확장성을 보장하기 위해 지속적으로 업데이트됩니다. 🚀\r\n",
  "date": "2025-02-13",
  "category": "projects",
  "tags": [
    "infrastructure",
    "cloud",
    "kubernetes",
    "devops",
    "security",
    "monitoring",
    "scaling"
  ],
  "thumbnail": "",
  "translations": {
    "ko": {
      "title": "Entasis Engine - 인프라 구성도",
      "description": "가상자산 데이터 분석 시스템의 인프라 아키텍처 및 구성 상세",
      "content": "<h1 id=\"heading-0\">금융 데이터 분석 시스템 인프라 구성도</h1>\n<h2 id=\"heading-1\">🏗️ 시스템 아키텍처</h2>\n<h3 id=\"heading-2\">1. 전체 구성도</h3>\n<pre><code class=\"language-mermaid\">graph TB\n    subgraph External[외부 시스템]\n        API1[거래소 API]\n        API2[데이터 피드]\n    end\n\n    subgraph LoadBalancer[로드 밸런서]\n        LB1[AWS ALB]\n        LB2[내부 L4]\n    end\n\n    subgraph ServiceMesh[서비스 메시]\n        direction TB\n        subgraph DataCollection[데이터 수집 계층]\n            DC1[Collector-1]\n            DC2[Collector-2]\n        end\n\n        subgraph Processing[처리 계층]\n            P1[Spark Cluster]\n            P2[Stream Processing]\n        end\n\n        subgraph AI[AI 분석 계층]\n            AI1[Model Serving]\n            AI2[Training Pipeline]\n        end\n\n        subgraph API[API 계층]\n            API3[REST API]\n            API4[WebSocket]\n        end\n    end\n\n    subgraph Storage[스토리지]\n        DB1[(TimescaleDB)]\n        DB2[(Redis)]\n        S3[Object Storage]\n    end\n\n    subgraph Monitoring[모니터링]\n        M1[Prometheus]\n        M2[Grafana]\n        M3[ELK Stack]\n    end\n\n    External --&gt; LoadBalancer\n    LoadBalancer --&gt; ServiceMesh\n    ServiceMesh --&gt; Storage\n    ServiceMesh --&gt; Monitoring\n</code></pre>\n<h2 id=\"heading-3\">🌐 네트워크 구성</h2>\n<h3 id=\"heading-4\">1. 네트워크 세그먼트</h3>\n<pre><code class=\"language-plaintext\">+------------------------+     +------------------------+\n|     Public Subnet      |     |    Private Subnet      |\n|------------------------|     |------------------------|\n| - Load Balancer        |     | - Application Servers  |\n| - Bastion Host         |     | - Database Clusters    |\n| - NAT Gateway          |     | - Cache Servers        |\n+------------------------+     +------------------------+\n           |                              |\n           |        VPC Peering           |\n           +------------------------------+\n</code></pre>\n<h3 id=\"heading-5\">2. 보안 그룹 설정</h3>\n<pre><code class=\"language-yaml\">security_groups:\n  frontend:\n    inbound:\n      - port: 80\n        source: 0.0.0.0/0\n      - port: 443\n        source: 0.0.0.0/0\n\n  application:\n    inbound:\n      - port: 8080\n        source: frontend_sg\n      - port: 9000\n        source: monitoring_sg\n\n  database:\n    inbound:\n      - port: 5432\n        source: application_sg\n      - port: 6379\n        source: application_sg\n</code></pre>\n<h2 id=\"heading-6\">🚀 쿠버네티스 클러스터</h2>\n<h3 id=\"heading-7\">1. 노드 구성</h3>\n<pre><code class=\"language-yaml\">node_pools:\n  - name: general\n    instance_type: c5.2xlarge\n    min_size: 3\n    max_size: 10\n    labels:\n      role: general\n\n  - name: ai-inference\n    instance_type: g4dn.xlarge\n    min_size: 2\n    max_size: 5\n    labels:\n      role: ai-inference\n\n  - name: data-processing\n    instance_type: r5.2xlarge\n    min_size: 2\n    max_size: 8\n    labels:\n      role: data-processing\n</code></pre>\n<h3 id=\"heading-8\">2. 서비스 배포</h3>\n<pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: trading-api\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: trading-api\n  template:\n    metadata:\n      labels:\n        app: trading-api\n    spec:\n      containers:\n        - name: trading-api\n          image: trading-api:1.0.0\n          resources:\n            requests:\n              cpu: 1\n              memory: 2Gi\n            limits:\n              cpu: 2\n              memory: 4Gi\n</code></pre>\n<h2 id=\"heading-9\">📊 모니터링 시스템</h2>\n<h3 id=\"heading-10\">1. 메트릭 수집</h3>\n<pre><code class=\"language-yaml\">prometheus:\n  scrape_configs:\n    - job_name: \"kubernetes-pods\"\n      kubernetes_sd_configs:\n        - role: pod\n      relabel_configs:\n        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n          action: keep\n          regex: true\n\n    - job_name: \"trading-metrics\"\n      static_configs:\n        - targets: [\"trading-api:9090\"]\n</code></pre>\n<h3 id=\"heading-11\">2. 알림 설정</h3>\n<pre><code class=\"language-yaml\">alertmanager:\n  config:\n    route:\n      receiver: \"slack\"\n      group_wait: 30s\n      group_interval: 5m\n      repeat_interval: 4h\n\n    receivers:\n      - name: \"slack\"\n        slack_configs:\n          - channel: \"#alerts\"\n            send_resolved: true\n</code></pre>\n<h2 id=\"heading-12\">🔒 보안 설정</h2>\n<h3 id=\"heading-13\">1. 네트워크 정책</h3>\n<pre><code class=\"language-yaml\">apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: api-network-policy\nspec:\n  podSelector:\n    matchLabels:\n      app: trading-api\n  policyTypes:\n    - Ingress\n    - Egress\n  ingress:\n    - from:\n        - podSelector:\n            matchLabels:\n              role: frontend\n      ports:\n        - protocol: TCP\n          port: 8080\n</code></pre>\n<h3 id=\"heading-14\">2. 암호화 설정</h3>\n<pre><code class=\"language-yaml\">encryption:\n  - resources:\n      - secrets\n    providers:\n      - aescbc:\n          keys:\n            - name: key1\n              secret: &lt;base64-encoded-key&gt;\n      - identity: {}\n</code></pre>\n<h2 id=\"heading-15\">🔄 스케일링 전략</h2>\n<h3 id=\"heading-16\">1. 수평적 확장</h3>\n<pre><code class=\"language-yaml\">apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: trading-api-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: trading-api\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n    - type: Resource\n      resource:\n        name: cpu\n        target:\n          type: Utilization\n          averageUtilization: 70\n</code></pre>\n<h3 id=\"heading-17\">2. 수직적 확장</h3>\n<pre><code class=\"language-yaml\">apiVersion: autoscaling.k8s.io/v1\nkind: VerticalPodAutoscaler\nmetadata:\n  name: trading-api-vpa\nspec:\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: trading-api\n  updatePolicy:\n    updateMode: Auto\n</code></pre>\n<h2 id=\"heading-18\">🔧 운영 관리</h2>\n<h3 id=\"heading-19\">1. 로깅 설정</h3>\n<pre><code class=\"language-yaml\">filebeat:\n  inputs:\n    - type: container\n      paths:\n        - /var/log/containers/*.log\n      processors:\n        - add_kubernetes_metadata:\n            host: ${NODE_NAME}\n            matchers:\n              - logs_path:\n                  logs_path: \"/var/log/containers/\"\n</code></pre>\n<h3 id=\"heading-20\">2. 백업 정책</h3>\n<pre><code class=\"language-yaml\">backup:\n  schedule: \"0 1 * * *\" # 매일 01:00\n  retention:\n    hourly: 24\n    daily: 7\n    weekly: 4\n    monthly: 12\n  storage:\n    type: s3\n    bucket: backup-bucket\n    region: ap-northeast-2\n</code></pre>\n<p>이 문서는 금융 데이터 분석 시스템의 인프라 구성을 상세히 설명합니다. 시스템의 안정성과 확장성을 보장하기 위해 지속적으로 업데이트됩니다. 🚀</p>\n",
      "tocItems": [
        {
          "id": "heading-0",
          "text": "금융 데이터 분석 시스템 인프라 구성도",
          "level": 1,
          "isMainTopic": true,
          "position": 0
        },
        {
          "id": "heading-1",
          "text": "🏗️ 시스템 아키텍처",
          "level": 2,
          "isMainTopic": true,
          "position": 50
        },
        {
          "id": "heading-2",
          "text": "1. 전체 구성도",
          "level": 3,
          "isMainTopic": false,
          "position": 100
        },
        {
          "id": "heading-3",
          "text": "🌐 네트워크 구성",
          "level": 2,
          "isMainTopic": true,
          "position": 150
        },
        {
          "id": "heading-4",
          "text": "1. 네트워크 세그먼트",
          "level": 3,
          "isMainTopic": false,
          "position": 200
        },
        {
          "id": "heading-5",
          "text": "2. 보안 그룹 설정",
          "level": 3,
          "isMainTopic": false,
          "position": 250
        },
        {
          "id": "heading-6",
          "text": "🚀 쿠버네티스 클러스터",
          "level": 2,
          "isMainTopic": true,
          "position": 300
        },
        {
          "id": "heading-7",
          "text": "1. 노드 구성",
          "level": 3,
          "isMainTopic": false,
          "position": 350
        },
        {
          "id": "heading-8",
          "text": "2. 서비스 배포",
          "level": 3,
          "isMainTopic": false,
          "position": 400
        },
        {
          "id": "heading-9",
          "text": "📊 모니터링 시스템",
          "level": 2,
          "isMainTopic": true,
          "position": 450
        },
        {
          "id": "heading-10",
          "text": "1. 메트릭 수집",
          "level": 3,
          "isMainTopic": false,
          "position": 500
        },
        {
          "id": "heading-11",
          "text": "2. 알림 설정",
          "level": 3,
          "isMainTopic": false,
          "position": 550
        },
        {
          "id": "heading-12",
          "text": "🔒 보안 설정",
          "level": 2,
          "isMainTopic": true,
          "position": 600
        },
        {
          "id": "heading-13",
          "text": "1. 네트워크 정책",
          "level": 3,
          "isMainTopic": false,
          "position": 650
        },
        {
          "id": "heading-14",
          "text": "2. 암호화 설정",
          "level": 3,
          "isMainTopic": false,
          "position": 700
        },
        {
          "id": "heading-15",
          "text": "🔄 스케일링 전략",
          "level": 2,
          "isMainTopic": true,
          "position": 750
        },
        {
          "id": "heading-16",
          "text": "1. 수평적 확장",
          "level": 3,
          "isMainTopic": false,
          "position": 800
        },
        {
          "id": "heading-17",
          "text": "2. 수직적 확장",
          "level": 3,
          "isMainTopic": false,
          "position": 850
        },
        {
          "id": "heading-18",
          "text": "🔧 운영 관리",
          "level": 2,
          "isMainTopic": true,
          "position": 900
        },
        {
          "id": "heading-19",
          "text": "1. 로깅 설정",
          "level": 3,
          "isMainTopic": false,
          "position": 950
        },
        {
          "id": "heading-20",
          "text": "2. 백업 정책",
          "level": 3,
          "isMainTopic": false,
          "position": 1000
        }
      ]
    },
    "en": {
      "title": "Entasis Engine - Infrastructure Architecture",
      "description": "Detailed infrastructure architecture and configuration for digital asset data analysis system",
      "content": "<h1 id=\"heading-0\">Financial Data Analysis System Infrastructure Architecture</h1>\n<h2 id=\"heading-1\">🏗️ System Architecture</h2>\n<h3 id=\"heading-2\">1. Overall Architecture</h3>\n<pre><code class=\"language-mermaid\">graph TB\n    subgraph External[External Systems]\n        API1[Exchange API]\n        API2[Data Feed]\n    end\n\n    subgraph LoadBalancer[LoadBalancer]\n        LB1[AWS ALB]\n        LB2[Internal L4]\n    end\n\n    subgraph ServiceMesh[Service Mesh]\n        direction TB\n        subgraph DataCollection[Data Collection Layer]\n            DC1[Collector-1]\n            DC2[Collector-2]\n        end\n\n        subgraph Processing[Processing Layer]\n            P1[Spark Cluster]\n            P2[Stream Processing]\n        end\n\n        subgraph AI[AI Analysis Layer]\n            AI1[Model Serving]\n            AI2[Training Pipeline]\n        end\n\n        subgraph API[API Layer]\n            API3[REST API]\n            API4[WebSocket]\n        end\n    end\n\n    subgraph Storage[Storage]\n        DB1[(TimescaleDB)]\n        DB2[(Redis)]\n        S3[Object Storage]\n    end\n\n    subgraph Monitoring[Monitoring]\n        M1[Prometheus]\n        M2[Grafana]\n        M3[ELK Stack]\n    end\n\n    External --&gt; LoadBalancer\n    LoadBalancer --&gt; ServiceMesh\n    ServiceMesh --&gt; Storage\n    ServiceMesh --&gt; Monitoring\n</code></pre>\n<h2 id=\"heading-3\">🌐 Network Configuration</h2>\n<h3 id=\"heading-4\">1. Network Segments</h3>\n<pre><code class=\"language-plaintext\">+------------------------+     +------------------------+\n|     Public Subnet      |     |    Private Subnet      |\n|------------------------|     |------------------------|\n| - Load Balancer        |     | - Application Servers  |\n| - Bastion Host         |     | - Database Clusters    |\n| - NAT Gateway          |     | - Cache Servers        |\n+------------------------+     +------------------------+\n           |                              |\n           |        VPC Peering           |\n           +------------------------------+\n</code></pre>\n<h3 id=\"heading-5\">2. Security Group Configuration</h3>\n<pre><code class=\"language-yaml\">security_groups:\n  frontend:\n    inbound:\n      - port: 80\n        source: 0.0.0.0/0\n      - port: 443\n        source: 0.0.0.0/0\n\n  application:\n    inbound:\n      - port: 8080\n        source: frontend_sg\n      - port: 9000\n        source: monitoring_sg\n\n  database:\n    inbound:\n      - port: 5432\n        source: application_sg\n      - port: 6379\n        source: application_sg\n</code></pre>\n<h2 id=\"heading-6\">🚀 Kubernetes Cluster</h2>\n<h3 id=\"heading-7\">1. Node Configuration</h3>\n<pre><code class=\"language-yaml\">node_pools:\n  - name: general\n    instance_type: c5.2xlarge\n    min_size: 3\n    max_size: 10\n    labels:\n      role: general\n\n  - name: ai-inference\n    instance_type: g4dn.xlarge\n    min_size: 2\n    max_size: 5\n    labels:\n      role: ai-inference\n\n  - name: data-processing\n    instance_type: r5.2xlarge\n    min_size: 2\n    max_size: 8\n    labels:\n      role: data-processing\n</code></pre>\n<h3 id=\"heading-8\">2. Service Deployment</h3>\n<pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: trading-api\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: trading-api\n  template:\n    metadata:\n      labels:\n        app: trading-api\n    spec:\n      containers:\n        - name: trading-api\n          image: trading-api:1.0.0\n          resources:\n            requests:\n              cpu: 1\n              memory: 2Gi\n            limits:\n              cpu: 2\n              memory: 4Gi\n</code></pre>\n<h2 id=\"heading-9\">📊 Monitoring System</h2>\n<h3 id=\"heading-10\">1. Metric Collection</h3>\n<pre><code class=\"language-yaml\">prometheus:\n  scrape_configs:\n    - job_name: \"kubernetes-pods\"\n      kubernetes_sd_configs:\n        - role: pod\n      relabel_configs:\n        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n          action: keep\n          regex: true\n\n    - job_name: \"trading-metrics\"\n      static_configs:\n        - targets: [\"trading-api:9090\"]\n</code></pre>\n<h3 id=\"heading-11\">2. Alert Configuration</h3>\n<pre><code class=\"language-yaml\">alertmanager:\n  config:\n    route:\n      receiver: \"slack\"\n      group_wait: 30s\n      group_interval: 5m\n      repeat_interval: 4h\n\n    receivers:\n      - name: \"slack\"\n        slack_configs:\n          - channel: \"#alerts\"\n            send_resolved: true\n</code></pre>\n<h2 id=\"heading-12\">🔒 Security Configuration</h2>\n<h3 id=\"heading-13\">1. Network Policy</h3>\n<pre><code class=\"language-yaml\">apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: api-network-policy\nspec:\n  podSelector:\n    matchLabels:\n      app: trading-api\n  policyTypes:\n    - Ingress\n    - Egress\n  ingress:\n    - from:\n        - podSelector:\n            matchLabels:\n              role: frontend\n      ports:\n        - protocol: TCP\n          port: 8080\n</code></pre>\n<h3 id=\"heading-14\">2. Encryption Configuration</h3>\n<pre><code class=\"language-yaml\">encryption:\n  - resources:\n      - secrets\n    providers:\n      - aescbc:\n          keys:\n            - name: key1\n              secret: &lt;base64-encoded-key&gt;\n      - identity: {}\n</code></pre>\n<h2 id=\"heading-15\">🔄 Scaling Strategy</h2>\n<h3 id=\"heading-16\">1. Horizontal Scaling</h3>\n<pre><code class=\"language-yaml\">apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: trading-api-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: trading-api\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n    - type: Resource\n      resource:\n        name: cpu\n        target:\n          type: Utilization\n          averageUtilization: 70\n</code></pre>\n<h3 id=\"heading-17\">2. Vertical Scaling</h3>\n<pre><code class=\"language-yaml\">apiVersion: autoscaling.k8s.io/v1\nkind: VerticalPodAutoscaler\nmetadata:\n  name: trading-api-vpa\nspec:\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: trading-api\n  updatePolicy:\n    updateMode: Auto\n</code></pre>\n<h2 id=\"heading-18\">🔧 Operations Management</h2>\n<h3 id=\"heading-19\">1. Logging Configuration</h3>\n<pre><code class=\"language-yaml\">filebeat:\n  inputs:\n    - type: container\n      paths:\n        - /var/log/containers/*.log\n      processors:\n        - add_kubernetes_metadata:\n            host: ${NODE_NAME}\n            matchers:\n              - logs_path:\n                  logs_path: \"/var/log/containers/\"\n</code></pre>\n<h3 id=\"heading-20\">2. Backup Policy</h3>\n<pre><code class=\"language-yaml\">backup:\n  schedule: \"0 1 * * *\" # Daily at 01:00\n  retention:\n    hourly: 24\n    daily: 7\n    weekly: 4\n    monthly: 12\n  storage:\n    type: s3\n    bucket: backup-bucket\n    region: ap-northeast-2\n</code></pre>\n<p>This document provides the infrastructure architecture and configuration for the financial data analysis system. It will be updated continuously to ensure stability and scalability. 🚀</p>\n",
      "tocItems": [
        {
          "id": "heading-0",
          "text": "Financial Data Analysis System Infrastructure Architecture",
          "level": 1,
          "isMainTopic": true,
          "position": 0
        },
        {
          "id": "heading-1",
          "text": "🏗️ System Architecture",
          "level": 2,
          "isMainTopic": true,
          "position": 50
        },
        {
          "id": "heading-2",
          "text": "1. Overall Architecture",
          "level": 3,
          "isMainTopic": false,
          "position": 100
        },
        {
          "id": "heading-3",
          "text": "🌐 Network Configuration",
          "level": 2,
          "isMainTopic": true,
          "position": 150
        },
        {
          "id": "heading-4",
          "text": "1. Network Segments",
          "level": 3,
          "isMainTopic": false,
          "position": 200
        },
        {
          "id": "heading-5",
          "text": "2. Security Group Configuration",
          "level": 3,
          "isMainTopic": false,
          "position": 250
        },
        {
          "id": "heading-6",
          "text": "🚀 Kubernetes Cluster",
          "level": 2,
          "isMainTopic": true,
          "position": 300
        },
        {
          "id": "heading-7",
          "text": "1. Node Configuration",
          "level": 3,
          "isMainTopic": false,
          "position": 350
        },
        {
          "id": "heading-8",
          "text": "2. Service Deployment",
          "level": 3,
          "isMainTopic": false,
          "position": 400
        },
        {
          "id": "heading-9",
          "text": "📊 Monitoring System",
          "level": 2,
          "isMainTopic": true,
          "position": 450
        },
        {
          "id": "heading-10",
          "text": "1. Metric Collection",
          "level": 3,
          "isMainTopic": false,
          "position": 500
        },
        {
          "id": "heading-11",
          "text": "2. Alert Configuration",
          "level": 3,
          "isMainTopic": false,
          "position": 550
        },
        {
          "id": "heading-12",
          "text": "🔒 Security Configuration",
          "level": 2,
          "isMainTopic": true,
          "position": 600
        },
        {
          "id": "heading-13",
          "text": "1. Network Policy",
          "level": 3,
          "isMainTopic": false,
          "position": 650
        },
        {
          "id": "heading-14",
          "text": "2. Encryption Configuration",
          "level": 3,
          "isMainTopic": false,
          "position": 700
        },
        {
          "id": "heading-15",
          "text": "🔄 Scaling Strategy",
          "level": 2,
          "isMainTopic": true,
          "position": 750
        },
        {
          "id": "heading-16",
          "text": "1. Horizontal Scaling",
          "level": 3,
          "isMainTopic": false,
          "position": 800
        },
        {
          "id": "heading-17",
          "text": "2. Vertical Scaling",
          "level": 3,
          "isMainTopic": false,
          "position": 850
        },
        {
          "id": "heading-18",
          "text": "🔧 Operations Management",
          "level": 2,
          "isMainTopic": true,
          "position": 900
        },
        {
          "id": "heading-19",
          "text": "1. Logging Configuration",
          "level": 3,
          "isMainTopic": false,
          "position": 950
        },
        {
          "id": "heading-20",
          "text": "2. Backup Policy",
          "level": 3,
          "isMainTopic": false,
          "position": 1000
        }
      ]
    }
  },
  "imageHeights": {}
}