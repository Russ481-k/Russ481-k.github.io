{
  "id": "entasys_3",
  "title": "Entasys",
  "content": "\n# 통신 프로토콜\n\n## 1. WebSocket 이벤트 정의\n\n### 1.1 이벤트 타입\n\n```typescript\nenum WebSocketEvent {\n  // 다운로드 관련\n  DOWNLOAD_REQUEST = \"download:request\",\n  DOWNLOAD_START = \"download:start\",\n  DOWNLOAD_PROGRESS = \"download:progress\",\n  DOWNLOAD_COMPLETE = \"download:complete\",\n  DOWNLOAD_ERROR = \"download:error\",\n\n  // 상태 관련\n  STATUS_UPDATE = \"status:update\",\n  STATUS_CHECK = \"status:check\",\n\n  // 시스템 관련\n  SYSTEM_ERROR = \"system:error\",\n  CONNECTION_HEALTH = \"connection:health\",\n}\n```\n\n### 1.2 메시지 포맷\n\n```typescript\ninterface WebSocketMessage<T = any> {\n  event: WebSocketEvent;\n  data: T;\n  timestamp: number;\n  requestId: string;\n}\n\ninterface DownloadRequest {\n  searchParams: {\n    timeFrom: string;\n    timeTo: string;\n    filters: Filter[];\n  };\n  outputFormat: \"csv\" | \"json\";\n  compression: boolean;\n}\n\ninterface ProgressUpdate {\n  requestId: string;\n  progress: number;\n  processedRows: number;\n  totalRows: number;\n  speed: number;\n  estimatedTimeRemaining: number;\n}\n```\n\n## 2. 메시지 흐름\n\n### 2.1 다운로드 시작\n\n```mermaid\nsequenceDiagram\n    Client->>Server: DOWNLOAD_REQUEST\n    Server->>Client: DOWNLOAD_START\n    loop Progress Updates\n        Server->>Client: DOWNLOAD_PROGRESS\n    end\n    Server->>Client: DOWNLOAD_COMPLETE\n```\n\n### 2.2 에러 처리 흐름\n\n```typescript\ninterface ErrorResponse {\n  code: string;\n  message: string;\n  details?: any;\n  recoverable: boolean;\n  retryAfter?: number;\n}\n\nconst errorHandler = {\n  handleError(error: Error): ErrorResponse {\n    return {\n      code: determineErrorCode(error),\n      message: error.message,\n      recoverable: isRecoverable(error),\n      retryAfter: calculateRetryDelay(error),\n    };\n  },\n};\n```\n\n## 3. 상태 관리\n\n### 3.1 연결 상태 관리\n\n```typescript\nclass ConnectionManager {\n  private reconnectAttempts: number = 0;\n  private maxReconnectAttempts: number = 5;\n  private reconnectDelay: number = 1000;\n\n  async handleDisconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      await this.reconnect();\n    } else {\n      this.emit(\"connection:failed\");\n    }\n  }\n}\n```\n\n### 3.2 세션 상태\n\n```typescript\ninterface SessionState {\n  connected: boolean;\n  lastHeartbeat: number;\n  activeDownloads: Map<string, DownloadStatus>;\n  systemHealth: SystemHealth;\n}\n```\n\n## 4. 보안\n\n### 4.1 인증\n\n```typescript\ninterface AuthenticatedMessage extends WebSocketMessage {\n  auth: {\n    token: string;\n    timestamp: number;\n    signature: string;\n  };\n}\n\nconst authenticator = {\n  validateMessage(message: AuthenticatedMessage): boolean {\n    return (\n      this.verifySignature(message) &&\n      this.checkTimestamp(message.auth.timestamp)\n    );\n  },\n};\n```\n\n### 4.2 메시지 암호화\n\n```typescript\nclass MessageEncryption {\n  private readonly algorithm = \"aes-256-gcm\";\n\n  encrypt(message: WebSocketMessage): EncryptedMessage {\n    const iv = crypto.randomBytes(12);\n    const cipher = crypto.createCipheriv(this.algorithm, this.key, iv);\n\n    return {\n      encrypted: Buffer.concat([\n        cipher.update(JSON.stringify(message)),\n        cipher.final(),\n      ]),\n      iv: iv,\n      tag: cipher.getAuthTag(),\n    };\n  }\n}\n```\n\n## 5. 성능 최적화\n\n### 5.1 메시지 압축\n\n```typescript\nclass MessageCompression {\n  compress(message: WebSocketMessage): Buffer {\n    return zlib.deflateSync(JSON.stringify(message));\n  }\n\n  decompress(compressed: Buffer): WebSocketMessage {\n    return JSON.parse(zlib.inflateSync(compressed).toString());\n  }\n}\n```\n\n### 5.2 배치 처리\n\n```typescript\nclass MessageBatcher {\n  private batchSize: number = 100;\n  private batchTimeout: number = 1000;\n  private batch: ProgressUpdate[] = [];\n\n  addToBatch(update: ProgressUpdate) {\n    this.batch.push(update);\n\n    if (this.shouldFlush()) {\n      this.flushBatch();\n    }\n  }\n}\n```\n",
  "date": "2024-03-20",
  "category": "projects",
  "tags": [
    "React",
    "Express",
    "MySQL",
    "Web3.js",
    "AWS",
    "Ganache",
    "Truffle",
    "ERC20",
    "MetaMask",
    "Figma"
  ],
  "thumbnail": "/images/entasys/entaasys_login.gif",
  "translations": {
    "ko": {
      "title": "Entasys",
      "description": "Development of Virtual Asset Exchange",
      "content": "<h1 id=\"heading-0\">통신 프로토콜</h1>\n<h2 id=\"heading-1\">1. WebSocket 이벤트 정의</h2>\n<h3 id=\"heading-2\">1.1 이벤트 타입</h3>\n<pre><code class=\"language-typescript\">enum WebSocketEvent {\n  // 다운로드 관련\n  DOWNLOAD_REQUEST = \"download:request\",\n  DOWNLOAD_START = \"download:start\",\n  DOWNLOAD_PROGRESS = \"download:progress\",\n  DOWNLOAD_COMPLETE = \"download:complete\",\n  DOWNLOAD_ERROR = \"download:error\",\n\n  // 상태 관련\n  STATUS_UPDATE = \"status:update\",\n  STATUS_CHECK = \"status:check\",\n\n  // 시스템 관련\n  SYSTEM_ERROR = \"system:error\",\n  CONNECTION_HEALTH = \"connection:health\",\n}\n</code></pre>\n<h3 id=\"heading-3\">1.2 메시지 포맷</h3>\n<pre><code class=\"language-typescript\">interface WebSocketMessage&lt;T = any&gt; {\n  event: WebSocketEvent;\n  data: T;\n  timestamp: number;\n  requestId: string;\n}\n\ninterface DownloadRequest {\n  searchParams: {\n    timeFrom: string;\n    timeTo: string;\n    filters: Filter[];\n  };\n  outputFormat: \"csv\" | \"json\";\n  compression: boolean;\n}\n\ninterface ProgressUpdate {\n  requestId: string;\n  progress: number;\n  processedRows: number;\n  totalRows: number;\n  speed: number;\n  estimatedTimeRemaining: number;\n}\n</code></pre>\n<h2 id=\"heading-4\">2. 메시지 흐름</h2>\n<h3 id=\"heading-5\">2.1 다운로드 시작</h3>\n<pre><code class=\"language-mermaid\">sequenceDiagram\n    Client-&gt;&gt;Server: DOWNLOAD_REQUEST\n    Server-&gt;&gt;Client: DOWNLOAD_START\n    loop Progress Updates\n        Server-&gt;&gt;Client: DOWNLOAD_PROGRESS\n    end\n    Server-&gt;&gt;Client: DOWNLOAD_COMPLETE\n</code></pre>\n<h3 id=\"heading-6\">2.2 에러 처리 흐름</h3>\n<pre><code class=\"language-typescript\">interface ErrorResponse {\n  code: string;\n  message: string;\n  details?: any;\n  recoverable: boolean;\n  retryAfter?: number;\n}\n\nconst errorHandler = {\n  handleError(error: Error): ErrorResponse {\n    return {\n      code: determineErrorCode(error),\n      message: error.message,\n      recoverable: isRecoverable(error),\n      retryAfter: calculateRetryDelay(error),\n    };\n  },\n};\n</code></pre>\n<h2 id=\"heading-7\">3. 상태 관리</h2>\n<h3 id=\"heading-8\">3.1 연결 상태 관리</h3>\n<pre><code class=\"language-typescript\">class ConnectionManager {\n  private reconnectAttempts: number = 0;\n  private maxReconnectAttempts: number = 5;\n  private reconnectDelay: number = 1000;\n\n  async handleDisconnect() {\n    if (this.reconnectAttempts &lt; this.maxReconnectAttempts) {\n      await this.reconnect();\n    } else {\n      this.emit(\"connection:failed\");\n    }\n  }\n}\n</code></pre>\n<h3 id=\"heading-9\">3.2 세션 상태</h3>\n<pre><code class=\"language-typescript\">interface SessionState {\n  connected: boolean;\n  lastHeartbeat: number;\n  activeDownloads: Map&lt;string, DownloadStatus&gt;;\n  systemHealth: SystemHealth;\n}\n</code></pre>\n<h2 id=\"heading-10\">4. 보안</h2>\n<h3 id=\"heading-11\">4.1 인증</h3>\n<pre><code class=\"language-typescript\">interface AuthenticatedMessage extends WebSocketMessage {\n  auth: {\n    token: string;\n    timestamp: number;\n    signature: string;\n  };\n}\n\nconst authenticator = {\n  validateMessage(message: AuthenticatedMessage): boolean {\n    return (\n      this.verifySignature(message) &amp;&amp;\n      this.checkTimestamp(message.auth.timestamp)\n    );\n  },\n};\n</code></pre>\n<h3 id=\"heading-12\">4.2 메시지 암호화</h3>\n<pre><code class=\"language-typescript\">class MessageEncryption {\n  private readonly algorithm = \"aes-256-gcm\";\n\n  encrypt(message: WebSocketMessage): EncryptedMessage {\n    const iv = crypto.randomBytes(12);\n    const cipher = crypto.createCipheriv(this.algorithm, this.key, iv);\n\n    return {\n      encrypted: Buffer.concat([\n        cipher.update(JSON.stringify(message)),\n        cipher.final(),\n      ]),\n      iv: iv,\n      tag: cipher.getAuthTag(),\n    };\n  }\n}\n</code></pre>\n<h2 id=\"heading-13\">5. 성능 최적화</h2>\n<h3 id=\"heading-14\">5.1 메시지 압축</h3>\n<pre><code class=\"language-typescript\">class MessageCompression {\n  compress(message: WebSocketMessage): Buffer {\n    return zlib.deflateSync(JSON.stringify(message));\n  }\n\n  decompress(compressed: Buffer): WebSocketMessage {\n    return JSON.parse(zlib.inflateSync(compressed).toString());\n  }\n}\n</code></pre>\n<h3 id=\"heading-15\">5.2 배치 처리</h3>\n<pre><code class=\"language-typescript\">class MessageBatcher {\n  private batchSize: number = 100;\n  private batchTimeout: number = 1000;\n  private batch: ProgressUpdate[] = [];\n\n  addToBatch(update: ProgressUpdate) {\n    this.batch.push(update);\n\n    if (this.shouldFlush()) {\n      this.flushBatch();\n    }\n  }\n}\n</code></pre>\n",
      "tocItems": [
        {
          "id": "heading-0",
          "text": "통신 프로토콜",
          "level": 1,
          "isMainTopic": true,
          "position": 0
        },
        {
          "id": "heading-1",
          "text": "1. WebSocket 이벤트 정의",
          "level": 2,
          "isMainTopic": true,
          "position": 50
        },
        {
          "id": "heading-2",
          "text": "1.1 이벤트 타입",
          "level": 3,
          "isMainTopic": false,
          "position": 100
        },
        {
          "id": "heading-3",
          "text": "1.2 메시지 포맷",
          "level": 3,
          "isMainTopic": false,
          "position": 150
        },
        {
          "id": "heading-4",
          "text": "2. 메시지 흐름",
          "level": 2,
          "isMainTopic": true,
          "position": 200
        },
        {
          "id": "heading-5",
          "text": "2.1 다운로드 시작",
          "level": 3,
          "isMainTopic": false,
          "position": 250
        },
        {
          "id": "heading-6",
          "text": "2.2 에러 처리 흐름",
          "level": 3,
          "isMainTopic": false,
          "position": 300
        },
        {
          "id": "heading-7",
          "text": "3. 상태 관리",
          "level": 2,
          "isMainTopic": true,
          "position": 350
        },
        {
          "id": "heading-8",
          "text": "3.1 연결 상태 관리",
          "level": 3,
          "isMainTopic": false,
          "position": 400
        },
        {
          "id": "heading-9",
          "text": "3.2 세션 상태",
          "level": 3,
          "isMainTopic": false,
          "position": 450
        },
        {
          "id": "heading-10",
          "text": "4. 보안",
          "level": 2,
          "isMainTopic": true,
          "position": 500
        },
        {
          "id": "heading-11",
          "text": "4.1 인증",
          "level": 3,
          "isMainTopic": false,
          "position": 550
        },
        {
          "id": "heading-12",
          "text": "4.2 메시지 암호화",
          "level": 3,
          "isMainTopic": false,
          "position": 600
        },
        {
          "id": "heading-13",
          "text": "5. 성능 최적화",
          "level": 2,
          "isMainTopic": true,
          "position": 650
        },
        {
          "id": "heading-14",
          "text": "5.1 메시지 압축",
          "level": 3,
          "isMainTopic": false,
          "position": 700
        },
        {
          "id": "heading-15",
          "text": "5.2 배치 처리",
          "level": 3,
          "isMainTopic": false,
          "position": 750
        }
      ]
    },
    "en": {
      "title": "Entasys",
      "description": "Development of Virtual Asset Exchange",
      "content": "<h1 id=\"heading-0\">Communication Protocol</h1>\n<h2 id=\"heading-1\">1. WebSocket Event Definition</h2>\n<h3 id=\"heading-2\">1.1 Event Type</h3>\n<pre><code class=\"language-typescript\">enum WebSocketEvent {\n  // Download related\n  DOWNLOAD_REQUEST = \"download:request\",\n  DOWNLOAD_START = \"download:start\",\n  DOWNLOAD_PROGRESS = \"download:progress\",\n  DOWNLOAD_COMPLETE = \"download:complete\",\n  DOWNLOAD_ERROR = \"download:error\",\n\n  // Status related\n  STATUS_UPDATE = \"status:update\",\n  STATUS_CHECK = \"status:check\",\n\n  // System related\n  SYSTEM_ERROR = \"system:error\",\n  CONNECTION_HEALTH = \"connection:health\",\n}\n</code></pre>\n<h3 id=\"heading-3\">1.2 Message Format</h3>\n<pre><code class=\"language-typescript\">interface WebSocketMessage&lt;T = any&gt; {\n  event: WebSocketEvent;\n  data: T;\n  timestamp: number;\n  requestId: string;\n}\n\ninterface DownloadRequest {\n  searchParams: {\n    timeFrom: string;\n    timeTo: string;\n    filters: Filter[];\n  };\n  outputFormat: \"csv\" | \"json\";\n  compression: boolean;\n}\n\ninterface ProgressUpdate {\n  requestId: string;\n  progress: number;\n  processedRows: number;\n  totalRows: number;\n  speed: number;\n  estimatedTimeRemaining: number;\n}\n</code></pre>\n<h2 id=\"heading-4\">2. Message Flow</h2>\n<h3 id=\"heading-5\">2.1 Download Start</h3>\n<pre><code class=\"language-mermaid\">sequenceDiagram\n    Client-&gt;&gt;Server: DOWNLOAD_REQUEST\n    Server-&gt;&gt;Client: DOWNLOAD_START\n    loop Progress Updates\n        Server-&gt;&gt;Client: DOWNLOAD_PROGRESS\n    end\n    Server-&gt;&gt;Client: DOWNLOAD_COMPLETE\n</code></pre>\n<h3 id=\"heading-6\">2.2 Error Handling Flow</h3>\n<pre><code class=\"language-typescript\">interface ErrorResponse {\n  code: string;\n  message: string;\n  details?: any;\n  recoverable: boolean;\n  retryAfter?: number;\n}\n\nconst errorHandler = {\n  handleError(error: Error): ErrorResponse {\n    return {\n      code: determineErrorCode(error),\n      message: error.message,\n      recoverable: isRecoverable(error),\n      retryAfter: calculateRetryDelay(error),\n    };\n  },\n};\n</code></pre>\n<h2 id=\"heading-7\">3. Status Management</h2>\n<h3 id=\"heading-8\">3.1 Connection State Management</h3>\n<pre><code class=\"language-typescript\">class ConnectionManager {\n  private reconnectAttempts: number = 0;\n  private maxReconnectAttempts: number = 5;\n  private reconnectDelay: number = 1000;\n\n  async handleDisconnect() {\n    if (this.reconnectAttempts &lt; this.maxReconnectAttempts) {\n      await this.reconnect();\n    } else {\n      this.emit(\"connection:failed\");\n    }\n  }\n}\n</code></pre>\n<h3 id=\"heading-9\">3.2 Session State</h3>\n<pre><code class=\"language-typescript\">interface SessionState {\n  connected: boolean;\n  lastHeartbeat: number;\n  activeDownloads: Map&lt;string, DownloadStatus&gt;;\n  systemHealth: SystemHealth;\n}\n</code></pre>\n<h2 id=\"heading-10\">4. Security</h2>\n<h3 id=\"heading-11\">4.1 Authentication</h3>\n<pre><code class=\"language-typescript\">interface AuthenticatedMessage extends WebSocketMessage {\n  auth: {\n    token: string;\n    timestamp: number;\n    signature: string;\n  };\n}\n\nconst authenticator = {\n  validateMessage(message: AuthenticatedMessage): boolean {\n    return (\n      this.verifySignature(message) &amp;&amp;\n      this.checkTimestamp(message.auth.timestamp)\n    );\n  },\n};\n</code></pre>\n<h3 id=\"heading-12\">4.2 Message Encryption</h3>\n<pre><code class=\"language-typescript\">class MessageEncryption {\n  private readonly algorithm = \"aes-256-gcm\";\n\n  encrypt(message: WebSocketMessage): EncryptedMessage {\n    const iv = crypto.randomBytes(12);\n    const cipher = crypto.createCipheriv(this.algorithm, this.key, iv);\n\n    return {\n      encrypted: Buffer.concat([\n        cipher.update(JSON.stringify(message)),\n        cipher.final(),\n      ]),\n      iv: iv,\n      tag: cipher.getAuthTag(),\n    };\n  }\n}\n</code></pre>\n<h2 id=\"heading-13\">5. Performance Optimization</h2>\n<h3 id=\"heading-14\">5.1 Message Compression</h3>\n<pre><code class=\"language-typescript\">class MessageCompression {\n  compress(message: WebSocketMessage): Buffer {\n    return zlib.deflateSync(JSON.stringify(message));\n  }\n\n  decompress(compressed: Buffer): WebSocketMessage {\n    return JSON.parse(zlib.inflateSync(compressed).toString());\n  }\n}\n</code></pre>\n<h3 id=\"heading-15\">5.2 Batch Processing</h3>\n<pre><code class=\"language-typescript\">class MessageBatcher {\n  private batchSize: number = 100;\n  private batchTimeout: number = 1000;\n  private batch: ProgressUpdate[] = [];\n\n  addToBatch(update: ProgressUpdate) {\n    this.batch.push(update);\n\n    if (this.shouldFlush()) {\n      this.flushBatch();\n    }\n  }\n}\n</code></pre>\n",
      "tocItems": [
        {
          "id": "heading-0",
          "text": "Communication Protocol",
          "level": 1,
          "isMainTopic": true,
          "position": 0
        },
        {
          "id": "heading-1",
          "text": "1. WebSocket Event Definition",
          "level": 2,
          "isMainTopic": true,
          "position": 50
        },
        {
          "id": "heading-2",
          "text": "1.1 Event Type",
          "level": 3,
          "isMainTopic": false,
          "position": 100
        },
        {
          "id": "heading-3",
          "text": "1.2 Message Format",
          "level": 3,
          "isMainTopic": false,
          "position": 150
        },
        {
          "id": "heading-4",
          "text": "2. Message Flow",
          "level": 2,
          "isMainTopic": true,
          "position": 200
        },
        {
          "id": "heading-5",
          "text": "2.1 Download Start",
          "level": 3,
          "isMainTopic": false,
          "position": 250
        },
        {
          "id": "heading-6",
          "text": "2.2 Error Handling Flow",
          "level": 3,
          "isMainTopic": false,
          "position": 300
        },
        {
          "id": "heading-7",
          "text": "3. Status Management",
          "level": 2,
          "isMainTopic": true,
          "position": 350
        },
        {
          "id": "heading-8",
          "text": "3.1 Connection State Management",
          "level": 3,
          "isMainTopic": false,
          "position": 400
        },
        {
          "id": "heading-9",
          "text": "3.2 Session State",
          "level": 3,
          "isMainTopic": false,
          "position": 450
        },
        {
          "id": "heading-10",
          "text": "4. Security",
          "level": 2,
          "isMainTopic": true,
          "position": 500
        },
        {
          "id": "heading-11",
          "text": "4.1 Authentication",
          "level": 3,
          "isMainTopic": false,
          "position": 550
        },
        {
          "id": "heading-12",
          "text": "4.2 Message Encryption",
          "level": 3,
          "isMainTopic": false,
          "position": 600
        },
        {
          "id": "heading-13",
          "text": "5. Performance Optimization",
          "level": 2,
          "isMainTopic": true,
          "position": 650
        },
        {
          "id": "heading-14",
          "text": "5.1 Message Compression",
          "level": 3,
          "isMainTopic": false,
          "position": 700
        },
        {
          "id": "heading-15",
          "text": "5.2 Batch Processing",
          "level": 3,
          "isMainTopic": false,
          "position": 750
        }
      ]
    }
  },
  "imageHeights": {}
}